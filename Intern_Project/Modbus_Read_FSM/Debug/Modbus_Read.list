
Modbus_Read.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009024  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000914  080091f8  080091f8  000191f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009b0c  08009b0c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08009b0c  08009b0c  00019b0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009b14  08009b14  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009b14  08009b14  00019b14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009b18  08009b18  00019b18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08009b1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000364  200001e0  08009cfc  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000544  08009cfc  00020544  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a63e  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bbd  00000000  00000000  0002a84e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000870  00000000  00000000  0002c410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007b8  00000000  00000000  0002cc80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021d4a  00000000  00000000  0002d438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ad8d  00000000  00000000  0004f182  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c9f2e  00000000  00000000  00059f0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00123e3d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037ac  00000000  00000000  00123e90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080091dc 	.word	0x080091dc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	080091dc 	.word	0x080091dc

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cdc:	f000 b9aa 	b.w	8001034 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	468e      	mov	lr, r1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d14d      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d72:	428a      	cmp	r2, r1
 8000d74:	4694      	mov	ip, r2
 8000d76:	d969      	bls.n	8000e4c <__udivmoddi4+0xe8>
 8000d78:	fab2 f282 	clz	r2, r2
 8000d7c:	b152      	cbz	r2, 8000d94 <__udivmoddi4+0x30>
 8000d7e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d82:	f1c2 0120 	rsb	r1, r2, #32
 8000d86:	fa20 f101 	lsr.w	r1, r0, r1
 8000d8a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d92:	4094      	lsls	r4, r2
 8000d94:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d98:	0c21      	lsrs	r1, r4, #16
 8000d9a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d9e:	fa1f f78c 	uxth.w	r7, ip
 8000da2:	fb08 e316 	mls	r3, r8, r6, lr
 8000da6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000daa:	fb06 f107 	mul.w	r1, r6, r7
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000dba:	f080 811f 	bcs.w	8000ffc <__udivmoddi4+0x298>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 811c 	bls.w	8000ffc <__udivmoddi4+0x298>
 8000dc4:	3e02      	subs	r6, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a5b      	subs	r3, r3, r1
 8000dca:	b2a4      	uxth	r4, r4
 8000dcc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd8:	fb00 f707 	mul.w	r7, r0, r7
 8000ddc:	42a7      	cmp	r7, r4
 8000dde:	d90a      	bls.n	8000df6 <__udivmoddi4+0x92>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000de8:	f080 810a 	bcs.w	8001000 <__udivmoddi4+0x29c>
 8000dec:	42a7      	cmp	r7, r4
 8000dee:	f240 8107 	bls.w	8001000 <__udivmoddi4+0x29c>
 8000df2:	4464      	add	r4, ip
 8000df4:	3802      	subs	r0, #2
 8000df6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dfa:	1be4      	subs	r4, r4, r7
 8000dfc:	2600      	movs	r6, #0
 8000dfe:	b11d      	cbz	r5, 8000e08 <__udivmoddi4+0xa4>
 8000e00:	40d4      	lsrs	r4, r2
 8000e02:	2300      	movs	r3, #0
 8000e04:	e9c5 4300 	strd	r4, r3, [r5]
 8000e08:	4631      	mov	r1, r6
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d909      	bls.n	8000e26 <__udivmoddi4+0xc2>
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	f000 80ef 	beq.w	8000ff6 <__udivmoddi4+0x292>
 8000e18:	2600      	movs	r6, #0
 8000e1a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e1e:	4630      	mov	r0, r6
 8000e20:	4631      	mov	r1, r6
 8000e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e26:	fab3 f683 	clz	r6, r3
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	d14a      	bne.n	8000ec4 <__udivmoddi4+0x160>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d302      	bcc.n	8000e38 <__udivmoddi4+0xd4>
 8000e32:	4282      	cmp	r2, r0
 8000e34:	f200 80f9 	bhi.w	800102a <__udivmoddi4+0x2c6>
 8000e38:	1a84      	subs	r4, r0, r2
 8000e3a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e3e:	2001      	movs	r0, #1
 8000e40:	469e      	mov	lr, r3
 8000e42:	2d00      	cmp	r5, #0
 8000e44:	d0e0      	beq.n	8000e08 <__udivmoddi4+0xa4>
 8000e46:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e4a:	e7dd      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000e4c:	b902      	cbnz	r2, 8000e50 <__udivmoddi4+0xec>
 8000e4e:	deff      	udf	#255	; 0xff
 8000e50:	fab2 f282 	clz	r2, r2
 8000e54:	2a00      	cmp	r2, #0
 8000e56:	f040 8092 	bne.w	8000f7e <__udivmoddi4+0x21a>
 8000e5a:	eba1 010c 	sub.w	r1, r1, ip
 8000e5e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e62:	fa1f fe8c 	uxth.w	lr, ip
 8000e66:	2601      	movs	r6, #1
 8000e68:	0c20      	lsrs	r0, r4, #16
 8000e6a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e6e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e72:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e76:	fb0e f003 	mul.w	r0, lr, r3
 8000e7a:	4288      	cmp	r0, r1
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x12c>
 8000e7e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e82:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x12a>
 8000e88:	4288      	cmp	r0, r1
 8000e8a:	f200 80cb 	bhi.w	8001024 <__udivmoddi4+0x2c0>
 8000e8e:	4643      	mov	r3, r8
 8000e90:	1a09      	subs	r1, r1, r0
 8000e92:	b2a4      	uxth	r4, r4
 8000e94:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e98:	fb07 1110 	mls	r1, r7, r0, r1
 8000e9c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ea0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ea4:	45a6      	cmp	lr, r4
 8000ea6:	d908      	bls.n	8000eba <__udivmoddi4+0x156>
 8000ea8:	eb1c 0404 	adds.w	r4, ip, r4
 8000eac:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000eb0:	d202      	bcs.n	8000eb8 <__udivmoddi4+0x154>
 8000eb2:	45a6      	cmp	lr, r4
 8000eb4:	f200 80bb 	bhi.w	800102e <__udivmoddi4+0x2ca>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	eba4 040e 	sub.w	r4, r4, lr
 8000ebe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ec2:	e79c      	b.n	8000dfe <__udivmoddi4+0x9a>
 8000ec4:	f1c6 0720 	rsb	r7, r6, #32
 8000ec8:	40b3      	lsls	r3, r6
 8000eca:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ece:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ed2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ed6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eda:	431c      	orrs	r4, r3
 8000edc:	40f9      	lsrs	r1, r7
 8000ede:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ee2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ee6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eea:	0c20      	lsrs	r0, r4, #16
 8000eec:	fa1f fe8c 	uxth.w	lr, ip
 8000ef0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ef4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ef8:	fb08 f00e 	mul.w	r0, r8, lr
 8000efc:	4288      	cmp	r0, r1
 8000efe:	fa02 f206 	lsl.w	r2, r2, r6
 8000f02:	d90b      	bls.n	8000f1c <__udivmoddi4+0x1b8>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000f0c:	f080 8088 	bcs.w	8001020 <__udivmoddi4+0x2bc>
 8000f10:	4288      	cmp	r0, r1
 8000f12:	f240 8085 	bls.w	8001020 <__udivmoddi4+0x2bc>
 8000f16:	f1a8 0802 	sub.w	r8, r8, #2
 8000f1a:	4461      	add	r1, ip
 8000f1c:	1a09      	subs	r1, r1, r0
 8000f1e:	b2a4      	uxth	r4, r4
 8000f20:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f24:	fb09 1110 	mls	r1, r9, r0, r1
 8000f28:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f2c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f30:	458e      	cmp	lr, r1
 8000f32:	d908      	bls.n	8000f46 <__udivmoddi4+0x1e2>
 8000f34:	eb1c 0101 	adds.w	r1, ip, r1
 8000f38:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000f3c:	d26c      	bcs.n	8001018 <__udivmoddi4+0x2b4>
 8000f3e:	458e      	cmp	lr, r1
 8000f40:	d96a      	bls.n	8001018 <__udivmoddi4+0x2b4>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4461      	add	r1, ip
 8000f46:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f4a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f4e:	eba1 010e 	sub.w	r1, r1, lr
 8000f52:	42a1      	cmp	r1, r4
 8000f54:	46c8      	mov	r8, r9
 8000f56:	46a6      	mov	lr, r4
 8000f58:	d356      	bcc.n	8001008 <__udivmoddi4+0x2a4>
 8000f5a:	d053      	beq.n	8001004 <__udivmoddi4+0x2a0>
 8000f5c:	b15d      	cbz	r5, 8000f76 <__udivmoddi4+0x212>
 8000f5e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f62:	eb61 010e 	sbc.w	r1, r1, lr
 8000f66:	fa01 f707 	lsl.w	r7, r1, r7
 8000f6a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f6e:	40f1      	lsrs	r1, r6
 8000f70:	431f      	orrs	r7, r3
 8000f72:	e9c5 7100 	strd	r7, r1, [r5]
 8000f76:	2600      	movs	r6, #0
 8000f78:	4631      	mov	r1, r6
 8000f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f7e:	f1c2 0320 	rsb	r3, r2, #32
 8000f82:	40d8      	lsrs	r0, r3
 8000f84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f88:	fa21 f303 	lsr.w	r3, r1, r3
 8000f8c:	4091      	lsls	r1, r2
 8000f8e:	4301      	orrs	r1, r0
 8000f90:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f94:	fa1f fe8c 	uxth.w	lr, ip
 8000f98:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f9c:	fb07 3610 	mls	r6, r7, r0, r3
 8000fa0:	0c0b      	lsrs	r3, r1, #16
 8000fa2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fa6:	fb00 f60e 	mul.w	r6, r0, lr
 8000faa:	429e      	cmp	r6, r3
 8000fac:	fa04 f402 	lsl.w	r4, r4, r2
 8000fb0:	d908      	bls.n	8000fc4 <__udivmoddi4+0x260>
 8000fb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb6:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000fba:	d22f      	bcs.n	800101c <__udivmoddi4+0x2b8>
 8000fbc:	429e      	cmp	r6, r3
 8000fbe:	d92d      	bls.n	800101c <__udivmoddi4+0x2b8>
 8000fc0:	3802      	subs	r0, #2
 8000fc2:	4463      	add	r3, ip
 8000fc4:	1b9b      	subs	r3, r3, r6
 8000fc6:	b289      	uxth	r1, r1
 8000fc8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fcc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fd4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fd8:	428b      	cmp	r3, r1
 8000fda:	d908      	bls.n	8000fee <__udivmoddi4+0x28a>
 8000fdc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fe0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000fe4:	d216      	bcs.n	8001014 <__udivmoddi4+0x2b0>
 8000fe6:	428b      	cmp	r3, r1
 8000fe8:	d914      	bls.n	8001014 <__udivmoddi4+0x2b0>
 8000fea:	3e02      	subs	r6, #2
 8000fec:	4461      	add	r1, ip
 8000fee:	1ac9      	subs	r1, r1, r3
 8000ff0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ff4:	e738      	b.n	8000e68 <__udivmoddi4+0x104>
 8000ff6:	462e      	mov	r6, r5
 8000ff8:	4628      	mov	r0, r5
 8000ffa:	e705      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000ffc:	4606      	mov	r6, r0
 8000ffe:	e6e3      	b.n	8000dc8 <__udivmoddi4+0x64>
 8001000:	4618      	mov	r0, r3
 8001002:	e6f8      	b.n	8000df6 <__udivmoddi4+0x92>
 8001004:	454b      	cmp	r3, r9
 8001006:	d2a9      	bcs.n	8000f5c <__udivmoddi4+0x1f8>
 8001008:	ebb9 0802 	subs.w	r8, r9, r2
 800100c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001010:	3801      	subs	r0, #1
 8001012:	e7a3      	b.n	8000f5c <__udivmoddi4+0x1f8>
 8001014:	4646      	mov	r6, r8
 8001016:	e7ea      	b.n	8000fee <__udivmoddi4+0x28a>
 8001018:	4620      	mov	r0, r4
 800101a:	e794      	b.n	8000f46 <__udivmoddi4+0x1e2>
 800101c:	4640      	mov	r0, r8
 800101e:	e7d1      	b.n	8000fc4 <__udivmoddi4+0x260>
 8001020:	46d0      	mov	r8, sl
 8001022:	e77b      	b.n	8000f1c <__udivmoddi4+0x1b8>
 8001024:	3b02      	subs	r3, #2
 8001026:	4461      	add	r1, ip
 8001028:	e732      	b.n	8000e90 <__udivmoddi4+0x12c>
 800102a:	4630      	mov	r0, r6
 800102c:	e709      	b.n	8000e42 <__udivmoddi4+0xde>
 800102e:	4464      	add	r4, ip
 8001030:	3802      	subs	r0, #2
 8001032:	e742      	b.n	8000eba <__udivmoddi4+0x156>

08001034 <__aeabi_idiv0>:
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop

08001038 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001040:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001044:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001048:	f003 0301 	and.w	r3, r3, #1
 800104c:	2b00      	cmp	r3, #0
 800104e:	d013      	beq.n	8001078 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001050:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001054:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001058:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800105c:	2b00      	cmp	r3, #0
 800105e:	d00b      	beq.n	8001078 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001060:	e000      	b.n	8001064 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001062:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001064:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d0f9      	beq.n	8001062 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800106e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001072:	687a      	ldr	r2, [r7, #4]
 8001074:	b2d2      	uxtb	r2, r2
 8001076:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001078:	687b      	ldr	r3, [r7, #4]
}
 800107a:	4618      	mov	r0, r3
 800107c:	370c      	adds	r7, #12
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
	...

08001088 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800108c:	f001 f860 	bl	8002150 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001090:	f000 fc86 	bl	80019a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001094:	f000 fd70 	bl	8001b78 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001098:	f000 fd1a 	bl	8001ad0 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 800109c:	f000 fcee 	bl	8001a7c <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80010a0:	f000 fd40 	bl	8001b24 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  // Start UART receive interrupt
  HAL_UART_Receive_IT(&huart1, rxBuffer, 1);
 80010a4:	2201      	movs	r2, #1
 80010a6:	4908      	ldr	r1, [pc, #32]	; (80010c8 <main+0x40>)
 80010a8:	4808      	ldr	r0, [pc, #32]	; (80010cc <main+0x44>)
 80010aa:	f002 fba2 	bl	80037f2 <HAL_UART_Receive_IT>

  currentState = STATE_SEND_CMD_NAME; // Start FSM by sending the first command
 80010ae:	4b08      	ldr	r3, [pc, #32]	; (80010d0 <main+0x48>)
 80010b0:	2201      	movs	r2, #1
 80010b2:	701a      	strb	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
		if (rxComplete) {
 80010b4:	4b07      	ldr	r3, [pc, #28]	; (80010d4 <main+0x4c>)
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <main+0x3a>
			processResponse();
 80010be:	f000 f999 	bl	80013f4 <processResponse>
		}

		check_BE33_connection();
 80010c2:	f000 f809 	bl	80010d8 <check_BE33_connection>
  {
 80010c6:	e7f5      	b.n	80010b4 <main+0x2c>
 80010c8:	200002cc 	.word	0x200002cc
 80010cc:	200001fc 	.word	0x200001fc
 80010d0:	200002c8 	.word	0x200002c8
 80010d4:	20000526 	.word	0x20000526

080010d8 <check_BE33_connection>:
  }
  /* USER CODE END 3 */
}


void check_BE33_connection(void) {
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
    switch (currentState) {
 80010dc:	4bab      	ldr	r3, [pc, #684]	; (800138c <check_BE33_connection+0x2b4>)
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	3b01      	subs	r3, #1
 80010e2:	2b0e      	cmp	r3, #14
 80010e4:	f200 814e 	bhi.w	8001384 <check_BE33_connection+0x2ac>
 80010e8:	a201      	add	r2, pc, #4	; (adr r2, 80010f0 <check_BE33_connection+0x18>)
 80010ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010ee:	bf00      	nop
 80010f0:	0800112d 	.word	0x0800112d
 80010f4:	08001143 	.word	0x08001143
 80010f8:	08001187 	.word	0x08001187
 80010fc:	080011ab 	.word	0x080011ab
 8001100:	080011ef 	.word	0x080011ef
 8001104:	08001205 	.word	0x08001205
 8001108:	08001249 	.word	0x08001249
 800110c:	0800125f 	.word	0x0800125f
 8001110:	080012a3 	.word	0x080012a3
 8001114:	080012b9 	.word	0x080012b9
 8001118:	080012fd 	.word	0x080012fd
 800111c:	08001313 	.word	0x08001313
 8001120:	08001363 	.word	0x08001363
 8001124:	08001385 	.word	0x08001385
 8001128:	08001379 	.word	0x08001379
        case STATE_SEND_CMD_NAME:
            sendCommand("CMD?NAME\r\n");
 800112c:	4898      	ldr	r0, [pc, #608]	; (8001390 <check_BE33_connection+0x2b8>)
 800112e:	f000 f94b 	bl	80013c8 <sendCommand>
            HAL_Delay(1000); // Replace with non-blocking timer in production
 8001132:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001136:	f001 f87d 	bl	8002234 <HAL_Delay>
            currentState = STATE_WAIT_CMD_NAME;
 800113a:	4b94      	ldr	r3, [pc, #592]	; (800138c <check_BE33_connection+0x2b4>)
 800113c:	2202      	movs	r2, #2
 800113e:	701a      	strb	r2, [r3, #0]
            break;
 8001140:	e121      	b.n	8001386 <check_BE33_connection+0x2ae>

        case STATE_WAIT_CMD_NAME:
            if (validateResponse("RSP=0")) {
 8001142:	4894      	ldr	r0, [pc, #592]	; (8001394 <check_BE33_connection+0x2bc>)
 8001144:	f000 faf0 	bl	8001728 <validateResponse>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d006      	beq.n	800115c <check_BE33_connection+0x84>
                currentState = STATE_SEND_CMD_RESET;
 800114e:	4b8f      	ldr	r3, [pc, #572]	; (800138c <check_BE33_connection+0x2b4>)
 8001150:	2203      	movs	r2, #3
 8001152:	701a      	strb	r2, [r3, #0]
                commandRetryCount = 0;
 8001154:	4b90      	ldr	r3, [pc, #576]	; (8001398 <check_BE33_connection+0x2c0>)
 8001156:	2200      	movs	r2, #0
 8001158:	601a      	str	r2, [r3, #0]
                } else {
                    // Handle retry failure (e.g., log error, alert user)
                    currentState = STATE_IDLE;
                }
            }
            break;
 800115a:	e114      	b.n	8001386 <check_BE33_connection+0x2ae>
                if (commandRetryCount < MAX_RETRY_COUNT) {
 800115c:	4b8e      	ldr	r3, [pc, #568]	; (8001398 <check_BE33_connection+0x2c0>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	2b02      	cmp	r3, #2
 8001162:	dc0c      	bgt.n	800117e <check_BE33_connection+0xa6>
                    commandRetryCount++;
 8001164:	4b8c      	ldr	r3, [pc, #560]	; (8001398 <check_BE33_connection+0x2c0>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	3301      	adds	r3, #1
 800116a:	4a8b      	ldr	r2, [pc, #556]	; (8001398 <check_BE33_connection+0x2c0>)
 800116c:	6013      	str	r3, [r2, #0]
                    sendCommand("CMD?NAME\r\n");
 800116e:	4888      	ldr	r0, [pc, #544]	; (8001390 <check_BE33_connection+0x2b8>)
 8001170:	f000 f92a 	bl	80013c8 <sendCommand>
                    HAL_Delay(1000);
 8001174:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001178:	f001 f85c 	bl	8002234 <HAL_Delay>
            break;
 800117c:	e103      	b.n	8001386 <check_BE33_connection+0x2ae>
                    currentState = STATE_IDLE;
 800117e:	4b83      	ldr	r3, [pc, #524]	; (800138c <check_BE33_connection+0x2b4>)
 8001180:	2200      	movs	r2, #0
 8001182:	701a      	strb	r2, [r3, #0]
            break;
 8001184:	e0ff      	b.n	8001386 <check_BE33_connection+0x2ae>

        case STATE_SEND_CMD_RESET:
        	sendCommand("CMD+LREN=1\r\n");
 8001186:	4885      	ldr	r0, [pc, #532]	; (800139c <check_BE33_connection+0x2c4>)
 8001188:	f000 f91e 	bl	80013c8 <sendCommand>
        	HAL_Delay(1000);
 800118c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001190:	f001 f850 	bl	8002234 <HAL_Delay>
            sendCommand("CMD+RESET=0\r\n");
 8001194:	4882      	ldr	r0, [pc, #520]	; (80013a0 <check_BE33_connection+0x2c8>)
 8001196:	f000 f917 	bl	80013c8 <sendCommand>
            HAL_Delay(1000);
 800119a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800119e:	f001 f849 	bl	8002234 <HAL_Delay>
            currentState = STATE_WAIT_CMD_RESET;
 80011a2:	4b7a      	ldr	r3, [pc, #488]	; (800138c <check_BE33_connection+0x2b4>)
 80011a4:	2204      	movs	r2, #4
 80011a6:	701a      	strb	r2, [r3, #0]
            break;
 80011a8:	e0ed      	b.n	8001386 <check_BE33_connection+0x2ae>

        case STATE_WAIT_CMD_RESET:
            if (validateResponse("EVT+READY")) {
 80011aa:	487e      	ldr	r0, [pc, #504]	; (80013a4 <check_BE33_connection+0x2cc>)
 80011ac:	f000 fabc 	bl	8001728 <validateResponse>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d006      	beq.n	80011c4 <check_BE33_connection+0xec>
                currentState = STATE_SEND_CMD_TXPWR;
 80011b6:	4b75      	ldr	r3, [pc, #468]	; (800138c <check_BE33_connection+0x2b4>)
 80011b8:	2205      	movs	r2, #5
 80011ba:	701a      	strb	r2, [r3, #0]
                commandRetryCount = 0;
 80011bc:	4b76      	ldr	r3, [pc, #472]	; (8001398 <check_BE33_connection+0x2c0>)
 80011be:	2200      	movs	r2, #0
 80011c0:	601a      	str	r2, [r3, #0]
                } else {
                    // Handle retry failure
                    currentState = STATE_IDLE;
                }
            }
            break;
 80011c2:	e0e0      	b.n	8001386 <check_BE33_connection+0x2ae>
                if (commandRetryCount < MAX_RETRY_COUNT) {
 80011c4:	4b74      	ldr	r3, [pc, #464]	; (8001398 <check_BE33_connection+0x2c0>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	2b02      	cmp	r3, #2
 80011ca:	dc0c      	bgt.n	80011e6 <check_BE33_connection+0x10e>
                    commandRetryCount++;
 80011cc:	4b72      	ldr	r3, [pc, #456]	; (8001398 <check_BE33_connection+0x2c0>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	3301      	adds	r3, #1
 80011d2:	4a71      	ldr	r2, [pc, #452]	; (8001398 <check_BE33_connection+0x2c0>)
 80011d4:	6013      	str	r3, [r2, #0]
                    sendCommand("CMD+RESET=0\r\n");
 80011d6:	4872      	ldr	r0, [pc, #456]	; (80013a0 <check_BE33_connection+0x2c8>)
 80011d8:	f000 f8f6 	bl	80013c8 <sendCommand>
                    HAL_Delay(1000);
 80011dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011e0:	f001 f828 	bl	8002234 <HAL_Delay>
            break;
 80011e4:	e0cf      	b.n	8001386 <check_BE33_connection+0x2ae>
                    currentState = STATE_IDLE;
 80011e6:	4b69      	ldr	r3, [pc, #420]	; (800138c <check_BE33_connection+0x2b4>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	701a      	strb	r2, [r3, #0]
            break;
 80011ec:	e0cb      	b.n	8001386 <check_BE33_connection+0x2ae>

        case STATE_SEND_CMD_TXPWR:
            sendCommand("CMD+TXPWR=-4\r\n");
 80011ee:	486e      	ldr	r0, [pc, #440]	; (80013a8 <check_BE33_connection+0x2d0>)
 80011f0:	f000 f8ea 	bl	80013c8 <sendCommand>
            HAL_Delay(1000);
 80011f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011f8:	f001 f81c 	bl	8002234 <HAL_Delay>
            currentState = STATE_WAIT_CMD_TXPWR;
 80011fc:	4b63      	ldr	r3, [pc, #396]	; (800138c <check_BE33_connection+0x2b4>)
 80011fe:	2206      	movs	r2, #6
 8001200:	701a      	strb	r2, [r3, #0]
            break;
 8001202:	e0c0      	b.n	8001386 <check_BE33_connection+0x2ae>

        case STATE_WAIT_CMD_TXPWR:
            if (validateResponse("RSP=0")) {
 8001204:	4863      	ldr	r0, [pc, #396]	; (8001394 <check_BE33_connection+0x2bc>)
 8001206:	f000 fa8f 	bl	8001728 <validateResponse>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d006      	beq.n	800121e <check_BE33_connection+0x146>
                currentState = STATE_SEND_CMD_SCANPARAM;
 8001210:	4b5e      	ldr	r3, [pc, #376]	; (800138c <check_BE33_connection+0x2b4>)
 8001212:	2207      	movs	r2, #7
 8001214:	701a      	strb	r2, [r3, #0]
                commandRetryCount = 0;
 8001216:	4b60      	ldr	r3, [pc, #384]	; (8001398 <check_BE33_connection+0x2c0>)
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
                } else {
                    // Handle retry failure
                    currentState = STATE_IDLE;
                }
            }
            break;
 800121c:	e0b3      	b.n	8001386 <check_BE33_connection+0x2ae>
                if (commandRetryCount < MAX_RETRY_COUNT) {
 800121e:	4b5e      	ldr	r3, [pc, #376]	; (8001398 <check_BE33_connection+0x2c0>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	2b02      	cmp	r3, #2
 8001224:	dc0c      	bgt.n	8001240 <check_BE33_connection+0x168>
                    commandRetryCount++;
 8001226:	4b5c      	ldr	r3, [pc, #368]	; (8001398 <check_BE33_connection+0x2c0>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	3301      	adds	r3, #1
 800122c:	4a5a      	ldr	r2, [pc, #360]	; (8001398 <check_BE33_connection+0x2c0>)
 800122e:	6013      	str	r3, [r2, #0]
                    sendCommand("CMD+TXPWR=-4\r\n");
 8001230:	485d      	ldr	r0, [pc, #372]	; (80013a8 <check_BE33_connection+0x2d0>)
 8001232:	f000 f8c9 	bl	80013c8 <sendCommand>
                    HAL_Delay(1000);
 8001236:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800123a:	f000 fffb 	bl	8002234 <HAL_Delay>
            break;
 800123e:	e0a2      	b.n	8001386 <check_BE33_connection+0x2ae>
                    currentState = STATE_IDLE;
 8001240:	4b52      	ldr	r3, [pc, #328]	; (800138c <check_BE33_connection+0x2b4>)
 8001242:	2200      	movs	r2, #0
 8001244:	701a      	strb	r2, [r3, #0]
            break;
 8001246:	e09e      	b.n	8001386 <check_BE33_connection+0x2ae>

        case STATE_SEND_CMD_SCANPARAM:
            sendCommand("CMD+SCANPARAM=0,50,100,10000\r\n");
 8001248:	4858      	ldr	r0, [pc, #352]	; (80013ac <check_BE33_connection+0x2d4>)
 800124a:	f000 f8bd 	bl	80013c8 <sendCommand>
            HAL_Delay(1000);
 800124e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001252:	f000 ffef 	bl	8002234 <HAL_Delay>
            currentState = STATE_WAIT_CMD_SCANPARAM;
 8001256:	4b4d      	ldr	r3, [pc, #308]	; (800138c <check_BE33_connection+0x2b4>)
 8001258:	2208      	movs	r2, #8
 800125a:	701a      	strb	r2, [r3, #0]
            break;
 800125c:	e093      	b.n	8001386 <check_BE33_connection+0x2ae>

        case STATE_WAIT_CMD_SCANPARAM:
            if (validateResponse("RSP=0")) {
 800125e:	484d      	ldr	r0, [pc, #308]	; (8001394 <check_BE33_connection+0x2bc>)
 8001260:	f000 fa62 	bl	8001728 <validateResponse>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d006      	beq.n	8001278 <check_BE33_connection+0x1a0>
                currentState = STATE_SEND_CMD_SCAN;
 800126a:	4b48      	ldr	r3, [pc, #288]	; (800138c <check_BE33_connection+0x2b4>)
 800126c:	2209      	movs	r2, #9
 800126e:	701a      	strb	r2, [r3, #0]
                commandRetryCount = 0;
 8001270:	4b49      	ldr	r3, [pc, #292]	; (8001398 <check_BE33_connection+0x2c0>)
 8001272:	2200      	movs	r2, #0
 8001274:	601a      	str	r2, [r3, #0]
                } else {
                    // Handle retry failure
                    currentState = STATE_IDLE;
                }
            }
            break;
 8001276:	e086      	b.n	8001386 <check_BE33_connection+0x2ae>
                if (commandRetryCount < MAX_RETRY_COUNT) {
 8001278:	4b47      	ldr	r3, [pc, #284]	; (8001398 <check_BE33_connection+0x2c0>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	2b02      	cmp	r3, #2
 800127e:	dc0c      	bgt.n	800129a <check_BE33_connection+0x1c2>
                    commandRetryCount++;
 8001280:	4b45      	ldr	r3, [pc, #276]	; (8001398 <check_BE33_connection+0x2c0>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	3301      	adds	r3, #1
 8001286:	4a44      	ldr	r2, [pc, #272]	; (8001398 <check_BE33_connection+0x2c0>)
 8001288:	6013      	str	r3, [r2, #0]
                    sendCommand("CMD+SCANPARAM=0,50,100,10000\r\n");
 800128a:	4848      	ldr	r0, [pc, #288]	; (80013ac <check_BE33_connection+0x2d4>)
 800128c:	f000 f89c 	bl	80013c8 <sendCommand>
                    HAL_Delay(1000);
 8001290:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001294:	f000 ffce 	bl	8002234 <HAL_Delay>
            break;
 8001298:	e075      	b.n	8001386 <check_BE33_connection+0x2ae>
                    currentState = STATE_IDLE;
 800129a:	4b3c      	ldr	r3, [pc, #240]	; (800138c <check_BE33_connection+0x2b4>)
 800129c:	2200      	movs	r2, #0
 800129e:	701a      	strb	r2, [r3, #0]
            break;
 80012a0:	e071      	b.n	8001386 <check_BE33_connection+0x2ae>

        case STATE_SEND_CMD_SCAN:
            sendCommand("CMD+SCAN=1\r\n");
 80012a2:	4843      	ldr	r0, [pc, #268]	; (80013b0 <check_BE33_connection+0x2d8>)
 80012a4:	f000 f890 	bl	80013c8 <sendCommand>
            HAL_Delay(6000);
 80012a8:	f241 7070 	movw	r0, #6000	; 0x1770
 80012ac:	f000 ffc2 	bl	8002234 <HAL_Delay>
            currentState = STATE_WAIT_CMD_SCAN;
 80012b0:	4b36      	ldr	r3, [pc, #216]	; (800138c <check_BE33_connection+0x2b4>)
 80012b2:	220a      	movs	r2, #10
 80012b4:	701a      	strb	r2, [r3, #0]
            break;
 80012b6:	e066      	b.n	8001386 <check_BE33_connection+0x2ae>

        case STATE_WAIT_CMD_SCAN:
            if (validateResponse("EVT+ADVRPT")) {
 80012b8:	483e      	ldr	r0, [pc, #248]	; (80013b4 <check_BE33_connection+0x2dc>)
 80012ba:	f000 fa35 	bl	8001728 <validateResponse>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d006      	beq.n	80012d2 <check_BE33_connection+0x1fa>
                currentState = STATE_SEND_CMD_CON;
 80012c4:	4b31      	ldr	r3, [pc, #196]	; (800138c <check_BE33_connection+0x2b4>)
 80012c6:	220b      	movs	r2, #11
 80012c8:	701a      	strb	r2, [r3, #0]
                commandRetryCount = 0;
 80012ca:	4b33      	ldr	r3, [pc, #204]	; (8001398 <check_BE33_connection+0x2c0>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	601a      	str	r2, [r3, #0]
                } else {
                    // Handle retry failure
                    currentState = STATE_IDLE;
                }
            }
            break;
 80012d0:	e059      	b.n	8001386 <check_BE33_connection+0x2ae>
                if (commandRetryCount < MAX_RETRY_COUNT) {
 80012d2:	4b31      	ldr	r3, [pc, #196]	; (8001398 <check_BE33_connection+0x2c0>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	2b02      	cmp	r3, #2
 80012d8:	dc0c      	bgt.n	80012f4 <check_BE33_connection+0x21c>
                    commandRetryCount++;
 80012da:	4b2f      	ldr	r3, [pc, #188]	; (8001398 <check_BE33_connection+0x2c0>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	3301      	adds	r3, #1
 80012e0:	4a2d      	ldr	r2, [pc, #180]	; (8001398 <check_BE33_connection+0x2c0>)
 80012e2:	6013      	str	r3, [r2, #0]
                    sendCommand("CMD+SCAN=1\r\n");
 80012e4:	4832      	ldr	r0, [pc, #200]	; (80013b0 <check_BE33_connection+0x2d8>)
 80012e6:	f000 f86f 	bl	80013c8 <sendCommand>
                    HAL_Delay(6000);
 80012ea:	f241 7070 	movw	r0, #6000	; 0x1770
 80012ee:	f000 ffa1 	bl	8002234 <HAL_Delay>
            break;
 80012f2:	e048      	b.n	8001386 <check_BE33_connection+0x2ae>
                    currentState = STATE_IDLE;
 80012f4:	4b25      	ldr	r3, [pc, #148]	; (800138c <check_BE33_connection+0x2b4>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	701a      	strb	r2, [r3, #0]
            break;
 80012fa:	e044      	b.n	8001386 <check_BE33_connection+0x2ae>

        case STATE_SEND_CMD_CON:
            sendCommand("CMD+CON=1,fab321a20744\r\n");
 80012fc:	482e      	ldr	r0, [pc, #184]	; (80013b8 <check_BE33_connection+0x2e0>)
 80012fe:	f000 f863 	bl	80013c8 <sendCommand>
            HAL_Delay(10000);
 8001302:	f242 7010 	movw	r0, #10000	; 0x2710
 8001306:	f000 ff95 	bl	8002234 <HAL_Delay>
            currentState = STATE_WAIT_CMD_CON;
 800130a:	4b20      	ldr	r3, [pc, #128]	; (800138c <check_BE33_connection+0x2b4>)
 800130c:	220c      	movs	r2, #12
 800130e:	701a      	strb	r2, [r3, #0]
            break;
 8001310:	e039      	b.n	8001386 <check_BE33_connection+0x2ae>

        case STATE_WAIT_CMD_CON:
            if (validateResponse("EVT+CON") && validateResponse("EVT+NOTIFY")) {
 8001312:	482a      	ldr	r0, [pc, #168]	; (80013bc <check_BE33_connection+0x2e4>)
 8001314:	f000 fa08 	bl	8001728 <validateResponse>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d00c      	beq.n	8001338 <check_BE33_connection+0x260>
 800131e:	4828      	ldr	r0, [pc, #160]	; (80013c0 <check_BE33_connection+0x2e8>)
 8001320:	f000 fa02 	bl	8001728 <validateResponse>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d006      	beq.n	8001338 <check_BE33_connection+0x260>
                currentState = STATE_SEND_CMD_DATA;
 800132a:	4b18      	ldr	r3, [pc, #96]	; (800138c <check_BE33_connection+0x2b4>)
 800132c:	220d      	movs	r2, #13
 800132e:	701a      	strb	r2, [r3, #0]
                commandRetryCount = 0;
 8001330:	4b19      	ldr	r3, [pc, #100]	; (8001398 <check_BE33_connection+0x2c0>)
 8001332:	2200      	movs	r2, #0
 8001334:	601a      	str	r2, [r3, #0]
                } else {
                    // Handle retry failure
                    currentState = STATE_IDLE;
                }
            }
            break;
 8001336:	e026      	b.n	8001386 <check_BE33_connection+0x2ae>
                if (commandRetryCount < MAX_RETRY_COUNT) {
 8001338:	4b17      	ldr	r3, [pc, #92]	; (8001398 <check_BE33_connection+0x2c0>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	2b02      	cmp	r3, #2
 800133e:	dc0c      	bgt.n	800135a <check_BE33_connection+0x282>
                    commandRetryCount++;
 8001340:	4b15      	ldr	r3, [pc, #84]	; (8001398 <check_BE33_connection+0x2c0>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	3301      	adds	r3, #1
 8001346:	4a14      	ldr	r2, [pc, #80]	; (8001398 <check_BE33_connection+0x2c0>)
 8001348:	6013      	str	r3, [r2, #0]
                    sendCommand("CMD+CON=1,fab321a20744\r\n");
 800134a:	481b      	ldr	r0, [pc, #108]	; (80013b8 <check_BE33_connection+0x2e0>)
 800134c:	f000 f83c 	bl	80013c8 <sendCommand>
                    HAL_Delay(10000);
 8001350:	f242 7010 	movw	r0, #10000	; 0x2710
 8001354:	f000 ff6e 	bl	8002234 <HAL_Delay>
            break;
 8001358:	e015      	b.n	8001386 <check_BE33_connection+0x2ae>
                    currentState = STATE_IDLE;
 800135a:	4b0c      	ldr	r3, [pc, #48]	; (800138c <check_BE33_connection+0x2b4>)
 800135c:	2200      	movs	r2, #0
 800135e:	701a      	strb	r2, [r3, #0]
            break;
 8001360:	e011      	b.n	8001386 <check_BE33_connection+0x2ae>

        case STATE_SEND_CMD_DATA:

            sendCommand("CMD+DATA=<conn_handle>,WELCOME TO EVERY ONE\r\n");
 8001362:	4818      	ldr	r0, [pc, #96]	; (80013c4 <check_BE33_connection+0x2ec>)
 8001364:	f000 f830 	bl	80013c8 <sendCommand>
            HAL_Delay(1000);
 8001368:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800136c:	f000 ff62 	bl	8002234 <HAL_Delay>

            currentState = STATE_SEND_CMD_VALUE;
 8001370:	4b06      	ldr	r3, [pc, #24]	; (800138c <check_BE33_connection+0x2b4>)
 8001372:	220f      	movs	r2, #15
 8001374:	701a      	strb	r2, [r3, #0]
            break;
 8001376:	e006      	b.n	8001386 <check_BE33_connection+0x2ae>

        case STATE_SEND_CMD_VALUE:
        	EnergyMeterValue();
 8001378:	f000 f8f4 	bl	8001564 <EnergyMeterValue>
        	currentState = STATE_SEND_CMD_VALUE;
 800137c:	4b03      	ldr	r3, [pc, #12]	; (800138c <check_BE33_connection+0x2b4>)
 800137e:	220f      	movs	r2, #15
 8001380:	701a      	strb	r2, [r3, #0]
        	break;
 8001382:	e000      	b.n	8001386 <check_BE33_connection+0x2ae>

        case STATE_IDLE:
        default:
            break;
 8001384:	bf00      	nop
    }
}
 8001386:	bf00      	nop
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	200002c8 	.word	0x200002c8
 8001390:	080091f8 	.word	0x080091f8
 8001394:	08009204 	.word	0x08009204
 8001398:	20000528 	.word	0x20000528
 800139c:	0800920c 	.word	0x0800920c
 80013a0:	0800921c 	.word	0x0800921c
 80013a4:	0800922c 	.word	0x0800922c
 80013a8:	08009238 	.word	0x08009238
 80013ac:	08009248 	.word	0x08009248
 80013b0:	08009268 	.word	0x08009268
 80013b4:	08009278 	.word	0x08009278
 80013b8:	08009284 	.word	0x08009284
 80013bc:	080092a0 	.word	0x080092a0
 80013c0:	080092a8 	.word	0x080092a8
 80013c4:	080092b4 	.word	0x080092b4

080013c8 <sendCommand>:


void sendCommand(const char *cmd) {
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t*) cmd, strlen(cmd), HAL_MAX_DELAY);
 80013d0:	6878      	ldr	r0, [r7, #4]
 80013d2:	f7fe ff1d 	bl	8000210 <strlen>
 80013d6:	4603      	mov	r3, r0
 80013d8:	b29a      	uxth	r2, r3
 80013da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80013de:	6879      	ldr	r1, [r7, #4]
 80013e0:	4803      	ldr	r0, [pc, #12]	; (80013f0 <sendCommand+0x28>)
 80013e2:	f002 f8d2 	bl	800358a <HAL_UART_Transmit>
}
 80013e6:	bf00      	nop
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	200001fc 	.word	0x200001fc

080013f4 <processResponse>:

void processResponse(void) {
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
    // Print the entire response buffer to debug
    for (uint16_t i = 0; i < bufferIndex; i++) {
 80013fa:	2300      	movs	r3, #0
 80013fc:	80fb      	strh	r3, [r7, #6]
 80013fe:	e008      	b.n	8001412 <processResponse+0x1e>
        ITM_SendChar(responseBuffer[i]);
 8001400:	88fb      	ldrh	r3, [r7, #6]
 8001402:	4a4f      	ldr	r2, [pc, #316]	; (8001540 <processResponse+0x14c>)
 8001404:	5cd3      	ldrb	r3, [r2, r3]
 8001406:	4618      	mov	r0, r3
 8001408:	f7ff fe16 	bl	8001038 <ITM_SendChar>
    for (uint16_t i = 0; i < bufferIndex; i++) {
 800140c:	88fb      	ldrh	r3, [r7, #6]
 800140e:	3301      	adds	r3, #1
 8001410:	80fb      	strh	r3, [r7, #6]
 8001412:	4b4c      	ldr	r3, [pc, #304]	; (8001544 <processResponse+0x150>)
 8001414:	881b      	ldrh	r3, [r3, #0]
 8001416:	b29b      	uxth	r3, r3
 8001418:	88fa      	ldrh	r2, [r7, #6]
 800141a:	429a      	cmp	r2, r3
 800141c:	d3f0      	bcc.n	8001400 <processResponse+0xc>
    }
    ITM_SendChar('\n'); // Newline for clarity
 800141e:	200a      	movs	r0, #10
 8001420:	f7ff fe0a 	bl	8001038 <ITM_SendChar>

    // Check and handle different responses based on state
    switch (currentState) {
 8001424:	4b48      	ldr	r3, [pc, #288]	; (8001548 <processResponse+0x154>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	3b02      	subs	r3, #2
 800142a:	2b0c      	cmp	r3, #12
 800142c:	d86a      	bhi.n	8001504 <processResponse+0x110>
 800142e:	a201      	add	r2, pc, #4	; (adr r2, 8001434 <processResponse+0x40>)
 8001430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001434:	08001469 	.word	0x08001469
 8001438:	08001505 	.word	0x08001505
 800143c:	08001483 	.word	0x08001483
 8001440:	08001505 	.word	0x08001505
 8001444:	0800149d 	.word	0x0800149d
 8001448:	08001505 	.word	0x08001505
 800144c:	080014b7 	.word	0x080014b7
 8001450:	08001505 	.word	0x08001505
 8001454:	080014d1 	.word	0x080014d1
 8001458:	08001505 	.word	0x08001505
 800145c:	080014eb 	.word	0x080014eb
 8001460:	08001505 	.word	0x08001505
 8001464:	08001505 	.word	0x08001505
        case STATE_WAIT_CMD_NAME:
            if (validateResponse("RSP=0")) {
 8001468:	4838      	ldr	r0, [pc, #224]	; (800154c <processResponse+0x158>)
 800146a:	f000 f95d 	bl	8001728 <validateResponse>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d049      	beq.n	8001508 <processResponse+0x114>
                currentState = STATE_SEND_CMD_RESET;
 8001474:	4b34      	ldr	r3, [pc, #208]	; (8001548 <processResponse+0x154>)
 8001476:	2203      	movs	r2, #3
 8001478:	701a      	strb	r2, [r3, #0]
                commandRetryCount = 0;
 800147a:	4b35      	ldr	r3, [pc, #212]	; (8001550 <processResponse+0x15c>)
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]
            } else {
                // Handle unexpected response or retry
            }
            break;
 8001480:	e042      	b.n	8001508 <processResponse+0x114>

        case STATE_WAIT_CMD_RESET:
            if (validateResponse("EVT+READY")) {
 8001482:	4834      	ldr	r0, [pc, #208]	; (8001554 <processResponse+0x160>)
 8001484:	f000 f950 	bl	8001728 <validateResponse>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d03e      	beq.n	800150c <processResponse+0x118>
                currentState = STATE_SEND_CMD_TXPWR;
 800148e:	4b2e      	ldr	r3, [pc, #184]	; (8001548 <processResponse+0x154>)
 8001490:	2205      	movs	r2, #5
 8001492:	701a      	strb	r2, [r3, #0]
                commandRetryCount = 0;
 8001494:	4b2e      	ldr	r3, [pc, #184]	; (8001550 <processResponse+0x15c>)
 8001496:	2200      	movs	r2, #0
 8001498:	601a      	str	r2, [r3, #0]
            } else {
                // Handle unexpected response or retry
            }
            break;
 800149a:	e037      	b.n	800150c <processResponse+0x118>

        case STATE_WAIT_CMD_TXPWR:
            if (validateResponse("RSP=0")) {
 800149c:	482b      	ldr	r0, [pc, #172]	; (800154c <processResponse+0x158>)
 800149e:	f000 f943 	bl	8001728 <validateResponse>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d033      	beq.n	8001510 <processResponse+0x11c>
                currentState = STATE_SEND_CMD_SCANPARAM;
 80014a8:	4b27      	ldr	r3, [pc, #156]	; (8001548 <processResponse+0x154>)
 80014aa:	2207      	movs	r2, #7
 80014ac:	701a      	strb	r2, [r3, #0]
                commandRetryCount = 0;
 80014ae:	4b28      	ldr	r3, [pc, #160]	; (8001550 <processResponse+0x15c>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]
            } else {
                // Handle unexpected response or retry
            }
            break;
 80014b4:	e02c      	b.n	8001510 <processResponse+0x11c>

        case STATE_WAIT_CMD_SCANPARAM:
            if (validateResponse("RSP=0")) {
 80014b6:	4825      	ldr	r0, [pc, #148]	; (800154c <processResponse+0x158>)
 80014b8:	f000 f936 	bl	8001728 <validateResponse>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d028      	beq.n	8001514 <processResponse+0x120>
                currentState = STATE_SEND_CMD_SCAN;
 80014c2:	4b21      	ldr	r3, [pc, #132]	; (8001548 <processResponse+0x154>)
 80014c4:	2209      	movs	r2, #9
 80014c6:	701a      	strb	r2, [r3, #0]
                commandRetryCount = 0;
 80014c8:	4b21      	ldr	r3, [pc, #132]	; (8001550 <processResponse+0x15c>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	601a      	str	r2, [r3, #0]
            } else {
                // Handle unexpected response or retry
            }
            break;
 80014ce:	e021      	b.n	8001514 <processResponse+0x120>

        case STATE_WAIT_CMD_SCAN:
            if (validateResponse("EVT+ADVRPT")) {
 80014d0:	4821      	ldr	r0, [pc, #132]	; (8001558 <processResponse+0x164>)
 80014d2:	f000 f929 	bl	8001728 <validateResponse>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d01d      	beq.n	8001518 <processResponse+0x124>
                currentState = STATE_SEND_CMD_CON;
 80014dc:	4b1a      	ldr	r3, [pc, #104]	; (8001548 <processResponse+0x154>)
 80014de:	220b      	movs	r2, #11
 80014e0:	701a      	strb	r2, [r3, #0]
                commandRetryCount = 0;
 80014e2:	4b1b      	ldr	r3, [pc, #108]	; (8001550 <processResponse+0x15c>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]
            } else {
                // Handle unexpected response or retry
            }
            break;
 80014e8:	e016      	b.n	8001518 <processResponse+0x124>

        case STATE_WAIT_CMD_CON:
            if (validateResponse("EVT+CON")) {
 80014ea:	481c      	ldr	r0, [pc, #112]	; (800155c <processResponse+0x168>)
 80014ec:	f000 f91c 	bl	8001728 <validateResponse>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d012      	beq.n	800151c <processResponse+0x128>
                currentState = STATE_SEND_CMD_DATA;
 80014f6:	4b14      	ldr	r3, [pc, #80]	; (8001548 <processResponse+0x154>)
 80014f8:	220d      	movs	r2, #13
 80014fa:	701a      	strb	r2, [r3, #0]
                commandRetryCount = 0;
 80014fc:	4b14      	ldr	r3, [pc, #80]	; (8001550 <processResponse+0x15c>)
 80014fe:	2200      	movs	r2, #0
 8001500:	601a      	str	r2, [r3, #0]
            } else {
                // Handle unexpected response or retry
            }
            break;
 8001502:	e00b      	b.n	800151c <processResponse+0x128>
        case STATE_WAIT_CMD_DATA:
            // Handle CMD+DATA responses if necessary
            break;

        default:
            break;
 8001504:	bf00      	nop
 8001506:	e00a      	b.n	800151e <processResponse+0x12a>
            break;
 8001508:	bf00      	nop
 800150a:	e008      	b.n	800151e <processResponse+0x12a>
            break;
 800150c:	bf00      	nop
 800150e:	e006      	b.n	800151e <processResponse+0x12a>
            break;
 8001510:	bf00      	nop
 8001512:	e004      	b.n	800151e <processResponse+0x12a>
            break;
 8001514:	bf00      	nop
 8001516:	e002      	b.n	800151e <processResponse+0x12a>
            break;
 8001518:	bf00      	nop
 800151a:	e000      	b.n	800151e <processResponse+0x12a>
            break;
 800151c:	bf00      	nop
    }

    // Clear buffer and reset index
    bufferIndex = 0;
 800151e:	4b09      	ldr	r3, [pc, #36]	; (8001544 <processResponse+0x150>)
 8001520:	2200      	movs	r2, #0
 8001522:	801a      	strh	r2, [r3, #0]
    memset(responseBuffer, 0, RX_BUFFER_SIZE);
 8001524:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001528:	2100      	movs	r1, #0
 800152a:	4805      	ldr	r0, [pc, #20]	; (8001540 <processResponse+0x14c>)
 800152c:	f003 f924 	bl	8004778 <memset>
    rxComplete = 0;
 8001530:	4b0b      	ldr	r3, [pc, #44]	; (8001560 <processResponse+0x16c>)
 8001532:	2200      	movs	r2, #0
 8001534:	701a      	strb	r2, [r3, #0]
}
 8001536:	bf00      	nop
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	200003f8 	.word	0x200003f8
 8001544:	20000524 	.word	0x20000524
 8001548:	200002c8 	.word	0x200002c8
 800154c:	08009204 	.word	0x08009204
 8001550:	20000528 	.word	0x20000528
 8001554:	0800922c 	.word	0x0800922c
 8001558:	08009278 	.word	0x08009278
 800155c:	080092a0 	.word	0x080092a0
 8001560:	20000526 	.word	0x20000526

08001564 <EnergyMeterValue>:

void EnergyMeterValue(void){
 8001564:	b580      	push	{r7, lr}
 8001566:	b0a2      	sub	sp, #136	; 0x88
 8001568:	af02      	add	r7, sp, #8
    char cmd[100];

    float voltage = ReadModbusParameter(0x00, 0x00, 0x00, 0x02);
 800156a:	2302      	movs	r3, #2
 800156c:	2200      	movs	r2, #0
 800156e:	2100      	movs	r1, #0
 8001570:	2000      	movs	r0, #0
 8001572:	f000 f931 	bl	80017d8 <ReadModbusParameter>
 8001576:	ed87 0a1f 	vstr	s0, [r7, #124]	; 0x7c
    snprintf(cmd, sizeof(cmd), "CMD+DATA=<conn_handle>,Voltage: %.2f V\r\n", voltage);
 800157a:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800157c:	f7ff f804 	bl	8000588 <__aeabi_f2d>
 8001580:	4602      	mov	r2, r0
 8001582:	460b      	mov	r3, r1
 8001584:	4638      	mov	r0, r7
 8001586:	e9cd 2300 	strd	r2, r3, [sp]
 800158a:	4a5f      	ldr	r2, [pc, #380]	; (8001708 <EnergyMeterValue+0x1a4>)
 800158c:	2164      	movs	r1, #100	; 0x64
 800158e:	f003 fff1 	bl	8005574 <sniprintf>
    sendCommand(cmd);
 8001592:	463b      	mov	r3, r7
 8001594:	4618      	mov	r0, r3
 8001596:	f7ff ff17 	bl	80013c8 <sendCommand>
    HAL_Delay(1000);
 800159a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800159e:	f000 fe49 	bl	8002234 <HAL_Delay>

    // Read and print current
    float current = ReadModbusParameter(0x00, 0x06, 0x00, 0x02);
 80015a2:	2302      	movs	r3, #2
 80015a4:	2200      	movs	r2, #0
 80015a6:	2106      	movs	r1, #6
 80015a8:	2000      	movs	r0, #0
 80015aa:	f000 f915 	bl	80017d8 <ReadModbusParameter>
 80015ae:	ed87 0a1e 	vstr	s0, [r7, #120]	; 0x78
    snprintf(cmd, sizeof(cmd), "CMD+DATA=<conn_handle>,Current: %.2f A\r\n", current);
 80015b2:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80015b4:	f7fe ffe8 	bl	8000588 <__aeabi_f2d>
 80015b8:	4602      	mov	r2, r0
 80015ba:	460b      	mov	r3, r1
 80015bc:	4638      	mov	r0, r7
 80015be:	e9cd 2300 	strd	r2, r3, [sp]
 80015c2:	4a52      	ldr	r2, [pc, #328]	; (800170c <EnergyMeterValue+0x1a8>)
 80015c4:	2164      	movs	r1, #100	; 0x64
 80015c6:	f003 ffd5 	bl	8005574 <sniprintf>
    sendCommand(cmd);
 80015ca:	463b      	mov	r3, r7
 80015cc:	4618      	mov	r0, r3
 80015ce:	f7ff fefb 	bl	80013c8 <sendCommand>
    HAL_Delay(1000);
 80015d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015d6:	f000 fe2d 	bl	8002234 <HAL_Delay>

    // Read and print frequency
    float frequency = ReadModbusParameter(0x00, 0x46, 0x00, 0x02);
 80015da:	2302      	movs	r3, #2
 80015dc:	2200      	movs	r2, #0
 80015de:	2146      	movs	r1, #70	; 0x46
 80015e0:	2000      	movs	r0, #0
 80015e2:	f000 f8f9 	bl	80017d8 <ReadModbusParameter>
 80015e6:	ed87 0a1d 	vstr	s0, [r7, #116]	; 0x74
    snprintf(cmd, sizeof(cmd), "CMD+DATA=<conn_handle>,Frequency: %.2f Hz\r\n", frequency);
 80015ea:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80015ec:	f7fe ffcc 	bl	8000588 <__aeabi_f2d>
 80015f0:	4602      	mov	r2, r0
 80015f2:	460b      	mov	r3, r1
 80015f4:	4638      	mov	r0, r7
 80015f6:	e9cd 2300 	strd	r2, r3, [sp]
 80015fa:	4a45      	ldr	r2, [pc, #276]	; (8001710 <EnergyMeterValue+0x1ac>)
 80015fc:	2164      	movs	r1, #100	; 0x64
 80015fe:	f003 ffb9 	bl	8005574 <sniprintf>
    sendCommand(cmd);
 8001602:	463b      	mov	r3, r7
 8001604:	4618      	mov	r0, r3
 8001606:	f7ff fedf 	bl	80013c8 <sendCommand>
    HAL_Delay(1000);
 800160a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800160e:	f000 fe11 	bl	8002234 <HAL_Delay>

    // Read and print power
    float power = ReadModbusParameter(0x00, 0x0C, 0x00, 0x02);
 8001612:	2302      	movs	r3, #2
 8001614:	2200      	movs	r2, #0
 8001616:	210c      	movs	r1, #12
 8001618:	2000      	movs	r0, #0
 800161a:	f000 f8dd 	bl	80017d8 <ReadModbusParameter>
 800161e:	ed87 0a1c 	vstr	s0, [r7, #112]	; 0x70
     snprintf(cmd, sizeof(cmd), "CMD+DATA=<conn_handle>,power: %.2f Watt\r\n", power);
 8001622:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8001624:	f7fe ffb0 	bl	8000588 <__aeabi_f2d>
 8001628:	4602      	mov	r2, r0
 800162a:	460b      	mov	r3, r1
 800162c:	4638      	mov	r0, r7
 800162e:	e9cd 2300 	strd	r2, r3, [sp]
 8001632:	4a38      	ldr	r2, [pc, #224]	; (8001714 <EnergyMeterValue+0x1b0>)
 8001634:	2164      	movs	r1, #100	; 0x64
 8001636:	f003 ff9d 	bl	8005574 <sniprintf>
    sendCommand(cmd);
 800163a:	463b      	mov	r3, r7
 800163c:	4618      	mov	r0, r3
 800163e:	f7ff fec3 	bl	80013c8 <sendCommand>
    HAL_Delay(1000);
 8001642:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001646:	f000 fdf5 	bl	8002234 <HAL_Delay>

    // Read and print power factor
    float powerFactor = ReadModbusParameter(0x00, 0x1E, 0x00, 0x02);
 800164a:	2302      	movs	r3, #2
 800164c:	2200      	movs	r2, #0
 800164e:	211e      	movs	r1, #30
 8001650:	2000      	movs	r0, #0
 8001652:	f000 f8c1 	bl	80017d8 <ReadModbusParameter>
 8001656:	ed87 0a1b 	vstr	s0, [r7, #108]	; 0x6c
    snprintf(cmd, sizeof(cmd), "CMD+DATA=<conn_handle>,powerFactor: %.2f \r\n", powerFactor);
 800165a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800165c:	f7fe ff94 	bl	8000588 <__aeabi_f2d>
 8001660:	4602      	mov	r2, r0
 8001662:	460b      	mov	r3, r1
 8001664:	4638      	mov	r0, r7
 8001666:	e9cd 2300 	strd	r2, r3, [sp]
 800166a:	4a2b      	ldr	r2, [pc, #172]	; (8001718 <EnergyMeterValue+0x1b4>)
 800166c:	2164      	movs	r1, #100	; 0x64
 800166e:	f003 ff81 	bl	8005574 <sniprintf>
    sendCommand(cmd);
 8001672:	463b      	mov	r3, r7
 8001674:	4618      	mov	r0, r3
 8001676:	f7ff fea7 	bl	80013c8 <sendCommand>
    HAL_Delay(1000);
 800167a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800167e:	f000 fdd9 	bl	8002234 <HAL_Delay>

    // Read and print Energy
    float energy = ReadModbusParameter(0x00, 0x6E, 0x00, 0x02);
 8001682:	2302      	movs	r3, #2
 8001684:	2200      	movs	r2, #0
 8001686:	216e      	movs	r1, #110	; 0x6e
 8001688:	2000      	movs	r0, #0
 800168a:	f000 f8a5 	bl	80017d8 <ReadModbusParameter>
 800168e:	ed87 0a1a 	vstr	s0, [r7, #104]	; 0x68
    snprintf(cmd, sizeof(cmd), "CMD+DATA=<conn_handle>,Energy: %.2f KWh\r\n", energy/1000);
 8001692:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001696:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800171c <EnergyMeterValue+0x1b8>
 800169a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800169e:	ee16 0a90 	vmov	r0, s13
 80016a2:	f7fe ff71 	bl	8000588 <__aeabi_f2d>
 80016a6:	4602      	mov	r2, r0
 80016a8:	460b      	mov	r3, r1
 80016aa:	4638      	mov	r0, r7
 80016ac:	e9cd 2300 	strd	r2, r3, [sp]
 80016b0:	4a1b      	ldr	r2, [pc, #108]	; (8001720 <EnergyMeterValue+0x1bc>)
 80016b2:	2164      	movs	r1, #100	; 0x64
 80016b4:	f003 ff5e 	bl	8005574 <sniprintf>
    sendCommand(cmd);
 80016b8:	463b      	mov	r3, r7
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7ff fe84 	bl	80013c8 <sendCommand>
    HAL_Delay(1000);
 80016c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016c4:	f000 fdb6 	bl	8002234 <HAL_Delay>

    // Read and print Energy
    float rpm = ReadModbusParameter(0x00, 0x88, 0x00, 0x02);
 80016c8:	2302      	movs	r3, #2
 80016ca:	2200      	movs	r2, #0
 80016cc:	2188      	movs	r1, #136	; 0x88
 80016ce:	2000      	movs	r0, #0
 80016d0:	f000 f882 	bl	80017d8 <ReadModbusParameter>
 80016d4:	ed87 0a19 	vstr	s0, [r7, #100]	; 0x64
	snprintf(cmd, sizeof(cmd), "CMD+DATA=<conn_handle>,RMP: %.2f RPM\r\n", rpm);
 80016d8:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80016da:	f7fe ff55 	bl	8000588 <__aeabi_f2d>
 80016de:	4602      	mov	r2, r0
 80016e0:	460b      	mov	r3, r1
 80016e2:	4638      	mov	r0, r7
 80016e4:	e9cd 2300 	strd	r2, r3, [sp]
 80016e8:	4a0e      	ldr	r2, [pc, #56]	; (8001724 <EnergyMeterValue+0x1c0>)
 80016ea:	2164      	movs	r1, #100	; 0x64
 80016ec:	f003 ff42 	bl	8005574 <sniprintf>
	sendCommand(cmd);
 80016f0:	463b      	mov	r3, r7
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7ff fe68 	bl	80013c8 <sendCommand>
	HAL_Delay(1000);
 80016f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016fc:	f000 fd9a 	bl	8002234 <HAL_Delay>
}
 8001700:	bf00      	nop
 8001702:	3780      	adds	r7, #128	; 0x80
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	080092e4 	.word	0x080092e4
 800170c:	08009310 	.word	0x08009310
 8001710:	0800933c 	.word	0x0800933c
 8001714:	08009368 	.word	0x08009368
 8001718:	08009394 	.word	0x08009394
 800171c:	447a0000 	.word	0x447a0000
 8001720:	080093c0 	.word	0x080093c0
 8001724:	080093ec 	.word	0x080093ec

08001728 <validateResponse>:

int validateResponse(const char *expectedResponse) {
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
    // Check if the response buffer contains the expected response
    return strstr((char*) responseBuffer, expectedResponse) != NULL;
 8001730:	6879      	ldr	r1, [r7, #4]
 8001732:	4806      	ldr	r0, [pc, #24]	; (800174c <validateResponse+0x24>)
 8001734:	f003 ff72 	bl	800561c <strstr>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	bf14      	ite	ne
 800173e:	2301      	movne	r3, #1
 8001740:	2300      	moveq	r3, #0
 8001742:	b2db      	uxtb	r3, r3
}
 8001744:	4618      	mov	r0, r3
 8001746:	3708      	adds	r7, #8
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	200003f8 	.word	0x200003f8

08001750 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1) {
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a18      	ldr	r2, [pc, #96]	; (80017c0 <HAL_UART_RxCpltCallback+0x70>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d12a      	bne.n	80017b8 <HAL_UART_RxCpltCallback+0x68>
        if (bufferIndex < RX_BUFFER_SIZE - 1) {
 8001762:	4b18      	ldr	r3, [pc, #96]	; (80017c4 <HAL_UART_RxCpltCallback+0x74>)
 8001764:	881b      	ldrh	r3, [r3, #0]
 8001766:	b29b      	uxth	r3, r3
 8001768:	f5b3 7f95 	cmp.w	r3, #298	; 0x12a
 800176c:	d80b      	bhi.n	8001786 <HAL_UART_RxCpltCallback+0x36>
            responseBuffer[bufferIndex++] = rxBuffer[0];
 800176e:	4b15      	ldr	r3, [pc, #84]	; (80017c4 <HAL_UART_RxCpltCallback+0x74>)
 8001770:	881b      	ldrh	r3, [r3, #0]
 8001772:	b29b      	uxth	r3, r3
 8001774:	1c5a      	adds	r2, r3, #1
 8001776:	b291      	uxth	r1, r2
 8001778:	4a12      	ldr	r2, [pc, #72]	; (80017c4 <HAL_UART_RxCpltCallback+0x74>)
 800177a:	8011      	strh	r1, [r2, #0]
 800177c:	461a      	mov	r2, r3
 800177e:	4b12      	ldr	r3, [pc, #72]	; (80017c8 <HAL_UART_RxCpltCallback+0x78>)
 8001780:	7819      	ldrb	r1, [r3, #0]
 8001782:	4b12      	ldr	r3, [pc, #72]	; (80017cc <HAL_UART_RxCpltCallback+0x7c>)
 8001784:	5499      	strb	r1, [r3, r2]
        }

        if (rxBuffer[0] == '\n' || bufferIndex >= RX_BUFFER_SIZE - 1) {
 8001786:	4b10      	ldr	r3, [pc, #64]	; (80017c8 <HAL_UART_RxCpltCallback+0x78>)
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	2b0a      	cmp	r3, #10
 800178c:	d005      	beq.n	800179a <HAL_UART_RxCpltCallback+0x4a>
 800178e:	4b0d      	ldr	r3, [pc, #52]	; (80017c4 <HAL_UART_RxCpltCallback+0x74>)
 8001790:	881b      	ldrh	r3, [r3, #0]
 8001792:	b29b      	uxth	r3, r3
 8001794:	f5b3 7f95 	cmp.w	r3, #298	; 0x12a
 8001798:	d909      	bls.n	80017ae <HAL_UART_RxCpltCallback+0x5e>
            responseBuffer[bufferIndex] = '\0';
 800179a:	4b0a      	ldr	r3, [pc, #40]	; (80017c4 <HAL_UART_RxCpltCallback+0x74>)
 800179c:	881b      	ldrh	r3, [r3, #0]
 800179e:	b29b      	uxth	r3, r3
 80017a0:	461a      	mov	r2, r3
 80017a2:	4b0a      	ldr	r3, [pc, #40]	; (80017cc <HAL_UART_RxCpltCallback+0x7c>)
 80017a4:	2100      	movs	r1, #0
 80017a6:	5499      	strb	r1, [r3, r2]
            rxComplete = 1;
 80017a8:	4b09      	ldr	r3, [pc, #36]	; (80017d0 <HAL_UART_RxCpltCallback+0x80>)
 80017aa:	2201      	movs	r2, #1
 80017ac:	701a      	strb	r2, [r3, #0]
        }

        HAL_UART_Receive_IT(&huart1, rxBuffer, 1);
 80017ae:	2201      	movs	r2, #1
 80017b0:	4905      	ldr	r1, [pc, #20]	; (80017c8 <HAL_UART_RxCpltCallback+0x78>)
 80017b2:	4808      	ldr	r0, [pc, #32]	; (80017d4 <HAL_UART_RxCpltCallback+0x84>)
 80017b4:	f002 f81d 	bl	80037f2 <HAL_UART_Receive_IT>
    }
}
 80017b8:	bf00      	nop
 80017ba:	3708      	adds	r7, #8
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	40011000 	.word	0x40011000
 80017c4:	20000524 	.word	0x20000524
 80017c8:	200002cc 	.word	0x200002cc
 80017cc:	200003f8 	.word	0x200003f8
 80017d0:	20000526 	.word	0x20000526
 80017d4:	200001fc 	.word	0x200001fc

080017d8 <ReadModbusParameter>:



// Function to send a Modbus request and receive the response
float ReadModbusParameter(uint8_t regAddressHigh, uint8_t regAddressLow, uint8_t regCountHigh, uint8_t regCountLow) {
 80017d8:	b590      	push	{r4, r7, lr}
 80017da:	b08b      	sub	sp, #44	; 0x2c
 80017dc:	af00      	add	r7, sp, #0
 80017de:	4604      	mov	r4, r0
 80017e0:	4608      	mov	r0, r1
 80017e2:	4611      	mov	r1, r2
 80017e4:	461a      	mov	r2, r3
 80017e6:	4623      	mov	r3, r4
 80017e8:	71fb      	strb	r3, [r7, #7]
 80017ea:	4603      	mov	r3, r0
 80017ec:	71bb      	strb	r3, [r7, #6]
 80017ee:	460b      	mov	r3, r1
 80017f0:	717b      	strb	r3, [r7, #5]
 80017f2:	4613      	mov	r3, r2
 80017f4:	713b      	strb	r3, [r7, #4]
    uint8_t txData[8];
    uint8_t rxData[9];

    txData[0] = 0x01; // Slave Address
 80017f6:	2301      	movs	r3, #1
 80017f8:	763b      	strb	r3, [r7, #24]
    txData[1] = 0x03; // Function Code
 80017fa:	2303      	movs	r3, #3
 80017fc:	767b      	strb	r3, [r7, #25]
    txData[2] = regAddressHigh;
 80017fe:	79fb      	ldrb	r3, [r7, #7]
 8001800:	76bb      	strb	r3, [r7, #26]
    txData[3] = regAddressLow;
 8001802:	79bb      	ldrb	r3, [r7, #6]
 8001804:	76fb      	strb	r3, [r7, #27]
    txData[4] = regCountHigh;
 8001806:	797b      	ldrb	r3, [r7, #5]
 8001808:	773b      	strb	r3, [r7, #28]
    txData[5] = regCountLow;
 800180a:	793b      	ldrb	r3, [r7, #4]
 800180c:	777b      	strb	r3, [r7, #29]

    uint16_t crc = crc16(txData, 6);
 800180e:	f107 0318 	add.w	r3, r7, #24
 8001812:	2106      	movs	r1, #6
 8001814:	4618      	mov	r0, r3
 8001816:	f000 fa23 	bl	8001c60 <crc16>
 800181a:	4603      	mov	r3, r0
 800181c:	84fb      	strh	r3, [r7, #38]	; 0x26
    txData[6] = crc & 0xFF;
 800181e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001820:	b2db      	uxtb	r3, r3
 8001822:	77bb      	strb	r3, [r7, #30]
    txData[7] = (crc >> 8) & 0xFF;
 8001824:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001826:	0a1b      	lsrs	r3, r3, #8
 8001828:	b29b      	uxth	r3, r3
 800182a:	b2db      	uxtb	r3, r3
 800182c:	77fb      	strb	r3, [r7, #31]

    if (HAL_UART_Transmit(&huart3, txData, sizeof(txData), 1000) == HAL_OK) {
 800182e:	f107 0118 	add.w	r1, r7, #24
 8001832:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001836:	2208      	movs	r2, #8
 8001838:	481c      	ldr	r0, [pc, #112]	; (80018ac <ReadModbusParameter+0xd4>)
 800183a:	f001 fea6 	bl	800358a <HAL_UART_Transmit>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d129      	bne.n	8001898 <ReadModbusParameter+0xc0>
        //Print_Raw_Data(txData, sizeof(txData));
        if (HAL_UART_Receive(&huart3, rxData, sizeof(rxData), 1000) == HAL_OK) {
 8001844:	f107 010c 	add.w	r1, r7, #12
 8001848:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800184c:	2209      	movs	r2, #9
 800184e:	4817      	ldr	r0, [pc, #92]	; (80018ac <ReadModbusParameter+0xd4>)
 8001850:	f001 ff2d 	bl	80036ae <HAL_UART_Receive>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d118      	bne.n	800188c <ReadModbusParameter+0xb4>
            //Print_Raw_Data(rxData, sizeof(rxData));
            uint8_t byte1 = rxData[3];
 800185a:	7bfb      	ldrb	r3, [r7, #15]
 800185c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
            uint8_t byte2 = rxData[4];
 8001860:	7c3b      	ldrb	r3, [r7, #16]
 8001862:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            uint8_t byte3 = rxData[5];
 8001866:	7c7b      	ldrb	r3, [r7, #17]
 8001868:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            uint8_t byte4 = rxData[6];
 800186c:	7cbb      	ldrb	r3, [r7, #18]
 800186e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
            return ieee754_to_float(byte1, byte2, byte3, byte4);
 8001872:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001876:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800187a:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 800187e:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
 8001882:	f000 f819 	bl	80018b8 <ieee754_to_float>
 8001886:	eef0 7a40 	vmov.f32	s15, s0
 800188a:	e00a      	b.n	80018a2 <ReadModbusParameter+0xca>
        } else {
            printf("Failed to receive data\n");
 800188c:	4808      	ldr	r0, [pc, #32]	; (80018b0 <ReadModbusParameter+0xd8>)
 800188e:	f003 fe63 	bl	8005558 <puts>
            return -1;
 8001892:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8001896:	e004      	b.n	80018a2 <ReadModbusParameter+0xca>
        }
    } else {
        printf("Failed to transmit data\n");
 8001898:	4806      	ldr	r0, [pc, #24]	; (80018b4 <ReadModbusParameter+0xdc>)
 800189a:	f003 fe5d 	bl	8005558 <puts>
        return -1;
 800189e:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
    }
}
 80018a2:	eeb0 0a67 	vmov.f32	s0, s15
 80018a6:	372c      	adds	r7, #44	; 0x2c
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd90      	pop	{r4, r7, pc}
 80018ac:	20000284 	.word	0x20000284
 80018b0:	08009414 	.word	0x08009414
 80018b4:	0800942c 	.word	0x0800942c

080018b8 <ieee754_to_float>:

// Function to convert 32-bit IEEE 754 floating-point number to float
float ieee754_to_float(uint8_t byte1, uint8_t byte2, uint8_t byte3, uint8_t byte4) {
 80018b8:	b490      	push	{r4, r7}
 80018ba:	b088      	sub	sp, #32
 80018bc:	af00      	add	r7, sp, #0
 80018be:	4604      	mov	r4, r0
 80018c0:	4608      	mov	r0, r1
 80018c2:	4611      	mov	r1, r2
 80018c4:	461a      	mov	r2, r3
 80018c6:	4623      	mov	r3, r4
 80018c8:	71fb      	strb	r3, [r7, #7]
 80018ca:	4603      	mov	r3, r0
 80018cc:	71bb      	strb	r3, [r7, #6]
 80018ce:	460b      	mov	r3, r1
 80018d0:	717b      	strb	r3, [r7, #5]
 80018d2:	4613      	mov	r3, r2
 80018d4:	713b      	strb	r3, [r7, #4]
    uint32_t raw_value = (byte1 << 24) | (byte2 << 16) | (byte3 << 8) | byte4;
 80018d6:	79fb      	ldrb	r3, [r7, #7]
 80018d8:	061a      	lsls	r2, r3, #24
 80018da:	79bb      	ldrb	r3, [r7, #6]
 80018dc:	041b      	lsls	r3, r3, #16
 80018de:	431a      	orrs	r2, r3
 80018e0:	797b      	ldrb	r3, [r7, #5]
 80018e2:	021b      	lsls	r3, r3, #8
 80018e4:	431a      	orrs	r2, r3
 80018e6:	793b      	ldrb	r3, [r7, #4]
 80018e8:	4313      	orrs	r3, r2
 80018ea:	61bb      	str	r3, [r7, #24]

    int sign = (raw_value >> 31) & 0x1;
 80018ec:	69bb      	ldr	r3, [r7, #24]
 80018ee:	0fdb      	lsrs	r3, r3, #31
 80018f0:	617b      	str	r3, [r7, #20]
    int exponent = (raw_value >> 23) & 0xFF;
 80018f2:	69bb      	ldr	r3, [r7, #24]
 80018f4:	0ddb      	lsrs	r3, r3, #23
 80018f6:	b2db      	uxtb	r3, r3
 80018f8:	613b      	str	r3, [r7, #16]
    uint32_t mantissa = raw_value & 0x7FFFFF;
 80018fa:	69bb      	ldr	r3, [r7, #24]
 80018fc:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8001900:	60fb      	str	r3, [r7, #12]

    float normalized_mantissa = 1 + (float)mantissa / (1 << 23);
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	ee07 3a90 	vmov	s15, r3
 8001908:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800190c:	eddf 6a15 	vldr	s13, [pc, #84]	; 8001964 <ieee754_to_float+0xac>
 8001910:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001914:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001918:	ee77 7a87 	vadd.f32	s15, s15, s14
 800191c:	edc7 7a02 	vstr	s15, [r7, #8]
    float final_value = normalized_mantissa * (1 << (exponent - 127));
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	3b7f      	subs	r3, #127	; 0x7f
 8001924:	2201      	movs	r2, #1
 8001926:	fa02 f303 	lsl.w	r3, r2, r3
 800192a:	ee07 3a90 	vmov	s15, r3
 800192e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001932:	ed97 7a02 	vldr	s14, [r7, #8]
 8001936:	ee67 7a27 	vmul.f32	s15, s14, s15
 800193a:	edc7 7a07 	vstr	s15, [r7, #28]

    if (sign) {
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d005      	beq.n	8001950 <ieee754_to_float+0x98>
        final_value = -final_value;
 8001944:	edd7 7a07 	vldr	s15, [r7, #28]
 8001948:	eef1 7a67 	vneg.f32	s15, s15
 800194c:	edc7 7a07 	vstr	s15, [r7, #28]
    }

    return final_value;
 8001950:	69fb      	ldr	r3, [r7, #28]
 8001952:	ee07 3a90 	vmov	s15, r3
}
 8001956:	eeb0 0a67 	vmov.f32	s0, s15
 800195a:	3720      	adds	r7, #32
 800195c:	46bd      	mov	sp, r7
 800195e:	bc90      	pop	{r4, r7}
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	4b000000 	.word	0x4b000000

08001968 <_write>:


int _write(int file, char *ptr, int len) {
 8001968:	b580      	push	{r7, lr}
 800196a:	b086      	sub	sp, #24
 800196c:	af00      	add	r7, sp, #0
 800196e:	60f8      	str	r0, [r7, #12]
 8001970:	60b9      	str	r1, [r7, #8]
 8001972:	607a      	str	r2, [r7, #4]
    (void) file;
    int DataIdx;
    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001974:	2300      	movs	r3, #0
 8001976:	617b      	str	r3, [r7, #20]
 8001978:	e009      	b.n	800198e <_write+0x26>
        ITM_SendChar(*ptr++);
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	1c5a      	adds	r2, r3, #1
 800197e:	60ba      	str	r2, [r7, #8]
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	4618      	mov	r0, r3
 8001984:	f7ff fb58 	bl	8001038 <ITM_SendChar>
    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	3301      	adds	r3, #1
 800198c:	617b      	str	r3, [r7, #20]
 800198e:	697a      	ldr	r2, [r7, #20]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	429a      	cmp	r2, r3
 8001994:	dbf1      	blt.n	800197a <_write+0x12>
    }
    return len;
 8001996:	687b      	ldr	r3, [r7, #4]
}
 8001998:	4618      	mov	r0, r3
 800199a:	3718      	adds	r7, #24
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}

080019a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b094      	sub	sp, #80	; 0x50
 80019a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019a6:	f107 031c 	add.w	r3, r7, #28
 80019aa:	2234      	movs	r2, #52	; 0x34
 80019ac:	2100      	movs	r1, #0
 80019ae:	4618      	mov	r0, r3
 80019b0:	f002 fee2 	bl	8004778 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019b4:	f107 0308 	add.w	r3, r7, #8
 80019b8:	2200      	movs	r2, #0
 80019ba:	601a      	str	r2, [r3, #0]
 80019bc:	605a      	str	r2, [r3, #4]
 80019be:	609a      	str	r2, [r3, #8]
 80019c0:	60da      	str	r2, [r3, #12]
 80019c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80019c4:	2300      	movs	r3, #0
 80019c6:	607b      	str	r3, [r7, #4]
 80019c8:	4b2a      	ldr	r3, [pc, #168]	; (8001a74 <SystemClock_Config+0xd4>)
 80019ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019cc:	4a29      	ldr	r2, [pc, #164]	; (8001a74 <SystemClock_Config+0xd4>)
 80019ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019d2:	6413      	str	r3, [r2, #64]	; 0x40
 80019d4:	4b27      	ldr	r3, [pc, #156]	; (8001a74 <SystemClock_Config+0xd4>)
 80019d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019dc:	607b      	str	r3, [r7, #4]
 80019de:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80019e0:	2300      	movs	r3, #0
 80019e2:	603b      	str	r3, [r7, #0]
 80019e4:	4b24      	ldr	r3, [pc, #144]	; (8001a78 <SystemClock_Config+0xd8>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80019ec:	4a22      	ldr	r2, [pc, #136]	; (8001a78 <SystemClock_Config+0xd8>)
 80019ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019f2:	6013      	str	r3, [r2, #0]
 80019f4:	4b20      	ldr	r3, [pc, #128]	; (8001a78 <SystemClock_Config+0xd8>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80019fc:	603b      	str	r3, [r7, #0]
 80019fe:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a00:	2302      	movs	r3, #2
 8001a02:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a04:	2301      	movs	r3, #1
 8001a06:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a08:	2310      	movs	r3, #16
 8001a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a10:	2300      	movs	r3, #0
 8001a12:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001a14:	2310      	movs	r3, #16
 8001a16:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001a18:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001a1c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001a1e:	2304      	movs	r3, #4
 8001a20:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001a22:	2302      	movs	r3, #2
 8001a24:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001a26:	2302      	movs	r3, #2
 8001a28:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a2a:	f107 031c 	add.w	r3, r7, #28
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f001 fac0 	bl	8002fb4 <HAL_RCC_OscConfig>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d001      	beq.n	8001a3e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001a3a:	f000 f90b 	bl	8001c54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a3e:	230f      	movs	r3, #15
 8001a40:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a42:	2302      	movs	r3, #2
 8001a44:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a46:	2300      	movs	r3, #0
 8001a48:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a4e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a50:	2300      	movs	r3, #0
 8001a52:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a54:	f107 0308 	add.w	r3, r7, #8
 8001a58:	2102      	movs	r1, #2
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f000 ff60 	bl	8002920 <HAL_RCC_ClockConfig>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d001      	beq.n	8001a6a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001a66:	f000 f8f5 	bl	8001c54 <Error_Handler>
  }
}
 8001a6a:	bf00      	nop
 8001a6c:	3750      	adds	r7, #80	; 0x50
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	40023800 	.word	0x40023800
 8001a78:	40007000 	.word	0x40007000

08001a7c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a80:	4b11      	ldr	r3, [pc, #68]	; (8001ac8 <MX_USART1_UART_Init+0x4c>)
 8001a82:	4a12      	ldr	r2, [pc, #72]	; (8001acc <MX_USART1_UART_Init+0x50>)
 8001a84:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001a86:	4b10      	ldr	r3, [pc, #64]	; (8001ac8 <MX_USART1_UART_Init+0x4c>)
 8001a88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a8c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a8e:	4b0e      	ldr	r3, [pc, #56]	; (8001ac8 <MX_USART1_UART_Init+0x4c>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a94:	4b0c      	ldr	r3, [pc, #48]	; (8001ac8 <MX_USART1_UART_Init+0x4c>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a9a:	4b0b      	ldr	r3, [pc, #44]	; (8001ac8 <MX_USART1_UART_Init+0x4c>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001aa0:	4b09      	ldr	r3, [pc, #36]	; (8001ac8 <MX_USART1_UART_Init+0x4c>)
 8001aa2:	220c      	movs	r2, #12
 8001aa4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8001aa6:	4b08      	ldr	r3, [pc, #32]	; (8001ac8 <MX_USART1_UART_Init+0x4c>)
 8001aa8:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001aac:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001aae:	4b06      	ldr	r3, [pc, #24]	; (8001ac8 <MX_USART1_UART_Init+0x4c>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ab4:	4804      	ldr	r0, [pc, #16]	; (8001ac8 <MX_USART1_UART_Init+0x4c>)
 8001ab6:	f001 fd1b 	bl	80034f0 <HAL_UART_Init>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <MX_USART1_UART_Init+0x48>
  {
    Error_Handler();
 8001ac0:	f000 f8c8 	bl	8001c54 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001ac4:	bf00      	nop
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	200001fc 	.word	0x200001fc
 8001acc:	40011000 	.word	0x40011000

08001ad0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ad4:	4b11      	ldr	r3, [pc, #68]	; (8001b1c <MX_USART2_UART_Init+0x4c>)
 8001ad6:	4a12      	ldr	r2, [pc, #72]	; (8001b20 <MX_USART2_UART_Init+0x50>)
 8001ad8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001ada:	4b10      	ldr	r3, [pc, #64]	; (8001b1c <MX_USART2_UART_Init+0x4c>)
 8001adc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ae0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ae2:	4b0e      	ldr	r3, [pc, #56]	; (8001b1c <MX_USART2_UART_Init+0x4c>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ae8:	4b0c      	ldr	r3, [pc, #48]	; (8001b1c <MX_USART2_UART_Init+0x4c>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001aee:	4b0b      	ldr	r3, [pc, #44]	; (8001b1c <MX_USART2_UART_Init+0x4c>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001af4:	4b09      	ldr	r3, [pc, #36]	; (8001b1c <MX_USART2_UART_Init+0x4c>)
 8001af6:	220c      	movs	r2, #12
 8001af8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001afa:	4b08      	ldr	r3, [pc, #32]	; (8001b1c <MX_USART2_UART_Init+0x4c>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b00:	4b06      	ldr	r3, [pc, #24]	; (8001b1c <MX_USART2_UART_Init+0x4c>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b06:	4805      	ldr	r0, [pc, #20]	; (8001b1c <MX_USART2_UART_Init+0x4c>)
 8001b08:	f001 fcf2 	bl	80034f0 <HAL_UART_Init>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d001      	beq.n	8001b16 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001b12:	f000 f89f 	bl	8001c54 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b16:	bf00      	nop
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	20000240 	.word	0x20000240
 8001b20:	40004400 	.word	0x40004400

08001b24 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001b28:	4b11      	ldr	r3, [pc, #68]	; (8001b70 <MX_USART3_UART_Init+0x4c>)
 8001b2a:	4a12      	ldr	r2, [pc, #72]	; (8001b74 <MX_USART3_UART_Init+0x50>)
 8001b2c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001b2e:	4b10      	ldr	r3, [pc, #64]	; (8001b70 <MX_USART3_UART_Init+0x4c>)
 8001b30:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001b34:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001b36:	4b0e      	ldr	r3, [pc, #56]	; (8001b70 <MX_USART3_UART_Init+0x4c>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001b3c:	4b0c      	ldr	r3, [pc, #48]	; (8001b70 <MX_USART3_UART_Init+0x4c>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001b42:	4b0b      	ldr	r3, [pc, #44]	; (8001b70 <MX_USART3_UART_Init+0x4c>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001b48:	4b09      	ldr	r3, [pc, #36]	; (8001b70 <MX_USART3_UART_Init+0x4c>)
 8001b4a:	220c      	movs	r2, #12
 8001b4c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b4e:	4b08      	ldr	r3, [pc, #32]	; (8001b70 <MX_USART3_UART_Init+0x4c>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b54:	4b06      	ldr	r3, [pc, #24]	; (8001b70 <MX_USART3_UART_Init+0x4c>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001b5a:	4805      	ldr	r0, [pc, #20]	; (8001b70 <MX_USART3_UART_Init+0x4c>)
 8001b5c:	f001 fcc8 	bl	80034f0 <HAL_UART_Init>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d001      	beq.n	8001b6a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001b66:	f000 f875 	bl	8001c54 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001b6a:	bf00      	nop
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	20000284 	.word	0x20000284
 8001b74:	40004800 	.word	0x40004800

08001b78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b08a      	sub	sp, #40	; 0x28
 8001b7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b7e:	f107 0314 	add.w	r3, r7, #20
 8001b82:	2200      	movs	r2, #0
 8001b84:	601a      	str	r2, [r3, #0]
 8001b86:	605a      	str	r2, [r3, #4]
 8001b88:	609a      	str	r2, [r3, #8]
 8001b8a:	60da      	str	r2, [r3, #12]
 8001b8c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b8e:	2300      	movs	r3, #0
 8001b90:	613b      	str	r3, [r7, #16]
 8001b92:	4b2d      	ldr	r3, [pc, #180]	; (8001c48 <MX_GPIO_Init+0xd0>)
 8001b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b96:	4a2c      	ldr	r2, [pc, #176]	; (8001c48 <MX_GPIO_Init+0xd0>)
 8001b98:	f043 0304 	orr.w	r3, r3, #4
 8001b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b9e:	4b2a      	ldr	r3, [pc, #168]	; (8001c48 <MX_GPIO_Init+0xd0>)
 8001ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba2:	f003 0304 	and.w	r3, r3, #4
 8001ba6:	613b      	str	r3, [r7, #16]
 8001ba8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001baa:	2300      	movs	r3, #0
 8001bac:	60fb      	str	r3, [r7, #12]
 8001bae:	4b26      	ldr	r3, [pc, #152]	; (8001c48 <MX_GPIO_Init+0xd0>)
 8001bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb2:	4a25      	ldr	r2, [pc, #148]	; (8001c48 <MX_GPIO_Init+0xd0>)
 8001bb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bba:	4b23      	ldr	r3, [pc, #140]	; (8001c48 <MX_GPIO_Init+0xd0>)
 8001bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bc2:	60fb      	str	r3, [r7, #12]
 8001bc4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	60bb      	str	r3, [r7, #8]
 8001bca:	4b1f      	ldr	r3, [pc, #124]	; (8001c48 <MX_GPIO_Init+0xd0>)
 8001bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bce:	4a1e      	ldr	r2, [pc, #120]	; (8001c48 <MX_GPIO_Init+0xd0>)
 8001bd0:	f043 0301 	orr.w	r3, r3, #1
 8001bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bd6:	4b1c      	ldr	r3, [pc, #112]	; (8001c48 <MX_GPIO_Init+0xd0>)
 8001bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bda:	f003 0301 	and.w	r3, r3, #1
 8001bde:	60bb      	str	r3, [r7, #8]
 8001be0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001be2:	2300      	movs	r3, #0
 8001be4:	607b      	str	r3, [r7, #4]
 8001be6:	4b18      	ldr	r3, [pc, #96]	; (8001c48 <MX_GPIO_Init+0xd0>)
 8001be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bea:	4a17      	ldr	r2, [pc, #92]	; (8001c48 <MX_GPIO_Init+0xd0>)
 8001bec:	f043 0302 	orr.w	r3, r3, #2
 8001bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bf2:	4b15      	ldr	r3, [pc, #84]	; (8001c48 <MX_GPIO_Init+0xd0>)
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf6:	f003 0302 	and.w	r3, r3, #2
 8001bfa:	607b      	str	r3, [r7, #4]
 8001bfc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001bfe:	2200      	movs	r2, #0
 8001c00:	2120      	movs	r1, #32
 8001c02:	4812      	ldr	r0, [pc, #72]	; (8001c4c <MX_GPIO_Init+0xd4>)
 8001c04:	f000 fe72 	bl	80028ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001c08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001c0e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001c12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c14:	2300      	movs	r3, #0
 8001c16:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001c18:	f107 0314 	add.w	r3, r7, #20
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	480c      	ldr	r0, [pc, #48]	; (8001c50 <MX_GPIO_Init+0xd8>)
 8001c20:	f000 fcd0 	bl	80025c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001c24:	2320      	movs	r3, #32
 8001c26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c30:	2300      	movs	r3, #0
 8001c32:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001c34:	f107 0314 	add.w	r3, r7, #20
 8001c38:	4619      	mov	r1, r3
 8001c3a:	4804      	ldr	r0, [pc, #16]	; (8001c4c <MX_GPIO_Init+0xd4>)
 8001c3c:	f000 fcc2 	bl	80025c4 <HAL_GPIO_Init>

}
 8001c40:	bf00      	nop
 8001c42:	3728      	adds	r7, #40	; 0x28
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	40023800 	.word	0x40023800
 8001c4c:	40020000 	.word	0x40020000
 8001c50:	40020800 	.word	0x40020800

08001c54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c58:	b672      	cpsid	i
}
 8001c5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c5c:	e7fe      	b.n	8001c5c <Error_Handler+0x8>
	...

08001c60 <crc16>:
    0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42,
    0x43, 0x83, 0x41, 0x81, 0x80, 0x40
};

uint16_t crc16(uint8_t *buffer, uint16_t buffer_length)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b085      	sub	sp, #20
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	460b      	mov	r3, r1
 8001c6a:	807b      	strh	r3, [r7, #2]
    uint8_t crc_hi = 0xFF; /* high CRC byte initialized */
 8001c6c:	23ff      	movs	r3, #255	; 0xff
 8001c6e:	73fb      	strb	r3, [r7, #15]
    uint8_t crc_lo = 0xFF; /* low CRC byte initialized */
 8001c70:	23ff      	movs	r3, #255	; 0xff
 8001c72:	73bb      	strb	r3, [r7, #14]
    unsigned int i; /* will index into CRC lookup */

    /* pass through message buffer */
    while (buffer_length--) {
 8001c74:	e013      	b.n	8001c9e <crc16+0x3e>
        i = crc_lo ^ *buffer++; /* calculate the CRC  */
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	1c5a      	adds	r2, r3, #1
 8001c7a:	607a      	str	r2, [r7, #4]
 8001c7c:	781a      	ldrb	r2, [r3, #0]
 8001c7e:	7bbb      	ldrb	r3, [r7, #14]
 8001c80:	4053      	eors	r3, r2
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	60bb      	str	r3, [r7, #8]
        crc_lo = crc_hi ^ table_crc_hi[i];
 8001c86:	4a0f      	ldr	r2, [pc, #60]	; (8001cc4 <crc16+0x64>)
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	4413      	add	r3, r2
 8001c8c:	781a      	ldrb	r2, [r3, #0]
 8001c8e:	7bfb      	ldrb	r3, [r7, #15]
 8001c90:	4053      	eors	r3, r2
 8001c92:	73bb      	strb	r3, [r7, #14]
        crc_hi = table_crc_lo[i];
 8001c94:	4a0c      	ldr	r2, [pc, #48]	; (8001cc8 <crc16+0x68>)
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	4413      	add	r3, r2
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	73fb      	strb	r3, [r7, #15]
    while (buffer_length--) {
 8001c9e:	887b      	ldrh	r3, [r7, #2]
 8001ca0:	1e5a      	subs	r2, r3, #1
 8001ca2:	807a      	strh	r2, [r7, #2]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d1e6      	bne.n	8001c76 <crc16+0x16>
    }

    return (crc_hi << 8 | crc_lo);
 8001ca8:	7bfb      	ldrb	r3, [r7, #15]
 8001caa:	021b      	lsls	r3, r3, #8
 8001cac:	b21a      	sxth	r2, r3
 8001cae:	7bbb      	ldrb	r3, [r7, #14]
 8001cb0:	b21b      	sxth	r3, r3
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	b21b      	sxth	r3, r3
 8001cb6:	b29b      	uxth	r3, r3
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3714      	adds	r7, #20
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr
 8001cc4:	08009444 	.word	0x08009444
 8001cc8:	08009544 	.word	0x08009544

08001ccc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	607b      	str	r3, [r7, #4]
 8001cd6:	4b10      	ldr	r3, [pc, #64]	; (8001d18 <HAL_MspInit+0x4c>)
 8001cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cda:	4a0f      	ldr	r2, [pc, #60]	; (8001d18 <HAL_MspInit+0x4c>)
 8001cdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ce0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ce2:	4b0d      	ldr	r3, [pc, #52]	; (8001d18 <HAL_MspInit+0x4c>)
 8001ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ce6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cea:	607b      	str	r3, [r7, #4]
 8001cec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cee:	2300      	movs	r3, #0
 8001cf0:	603b      	str	r3, [r7, #0]
 8001cf2:	4b09      	ldr	r3, [pc, #36]	; (8001d18 <HAL_MspInit+0x4c>)
 8001cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf6:	4a08      	ldr	r2, [pc, #32]	; (8001d18 <HAL_MspInit+0x4c>)
 8001cf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cfc:	6413      	str	r3, [r2, #64]	; 0x40
 8001cfe:	4b06      	ldr	r3, [pc, #24]	; (8001d18 <HAL_MspInit+0x4c>)
 8001d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d06:	603b      	str	r3, [r7, #0]
 8001d08:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001d0a:	2007      	movs	r0, #7
 8001d0c:	f000 fb86 	bl	800241c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d10:	bf00      	nop
 8001d12:	3708      	adds	r7, #8
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	40023800 	.word	0x40023800

08001d1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b08e      	sub	sp, #56	; 0x38
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d28:	2200      	movs	r2, #0
 8001d2a:	601a      	str	r2, [r3, #0]
 8001d2c:	605a      	str	r2, [r3, #4]
 8001d2e:	609a      	str	r2, [r3, #8]
 8001d30:	60da      	str	r2, [r3, #12]
 8001d32:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a67      	ldr	r2, [pc, #412]	; (8001ed8 <HAL_UART_MspInit+0x1bc>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d135      	bne.n	8001daa <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d3e:	2300      	movs	r3, #0
 8001d40:	623b      	str	r3, [r7, #32]
 8001d42:	4b66      	ldr	r3, [pc, #408]	; (8001edc <HAL_UART_MspInit+0x1c0>)
 8001d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d46:	4a65      	ldr	r2, [pc, #404]	; (8001edc <HAL_UART_MspInit+0x1c0>)
 8001d48:	f043 0310 	orr.w	r3, r3, #16
 8001d4c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d4e:	4b63      	ldr	r3, [pc, #396]	; (8001edc <HAL_UART_MspInit+0x1c0>)
 8001d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d52:	f003 0310 	and.w	r3, r3, #16
 8001d56:	623b      	str	r3, [r7, #32]
 8001d58:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	61fb      	str	r3, [r7, #28]
 8001d5e:	4b5f      	ldr	r3, [pc, #380]	; (8001edc <HAL_UART_MspInit+0x1c0>)
 8001d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d62:	4a5e      	ldr	r2, [pc, #376]	; (8001edc <HAL_UART_MspInit+0x1c0>)
 8001d64:	f043 0301 	orr.w	r3, r3, #1
 8001d68:	6313      	str	r3, [r2, #48]	; 0x30
 8001d6a:	4b5c      	ldr	r3, [pc, #368]	; (8001edc <HAL_UART_MspInit+0x1c0>)
 8001d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6e:	f003 0301 	and.w	r3, r3, #1
 8001d72:	61fb      	str	r3, [r7, #28]
 8001d74:	69fb      	ldr	r3, [r7, #28]
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    PA11     ------> USART1_CTS
    PA12     ------> USART1_RTS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001d76:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 8001d7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d7c:	2302      	movs	r3, #2
 8001d7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d80:	2300      	movs	r3, #0
 8001d82:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d84:	2303      	movs	r3, #3
 8001d86:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d88:	2307      	movs	r3, #7
 8001d8a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d90:	4619      	mov	r1, r3
 8001d92:	4853      	ldr	r0, [pc, #332]	; (8001ee0 <HAL_UART_MspInit+0x1c4>)
 8001d94:	f000 fc16 	bl	80025c4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001d98:	2200      	movs	r2, #0
 8001d9a:	2100      	movs	r1, #0
 8001d9c:	2025      	movs	r0, #37	; 0x25
 8001d9e:	f000 fb48 	bl	8002432 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001da2:	2025      	movs	r0, #37	; 0x25
 8001da4:	f000 fb61 	bl	800246a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001da8:	e091      	b.n	8001ece <HAL_UART_MspInit+0x1b2>
  else if(huart->Instance==USART2)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a4d      	ldr	r2, [pc, #308]	; (8001ee4 <HAL_UART_MspInit+0x1c8>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d134      	bne.n	8001e1e <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001db4:	2300      	movs	r3, #0
 8001db6:	61bb      	str	r3, [r7, #24]
 8001db8:	4b48      	ldr	r3, [pc, #288]	; (8001edc <HAL_UART_MspInit+0x1c0>)
 8001dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dbc:	4a47      	ldr	r2, [pc, #284]	; (8001edc <HAL_UART_MspInit+0x1c0>)
 8001dbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dc2:	6413      	str	r3, [r2, #64]	; 0x40
 8001dc4:	4b45      	ldr	r3, [pc, #276]	; (8001edc <HAL_UART_MspInit+0x1c0>)
 8001dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dcc:	61bb      	str	r3, [r7, #24]
 8001dce:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	617b      	str	r3, [r7, #20]
 8001dd4:	4b41      	ldr	r3, [pc, #260]	; (8001edc <HAL_UART_MspInit+0x1c0>)
 8001dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd8:	4a40      	ldr	r2, [pc, #256]	; (8001edc <HAL_UART_MspInit+0x1c0>)
 8001dda:	f043 0301 	orr.w	r3, r3, #1
 8001dde:	6313      	str	r3, [r2, #48]	; 0x30
 8001de0:	4b3e      	ldr	r3, [pc, #248]	; (8001edc <HAL_UART_MspInit+0x1c0>)
 8001de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de4:	f003 0301 	and.w	r3, r3, #1
 8001de8:	617b      	str	r3, [r7, #20]
 8001dea:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001dec:	230c      	movs	r3, #12
 8001dee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df0:	2302      	movs	r3, #2
 8001df2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df4:	2300      	movs	r3, #0
 8001df6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001df8:	2303      	movs	r3, #3
 8001dfa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001dfc:	2307      	movs	r3, #7
 8001dfe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e04:	4619      	mov	r1, r3
 8001e06:	4836      	ldr	r0, [pc, #216]	; (8001ee0 <HAL_UART_MspInit+0x1c4>)
 8001e08:	f000 fbdc 	bl	80025c4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	2100      	movs	r1, #0
 8001e10:	2026      	movs	r0, #38	; 0x26
 8001e12:	f000 fb0e 	bl	8002432 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001e16:	2026      	movs	r0, #38	; 0x26
 8001e18:	f000 fb27 	bl	800246a <HAL_NVIC_EnableIRQ>
}
 8001e1c:	e057      	b.n	8001ece <HAL_UART_MspInit+0x1b2>
  else if(huart->Instance==USART3)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a31      	ldr	r2, [pc, #196]	; (8001ee8 <HAL_UART_MspInit+0x1cc>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d152      	bne.n	8001ece <HAL_UART_MspInit+0x1b2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001e28:	2300      	movs	r3, #0
 8001e2a:	613b      	str	r3, [r7, #16]
 8001e2c:	4b2b      	ldr	r3, [pc, #172]	; (8001edc <HAL_UART_MspInit+0x1c0>)
 8001e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e30:	4a2a      	ldr	r2, [pc, #168]	; (8001edc <HAL_UART_MspInit+0x1c0>)
 8001e32:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e36:	6413      	str	r3, [r2, #64]	; 0x40
 8001e38:	4b28      	ldr	r3, [pc, #160]	; (8001edc <HAL_UART_MspInit+0x1c0>)
 8001e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e40:	613b      	str	r3, [r7, #16]
 8001e42:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e44:	2300      	movs	r3, #0
 8001e46:	60fb      	str	r3, [r7, #12]
 8001e48:	4b24      	ldr	r3, [pc, #144]	; (8001edc <HAL_UART_MspInit+0x1c0>)
 8001e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4c:	4a23      	ldr	r2, [pc, #140]	; (8001edc <HAL_UART_MspInit+0x1c0>)
 8001e4e:	f043 0304 	orr.w	r3, r3, #4
 8001e52:	6313      	str	r3, [r2, #48]	; 0x30
 8001e54:	4b21      	ldr	r3, [pc, #132]	; (8001edc <HAL_UART_MspInit+0x1c0>)
 8001e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e58:	f003 0304 	and.w	r3, r3, #4
 8001e5c:	60fb      	str	r3, [r7, #12]
 8001e5e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e60:	2300      	movs	r3, #0
 8001e62:	60bb      	str	r3, [r7, #8]
 8001e64:	4b1d      	ldr	r3, [pc, #116]	; (8001edc <HAL_UART_MspInit+0x1c0>)
 8001e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e68:	4a1c      	ldr	r2, [pc, #112]	; (8001edc <HAL_UART_MspInit+0x1c0>)
 8001e6a:	f043 0302 	orr.w	r3, r3, #2
 8001e6e:	6313      	str	r3, [r2, #48]	; 0x30
 8001e70:	4b1a      	ldr	r3, [pc, #104]	; (8001edc <HAL_UART_MspInit+0x1c0>)
 8001e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e74:	f003 0302 	and.w	r3, r3, #2
 8001e78:	60bb      	str	r3, [r7, #8]
 8001e7a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001e7c:	2320      	movs	r3, #32
 8001e7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e80:	2302      	movs	r3, #2
 8001e82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e84:	2300      	movs	r3, #0
 8001e86:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e88:	2303      	movs	r3, #3
 8001e8a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001e8c:	2307      	movs	r3, #7
 8001e8e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e94:	4619      	mov	r1, r3
 8001e96:	4815      	ldr	r0, [pc, #84]	; (8001eec <HAL_UART_MspInit+0x1d0>)
 8001e98:	f000 fb94 	bl	80025c4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001e9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ea0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001eae:	2307      	movs	r3, #7
 8001eb0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	480d      	ldr	r0, [pc, #52]	; (8001ef0 <HAL_UART_MspInit+0x1d4>)
 8001eba:	f000 fb83 	bl	80025c4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	2100      	movs	r1, #0
 8001ec2:	2027      	movs	r0, #39	; 0x27
 8001ec4:	f000 fab5 	bl	8002432 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001ec8:	2027      	movs	r0, #39	; 0x27
 8001eca:	f000 face 	bl	800246a <HAL_NVIC_EnableIRQ>
}
 8001ece:	bf00      	nop
 8001ed0:	3738      	adds	r7, #56	; 0x38
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	40011000 	.word	0x40011000
 8001edc:	40023800 	.word	0x40023800
 8001ee0:	40020000 	.word	0x40020000
 8001ee4:	40004400 	.word	0x40004400
 8001ee8:	40004800 	.word	0x40004800
 8001eec:	40020800 	.word	0x40020800
 8001ef0:	40020400 	.word	0x40020400

08001ef4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ef8:	e7fe      	b.n	8001ef8 <NMI_Handler+0x4>

08001efa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001efa:	b480      	push	{r7}
 8001efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001efe:	e7fe      	b.n	8001efe <HardFault_Handler+0x4>

08001f00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f04:	e7fe      	b.n	8001f04 <MemManage_Handler+0x4>

08001f06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f06:	b480      	push	{r7}
 8001f08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f0a:	e7fe      	b.n	8001f0a <BusFault_Handler+0x4>

08001f0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f10:	e7fe      	b.n	8001f10 <UsageFault_Handler+0x4>

08001f12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f12:	b480      	push	{r7}
 8001f14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f16:	bf00      	nop
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr

08001f20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f24:	bf00      	nop
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr

08001f2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f2e:	b480      	push	{r7}
 8001f30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f32:	bf00      	nop
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr

08001f3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f40:	f000 f958 	bl	80021f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f44:	bf00      	nop
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001f4c:	4802      	ldr	r0, [pc, #8]	; (8001f58 <USART1_IRQHandler+0x10>)
 8001f4e:	f001 fc81 	bl	8003854 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001f52:	bf00      	nop
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	200001fc 	.word	0x200001fc

08001f5c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001f60:	4802      	ldr	r0, [pc, #8]	; (8001f6c <USART2_IRQHandler+0x10>)
 8001f62:	f001 fc77 	bl	8003854 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001f66:	bf00      	nop
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	20000240 	.word	0x20000240

08001f70 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001f74:	4802      	ldr	r0, [pc, #8]	; (8001f80 <USART3_IRQHandler+0x10>)
 8001f76:	f001 fc6d 	bl	8003854 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001f7a:	bf00      	nop
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	20000284 	.word	0x20000284

08001f84 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
  return 1;
 8001f88:	2301      	movs	r3, #1
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr

08001f94 <_kill>:

int _kill(int pid, int sig)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
 8001f9c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001f9e:	f002 fbc1 	bl	8004724 <__errno>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2216      	movs	r2, #22
 8001fa6:	601a      	str	r2, [r3, #0]
  return -1;
 8001fa8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3708      	adds	r7, #8
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}

08001fb4 <_exit>:

void _exit (int status)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001fbc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	f7ff ffe7 	bl	8001f94 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001fc6:	e7fe      	b.n	8001fc6 <_exit+0x12>

08001fc8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b086      	sub	sp, #24
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	60f8      	str	r0, [r7, #12]
 8001fd0:	60b9      	str	r1, [r7, #8]
 8001fd2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	617b      	str	r3, [r7, #20]
 8001fd8:	e00a      	b.n	8001ff0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001fda:	f3af 8000 	nop.w
 8001fde:	4601      	mov	r1, r0
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	1c5a      	adds	r2, r3, #1
 8001fe4:	60ba      	str	r2, [r7, #8]
 8001fe6:	b2ca      	uxtb	r2, r1
 8001fe8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	3301      	adds	r3, #1
 8001fee:	617b      	str	r3, [r7, #20]
 8001ff0:	697a      	ldr	r2, [r7, #20]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	dbf0      	blt.n	8001fda <_read+0x12>
  }

  return len;
 8001ff8:	687b      	ldr	r3, [r7, #4]
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3718      	adds	r7, #24
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}

08002002 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002002:	b480      	push	{r7}
 8002004:	b083      	sub	sp, #12
 8002006:	af00      	add	r7, sp, #0
 8002008:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800200a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800200e:	4618      	mov	r0, r3
 8002010:	370c      	adds	r7, #12
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr

0800201a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800201a:	b480      	push	{r7}
 800201c:	b083      	sub	sp, #12
 800201e:	af00      	add	r7, sp, #0
 8002020:	6078      	str	r0, [r7, #4]
 8002022:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800202a:	605a      	str	r2, [r3, #4]
  return 0;
 800202c:	2300      	movs	r3, #0
}
 800202e:	4618      	mov	r0, r3
 8002030:	370c      	adds	r7, #12
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr

0800203a <_isatty>:

int _isatty(int file)
{
 800203a:	b480      	push	{r7}
 800203c:	b083      	sub	sp, #12
 800203e:	af00      	add	r7, sp, #0
 8002040:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002042:	2301      	movs	r3, #1
}
 8002044:	4618      	mov	r0, r3
 8002046:	370c      	adds	r7, #12
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr

08002050 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002050:	b480      	push	{r7}
 8002052:	b085      	sub	sp, #20
 8002054:	af00      	add	r7, sp, #0
 8002056:	60f8      	str	r0, [r7, #12]
 8002058:	60b9      	str	r1, [r7, #8]
 800205a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800205c:	2300      	movs	r3, #0
}
 800205e:	4618      	mov	r0, r3
 8002060:	3714      	adds	r7, #20
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr
	...

0800206c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b086      	sub	sp, #24
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002074:	4a14      	ldr	r2, [pc, #80]	; (80020c8 <_sbrk+0x5c>)
 8002076:	4b15      	ldr	r3, [pc, #84]	; (80020cc <_sbrk+0x60>)
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002080:	4b13      	ldr	r3, [pc, #76]	; (80020d0 <_sbrk+0x64>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d102      	bne.n	800208e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002088:	4b11      	ldr	r3, [pc, #68]	; (80020d0 <_sbrk+0x64>)
 800208a:	4a12      	ldr	r2, [pc, #72]	; (80020d4 <_sbrk+0x68>)
 800208c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800208e:	4b10      	ldr	r3, [pc, #64]	; (80020d0 <_sbrk+0x64>)
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4413      	add	r3, r2
 8002096:	693a      	ldr	r2, [r7, #16]
 8002098:	429a      	cmp	r2, r3
 800209a:	d207      	bcs.n	80020ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800209c:	f002 fb42 	bl	8004724 <__errno>
 80020a0:	4603      	mov	r3, r0
 80020a2:	220c      	movs	r2, #12
 80020a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80020aa:	e009      	b.n	80020c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020ac:	4b08      	ldr	r3, [pc, #32]	; (80020d0 <_sbrk+0x64>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020b2:	4b07      	ldr	r3, [pc, #28]	; (80020d0 <_sbrk+0x64>)
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4413      	add	r3, r2
 80020ba:	4a05      	ldr	r2, [pc, #20]	; (80020d0 <_sbrk+0x64>)
 80020bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020be:	68fb      	ldr	r3, [r7, #12]
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3718      	adds	r7, #24
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	20020000 	.word	0x20020000
 80020cc:	00000400 	.word	0x00000400
 80020d0:	2000052c 	.word	0x2000052c
 80020d4:	20000548 	.word	0x20000548

080020d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020dc:	4b06      	ldr	r3, [pc, #24]	; (80020f8 <SystemInit+0x20>)
 80020de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020e2:	4a05      	ldr	r2, [pc, #20]	; (80020f8 <SystemInit+0x20>)
 80020e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020ec:	bf00      	nop
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop
 80020f8:	e000ed00 	.word	0xe000ed00

080020fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80020fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002134 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002100:	480d      	ldr	r0, [pc, #52]	; (8002138 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002102:	490e      	ldr	r1, [pc, #56]	; (800213c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002104:	4a0e      	ldr	r2, [pc, #56]	; (8002140 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002106:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002108:	e002      	b.n	8002110 <LoopCopyDataInit>

0800210a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800210a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800210c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800210e:	3304      	adds	r3, #4

08002110 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002110:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002112:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002114:	d3f9      	bcc.n	800210a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002116:	4a0b      	ldr	r2, [pc, #44]	; (8002144 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002118:	4c0b      	ldr	r4, [pc, #44]	; (8002148 <LoopFillZerobss+0x26>)
  movs r3, #0
 800211a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800211c:	e001      	b.n	8002122 <LoopFillZerobss>

0800211e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800211e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002120:	3204      	adds	r2, #4

08002122 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002122:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002124:	d3fb      	bcc.n	800211e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002126:	f7ff ffd7 	bl	80020d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800212a:	f002 fb01 	bl	8004730 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800212e:	f7fe ffab 	bl	8001088 <main>
  bx  lr    
 8002132:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002134:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002138:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800213c:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002140:	08009b1c 	.word	0x08009b1c
  ldr r2, =_sbss
 8002144:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002148:	20000544 	.word	0x20000544

0800214c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800214c:	e7fe      	b.n	800214c <ADC_IRQHandler>
	...

08002150 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002154:	4b0e      	ldr	r3, [pc, #56]	; (8002190 <HAL_Init+0x40>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a0d      	ldr	r2, [pc, #52]	; (8002190 <HAL_Init+0x40>)
 800215a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800215e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002160:	4b0b      	ldr	r3, [pc, #44]	; (8002190 <HAL_Init+0x40>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a0a      	ldr	r2, [pc, #40]	; (8002190 <HAL_Init+0x40>)
 8002166:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800216a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800216c:	4b08      	ldr	r3, [pc, #32]	; (8002190 <HAL_Init+0x40>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a07      	ldr	r2, [pc, #28]	; (8002190 <HAL_Init+0x40>)
 8002172:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002176:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002178:	2003      	movs	r0, #3
 800217a:	f000 f94f 	bl	800241c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800217e:	2000      	movs	r0, #0
 8002180:	f000 f808 	bl	8002194 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002184:	f7ff fda2 	bl	8001ccc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002188:	2300      	movs	r3, #0
}
 800218a:	4618      	mov	r0, r3
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	40023c00 	.word	0x40023c00

08002194 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800219c:	4b12      	ldr	r3, [pc, #72]	; (80021e8 <HAL_InitTick+0x54>)
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	4b12      	ldr	r3, [pc, #72]	; (80021ec <HAL_InitTick+0x58>)
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	4619      	mov	r1, r3
 80021a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80021ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80021b2:	4618      	mov	r0, r3
 80021b4:	f000 f967 	bl	8002486 <HAL_SYSTICK_Config>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d001      	beq.n	80021c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e00e      	b.n	80021e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2b0f      	cmp	r3, #15
 80021c6:	d80a      	bhi.n	80021de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021c8:	2200      	movs	r2, #0
 80021ca:	6879      	ldr	r1, [r7, #4]
 80021cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80021d0:	f000 f92f 	bl	8002432 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021d4:	4a06      	ldr	r2, [pc, #24]	; (80021f0 <HAL_InitTick+0x5c>)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021da:	2300      	movs	r3, #0
 80021dc:	e000      	b.n	80021e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3708      	adds	r7, #8
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	20000000 	.word	0x20000000
 80021ec:	20000008 	.word	0x20000008
 80021f0:	20000004 	.word	0x20000004

080021f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021f8:	4b06      	ldr	r3, [pc, #24]	; (8002214 <HAL_IncTick+0x20>)
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	461a      	mov	r2, r3
 80021fe:	4b06      	ldr	r3, [pc, #24]	; (8002218 <HAL_IncTick+0x24>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4413      	add	r3, r2
 8002204:	4a04      	ldr	r2, [pc, #16]	; (8002218 <HAL_IncTick+0x24>)
 8002206:	6013      	str	r3, [r2, #0]
}
 8002208:	bf00      	nop
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	20000008 	.word	0x20000008
 8002218:	20000530 	.word	0x20000530

0800221c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
  return uwTick;
 8002220:	4b03      	ldr	r3, [pc, #12]	; (8002230 <HAL_GetTick+0x14>)
 8002222:	681b      	ldr	r3, [r3, #0]
}
 8002224:	4618      	mov	r0, r3
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	20000530 	.word	0x20000530

08002234 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b084      	sub	sp, #16
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800223c:	f7ff ffee 	bl	800221c <HAL_GetTick>
 8002240:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800224c:	d005      	beq.n	800225a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800224e:	4b0a      	ldr	r3, [pc, #40]	; (8002278 <HAL_Delay+0x44>)
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	461a      	mov	r2, r3
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	4413      	add	r3, r2
 8002258:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800225a:	bf00      	nop
 800225c:	f7ff ffde 	bl	800221c <HAL_GetTick>
 8002260:	4602      	mov	r2, r0
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	68fa      	ldr	r2, [r7, #12]
 8002268:	429a      	cmp	r2, r3
 800226a:	d8f7      	bhi.n	800225c <HAL_Delay+0x28>
  {
  }
}
 800226c:	bf00      	nop
 800226e:	bf00      	nop
 8002270:	3710      	adds	r7, #16
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	20000008 	.word	0x20000008

0800227c <__NVIC_SetPriorityGrouping>:
{
 800227c:	b480      	push	{r7}
 800227e:	b085      	sub	sp, #20
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	f003 0307 	and.w	r3, r3, #7
 800228a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800228c:	4b0c      	ldr	r3, [pc, #48]	; (80022c0 <__NVIC_SetPriorityGrouping+0x44>)
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002292:	68ba      	ldr	r2, [r7, #8]
 8002294:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002298:	4013      	ands	r3, r2
 800229a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022ae:	4a04      	ldr	r2, [pc, #16]	; (80022c0 <__NVIC_SetPriorityGrouping+0x44>)
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	60d3      	str	r3, [r2, #12]
}
 80022b4:	bf00      	nop
 80022b6:	3714      	adds	r7, #20
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr
 80022c0:	e000ed00 	.word	0xe000ed00

080022c4 <__NVIC_GetPriorityGrouping>:
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022c8:	4b04      	ldr	r3, [pc, #16]	; (80022dc <__NVIC_GetPriorityGrouping+0x18>)
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	0a1b      	lsrs	r3, r3, #8
 80022ce:	f003 0307 	and.w	r3, r3, #7
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr
 80022dc:	e000ed00 	.word	0xe000ed00

080022e0 <__NVIC_EnableIRQ>:
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	4603      	mov	r3, r0
 80022e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	db0b      	blt.n	800230a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022f2:	79fb      	ldrb	r3, [r7, #7]
 80022f4:	f003 021f 	and.w	r2, r3, #31
 80022f8:	4907      	ldr	r1, [pc, #28]	; (8002318 <__NVIC_EnableIRQ+0x38>)
 80022fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022fe:	095b      	lsrs	r3, r3, #5
 8002300:	2001      	movs	r0, #1
 8002302:	fa00 f202 	lsl.w	r2, r0, r2
 8002306:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800230a:	bf00      	nop
 800230c:	370c      	adds	r7, #12
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr
 8002316:	bf00      	nop
 8002318:	e000e100 	.word	0xe000e100

0800231c <__NVIC_SetPriority>:
{
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	4603      	mov	r3, r0
 8002324:	6039      	str	r1, [r7, #0]
 8002326:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002328:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800232c:	2b00      	cmp	r3, #0
 800232e:	db0a      	blt.n	8002346 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	b2da      	uxtb	r2, r3
 8002334:	490c      	ldr	r1, [pc, #48]	; (8002368 <__NVIC_SetPriority+0x4c>)
 8002336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800233a:	0112      	lsls	r2, r2, #4
 800233c:	b2d2      	uxtb	r2, r2
 800233e:	440b      	add	r3, r1
 8002340:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002344:	e00a      	b.n	800235c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	b2da      	uxtb	r2, r3
 800234a:	4908      	ldr	r1, [pc, #32]	; (800236c <__NVIC_SetPriority+0x50>)
 800234c:	79fb      	ldrb	r3, [r7, #7]
 800234e:	f003 030f 	and.w	r3, r3, #15
 8002352:	3b04      	subs	r3, #4
 8002354:	0112      	lsls	r2, r2, #4
 8002356:	b2d2      	uxtb	r2, r2
 8002358:	440b      	add	r3, r1
 800235a:	761a      	strb	r2, [r3, #24]
}
 800235c:	bf00      	nop
 800235e:	370c      	adds	r7, #12
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr
 8002368:	e000e100 	.word	0xe000e100
 800236c:	e000ed00 	.word	0xe000ed00

08002370 <NVIC_EncodePriority>:
{
 8002370:	b480      	push	{r7}
 8002372:	b089      	sub	sp, #36	; 0x24
 8002374:	af00      	add	r7, sp, #0
 8002376:	60f8      	str	r0, [r7, #12]
 8002378:	60b9      	str	r1, [r7, #8]
 800237a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	f003 0307 	and.w	r3, r3, #7
 8002382:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	f1c3 0307 	rsb	r3, r3, #7
 800238a:	2b04      	cmp	r3, #4
 800238c:	bf28      	it	cs
 800238e:	2304      	movcs	r3, #4
 8002390:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	3304      	adds	r3, #4
 8002396:	2b06      	cmp	r3, #6
 8002398:	d902      	bls.n	80023a0 <NVIC_EncodePriority+0x30>
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	3b03      	subs	r3, #3
 800239e:	e000      	b.n	80023a2 <NVIC_EncodePriority+0x32>
 80023a0:	2300      	movs	r3, #0
 80023a2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80023a8:	69bb      	ldr	r3, [r7, #24]
 80023aa:	fa02 f303 	lsl.w	r3, r2, r3
 80023ae:	43da      	mvns	r2, r3
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	401a      	ands	r2, r3
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023b8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	fa01 f303 	lsl.w	r3, r1, r3
 80023c2:	43d9      	mvns	r1, r3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023c8:	4313      	orrs	r3, r2
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3724      	adds	r7, #36	; 0x24
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr
	...

080023d8 <SysTick_Config>:
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	3b01      	subs	r3, #1
 80023e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023e8:	d301      	bcc.n	80023ee <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80023ea:	2301      	movs	r3, #1
 80023ec:	e00f      	b.n	800240e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023ee:	4a0a      	ldr	r2, [pc, #40]	; (8002418 <SysTick_Config+0x40>)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	3b01      	subs	r3, #1
 80023f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023f6:	210f      	movs	r1, #15
 80023f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80023fc:	f7ff ff8e 	bl	800231c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002400:	4b05      	ldr	r3, [pc, #20]	; (8002418 <SysTick_Config+0x40>)
 8002402:	2200      	movs	r2, #0
 8002404:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002406:	4b04      	ldr	r3, [pc, #16]	; (8002418 <SysTick_Config+0x40>)
 8002408:	2207      	movs	r2, #7
 800240a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800240c:	2300      	movs	r3, #0
}
 800240e:	4618      	mov	r0, r3
 8002410:	3708      	adds	r7, #8
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	e000e010 	.word	0xe000e010

0800241c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b082      	sub	sp, #8
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	f7ff ff29 	bl	800227c <__NVIC_SetPriorityGrouping>
}
 800242a:	bf00      	nop
 800242c:	3708      	adds	r7, #8
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}

08002432 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002432:	b580      	push	{r7, lr}
 8002434:	b086      	sub	sp, #24
 8002436:	af00      	add	r7, sp, #0
 8002438:	4603      	mov	r3, r0
 800243a:	60b9      	str	r1, [r7, #8]
 800243c:	607a      	str	r2, [r7, #4]
 800243e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002440:	2300      	movs	r3, #0
 8002442:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002444:	f7ff ff3e 	bl	80022c4 <__NVIC_GetPriorityGrouping>
 8002448:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	68b9      	ldr	r1, [r7, #8]
 800244e:	6978      	ldr	r0, [r7, #20]
 8002450:	f7ff ff8e 	bl	8002370 <NVIC_EncodePriority>
 8002454:	4602      	mov	r2, r0
 8002456:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800245a:	4611      	mov	r1, r2
 800245c:	4618      	mov	r0, r3
 800245e:	f7ff ff5d 	bl	800231c <__NVIC_SetPriority>
}
 8002462:	bf00      	nop
 8002464:	3718      	adds	r7, #24
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}

0800246a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800246a:	b580      	push	{r7, lr}
 800246c:	b082      	sub	sp, #8
 800246e:	af00      	add	r7, sp, #0
 8002470:	4603      	mov	r3, r0
 8002472:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002474:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002478:	4618      	mov	r0, r3
 800247a:	f7ff ff31 	bl	80022e0 <__NVIC_EnableIRQ>
}
 800247e:	bf00      	nop
 8002480:	3708      	adds	r7, #8
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}

08002486 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002486:	b580      	push	{r7, lr}
 8002488:	b082      	sub	sp, #8
 800248a:	af00      	add	r7, sp, #0
 800248c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f7ff ffa2 	bl	80023d8 <SysTick_Config>
 8002494:	4603      	mov	r3, r0
}
 8002496:	4618      	mov	r0, r3
 8002498:	3708      	adds	r7, #8
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}

0800249e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800249e:	b580      	push	{r7, lr}
 80024a0:	b084      	sub	sp, #16
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024aa:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80024ac:	f7ff feb6 	bl	800221c <HAL_GetTick>
 80024b0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	d008      	beq.n	80024d0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2280      	movs	r2, #128	; 0x80
 80024c2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2200      	movs	r2, #0
 80024c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	e052      	b.n	8002576 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f022 0216 	bic.w	r2, r2, #22
 80024de:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	695a      	ldr	r2, [r3, #20]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024ee:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d103      	bne.n	8002500 <HAL_DMA_Abort+0x62>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d007      	beq.n	8002510 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f022 0208 	bic.w	r2, r2, #8
 800250e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f022 0201 	bic.w	r2, r2, #1
 800251e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002520:	e013      	b.n	800254a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002522:	f7ff fe7b 	bl	800221c <HAL_GetTick>
 8002526:	4602      	mov	r2, r0
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	2b05      	cmp	r3, #5
 800252e:	d90c      	bls.n	800254a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2220      	movs	r2, #32
 8002534:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2203      	movs	r2, #3
 800253a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2200      	movs	r2, #0
 8002542:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e015      	b.n	8002576 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 0301 	and.w	r3, r3, #1
 8002554:	2b00      	cmp	r3, #0
 8002556:	d1e4      	bne.n	8002522 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800255c:	223f      	movs	r2, #63	; 0x3f
 800255e:	409a      	lsls	r2, r3
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2201      	movs	r2, #1
 8002568:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2200      	movs	r2, #0
 8002570:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002574:	2300      	movs	r3, #0
}
 8002576:	4618      	mov	r0, r3
 8002578:	3710      	adds	r7, #16
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}

0800257e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800257e:	b480      	push	{r7}
 8002580:	b083      	sub	sp, #12
 8002582:	af00      	add	r7, sp, #0
 8002584:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800258c:	b2db      	uxtb	r3, r3
 800258e:	2b02      	cmp	r3, #2
 8002590:	d004      	beq.n	800259c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2280      	movs	r2, #128	; 0x80
 8002596:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e00c      	b.n	80025b6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2205      	movs	r2, #5
 80025a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f022 0201 	bic.w	r2, r2, #1
 80025b2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80025b4:	2300      	movs	r3, #0
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	370c      	adds	r7, #12
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr
	...

080025c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b089      	sub	sp, #36	; 0x24
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80025ce:	2300      	movs	r3, #0
 80025d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80025d2:	2300      	movs	r3, #0
 80025d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80025d6:	2300      	movs	r3, #0
 80025d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025da:	2300      	movs	r3, #0
 80025dc:	61fb      	str	r3, [r7, #28]
 80025de:	e165      	b.n	80028ac <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80025e0:	2201      	movs	r2, #1
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	fa02 f303 	lsl.w	r3, r2, r3
 80025e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	697a      	ldr	r2, [r7, #20]
 80025f0:	4013      	ands	r3, r2
 80025f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80025f4:	693a      	ldr	r2, [r7, #16]
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	429a      	cmp	r2, r3
 80025fa:	f040 8154 	bne.w	80028a6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	f003 0303 	and.w	r3, r3, #3
 8002606:	2b01      	cmp	r3, #1
 8002608:	d005      	beq.n	8002616 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002612:	2b02      	cmp	r3, #2
 8002614:	d130      	bne.n	8002678 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	005b      	lsls	r3, r3, #1
 8002620:	2203      	movs	r2, #3
 8002622:	fa02 f303 	lsl.w	r3, r2, r3
 8002626:	43db      	mvns	r3, r3
 8002628:	69ba      	ldr	r2, [r7, #24]
 800262a:	4013      	ands	r3, r2
 800262c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	68da      	ldr	r2, [r3, #12]
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	005b      	lsls	r3, r3, #1
 8002636:	fa02 f303 	lsl.w	r3, r2, r3
 800263a:	69ba      	ldr	r2, [r7, #24]
 800263c:	4313      	orrs	r3, r2
 800263e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	69ba      	ldr	r2, [r7, #24]
 8002644:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800264c:	2201      	movs	r2, #1
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	fa02 f303 	lsl.w	r3, r2, r3
 8002654:	43db      	mvns	r3, r3
 8002656:	69ba      	ldr	r2, [r7, #24]
 8002658:	4013      	ands	r3, r2
 800265a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	091b      	lsrs	r3, r3, #4
 8002662:	f003 0201 	and.w	r2, r3, #1
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	fa02 f303 	lsl.w	r3, r2, r3
 800266c:	69ba      	ldr	r2, [r7, #24]
 800266e:	4313      	orrs	r3, r2
 8002670:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f003 0303 	and.w	r3, r3, #3
 8002680:	2b03      	cmp	r3, #3
 8002682:	d017      	beq.n	80026b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	005b      	lsls	r3, r3, #1
 800268e:	2203      	movs	r2, #3
 8002690:	fa02 f303 	lsl.w	r3, r2, r3
 8002694:	43db      	mvns	r3, r3
 8002696:	69ba      	ldr	r2, [r7, #24]
 8002698:	4013      	ands	r3, r2
 800269a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	689a      	ldr	r2, [r3, #8]
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	005b      	lsls	r3, r3, #1
 80026a4:	fa02 f303 	lsl.w	r3, r2, r3
 80026a8:	69ba      	ldr	r2, [r7, #24]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	69ba      	ldr	r2, [r7, #24]
 80026b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f003 0303 	and.w	r3, r3, #3
 80026bc:	2b02      	cmp	r3, #2
 80026be:	d123      	bne.n	8002708 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	08da      	lsrs	r2, r3, #3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	3208      	adds	r2, #8
 80026c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	f003 0307 	and.w	r3, r3, #7
 80026d4:	009b      	lsls	r3, r3, #2
 80026d6:	220f      	movs	r2, #15
 80026d8:	fa02 f303 	lsl.w	r3, r2, r3
 80026dc:	43db      	mvns	r3, r3
 80026de:	69ba      	ldr	r2, [r7, #24]
 80026e0:	4013      	ands	r3, r2
 80026e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	691a      	ldr	r2, [r3, #16]
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	f003 0307 	and.w	r3, r3, #7
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	fa02 f303 	lsl.w	r3, r2, r3
 80026f4:	69ba      	ldr	r2, [r7, #24]
 80026f6:	4313      	orrs	r3, r2
 80026f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80026fa:	69fb      	ldr	r3, [r7, #28]
 80026fc:	08da      	lsrs	r2, r3, #3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	3208      	adds	r2, #8
 8002702:	69b9      	ldr	r1, [r7, #24]
 8002704:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	005b      	lsls	r3, r3, #1
 8002712:	2203      	movs	r2, #3
 8002714:	fa02 f303 	lsl.w	r3, r2, r3
 8002718:	43db      	mvns	r3, r3
 800271a:	69ba      	ldr	r2, [r7, #24]
 800271c:	4013      	ands	r3, r2
 800271e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f003 0203 	and.w	r2, r3, #3
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	005b      	lsls	r3, r3, #1
 800272c:	fa02 f303 	lsl.w	r3, r2, r3
 8002730:	69ba      	ldr	r2, [r7, #24]
 8002732:	4313      	orrs	r3, r2
 8002734:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	69ba      	ldr	r2, [r7, #24]
 800273a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002744:	2b00      	cmp	r3, #0
 8002746:	f000 80ae 	beq.w	80028a6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800274a:	2300      	movs	r3, #0
 800274c:	60fb      	str	r3, [r7, #12]
 800274e:	4b5d      	ldr	r3, [pc, #372]	; (80028c4 <HAL_GPIO_Init+0x300>)
 8002750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002752:	4a5c      	ldr	r2, [pc, #368]	; (80028c4 <HAL_GPIO_Init+0x300>)
 8002754:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002758:	6453      	str	r3, [r2, #68]	; 0x44
 800275a:	4b5a      	ldr	r3, [pc, #360]	; (80028c4 <HAL_GPIO_Init+0x300>)
 800275c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800275e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002762:	60fb      	str	r3, [r7, #12]
 8002764:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002766:	4a58      	ldr	r2, [pc, #352]	; (80028c8 <HAL_GPIO_Init+0x304>)
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	089b      	lsrs	r3, r3, #2
 800276c:	3302      	adds	r3, #2
 800276e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002772:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	f003 0303 	and.w	r3, r3, #3
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	220f      	movs	r2, #15
 800277e:	fa02 f303 	lsl.w	r3, r2, r3
 8002782:	43db      	mvns	r3, r3
 8002784:	69ba      	ldr	r2, [r7, #24]
 8002786:	4013      	ands	r3, r2
 8002788:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4a4f      	ldr	r2, [pc, #316]	; (80028cc <HAL_GPIO_Init+0x308>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d025      	beq.n	80027de <HAL_GPIO_Init+0x21a>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	4a4e      	ldr	r2, [pc, #312]	; (80028d0 <HAL_GPIO_Init+0x30c>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d01f      	beq.n	80027da <HAL_GPIO_Init+0x216>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4a4d      	ldr	r2, [pc, #308]	; (80028d4 <HAL_GPIO_Init+0x310>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d019      	beq.n	80027d6 <HAL_GPIO_Init+0x212>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4a4c      	ldr	r2, [pc, #304]	; (80028d8 <HAL_GPIO_Init+0x314>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d013      	beq.n	80027d2 <HAL_GPIO_Init+0x20e>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4a4b      	ldr	r2, [pc, #300]	; (80028dc <HAL_GPIO_Init+0x318>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d00d      	beq.n	80027ce <HAL_GPIO_Init+0x20a>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4a4a      	ldr	r2, [pc, #296]	; (80028e0 <HAL_GPIO_Init+0x31c>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d007      	beq.n	80027ca <HAL_GPIO_Init+0x206>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4a49      	ldr	r2, [pc, #292]	; (80028e4 <HAL_GPIO_Init+0x320>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d101      	bne.n	80027c6 <HAL_GPIO_Init+0x202>
 80027c2:	2306      	movs	r3, #6
 80027c4:	e00c      	b.n	80027e0 <HAL_GPIO_Init+0x21c>
 80027c6:	2307      	movs	r3, #7
 80027c8:	e00a      	b.n	80027e0 <HAL_GPIO_Init+0x21c>
 80027ca:	2305      	movs	r3, #5
 80027cc:	e008      	b.n	80027e0 <HAL_GPIO_Init+0x21c>
 80027ce:	2304      	movs	r3, #4
 80027d0:	e006      	b.n	80027e0 <HAL_GPIO_Init+0x21c>
 80027d2:	2303      	movs	r3, #3
 80027d4:	e004      	b.n	80027e0 <HAL_GPIO_Init+0x21c>
 80027d6:	2302      	movs	r3, #2
 80027d8:	e002      	b.n	80027e0 <HAL_GPIO_Init+0x21c>
 80027da:	2301      	movs	r3, #1
 80027dc:	e000      	b.n	80027e0 <HAL_GPIO_Init+0x21c>
 80027de:	2300      	movs	r3, #0
 80027e0:	69fa      	ldr	r2, [r7, #28]
 80027e2:	f002 0203 	and.w	r2, r2, #3
 80027e6:	0092      	lsls	r2, r2, #2
 80027e8:	4093      	lsls	r3, r2
 80027ea:	69ba      	ldr	r2, [r7, #24]
 80027ec:	4313      	orrs	r3, r2
 80027ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027f0:	4935      	ldr	r1, [pc, #212]	; (80028c8 <HAL_GPIO_Init+0x304>)
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	089b      	lsrs	r3, r3, #2
 80027f6:	3302      	adds	r3, #2
 80027f8:	69ba      	ldr	r2, [r7, #24]
 80027fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027fe:	4b3a      	ldr	r3, [pc, #232]	; (80028e8 <HAL_GPIO_Init+0x324>)
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	43db      	mvns	r3, r3
 8002808:	69ba      	ldr	r2, [r7, #24]
 800280a:	4013      	ands	r3, r2
 800280c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d003      	beq.n	8002822 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800281a:	69ba      	ldr	r2, [r7, #24]
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	4313      	orrs	r3, r2
 8002820:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002822:	4a31      	ldr	r2, [pc, #196]	; (80028e8 <HAL_GPIO_Init+0x324>)
 8002824:	69bb      	ldr	r3, [r7, #24]
 8002826:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002828:	4b2f      	ldr	r3, [pc, #188]	; (80028e8 <HAL_GPIO_Init+0x324>)
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	43db      	mvns	r3, r3
 8002832:	69ba      	ldr	r2, [r7, #24]
 8002834:	4013      	ands	r3, r2
 8002836:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002840:	2b00      	cmp	r3, #0
 8002842:	d003      	beq.n	800284c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002844:	69ba      	ldr	r2, [r7, #24]
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	4313      	orrs	r3, r2
 800284a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800284c:	4a26      	ldr	r2, [pc, #152]	; (80028e8 <HAL_GPIO_Init+0x324>)
 800284e:	69bb      	ldr	r3, [r7, #24]
 8002850:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002852:	4b25      	ldr	r3, [pc, #148]	; (80028e8 <HAL_GPIO_Init+0x324>)
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	43db      	mvns	r3, r3
 800285c:	69ba      	ldr	r2, [r7, #24]
 800285e:	4013      	ands	r3, r2
 8002860:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d003      	beq.n	8002876 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800286e:	69ba      	ldr	r2, [r7, #24]
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	4313      	orrs	r3, r2
 8002874:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002876:	4a1c      	ldr	r2, [pc, #112]	; (80028e8 <HAL_GPIO_Init+0x324>)
 8002878:	69bb      	ldr	r3, [r7, #24]
 800287a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800287c:	4b1a      	ldr	r3, [pc, #104]	; (80028e8 <HAL_GPIO_Init+0x324>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	43db      	mvns	r3, r3
 8002886:	69ba      	ldr	r2, [r7, #24]
 8002888:	4013      	ands	r3, r2
 800288a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d003      	beq.n	80028a0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002898:	69ba      	ldr	r2, [r7, #24]
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	4313      	orrs	r3, r2
 800289e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028a0:	4a11      	ldr	r2, [pc, #68]	; (80028e8 <HAL_GPIO_Init+0x324>)
 80028a2:	69bb      	ldr	r3, [r7, #24]
 80028a4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	3301      	adds	r3, #1
 80028aa:	61fb      	str	r3, [r7, #28]
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	2b0f      	cmp	r3, #15
 80028b0:	f67f ae96 	bls.w	80025e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80028b4:	bf00      	nop
 80028b6:	bf00      	nop
 80028b8:	3724      	adds	r7, #36	; 0x24
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr
 80028c2:	bf00      	nop
 80028c4:	40023800 	.word	0x40023800
 80028c8:	40013800 	.word	0x40013800
 80028cc:	40020000 	.word	0x40020000
 80028d0:	40020400 	.word	0x40020400
 80028d4:	40020800 	.word	0x40020800
 80028d8:	40020c00 	.word	0x40020c00
 80028dc:	40021000 	.word	0x40021000
 80028e0:	40021400 	.word	0x40021400
 80028e4:	40021800 	.word	0x40021800
 80028e8:	40013c00 	.word	0x40013c00

080028ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b083      	sub	sp, #12
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
 80028f4:	460b      	mov	r3, r1
 80028f6:	807b      	strh	r3, [r7, #2]
 80028f8:	4613      	mov	r3, r2
 80028fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028fc:	787b      	ldrb	r3, [r7, #1]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d003      	beq.n	800290a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002902:	887a      	ldrh	r2, [r7, #2]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002908:	e003      	b.n	8002912 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800290a:	887b      	ldrh	r3, [r7, #2]
 800290c:	041a      	lsls	r2, r3, #16
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	619a      	str	r2, [r3, #24]
}
 8002912:	bf00      	nop
 8002914:	370c      	adds	r7, #12
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr
	...

08002920 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b084      	sub	sp, #16
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d101      	bne.n	8002934 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e0cc      	b.n	8002ace <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002934:	4b68      	ldr	r3, [pc, #416]	; (8002ad8 <HAL_RCC_ClockConfig+0x1b8>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 030f 	and.w	r3, r3, #15
 800293c:	683a      	ldr	r2, [r7, #0]
 800293e:	429a      	cmp	r2, r3
 8002940:	d90c      	bls.n	800295c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002942:	4b65      	ldr	r3, [pc, #404]	; (8002ad8 <HAL_RCC_ClockConfig+0x1b8>)
 8002944:	683a      	ldr	r2, [r7, #0]
 8002946:	b2d2      	uxtb	r2, r2
 8002948:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800294a:	4b63      	ldr	r3, [pc, #396]	; (8002ad8 <HAL_RCC_ClockConfig+0x1b8>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 030f 	and.w	r3, r3, #15
 8002952:	683a      	ldr	r2, [r7, #0]
 8002954:	429a      	cmp	r2, r3
 8002956:	d001      	beq.n	800295c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	e0b8      	b.n	8002ace <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 0302 	and.w	r3, r3, #2
 8002964:	2b00      	cmp	r3, #0
 8002966:	d020      	beq.n	80029aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 0304 	and.w	r3, r3, #4
 8002970:	2b00      	cmp	r3, #0
 8002972:	d005      	beq.n	8002980 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002974:	4b59      	ldr	r3, [pc, #356]	; (8002adc <HAL_RCC_ClockConfig+0x1bc>)
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	4a58      	ldr	r2, [pc, #352]	; (8002adc <HAL_RCC_ClockConfig+0x1bc>)
 800297a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800297e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 0308 	and.w	r3, r3, #8
 8002988:	2b00      	cmp	r3, #0
 800298a:	d005      	beq.n	8002998 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800298c:	4b53      	ldr	r3, [pc, #332]	; (8002adc <HAL_RCC_ClockConfig+0x1bc>)
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	4a52      	ldr	r2, [pc, #328]	; (8002adc <HAL_RCC_ClockConfig+0x1bc>)
 8002992:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002996:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002998:	4b50      	ldr	r3, [pc, #320]	; (8002adc <HAL_RCC_ClockConfig+0x1bc>)
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	494d      	ldr	r1, [pc, #308]	; (8002adc <HAL_RCC_ClockConfig+0x1bc>)
 80029a6:	4313      	orrs	r3, r2
 80029a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 0301 	and.w	r3, r3, #1
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d044      	beq.n	8002a40 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d107      	bne.n	80029ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029be:	4b47      	ldr	r3, [pc, #284]	; (8002adc <HAL_RCC_ClockConfig+0x1bc>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d119      	bne.n	80029fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e07f      	b.n	8002ace <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	2b02      	cmp	r3, #2
 80029d4:	d003      	beq.n	80029de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029da:	2b03      	cmp	r3, #3
 80029dc:	d107      	bne.n	80029ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029de:	4b3f      	ldr	r3, [pc, #252]	; (8002adc <HAL_RCC_ClockConfig+0x1bc>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d109      	bne.n	80029fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e06f      	b.n	8002ace <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029ee:	4b3b      	ldr	r3, [pc, #236]	; (8002adc <HAL_RCC_ClockConfig+0x1bc>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 0302 	and.w	r3, r3, #2
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d101      	bne.n	80029fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e067      	b.n	8002ace <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029fe:	4b37      	ldr	r3, [pc, #220]	; (8002adc <HAL_RCC_ClockConfig+0x1bc>)
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	f023 0203 	bic.w	r2, r3, #3
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	4934      	ldr	r1, [pc, #208]	; (8002adc <HAL_RCC_ClockConfig+0x1bc>)
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a10:	f7ff fc04 	bl	800221c <HAL_GetTick>
 8002a14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a16:	e00a      	b.n	8002a2e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a18:	f7ff fc00 	bl	800221c <HAL_GetTick>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d901      	bls.n	8002a2e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e04f      	b.n	8002ace <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a2e:	4b2b      	ldr	r3, [pc, #172]	; (8002adc <HAL_RCC_ClockConfig+0x1bc>)
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	f003 020c 	and.w	r2, r3, #12
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d1eb      	bne.n	8002a18 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a40:	4b25      	ldr	r3, [pc, #148]	; (8002ad8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 030f 	and.w	r3, r3, #15
 8002a48:	683a      	ldr	r2, [r7, #0]
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d20c      	bcs.n	8002a68 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a4e:	4b22      	ldr	r3, [pc, #136]	; (8002ad8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a50:	683a      	ldr	r2, [r7, #0]
 8002a52:	b2d2      	uxtb	r2, r2
 8002a54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a56:	4b20      	ldr	r3, [pc, #128]	; (8002ad8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 030f 	and.w	r3, r3, #15
 8002a5e:	683a      	ldr	r2, [r7, #0]
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d001      	beq.n	8002a68 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e032      	b.n	8002ace <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 0304 	and.w	r3, r3, #4
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d008      	beq.n	8002a86 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a74:	4b19      	ldr	r3, [pc, #100]	; (8002adc <HAL_RCC_ClockConfig+0x1bc>)
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	4916      	ldr	r1, [pc, #88]	; (8002adc <HAL_RCC_ClockConfig+0x1bc>)
 8002a82:	4313      	orrs	r3, r2
 8002a84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0308 	and.w	r3, r3, #8
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d009      	beq.n	8002aa6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a92:	4b12      	ldr	r3, [pc, #72]	; (8002adc <HAL_RCC_ClockConfig+0x1bc>)
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	691b      	ldr	r3, [r3, #16]
 8002a9e:	00db      	lsls	r3, r3, #3
 8002aa0:	490e      	ldr	r1, [pc, #56]	; (8002adc <HAL_RCC_ClockConfig+0x1bc>)
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002aa6:	f000 f855 	bl	8002b54 <HAL_RCC_GetSysClockFreq>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	4b0b      	ldr	r3, [pc, #44]	; (8002adc <HAL_RCC_ClockConfig+0x1bc>)
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	091b      	lsrs	r3, r3, #4
 8002ab2:	f003 030f 	and.w	r3, r3, #15
 8002ab6:	490a      	ldr	r1, [pc, #40]	; (8002ae0 <HAL_RCC_ClockConfig+0x1c0>)
 8002ab8:	5ccb      	ldrb	r3, [r1, r3]
 8002aba:	fa22 f303 	lsr.w	r3, r2, r3
 8002abe:	4a09      	ldr	r2, [pc, #36]	; (8002ae4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ac0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002ac2:	4b09      	ldr	r3, [pc, #36]	; (8002ae8 <HAL_RCC_ClockConfig+0x1c8>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f7ff fb64 	bl	8002194 <HAL_InitTick>

  return HAL_OK;
 8002acc:	2300      	movs	r3, #0
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3710      	adds	r7, #16
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	40023c00 	.word	0x40023c00
 8002adc:	40023800 	.word	0x40023800
 8002ae0:	08009644 	.word	0x08009644
 8002ae4:	20000000 	.word	0x20000000
 8002ae8:	20000004 	.word	0x20000004

08002aec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002aec:	b480      	push	{r7}
 8002aee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002af0:	4b03      	ldr	r3, [pc, #12]	; (8002b00 <HAL_RCC_GetHCLKFreq+0x14>)
 8002af2:	681b      	ldr	r3, [r3, #0]
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr
 8002afe:	bf00      	nop
 8002b00:	20000000 	.word	0x20000000

08002b04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002b08:	f7ff fff0 	bl	8002aec <HAL_RCC_GetHCLKFreq>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	4b05      	ldr	r3, [pc, #20]	; (8002b24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	0a9b      	lsrs	r3, r3, #10
 8002b14:	f003 0307 	and.w	r3, r3, #7
 8002b18:	4903      	ldr	r1, [pc, #12]	; (8002b28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b1a:	5ccb      	ldrb	r3, [r1, r3]
 8002b1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	40023800 	.word	0x40023800
 8002b28:	08009654 	.word	0x08009654

08002b2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002b30:	f7ff ffdc 	bl	8002aec <HAL_RCC_GetHCLKFreq>
 8002b34:	4602      	mov	r2, r0
 8002b36:	4b05      	ldr	r3, [pc, #20]	; (8002b4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	0b5b      	lsrs	r3, r3, #13
 8002b3c:	f003 0307 	and.w	r3, r3, #7
 8002b40:	4903      	ldr	r1, [pc, #12]	; (8002b50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b42:	5ccb      	ldrb	r3, [r1, r3]
 8002b44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	40023800 	.word	0x40023800
 8002b50:	08009654 	.word	0x08009654

08002b54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b58:	b0ae      	sub	sp, #184	; 0xb8
 8002b5a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002b62:	2300      	movs	r3, #0
 8002b64:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002b74:	2300      	movs	r3, #0
 8002b76:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b7a:	4bcb      	ldr	r3, [pc, #812]	; (8002ea8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	f003 030c 	and.w	r3, r3, #12
 8002b82:	2b0c      	cmp	r3, #12
 8002b84:	f200 8206 	bhi.w	8002f94 <HAL_RCC_GetSysClockFreq+0x440>
 8002b88:	a201      	add	r2, pc, #4	; (adr r2, 8002b90 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b8e:	bf00      	nop
 8002b90:	08002bc5 	.word	0x08002bc5
 8002b94:	08002f95 	.word	0x08002f95
 8002b98:	08002f95 	.word	0x08002f95
 8002b9c:	08002f95 	.word	0x08002f95
 8002ba0:	08002bcd 	.word	0x08002bcd
 8002ba4:	08002f95 	.word	0x08002f95
 8002ba8:	08002f95 	.word	0x08002f95
 8002bac:	08002f95 	.word	0x08002f95
 8002bb0:	08002bd5 	.word	0x08002bd5
 8002bb4:	08002f95 	.word	0x08002f95
 8002bb8:	08002f95 	.word	0x08002f95
 8002bbc:	08002f95 	.word	0x08002f95
 8002bc0:	08002dc5 	.word	0x08002dc5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002bc4:	4bb9      	ldr	r3, [pc, #740]	; (8002eac <HAL_RCC_GetSysClockFreq+0x358>)
 8002bc6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002bca:	e1e7      	b.n	8002f9c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002bcc:	4bb8      	ldr	r3, [pc, #736]	; (8002eb0 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002bce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002bd2:	e1e3      	b.n	8002f9c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002bd4:	4bb4      	ldr	r3, [pc, #720]	; (8002ea8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002bdc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002be0:	4bb1      	ldr	r3, [pc, #708]	; (8002ea8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d071      	beq.n	8002cd0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bec:	4bae      	ldr	r3, [pc, #696]	; (8002ea8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	099b      	lsrs	r3, r3, #6
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002bf8:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002bfc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002c00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c04:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002c08:	2300      	movs	r3, #0
 8002c0a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002c0e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002c12:	4622      	mov	r2, r4
 8002c14:	462b      	mov	r3, r5
 8002c16:	f04f 0000 	mov.w	r0, #0
 8002c1a:	f04f 0100 	mov.w	r1, #0
 8002c1e:	0159      	lsls	r1, r3, #5
 8002c20:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c24:	0150      	lsls	r0, r2, #5
 8002c26:	4602      	mov	r2, r0
 8002c28:	460b      	mov	r3, r1
 8002c2a:	4621      	mov	r1, r4
 8002c2c:	1a51      	subs	r1, r2, r1
 8002c2e:	6439      	str	r1, [r7, #64]	; 0x40
 8002c30:	4629      	mov	r1, r5
 8002c32:	eb63 0301 	sbc.w	r3, r3, r1
 8002c36:	647b      	str	r3, [r7, #68]	; 0x44
 8002c38:	f04f 0200 	mov.w	r2, #0
 8002c3c:	f04f 0300 	mov.w	r3, #0
 8002c40:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002c44:	4649      	mov	r1, r9
 8002c46:	018b      	lsls	r3, r1, #6
 8002c48:	4641      	mov	r1, r8
 8002c4a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c4e:	4641      	mov	r1, r8
 8002c50:	018a      	lsls	r2, r1, #6
 8002c52:	4641      	mov	r1, r8
 8002c54:	1a51      	subs	r1, r2, r1
 8002c56:	63b9      	str	r1, [r7, #56]	; 0x38
 8002c58:	4649      	mov	r1, r9
 8002c5a:	eb63 0301 	sbc.w	r3, r3, r1
 8002c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c60:	f04f 0200 	mov.w	r2, #0
 8002c64:	f04f 0300 	mov.w	r3, #0
 8002c68:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002c6c:	4649      	mov	r1, r9
 8002c6e:	00cb      	lsls	r3, r1, #3
 8002c70:	4641      	mov	r1, r8
 8002c72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c76:	4641      	mov	r1, r8
 8002c78:	00ca      	lsls	r2, r1, #3
 8002c7a:	4610      	mov	r0, r2
 8002c7c:	4619      	mov	r1, r3
 8002c7e:	4603      	mov	r3, r0
 8002c80:	4622      	mov	r2, r4
 8002c82:	189b      	adds	r3, r3, r2
 8002c84:	633b      	str	r3, [r7, #48]	; 0x30
 8002c86:	462b      	mov	r3, r5
 8002c88:	460a      	mov	r2, r1
 8002c8a:	eb42 0303 	adc.w	r3, r2, r3
 8002c8e:	637b      	str	r3, [r7, #52]	; 0x34
 8002c90:	f04f 0200 	mov.w	r2, #0
 8002c94:	f04f 0300 	mov.w	r3, #0
 8002c98:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002c9c:	4629      	mov	r1, r5
 8002c9e:	024b      	lsls	r3, r1, #9
 8002ca0:	4621      	mov	r1, r4
 8002ca2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002ca6:	4621      	mov	r1, r4
 8002ca8:	024a      	lsls	r2, r1, #9
 8002caa:	4610      	mov	r0, r2
 8002cac:	4619      	mov	r1, r3
 8002cae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002cb8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002cbc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002cc0:	f7fe f802 	bl	8000cc8 <__aeabi_uldivmod>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	460b      	mov	r3, r1
 8002cc8:	4613      	mov	r3, r2
 8002cca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002cce:	e067      	b.n	8002da0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cd0:	4b75      	ldr	r3, [pc, #468]	; (8002ea8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	099b      	lsrs	r3, r3, #6
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002cdc:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002ce0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002ce4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ce8:	67bb      	str	r3, [r7, #120]	; 0x78
 8002cea:	2300      	movs	r3, #0
 8002cec:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002cee:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002cf2:	4622      	mov	r2, r4
 8002cf4:	462b      	mov	r3, r5
 8002cf6:	f04f 0000 	mov.w	r0, #0
 8002cfa:	f04f 0100 	mov.w	r1, #0
 8002cfe:	0159      	lsls	r1, r3, #5
 8002d00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d04:	0150      	lsls	r0, r2, #5
 8002d06:	4602      	mov	r2, r0
 8002d08:	460b      	mov	r3, r1
 8002d0a:	4621      	mov	r1, r4
 8002d0c:	1a51      	subs	r1, r2, r1
 8002d0e:	62b9      	str	r1, [r7, #40]	; 0x28
 8002d10:	4629      	mov	r1, r5
 8002d12:	eb63 0301 	sbc.w	r3, r3, r1
 8002d16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d18:	f04f 0200 	mov.w	r2, #0
 8002d1c:	f04f 0300 	mov.w	r3, #0
 8002d20:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002d24:	4649      	mov	r1, r9
 8002d26:	018b      	lsls	r3, r1, #6
 8002d28:	4641      	mov	r1, r8
 8002d2a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d2e:	4641      	mov	r1, r8
 8002d30:	018a      	lsls	r2, r1, #6
 8002d32:	4641      	mov	r1, r8
 8002d34:	ebb2 0a01 	subs.w	sl, r2, r1
 8002d38:	4649      	mov	r1, r9
 8002d3a:	eb63 0b01 	sbc.w	fp, r3, r1
 8002d3e:	f04f 0200 	mov.w	r2, #0
 8002d42:	f04f 0300 	mov.w	r3, #0
 8002d46:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002d4a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002d4e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d52:	4692      	mov	sl, r2
 8002d54:	469b      	mov	fp, r3
 8002d56:	4623      	mov	r3, r4
 8002d58:	eb1a 0303 	adds.w	r3, sl, r3
 8002d5c:	623b      	str	r3, [r7, #32]
 8002d5e:	462b      	mov	r3, r5
 8002d60:	eb4b 0303 	adc.w	r3, fp, r3
 8002d64:	627b      	str	r3, [r7, #36]	; 0x24
 8002d66:	f04f 0200 	mov.w	r2, #0
 8002d6a:	f04f 0300 	mov.w	r3, #0
 8002d6e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002d72:	4629      	mov	r1, r5
 8002d74:	028b      	lsls	r3, r1, #10
 8002d76:	4621      	mov	r1, r4
 8002d78:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d7c:	4621      	mov	r1, r4
 8002d7e:	028a      	lsls	r2, r1, #10
 8002d80:	4610      	mov	r0, r2
 8002d82:	4619      	mov	r1, r3
 8002d84:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002d88:	2200      	movs	r2, #0
 8002d8a:	673b      	str	r3, [r7, #112]	; 0x70
 8002d8c:	677a      	str	r2, [r7, #116]	; 0x74
 8002d8e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002d92:	f7fd ff99 	bl	8000cc8 <__aeabi_uldivmod>
 8002d96:	4602      	mov	r2, r0
 8002d98:	460b      	mov	r3, r1
 8002d9a:	4613      	mov	r3, r2
 8002d9c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002da0:	4b41      	ldr	r3, [pc, #260]	; (8002ea8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	0c1b      	lsrs	r3, r3, #16
 8002da6:	f003 0303 	and.w	r3, r3, #3
 8002daa:	3301      	adds	r3, #1
 8002dac:	005b      	lsls	r3, r3, #1
 8002dae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002db2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002db6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002dba:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dbe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002dc2:	e0eb      	b.n	8002f9c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002dc4:	4b38      	ldr	r3, [pc, #224]	; (8002ea8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002dcc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002dd0:	4b35      	ldr	r3, [pc, #212]	; (8002ea8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d06b      	beq.n	8002eb4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ddc:	4b32      	ldr	r3, [pc, #200]	; (8002ea8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	099b      	lsrs	r3, r3, #6
 8002de2:	2200      	movs	r2, #0
 8002de4:	66bb      	str	r3, [r7, #104]	; 0x68
 8002de6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002de8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002dea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dee:	663b      	str	r3, [r7, #96]	; 0x60
 8002df0:	2300      	movs	r3, #0
 8002df2:	667b      	str	r3, [r7, #100]	; 0x64
 8002df4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002df8:	4622      	mov	r2, r4
 8002dfa:	462b      	mov	r3, r5
 8002dfc:	f04f 0000 	mov.w	r0, #0
 8002e00:	f04f 0100 	mov.w	r1, #0
 8002e04:	0159      	lsls	r1, r3, #5
 8002e06:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e0a:	0150      	lsls	r0, r2, #5
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	460b      	mov	r3, r1
 8002e10:	4621      	mov	r1, r4
 8002e12:	1a51      	subs	r1, r2, r1
 8002e14:	61b9      	str	r1, [r7, #24]
 8002e16:	4629      	mov	r1, r5
 8002e18:	eb63 0301 	sbc.w	r3, r3, r1
 8002e1c:	61fb      	str	r3, [r7, #28]
 8002e1e:	f04f 0200 	mov.w	r2, #0
 8002e22:	f04f 0300 	mov.w	r3, #0
 8002e26:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002e2a:	4659      	mov	r1, fp
 8002e2c:	018b      	lsls	r3, r1, #6
 8002e2e:	4651      	mov	r1, sl
 8002e30:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e34:	4651      	mov	r1, sl
 8002e36:	018a      	lsls	r2, r1, #6
 8002e38:	4651      	mov	r1, sl
 8002e3a:	ebb2 0801 	subs.w	r8, r2, r1
 8002e3e:	4659      	mov	r1, fp
 8002e40:	eb63 0901 	sbc.w	r9, r3, r1
 8002e44:	f04f 0200 	mov.w	r2, #0
 8002e48:	f04f 0300 	mov.w	r3, #0
 8002e4c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e50:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e54:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e58:	4690      	mov	r8, r2
 8002e5a:	4699      	mov	r9, r3
 8002e5c:	4623      	mov	r3, r4
 8002e5e:	eb18 0303 	adds.w	r3, r8, r3
 8002e62:	613b      	str	r3, [r7, #16]
 8002e64:	462b      	mov	r3, r5
 8002e66:	eb49 0303 	adc.w	r3, r9, r3
 8002e6a:	617b      	str	r3, [r7, #20]
 8002e6c:	f04f 0200 	mov.w	r2, #0
 8002e70:	f04f 0300 	mov.w	r3, #0
 8002e74:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002e78:	4629      	mov	r1, r5
 8002e7a:	024b      	lsls	r3, r1, #9
 8002e7c:	4621      	mov	r1, r4
 8002e7e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002e82:	4621      	mov	r1, r4
 8002e84:	024a      	lsls	r2, r1, #9
 8002e86:	4610      	mov	r0, r2
 8002e88:	4619      	mov	r1, r3
 8002e8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002e8e:	2200      	movs	r2, #0
 8002e90:	65bb      	str	r3, [r7, #88]	; 0x58
 8002e92:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002e94:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002e98:	f7fd ff16 	bl	8000cc8 <__aeabi_uldivmod>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	460b      	mov	r3, r1
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002ea6:	e065      	b.n	8002f74 <HAL_RCC_GetSysClockFreq+0x420>
 8002ea8:	40023800 	.word	0x40023800
 8002eac:	00f42400 	.word	0x00f42400
 8002eb0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002eb4:	4b3d      	ldr	r3, [pc, #244]	; (8002fac <HAL_RCC_GetSysClockFreq+0x458>)
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	099b      	lsrs	r3, r3, #6
 8002eba:	2200      	movs	r2, #0
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	4611      	mov	r1, r2
 8002ec0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002ec4:	653b      	str	r3, [r7, #80]	; 0x50
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	657b      	str	r3, [r7, #84]	; 0x54
 8002eca:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002ece:	4642      	mov	r2, r8
 8002ed0:	464b      	mov	r3, r9
 8002ed2:	f04f 0000 	mov.w	r0, #0
 8002ed6:	f04f 0100 	mov.w	r1, #0
 8002eda:	0159      	lsls	r1, r3, #5
 8002edc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ee0:	0150      	lsls	r0, r2, #5
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	460b      	mov	r3, r1
 8002ee6:	4641      	mov	r1, r8
 8002ee8:	1a51      	subs	r1, r2, r1
 8002eea:	60b9      	str	r1, [r7, #8]
 8002eec:	4649      	mov	r1, r9
 8002eee:	eb63 0301 	sbc.w	r3, r3, r1
 8002ef2:	60fb      	str	r3, [r7, #12]
 8002ef4:	f04f 0200 	mov.w	r2, #0
 8002ef8:	f04f 0300 	mov.w	r3, #0
 8002efc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002f00:	4659      	mov	r1, fp
 8002f02:	018b      	lsls	r3, r1, #6
 8002f04:	4651      	mov	r1, sl
 8002f06:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f0a:	4651      	mov	r1, sl
 8002f0c:	018a      	lsls	r2, r1, #6
 8002f0e:	4651      	mov	r1, sl
 8002f10:	1a54      	subs	r4, r2, r1
 8002f12:	4659      	mov	r1, fp
 8002f14:	eb63 0501 	sbc.w	r5, r3, r1
 8002f18:	f04f 0200 	mov.w	r2, #0
 8002f1c:	f04f 0300 	mov.w	r3, #0
 8002f20:	00eb      	lsls	r3, r5, #3
 8002f22:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f26:	00e2      	lsls	r2, r4, #3
 8002f28:	4614      	mov	r4, r2
 8002f2a:	461d      	mov	r5, r3
 8002f2c:	4643      	mov	r3, r8
 8002f2e:	18e3      	adds	r3, r4, r3
 8002f30:	603b      	str	r3, [r7, #0]
 8002f32:	464b      	mov	r3, r9
 8002f34:	eb45 0303 	adc.w	r3, r5, r3
 8002f38:	607b      	str	r3, [r7, #4]
 8002f3a:	f04f 0200 	mov.w	r2, #0
 8002f3e:	f04f 0300 	mov.w	r3, #0
 8002f42:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002f46:	4629      	mov	r1, r5
 8002f48:	028b      	lsls	r3, r1, #10
 8002f4a:	4621      	mov	r1, r4
 8002f4c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f50:	4621      	mov	r1, r4
 8002f52:	028a      	lsls	r2, r1, #10
 8002f54:	4610      	mov	r0, r2
 8002f56:	4619      	mov	r1, r3
 8002f58:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f60:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002f62:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002f66:	f7fd feaf 	bl	8000cc8 <__aeabi_uldivmod>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	460b      	mov	r3, r1
 8002f6e:	4613      	mov	r3, r2
 8002f70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002f74:	4b0d      	ldr	r3, [pc, #52]	; (8002fac <HAL_RCC_GetSysClockFreq+0x458>)
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	0f1b      	lsrs	r3, r3, #28
 8002f7a:	f003 0307 	and.w	r3, r3, #7
 8002f7e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8002f82:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002f86:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002f8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f8e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002f92:	e003      	b.n	8002f9c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f94:	4b06      	ldr	r3, [pc, #24]	; (8002fb0 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002f96:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002f9a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f9c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	37b8      	adds	r7, #184	; 0xb8
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002faa:	bf00      	nop
 8002fac:	40023800 	.word	0x40023800
 8002fb0:	00f42400 	.word	0x00f42400

08002fb4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b086      	sub	sp, #24
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d101      	bne.n	8002fc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e28d      	b.n	80034e2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0301 	and.w	r3, r3, #1
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	f000 8083 	beq.w	80030da <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002fd4:	4b94      	ldr	r3, [pc, #592]	; (8003228 <HAL_RCC_OscConfig+0x274>)
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	f003 030c 	and.w	r3, r3, #12
 8002fdc:	2b04      	cmp	r3, #4
 8002fde:	d019      	beq.n	8003014 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002fe0:	4b91      	ldr	r3, [pc, #580]	; (8003228 <HAL_RCC_OscConfig+0x274>)
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002fe8:	2b08      	cmp	r3, #8
 8002fea:	d106      	bne.n	8002ffa <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002fec:	4b8e      	ldr	r3, [pc, #568]	; (8003228 <HAL_RCC_OscConfig+0x274>)
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ff4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ff8:	d00c      	beq.n	8003014 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ffa:	4b8b      	ldr	r3, [pc, #556]	; (8003228 <HAL_RCC_OscConfig+0x274>)
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003002:	2b0c      	cmp	r3, #12
 8003004:	d112      	bne.n	800302c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003006:	4b88      	ldr	r3, [pc, #544]	; (8003228 <HAL_RCC_OscConfig+0x274>)
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800300e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003012:	d10b      	bne.n	800302c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003014:	4b84      	ldr	r3, [pc, #528]	; (8003228 <HAL_RCC_OscConfig+0x274>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800301c:	2b00      	cmp	r3, #0
 800301e:	d05b      	beq.n	80030d8 <HAL_RCC_OscConfig+0x124>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d157      	bne.n	80030d8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	e25a      	b.n	80034e2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003034:	d106      	bne.n	8003044 <HAL_RCC_OscConfig+0x90>
 8003036:	4b7c      	ldr	r3, [pc, #496]	; (8003228 <HAL_RCC_OscConfig+0x274>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a7b      	ldr	r2, [pc, #492]	; (8003228 <HAL_RCC_OscConfig+0x274>)
 800303c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003040:	6013      	str	r3, [r2, #0]
 8003042:	e01d      	b.n	8003080 <HAL_RCC_OscConfig+0xcc>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800304c:	d10c      	bne.n	8003068 <HAL_RCC_OscConfig+0xb4>
 800304e:	4b76      	ldr	r3, [pc, #472]	; (8003228 <HAL_RCC_OscConfig+0x274>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a75      	ldr	r2, [pc, #468]	; (8003228 <HAL_RCC_OscConfig+0x274>)
 8003054:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003058:	6013      	str	r3, [r2, #0]
 800305a:	4b73      	ldr	r3, [pc, #460]	; (8003228 <HAL_RCC_OscConfig+0x274>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a72      	ldr	r2, [pc, #456]	; (8003228 <HAL_RCC_OscConfig+0x274>)
 8003060:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003064:	6013      	str	r3, [r2, #0]
 8003066:	e00b      	b.n	8003080 <HAL_RCC_OscConfig+0xcc>
 8003068:	4b6f      	ldr	r3, [pc, #444]	; (8003228 <HAL_RCC_OscConfig+0x274>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a6e      	ldr	r2, [pc, #440]	; (8003228 <HAL_RCC_OscConfig+0x274>)
 800306e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003072:	6013      	str	r3, [r2, #0]
 8003074:	4b6c      	ldr	r3, [pc, #432]	; (8003228 <HAL_RCC_OscConfig+0x274>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a6b      	ldr	r2, [pc, #428]	; (8003228 <HAL_RCC_OscConfig+0x274>)
 800307a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800307e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d013      	beq.n	80030b0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003088:	f7ff f8c8 	bl	800221c <HAL_GetTick>
 800308c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800308e:	e008      	b.n	80030a2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003090:	f7ff f8c4 	bl	800221c <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	2b64      	cmp	r3, #100	; 0x64
 800309c:	d901      	bls.n	80030a2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	e21f      	b.n	80034e2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030a2:	4b61      	ldr	r3, [pc, #388]	; (8003228 <HAL_RCC_OscConfig+0x274>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d0f0      	beq.n	8003090 <HAL_RCC_OscConfig+0xdc>
 80030ae:	e014      	b.n	80030da <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030b0:	f7ff f8b4 	bl	800221c <HAL_GetTick>
 80030b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030b6:	e008      	b.n	80030ca <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030b8:	f7ff f8b0 	bl	800221c <HAL_GetTick>
 80030bc:	4602      	mov	r2, r0
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	2b64      	cmp	r3, #100	; 0x64
 80030c4:	d901      	bls.n	80030ca <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	e20b      	b.n	80034e2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030ca:	4b57      	ldr	r3, [pc, #348]	; (8003228 <HAL_RCC_OscConfig+0x274>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d1f0      	bne.n	80030b8 <HAL_RCC_OscConfig+0x104>
 80030d6:	e000      	b.n	80030da <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 0302 	and.w	r3, r3, #2
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d06f      	beq.n	80031c6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80030e6:	4b50      	ldr	r3, [pc, #320]	; (8003228 <HAL_RCC_OscConfig+0x274>)
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	f003 030c 	and.w	r3, r3, #12
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d017      	beq.n	8003122 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80030f2:	4b4d      	ldr	r3, [pc, #308]	; (8003228 <HAL_RCC_OscConfig+0x274>)
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80030fa:	2b08      	cmp	r3, #8
 80030fc:	d105      	bne.n	800310a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80030fe:	4b4a      	ldr	r3, [pc, #296]	; (8003228 <HAL_RCC_OscConfig+0x274>)
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003106:	2b00      	cmp	r3, #0
 8003108:	d00b      	beq.n	8003122 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800310a:	4b47      	ldr	r3, [pc, #284]	; (8003228 <HAL_RCC_OscConfig+0x274>)
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003112:	2b0c      	cmp	r3, #12
 8003114:	d11c      	bne.n	8003150 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003116:	4b44      	ldr	r3, [pc, #272]	; (8003228 <HAL_RCC_OscConfig+0x274>)
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d116      	bne.n	8003150 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003122:	4b41      	ldr	r3, [pc, #260]	; (8003228 <HAL_RCC_OscConfig+0x274>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0302 	and.w	r3, r3, #2
 800312a:	2b00      	cmp	r3, #0
 800312c:	d005      	beq.n	800313a <HAL_RCC_OscConfig+0x186>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	2b01      	cmp	r3, #1
 8003134:	d001      	beq.n	800313a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e1d3      	b.n	80034e2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800313a:	4b3b      	ldr	r3, [pc, #236]	; (8003228 <HAL_RCC_OscConfig+0x274>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	691b      	ldr	r3, [r3, #16]
 8003146:	00db      	lsls	r3, r3, #3
 8003148:	4937      	ldr	r1, [pc, #220]	; (8003228 <HAL_RCC_OscConfig+0x274>)
 800314a:	4313      	orrs	r3, r2
 800314c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800314e:	e03a      	b.n	80031c6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d020      	beq.n	800319a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003158:	4b34      	ldr	r3, [pc, #208]	; (800322c <HAL_RCC_OscConfig+0x278>)
 800315a:	2201      	movs	r2, #1
 800315c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800315e:	f7ff f85d 	bl	800221c <HAL_GetTick>
 8003162:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003164:	e008      	b.n	8003178 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003166:	f7ff f859 	bl	800221c <HAL_GetTick>
 800316a:	4602      	mov	r2, r0
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	1ad3      	subs	r3, r2, r3
 8003170:	2b02      	cmp	r3, #2
 8003172:	d901      	bls.n	8003178 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003174:	2303      	movs	r3, #3
 8003176:	e1b4      	b.n	80034e2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003178:	4b2b      	ldr	r3, [pc, #172]	; (8003228 <HAL_RCC_OscConfig+0x274>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 0302 	and.w	r3, r3, #2
 8003180:	2b00      	cmp	r3, #0
 8003182:	d0f0      	beq.n	8003166 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003184:	4b28      	ldr	r3, [pc, #160]	; (8003228 <HAL_RCC_OscConfig+0x274>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	691b      	ldr	r3, [r3, #16]
 8003190:	00db      	lsls	r3, r3, #3
 8003192:	4925      	ldr	r1, [pc, #148]	; (8003228 <HAL_RCC_OscConfig+0x274>)
 8003194:	4313      	orrs	r3, r2
 8003196:	600b      	str	r3, [r1, #0]
 8003198:	e015      	b.n	80031c6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800319a:	4b24      	ldr	r3, [pc, #144]	; (800322c <HAL_RCC_OscConfig+0x278>)
 800319c:	2200      	movs	r2, #0
 800319e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031a0:	f7ff f83c 	bl	800221c <HAL_GetTick>
 80031a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031a6:	e008      	b.n	80031ba <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031a8:	f7ff f838 	bl	800221c <HAL_GetTick>
 80031ac:	4602      	mov	r2, r0
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	2b02      	cmp	r3, #2
 80031b4:	d901      	bls.n	80031ba <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80031b6:	2303      	movs	r3, #3
 80031b8:	e193      	b.n	80034e2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031ba:	4b1b      	ldr	r3, [pc, #108]	; (8003228 <HAL_RCC_OscConfig+0x274>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0302 	and.w	r3, r3, #2
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d1f0      	bne.n	80031a8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0308 	and.w	r3, r3, #8
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d036      	beq.n	8003240 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	695b      	ldr	r3, [r3, #20]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d016      	beq.n	8003208 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031da:	4b15      	ldr	r3, [pc, #84]	; (8003230 <HAL_RCC_OscConfig+0x27c>)
 80031dc:	2201      	movs	r2, #1
 80031de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031e0:	f7ff f81c 	bl	800221c <HAL_GetTick>
 80031e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031e6:	e008      	b.n	80031fa <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031e8:	f7ff f818 	bl	800221c <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	d901      	bls.n	80031fa <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80031f6:	2303      	movs	r3, #3
 80031f8:	e173      	b.n	80034e2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031fa:	4b0b      	ldr	r3, [pc, #44]	; (8003228 <HAL_RCC_OscConfig+0x274>)
 80031fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031fe:	f003 0302 	and.w	r3, r3, #2
 8003202:	2b00      	cmp	r3, #0
 8003204:	d0f0      	beq.n	80031e8 <HAL_RCC_OscConfig+0x234>
 8003206:	e01b      	b.n	8003240 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003208:	4b09      	ldr	r3, [pc, #36]	; (8003230 <HAL_RCC_OscConfig+0x27c>)
 800320a:	2200      	movs	r2, #0
 800320c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800320e:	f7ff f805 	bl	800221c <HAL_GetTick>
 8003212:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003214:	e00e      	b.n	8003234 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003216:	f7ff f801 	bl	800221c <HAL_GetTick>
 800321a:	4602      	mov	r2, r0
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	1ad3      	subs	r3, r2, r3
 8003220:	2b02      	cmp	r3, #2
 8003222:	d907      	bls.n	8003234 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003224:	2303      	movs	r3, #3
 8003226:	e15c      	b.n	80034e2 <HAL_RCC_OscConfig+0x52e>
 8003228:	40023800 	.word	0x40023800
 800322c:	42470000 	.word	0x42470000
 8003230:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003234:	4b8a      	ldr	r3, [pc, #552]	; (8003460 <HAL_RCC_OscConfig+0x4ac>)
 8003236:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003238:	f003 0302 	and.w	r3, r3, #2
 800323c:	2b00      	cmp	r3, #0
 800323e:	d1ea      	bne.n	8003216 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0304 	and.w	r3, r3, #4
 8003248:	2b00      	cmp	r3, #0
 800324a:	f000 8097 	beq.w	800337c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800324e:	2300      	movs	r3, #0
 8003250:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003252:	4b83      	ldr	r3, [pc, #524]	; (8003460 <HAL_RCC_OscConfig+0x4ac>)
 8003254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003256:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800325a:	2b00      	cmp	r3, #0
 800325c:	d10f      	bne.n	800327e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800325e:	2300      	movs	r3, #0
 8003260:	60bb      	str	r3, [r7, #8]
 8003262:	4b7f      	ldr	r3, [pc, #508]	; (8003460 <HAL_RCC_OscConfig+0x4ac>)
 8003264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003266:	4a7e      	ldr	r2, [pc, #504]	; (8003460 <HAL_RCC_OscConfig+0x4ac>)
 8003268:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800326c:	6413      	str	r3, [r2, #64]	; 0x40
 800326e:	4b7c      	ldr	r3, [pc, #496]	; (8003460 <HAL_RCC_OscConfig+0x4ac>)
 8003270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003272:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003276:	60bb      	str	r3, [r7, #8]
 8003278:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800327a:	2301      	movs	r3, #1
 800327c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800327e:	4b79      	ldr	r3, [pc, #484]	; (8003464 <HAL_RCC_OscConfig+0x4b0>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003286:	2b00      	cmp	r3, #0
 8003288:	d118      	bne.n	80032bc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800328a:	4b76      	ldr	r3, [pc, #472]	; (8003464 <HAL_RCC_OscConfig+0x4b0>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a75      	ldr	r2, [pc, #468]	; (8003464 <HAL_RCC_OscConfig+0x4b0>)
 8003290:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003294:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003296:	f7fe ffc1 	bl	800221c <HAL_GetTick>
 800329a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800329c:	e008      	b.n	80032b0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800329e:	f7fe ffbd 	bl	800221c <HAL_GetTick>
 80032a2:	4602      	mov	r2, r0
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	1ad3      	subs	r3, r2, r3
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	d901      	bls.n	80032b0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80032ac:	2303      	movs	r3, #3
 80032ae:	e118      	b.n	80034e2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032b0:	4b6c      	ldr	r3, [pc, #432]	; (8003464 <HAL_RCC_OscConfig+0x4b0>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d0f0      	beq.n	800329e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d106      	bne.n	80032d2 <HAL_RCC_OscConfig+0x31e>
 80032c4:	4b66      	ldr	r3, [pc, #408]	; (8003460 <HAL_RCC_OscConfig+0x4ac>)
 80032c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032c8:	4a65      	ldr	r2, [pc, #404]	; (8003460 <HAL_RCC_OscConfig+0x4ac>)
 80032ca:	f043 0301 	orr.w	r3, r3, #1
 80032ce:	6713      	str	r3, [r2, #112]	; 0x70
 80032d0:	e01c      	b.n	800330c <HAL_RCC_OscConfig+0x358>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	2b05      	cmp	r3, #5
 80032d8:	d10c      	bne.n	80032f4 <HAL_RCC_OscConfig+0x340>
 80032da:	4b61      	ldr	r3, [pc, #388]	; (8003460 <HAL_RCC_OscConfig+0x4ac>)
 80032dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032de:	4a60      	ldr	r2, [pc, #384]	; (8003460 <HAL_RCC_OscConfig+0x4ac>)
 80032e0:	f043 0304 	orr.w	r3, r3, #4
 80032e4:	6713      	str	r3, [r2, #112]	; 0x70
 80032e6:	4b5e      	ldr	r3, [pc, #376]	; (8003460 <HAL_RCC_OscConfig+0x4ac>)
 80032e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ea:	4a5d      	ldr	r2, [pc, #372]	; (8003460 <HAL_RCC_OscConfig+0x4ac>)
 80032ec:	f043 0301 	orr.w	r3, r3, #1
 80032f0:	6713      	str	r3, [r2, #112]	; 0x70
 80032f2:	e00b      	b.n	800330c <HAL_RCC_OscConfig+0x358>
 80032f4:	4b5a      	ldr	r3, [pc, #360]	; (8003460 <HAL_RCC_OscConfig+0x4ac>)
 80032f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032f8:	4a59      	ldr	r2, [pc, #356]	; (8003460 <HAL_RCC_OscConfig+0x4ac>)
 80032fa:	f023 0301 	bic.w	r3, r3, #1
 80032fe:	6713      	str	r3, [r2, #112]	; 0x70
 8003300:	4b57      	ldr	r3, [pc, #348]	; (8003460 <HAL_RCC_OscConfig+0x4ac>)
 8003302:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003304:	4a56      	ldr	r2, [pc, #344]	; (8003460 <HAL_RCC_OscConfig+0x4ac>)
 8003306:	f023 0304 	bic.w	r3, r3, #4
 800330a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d015      	beq.n	8003340 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003314:	f7fe ff82 	bl	800221c <HAL_GetTick>
 8003318:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800331a:	e00a      	b.n	8003332 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800331c:	f7fe ff7e 	bl	800221c <HAL_GetTick>
 8003320:	4602      	mov	r2, r0
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	f241 3288 	movw	r2, #5000	; 0x1388
 800332a:	4293      	cmp	r3, r2
 800332c:	d901      	bls.n	8003332 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800332e:	2303      	movs	r3, #3
 8003330:	e0d7      	b.n	80034e2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003332:	4b4b      	ldr	r3, [pc, #300]	; (8003460 <HAL_RCC_OscConfig+0x4ac>)
 8003334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003336:	f003 0302 	and.w	r3, r3, #2
 800333a:	2b00      	cmp	r3, #0
 800333c:	d0ee      	beq.n	800331c <HAL_RCC_OscConfig+0x368>
 800333e:	e014      	b.n	800336a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003340:	f7fe ff6c 	bl	800221c <HAL_GetTick>
 8003344:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003346:	e00a      	b.n	800335e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003348:	f7fe ff68 	bl	800221c <HAL_GetTick>
 800334c:	4602      	mov	r2, r0
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	1ad3      	subs	r3, r2, r3
 8003352:	f241 3288 	movw	r2, #5000	; 0x1388
 8003356:	4293      	cmp	r3, r2
 8003358:	d901      	bls.n	800335e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	e0c1      	b.n	80034e2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800335e:	4b40      	ldr	r3, [pc, #256]	; (8003460 <HAL_RCC_OscConfig+0x4ac>)
 8003360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003362:	f003 0302 	and.w	r3, r3, #2
 8003366:	2b00      	cmp	r3, #0
 8003368:	d1ee      	bne.n	8003348 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800336a:	7dfb      	ldrb	r3, [r7, #23]
 800336c:	2b01      	cmp	r3, #1
 800336e:	d105      	bne.n	800337c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003370:	4b3b      	ldr	r3, [pc, #236]	; (8003460 <HAL_RCC_OscConfig+0x4ac>)
 8003372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003374:	4a3a      	ldr	r2, [pc, #232]	; (8003460 <HAL_RCC_OscConfig+0x4ac>)
 8003376:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800337a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	699b      	ldr	r3, [r3, #24]
 8003380:	2b00      	cmp	r3, #0
 8003382:	f000 80ad 	beq.w	80034e0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003386:	4b36      	ldr	r3, [pc, #216]	; (8003460 <HAL_RCC_OscConfig+0x4ac>)
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	f003 030c 	and.w	r3, r3, #12
 800338e:	2b08      	cmp	r3, #8
 8003390:	d060      	beq.n	8003454 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	699b      	ldr	r3, [r3, #24]
 8003396:	2b02      	cmp	r3, #2
 8003398:	d145      	bne.n	8003426 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800339a:	4b33      	ldr	r3, [pc, #204]	; (8003468 <HAL_RCC_OscConfig+0x4b4>)
 800339c:	2200      	movs	r2, #0
 800339e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033a0:	f7fe ff3c 	bl	800221c <HAL_GetTick>
 80033a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033a6:	e008      	b.n	80033ba <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033a8:	f7fe ff38 	bl	800221c <HAL_GetTick>
 80033ac:	4602      	mov	r2, r0
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	2b02      	cmp	r3, #2
 80033b4:	d901      	bls.n	80033ba <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	e093      	b.n	80034e2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033ba:	4b29      	ldr	r3, [pc, #164]	; (8003460 <HAL_RCC_OscConfig+0x4ac>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d1f0      	bne.n	80033a8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	69da      	ldr	r2, [r3, #28]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6a1b      	ldr	r3, [r3, #32]
 80033ce:	431a      	orrs	r2, r3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d4:	019b      	lsls	r3, r3, #6
 80033d6:	431a      	orrs	r2, r3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033dc:	085b      	lsrs	r3, r3, #1
 80033de:	3b01      	subs	r3, #1
 80033e0:	041b      	lsls	r3, r3, #16
 80033e2:	431a      	orrs	r2, r3
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e8:	061b      	lsls	r3, r3, #24
 80033ea:	431a      	orrs	r2, r3
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f0:	071b      	lsls	r3, r3, #28
 80033f2:	491b      	ldr	r1, [pc, #108]	; (8003460 <HAL_RCC_OscConfig+0x4ac>)
 80033f4:	4313      	orrs	r3, r2
 80033f6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033f8:	4b1b      	ldr	r3, [pc, #108]	; (8003468 <HAL_RCC_OscConfig+0x4b4>)
 80033fa:	2201      	movs	r2, #1
 80033fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033fe:	f7fe ff0d 	bl	800221c <HAL_GetTick>
 8003402:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003404:	e008      	b.n	8003418 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003406:	f7fe ff09 	bl	800221c <HAL_GetTick>
 800340a:	4602      	mov	r2, r0
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	1ad3      	subs	r3, r2, r3
 8003410:	2b02      	cmp	r3, #2
 8003412:	d901      	bls.n	8003418 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003414:	2303      	movs	r3, #3
 8003416:	e064      	b.n	80034e2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003418:	4b11      	ldr	r3, [pc, #68]	; (8003460 <HAL_RCC_OscConfig+0x4ac>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003420:	2b00      	cmp	r3, #0
 8003422:	d0f0      	beq.n	8003406 <HAL_RCC_OscConfig+0x452>
 8003424:	e05c      	b.n	80034e0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003426:	4b10      	ldr	r3, [pc, #64]	; (8003468 <HAL_RCC_OscConfig+0x4b4>)
 8003428:	2200      	movs	r2, #0
 800342a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800342c:	f7fe fef6 	bl	800221c <HAL_GetTick>
 8003430:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003432:	e008      	b.n	8003446 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003434:	f7fe fef2 	bl	800221c <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	2b02      	cmp	r3, #2
 8003440:	d901      	bls.n	8003446 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003442:	2303      	movs	r3, #3
 8003444:	e04d      	b.n	80034e2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003446:	4b06      	ldr	r3, [pc, #24]	; (8003460 <HAL_RCC_OscConfig+0x4ac>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d1f0      	bne.n	8003434 <HAL_RCC_OscConfig+0x480>
 8003452:	e045      	b.n	80034e0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	699b      	ldr	r3, [r3, #24]
 8003458:	2b01      	cmp	r3, #1
 800345a:	d107      	bne.n	800346c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e040      	b.n	80034e2 <HAL_RCC_OscConfig+0x52e>
 8003460:	40023800 	.word	0x40023800
 8003464:	40007000 	.word	0x40007000
 8003468:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800346c:	4b1f      	ldr	r3, [pc, #124]	; (80034ec <HAL_RCC_OscConfig+0x538>)
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	699b      	ldr	r3, [r3, #24]
 8003476:	2b01      	cmp	r3, #1
 8003478:	d030      	beq.n	80034dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003484:	429a      	cmp	r2, r3
 8003486:	d129      	bne.n	80034dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003492:	429a      	cmp	r2, r3
 8003494:	d122      	bne.n	80034dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003496:	68fa      	ldr	r2, [r7, #12]
 8003498:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800349c:	4013      	ands	r3, r2
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80034a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d119      	bne.n	80034dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034b2:	085b      	lsrs	r3, r3, #1
 80034b4:	3b01      	subs	r3, #1
 80034b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d10f      	bne.n	80034dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034c8:	429a      	cmp	r2, r3
 80034ca:	d107      	bne.n	80034dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034d8:	429a      	cmp	r2, r3
 80034da:	d001      	beq.n	80034e0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	e000      	b.n	80034e2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80034e0:	2300      	movs	r3, #0
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3718      	adds	r7, #24
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	40023800 	.word	0x40023800

080034f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b082      	sub	sp, #8
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d101      	bne.n	8003502 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e03f      	b.n	8003582 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003508:	b2db      	uxtb	r3, r3
 800350a:	2b00      	cmp	r3, #0
 800350c:	d106      	bne.n	800351c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2200      	movs	r2, #0
 8003512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f7fe fc00 	bl	8001d1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2224      	movs	r2, #36	; 0x24
 8003520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	68da      	ldr	r2, [r3, #12]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003532:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003534:	6878      	ldr	r0, [r7, #4]
 8003536:	f000 fe81 	bl	800423c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	691a      	ldr	r2, [r3, #16]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003548:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	695a      	ldr	r2, [r3, #20]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003558:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	68da      	ldr	r2, [r3, #12]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003568:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2200      	movs	r2, #0
 800356e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2220      	movs	r2, #32
 8003574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2220      	movs	r2, #32
 800357c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003580:	2300      	movs	r3, #0
}
 8003582:	4618      	mov	r0, r3
 8003584:	3708      	adds	r7, #8
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}

0800358a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800358a:	b580      	push	{r7, lr}
 800358c:	b08a      	sub	sp, #40	; 0x28
 800358e:	af02      	add	r7, sp, #8
 8003590:	60f8      	str	r0, [r7, #12]
 8003592:	60b9      	str	r1, [r7, #8]
 8003594:	603b      	str	r3, [r7, #0]
 8003596:	4613      	mov	r3, r2
 8003598:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800359a:	2300      	movs	r3, #0
 800359c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	2b20      	cmp	r3, #32
 80035a8:	d17c      	bne.n	80036a4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d002      	beq.n	80035b6 <HAL_UART_Transmit+0x2c>
 80035b0:	88fb      	ldrh	r3, [r7, #6]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d101      	bne.n	80035ba <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e075      	b.n	80036a6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d101      	bne.n	80035c8 <HAL_UART_Transmit+0x3e>
 80035c4:	2302      	movs	r3, #2
 80035c6:	e06e      	b.n	80036a6 <HAL_UART_Transmit+0x11c>
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2201      	movs	r2, #1
 80035cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2200      	movs	r2, #0
 80035d4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2221      	movs	r2, #33	; 0x21
 80035da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80035de:	f7fe fe1d 	bl	800221c <HAL_GetTick>
 80035e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	88fa      	ldrh	r2, [r7, #6]
 80035e8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	88fa      	ldrh	r2, [r7, #6]
 80035ee:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035f8:	d108      	bne.n	800360c <HAL_UART_Transmit+0x82>
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	691b      	ldr	r3, [r3, #16]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d104      	bne.n	800360c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003602:	2300      	movs	r3, #0
 8003604:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	61bb      	str	r3, [r7, #24]
 800360a:	e003      	b.n	8003614 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003610:	2300      	movs	r3, #0
 8003612:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2200      	movs	r2, #0
 8003618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800361c:	e02a      	b.n	8003674 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	9300      	str	r3, [sp, #0]
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	2200      	movs	r2, #0
 8003626:	2180      	movs	r1, #128	; 0x80
 8003628:	68f8      	ldr	r0, [r7, #12]
 800362a:	f000 fbc1 	bl	8003db0 <UART_WaitOnFlagUntilTimeout>
 800362e:	4603      	mov	r3, r0
 8003630:	2b00      	cmp	r3, #0
 8003632:	d001      	beq.n	8003638 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003634:	2303      	movs	r3, #3
 8003636:	e036      	b.n	80036a6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003638:	69fb      	ldr	r3, [r7, #28]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d10b      	bne.n	8003656 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800363e:	69bb      	ldr	r3, [r7, #24]
 8003640:	881b      	ldrh	r3, [r3, #0]
 8003642:	461a      	mov	r2, r3
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800364c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800364e:	69bb      	ldr	r3, [r7, #24]
 8003650:	3302      	adds	r3, #2
 8003652:	61bb      	str	r3, [r7, #24]
 8003654:	e007      	b.n	8003666 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003656:	69fb      	ldr	r3, [r7, #28]
 8003658:	781a      	ldrb	r2, [r3, #0]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003660:	69fb      	ldr	r3, [r7, #28]
 8003662:	3301      	adds	r3, #1
 8003664:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800366a:	b29b      	uxth	r3, r3
 800366c:	3b01      	subs	r3, #1
 800366e:	b29a      	uxth	r2, r3
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003678:	b29b      	uxth	r3, r3
 800367a:	2b00      	cmp	r3, #0
 800367c:	d1cf      	bne.n	800361e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	9300      	str	r3, [sp, #0]
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	2200      	movs	r2, #0
 8003686:	2140      	movs	r1, #64	; 0x40
 8003688:	68f8      	ldr	r0, [r7, #12]
 800368a:	f000 fb91 	bl	8003db0 <UART_WaitOnFlagUntilTimeout>
 800368e:	4603      	mov	r3, r0
 8003690:	2b00      	cmp	r3, #0
 8003692:	d001      	beq.n	8003698 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003694:	2303      	movs	r3, #3
 8003696:	e006      	b.n	80036a6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2220      	movs	r2, #32
 800369c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80036a0:	2300      	movs	r3, #0
 80036a2:	e000      	b.n	80036a6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80036a4:	2302      	movs	r3, #2
  }
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3720      	adds	r7, #32
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}

080036ae <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036ae:	b580      	push	{r7, lr}
 80036b0:	b08a      	sub	sp, #40	; 0x28
 80036b2:	af02      	add	r7, sp, #8
 80036b4:	60f8      	str	r0, [r7, #12]
 80036b6:	60b9      	str	r1, [r7, #8]
 80036b8:	603b      	str	r3, [r7, #0]
 80036ba:	4613      	mov	r3, r2
 80036bc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80036be:	2300      	movs	r3, #0
 80036c0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	2b20      	cmp	r3, #32
 80036cc:	f040 808c 	bne.w	80037e8 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d002      	beq.n	80036dc <HAL_UART_Receive+0x2e>
 80036d6:	88fb      	ldrh	r3, [r7, #6]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d101      	bne.n	80036e0 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	e084      	b.n	80037ea <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d101      	bne.n	80036ee <HAL_UART_Receive+0x40>
 80036ea:	2302      	movs	r3, #2
 80036ec:	e07d      	b.n	80037ea <HAL_UART_Receive+0x13c>
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2201      	movs	r2, #1
 80036f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2200      	movs	r2, #0
 80036fa:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2222      	movs	r2, #34	; 0x22
 8003700:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2200      	movs	r2, #0
 8003708:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800370a:	f7fe fd87 	bl	800221c <HAL_GetTick>
 800370e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	88fa      	ldrh	r2, [r7, #6]
 8003714:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	88fa      	ldrh	r2, [r7, #6]
 800371a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003724:	d108      	bne.n	8003738 <HAL_UART_Receive+0x8a>
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	691b      	ldr	r3, [r3, #16]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d104      	bne.n	8003738 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800372e:	2300      	movs	r3, #0
 8003730:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	61bb      	str	r3, [r7, #24]
 8003736:	e003      	b.n	8003740 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800373c:	2300      	movs	r3, #0
 800373e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2200      	movs	r2, #0
 8003744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003748:	e043      	b.n	80037d2 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	9300      	str	r3, [sp, #0]
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	2200      	movs	r2, #0
 8003752:	2120      	movs	r1, #32
 8003754:	68f8      	ldr	r0, [r7, #12]
 8003756:	f000 fb2b 	bl	8003db0 <UART_WaitOnFlagUntilTimeout>
 800375a:	4603      	mov	r3, r0
 800375c:	2b00      	cmp	r3, #0
 800375e:	d001      	beq.n	8003764 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8003760:	2303      	movs	r3, #3
 8003762:	e042      	b.n	80037ea <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d10c      	bne.n	8003784 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	b29b      	uxth	r3, r3
 8003772:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003776:	b29a      	uxth	r2, r3
 8003778:	69bb      	ldr	r3, [r7, #24]
 800377a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800377c:	69bb      	ldr	r3, [r7, #24]
 800377e:	3302      	adds	r3, #2
 8003780:	61bb      	str	r3, [r7, #24]
 8003782:	e01f      	b.n	80037c4 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800378c:	d007      	beq.n	800379e <HAL_UART_Receive+0xf0>
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d10a      	bne.n	80037ac <HAL_UART_Receive+0xfe>
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	691b      	ldr	r3, [r3, #16]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d106      	bne.n	80037ac <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	b2da      	uxtb	r2, r3
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	701a      	strb	r2, [r3, #0]
 80037aa:	e008      	b.n	80037be <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80037b8:	b2da      	uxtb	r2, r3
 80037ba:	69fb      	ldr	r3, [r7, #28]
 80037bc:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80037be:	69fb      	ldr	r3, [r7, #28]
 80037c0:	3301      	adds	r3, #1
 80037c2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80037c8:	b29b      	uxth	r3, r3
 80037ca:	3b01      	subs	r3, #1
 80037cc:	b29a      	uxth	r2, r3
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80037d6:	b29b      	uxth	r3, r3
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d1b6      	bne.n	800374a <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2220      	movs	r2, #32
 80037e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80037e4:	2300      	movs	r3, #0
 80037e6:	e000      	b.n	80037ea <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80037e8:	2302      	movs	r3, #2
  }
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3720      	adds	r7, #32
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}

080037f2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80037f2:	b580      	push	{r7, lr}
 80037f4:	b084      	sub	sp, #16
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	60f8      	str	r0, [r7, #12]
 80037fa:	60b9      	str	r1, [r7, #8]
 80037fc:	4613      	mov	r3, r2
 80037fe:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003806:	b2db      	uxtb	r3, r3
 8003808:	2b20      	cmp	r3, #32
 800380a:	d11d      	bne.n	8003848 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d002      	beq.n	8003818 <HAL_UART_Receive_IT+0x26>
 8003812:	88fb      	ldrh	r3, [r7, #6]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d101      	bne.n	800381c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	e016      	b.n	800384a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003822:	2b01      	cmp	r3, #1
 8003824:	d101      	bne.n	800382a <HAL_UART_Receive_IT+0x38>
 8003826:	2302      	movs	r3, #2
 8003828:	e00f      	b.n	800384a <HAL_UART_Receive_IT+0x58>
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2201      	movs	r2, #1
 800382e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2200      	movs	r2, #0
 8003836:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003838:	88fb      	ldrh	r3, [r7, #6]
 800383a:	461a      	mov	r2, r3
 800383c:	68b9      	ldr	r1, [r7, #8]
 800383e:	68f8      	ldr	r0, [r7, #12]
 8003840:	f000 fb24 	bl	8003e8c <UART_Start_Receive_IT>
 8003844:	4603      	mov	r3, r0
 8003846:	e000      	b.n	800384a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003848:	2302      	movs	r3, #2
  }
}
 800384a:	4618      	mov	r0, r3
 800384c:	3710      	adds	r7, #16
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
	...

08003854 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b0ba      	sub	sp, #232	; 0xe8
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	695b      	ldr	r3, [r3, #20]
 8003876:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800387a:	2300      	movs	r3, #0
 800387c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003880:	2300      	movs	r3, #0
 8003882:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003886:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800388a:	f003 030f 	and.w	r3, r3, #15
 800388e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003892:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003896:	2b00      	cmp	r3, #0
 8003898:	d10f      	bne.n	80038ba <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800389a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800389e:	f003 0320 	and.w	r3, r3, #32
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d009      	beq.n	80038ba <HAL_UART_IRQHandler+0x66>
 80038a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038aa:	f003 0320 	and.w	r3, r3, #32
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d003      	beq.n	80038ba <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f000 fc07 	bl	80040c6 <UART_Receive_IT>
      return;
 80038b8:	e256      	b.n	8003d68 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80038ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80038be:	2b00      	cmp	r3, #0
 80038c0:	f000 80de 	beq.w	8003a80 <HAL_UART_IRQHandler+0x22c>
 80038c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80038c8:	f003 0301 	and.w	r3, r3, #1
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d106      	bne.n	80038de <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80038d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038d4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80038d8:	2b00      	cmp	r3, #0
 80038da:	f000 80d1 	beq.w	8003a80 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80038de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038e2:	f003 0301 	and.w	r3, r3, #1
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d00b      	beq.n	8003902 <HAL_UART_IRQHandler+0xae>
 80038ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d005      	beq.n	8003902 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fa:	f043 0201 	orr.w	r2, r3, #1
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003902:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003906:	f003 0304 	and.w	r3, r3, #4
 800390a:	2b00      	cmp	r3, #0
 800390c:	d00b      	beq.n	8003926 <HAL_UART_IRQHandler+0xd2>
 800390e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003912:	f003 0301 	and.w	r3, r3, #1
 8003916:	2b00      	cmp	r3, #0
 8003918:	d005      	beq.n	8003926 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391e:	f043 0202 	orr.w	r2, r3, #2
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003926:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800392a:	f003 0302 	and.w	r3, r3, #2
 800392e:	2b00      	cmp	r3, #0
 8003930:	d00b      	beq.n	800394a <HAL_UART_IRQHandler+0xf6>
 8003932:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003936:	f003 0301 	and.w	r3, r3, #1
 800393a:	2b00      	cmp	r3, #0
 800393c:	d005      	beq.n	800394a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003942:	f043 0204 	orr.w	r2, r3, #4
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800394a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800394e:	f003 0308 	and.w	r3, r3, #8
 8003952:	2b00      	cmp	r3, #0
 8003954:	d011      	beq.n	800397a <HAL_UART_IRQHandler+0x126>
 8003956:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800395a:	f003 0320 	and.w	r3, r3, #32
 800395e:	2b00      	cmp	r3, #0
 8003960:	d105      	bne.n	800396e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003962:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003966:	f003 0301 	and.w	r3, r3, #1
 800396a:	2b00      	cmp	r3, #0
 800396c:	d005      	beq.n	800397a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003972:	f043 0208 	orr.w	r2, r3, #8
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397e:	2b00      	cmp	r3, #0
 8003980:	f000 81ed 	beq.w	8003d5e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003984:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003988:	f003 0320 	and.w	r3, r3, #32
 800398c:	2b00      	cmp	r3, #0
 800398e:	d008      	beq.n	80039a2 <HAL_UART_IRQHandler+0x14e>
 8003990:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003994:	f003 0320 	and.w	r3, r3, #32
 8003998:	2b00      	cmp	r3, #0
 800399a:	d002      	beq.n	80039a2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	f000 fb92 	bl	80040c6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	695b      	ldr	r3, [r3, #20]
 80039a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039ac:	2b40      	cmp	r3, #64	; 0x40
 80039ae:	bf0c      	ite	eq
 80039b0:	2301      	moveq	r3, #1
 80039b2:	2300      	movne	r3, #0
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039be:	f003 0308 	and.w	r3, r3, #8
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d103      	bne.n	80039ce <HAL_UART_IRQHandler+0x17a>
 80039c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d04f      	beq.n	8003a6e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f000 fa9a 	bl	8003f08 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	695b      	ldr	r3, [r3, #20]
 80039da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039de:	2b40      	cmp	r3, #64	; 0x40
 80039e0:	d141      	bne.n	8003a66 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	3314      	adds	r3, #20
 80039e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80039f0:	e853 3f00 	ldrex	r3, [r3]
 80039f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80039f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80039fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a00:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	3314      	adds	r3, #20
 8003a0a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003a0e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003a12:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a16:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003a1a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003a1e:	e841 2300 	strex	r3, r2, [r1]
 8003a22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003a26:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d1d9      	bne.n	80039e2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d013      	beq.n	8003a5e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a3a:	4a7d      	ldr	r2, [pc, #500]	; (8003c30 <HAL_UART_IRQHandler+0x3dc>)
 8003a3c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a42:	4618      	mov	r0, r3
 8003a44:	f7fe fd9b 	bl	800257e <HAL_DMA_Abort_IT>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d016      	beq.n	8003a7c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a54:	687a      	ldr	r2, [r7, #4]
 8003a56:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003a58:	4610      	mov	r0, r2
 8003a5a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a5c:	e00e      	b.n	8003a7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f000 f990 	bl	8003d84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a64:	e00a      	b.n	8003a7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f000 f98c 	bl	8003d84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a6c:	e006      	b.n	8003a7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f000 f988 	bl	8003d84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2200      	movs	r2, #0
 8003a78:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003a7a:	e170      	b.n	8003d5e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a7c:	bf00      	nop
    return;
 8003a7e:	e16e      	b.n	8003d5e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	f040 814a 	bne.w	8003d1e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003a8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a8e:	f003 0310 	and.w	r3, r3, #16
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	f000 8143 	beq.w	8003d1e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003a98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a9c:	f003 0310 	and.w	r3, r3, #16
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	f000 813c 	beq.w	8003d1e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	60bb      	str	r3, [r7, #8]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	60bb      	str	r3, [r7, #8]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	60bb      	str	r3, [r7, #8]
 8003aba:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	695b      	ldr	r3, [r3, #20]
 8003ac2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ac6:	2b40      	cmp	r3, #64	; 0x40
 8003ac8:	f040 80b4 	bne.w	8003c34 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003ad8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	f000 8140 	beq.w	8003d62 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003ae6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003aea:	429a      	cmp	r2, r3
 8003aec:	f080 8139 	bcs.w	8003d62 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003af6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003afc:	69db      	ldr	r3, [r3, #28]
 8003afe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b02:	f000 8088 	beq.w	8003c16 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	330c      	adds	r3, #12
 8003b0c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b10:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003b14:	e853 3f00 	ldrex	r3, [r3]
 8003b18:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003b1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003b20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b24:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	330c      	adds	r3, #12
 8003b2e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003b32:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003b36:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b3a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003b3e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003b42:	e841 2300 	strex	r3, r2, [r1]
 8003b46:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003b4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d1d9      	bne.n	8003b06 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	3314      	adds	r3, #20
 8003b58:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b5c:	e853 3f00 	ldrex	r3, [r3]
 8003b60:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003b62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b64:	f023 0301 	bic.w	r3, r3, #1
 8003b68:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	3314      	adds	r3, #20
 8003b72:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003b76:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003b7a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b7c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003b7e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003b82:	e841 2300 	strex	r3, r2, [r1]
 8003b86:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003b88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d1e1      	bne.n	8003b52 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	3314      	adds	r3, #20
 8003b94:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b98:	e853 3f00 	ldrex	r3, [r3]
 8003b9c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003b9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ba0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ba4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	3314      	adds	r3, #20
 8003bae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003bb2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003bb4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bb6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003bb8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003bba:	e841 2300 	strex	r3, r2, [r1]
 8003bbe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003bc0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d1e3      	bne.n	8003b8e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2220      	movs	r2, #32
 8003bca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	330c      	adds	r3, #12
 8003bda:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bde:	e853 3f00 	ldrex	r3, [r3]
 8003be2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003be4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003be6:	f023 0310 	bic.w	r3, r3, #16
 8003bea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	330c      	adds	r3, #12
 8003bf4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003bf8:	65ba      	str	r2, [r7, #88]	; 0x58
 8003bfa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bfc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003bfe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003c00:	e841 2300 	strex	r3, r2, [r1]
 8003c04:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003c06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d1e3      	bne.n	8003bd4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c10:	4618      	mov	r0, r3
 8003c12:	f7fe fc44 	bl	800249e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	b29b      	uxth	r3, r3
 8003c24:	4619      	mov	r1, r3
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f000 f8b6 	bl	8003d98 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003c2c:	e099      	b.n	8003d62 <HAL_UART_IRQHandler+0x50e>
 8003c2e:	bf00      	nop
 8003c30:	08003fcf 	.word	0x08003fcf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c3c:	b29b      	uxth	r3, r3
 8003c3e:	1ad3      	subs	r3, r2, r3
 8003c40:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c48:	b29b      	uxth	r3, r3
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	f000 808b 	beq.w	8003d66 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003c50:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	f000 8086 	beq.w	8003d66 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	330c      	adds	r3, #12
 8003c60:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c64:	e853 3f00 	ldrex	r3, [r3]
 8003c68:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003c6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c6c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003c70:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	330c      	adds	r3, #12
 8003c7a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003c7e:	647a      	str	r2, [r7, #68]	; 0x44
 8003c80:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c82:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003c84:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003c86:	e841 2300 	strex	r3, r2, [r1]
 8003c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003c8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d1e3      	bne.n	8003c5a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	3314      	adds	r3, #20
 8003c98:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9c:	e853 3f00 	ldrex	r3, [r3]
 8003ca0:	623b      	str	r3, [r7, #32]
   return(result);
 8003ca2:	6a3b      	ldr	r3, [r7, #32]
 8003ca4:	f023 0301 	bic.w	r3, r3, #1
 8003ca8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	3314      	adds	r3, #20
 8003cb2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003cb6:	633a      	str	r2, [r7, #48]	; 0x30
 8003cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003cbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cbe:	e841 2300 	strex	r3, r2, [r1]
 8003cc2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d1e3      	bne.n	8003c92 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2220      	movs	r2, #32
 8003cce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	330c      	adds	r3, #12
 8003cde:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	e853 3f00 	ldrex	r3, [r3]
 8003ce6:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	f023 0310 	bic.w	r3, r3, #16
 8003cee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	330c      	adds	r3, #12
 8003cf8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003cfc:	61fa      	str	r2, [r7, #28]
 8003cfe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d00:	69b9      	ldr	r1, [r7, #24]
 8003d02:	69fa      	ldr	r2, [r7, #28]
 8003d04:	e841 2300 	strex	r3, r2, [r1]
 8003d08:	617b      	str	r3, [r7, #20]
   return(result);
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d1e3      	bne.n	8003cd8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003d10:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003d14:	4619      	mov	r1, r3
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f000 f83e 	bl	8003d98 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003d1c:	e023      	b.n	8003d66 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003d1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d009      	beq.n	8003d3e <HAL_UART_IRQHandler+0x4ea>
 8003d2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d003      	beq.n	8003d3e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f000 f95d 	bl	8003ff6 <UART_Transmit_IT>
    return;
 8003d3c:	e014      	b.n	8003d68 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003d3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d00e      	beq.n	8003d68 <HAL_UART_IRQHandler+0x514>
 8003d4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d008      	beq.n	8003d68 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f000 f99d 	bl	8004096 <UART_EndTransmit_IT>
    return;
 8003d5c:	e004      	b.n	8003d68 <HAL_UART_IRQHandler+0x514>
    return;
 8003d5e:	bf00      	nop
 8003d60:	e002      	b.n	8003d68 <HAL_UART_IRQHandler+0x514>
      return;
 8003d62:	bf00      	nop
 8003d64:	e000      	b.n	8003d68 <HAL_UART_IRQHandler+0x514>
      return;
 8003d66:	bf00      	nop
  }
}
 8003d68:	37e8      	adds	r7, #232	; 0xe8
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}
 8003d6e:	bf00      	nop

08003d70 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b083      	sub	sp, #12
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003d78:	bf00      	nop
 8003d7a:	370c      	adds	r7, #12
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d82:	4770      	bx	lr

08003d84 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b083      	sub	sp, #12
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003d8c:	bf00      	nop
 8003d8e:	370c      	adds	r7, #12
 8003d90:	46bd      	mov	sp, r7
 8003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d96:	4770      	bx	lr

08003d98 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b083      	sub	sp, #12
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	460b      	mov	r3, r1
 8003da2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003da4:	bf00      	nop
 8003da6:	370c      	adds	r7, #12
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr

08003db0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b090      	sub	sp, #64	; 0x40
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	60f8      	str	r0, [r7, #12]
 8003db8:	60b9      	str	r1, [r7, #8]
 8003dba:	603b      	str	r3, [r7, #0]
 8003dbc:	4613      	mov	r3, r2
 8003dbe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dc0:	e050      	b.n	8003e64 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003dc4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003dc8:	d04c      	beq.n	8003e64 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003dca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d007      	beq.n	8003de0 <UART_WaitOnFlagUntilTimeout+0x30>
 8003dd0:	f7fe fa24 	bl	800221c <HAL_GetTick>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	1ad3      	subs	r3, r2, r3
 8003dda:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d241      	bcs.n	8003e64 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	330c      	adds	r3, #12
 8003de6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dea:	e853 3f00 	ldrex	r3, [r3]
 8003dee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003df6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	330c      	adds	r3, #12
 8003dfe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003e00:	637a      	str	r2, [r7, #52]	; 0x34
 8003e02:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e04:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003e06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e08:	e841 2300 	strex	r3, r2, [r1]
 8003e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d1e5      	bne.n	8003de0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	3314      	adds	r3, #20
 8003e1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	e853 3f00 	ldrex	r3, [r3]
 8003e22:	613b      	str	r3, [r7, #16]
   return(result);
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	f023 0301 	bic.w	r3, r3, #1
 8003e2a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	3314      	adds	r3, #20
 8003e32:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e34:	623a      	str	r2, [r7, #32]
 8003e36:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e38:	69f9      	ldr	r1, [r7, #28]
 8003e3a:	6a3a      	ldr	r2, [r7, #32]
 8003e3c:	e841 2300 	strex	r3, r2, [r1]
 8003e40:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e42:	69bb      	ldr	r3, [r7, #24]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d1e5      	bne.n	8003e14 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2220      	movs	r2, #32
 8003e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2220      	movs	r2, #32
 8003e54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003e60:	2303      	movs	r3, #3
 8003e62:	e00f      	b.n	8003e84 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	68ba      	ldr	r2, [r7, #8]
 8003e70:	429a      	cmp	r2, r3
 8003e72:	bf0c      	ite	eq
 8003e74:	2301      	moveq	r3, #1
 8003e76:	2300      	movne	r3, #0
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	79fb      	ldrb	r3, [r7, #7]
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	d09f      	beq.n	8003dc2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e82:	2300      	movs	r3, #0
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	3740      	adds	r7, #64	; 0x40
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}

08003e8c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b085      	sub	sp, #20
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	60f8      	str	r0, [r7, #12]
 8003e94:	60b9      	str	r1, [r7, #8]
 8003e96:	4613      	mov	r3, r2
 8003e98:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	68ba      	ldr	r2, [r7, #8]
 8003e9e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	88fa      	ldrh	r2, [r7, #6]
 8003ea4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	88fa      	ldrh	r2, [r7, #6]
 8003eaa:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2222      	movs	r2, #34	; 0x22
 8003eb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	691b      	ldr	r3, [r3, #16]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d007      	beq.n	8003eda <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	68da      	ldr	r2, [r3, #12]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ed8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	695a      	ldr	r2, [r3, #20]
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f042 0201 	orr.w	r2, r2, #1
 8003ee8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	68da      	ldr	r2, [r3, #12]
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f042 0220 	orr.w	r2, r2, #32
 8003ef8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003efa:	2300      	movs	r3, #0
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3714      	adds	r7, #20
 8003f00:	46bd      	mov	sp, r7
 8003f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f06:	4770      	bx	lr

08003f08 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b095      	sub	sp, #84	; 0x54
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	330c      	adds	r3, #12
 8003f16:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f1a:	e853 3f00 	ldrex	r3, [r3]
 8003f1e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f22:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003f26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	330c      	adds	r3, #12
 8003f2e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003f30:	643a      	str	r2, [r7, #64]	; 0x40
 8003f32:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f34:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003f36:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003f38:	e841 2300 	strex	r3, r2, [r1]
 8003f3c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d1e5      	bne.n	8003f10 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	3314      	adds	r3, #20
 8003f4a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f4c:	6a3b      	ldr	r3, [r7, #32]
 8003f4e:	e853 3f00 	ldrex	r3, [r3]
 8003f52:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f54:	69fb      	ldr	r3, [r7, #28]
 8003f56:	f023 0301 	bic.w	r3, r3, #1
 8003f5a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	3314      	adds	r3, #20
 8003f62:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f64:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f66:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f68:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f6c:	e841 2300 	strex	r3, r2, [r1]
 8003f70:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d1e5      	bne.n	8003f44 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d119      	bne.n	8003fb4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	330c      	adds	r3, #12
 8003f86:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	e853 3f00 	ldrex	r3, [r3]
 8003f8e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	f023 0310 	bic.w	r3, r3, #16
 8003f96:	647b      	str	r3, [r7, #68]	; 0x44
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	330c      	adds	r3, #12
 8003f9e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003fa0:	61ba      	str	r2, [r7, #24]
 8003fa2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fa4:	6979      	ldr	r1, [r7, #20]
 8003fa6:	69ba      	ldr	r2, [r7, #24]
 8003fa8:	e841 2300 	strex	r3, r2, [r1]
 8003fac:	613b      	str	r3, [r7, #16]
   return(result);
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d1e5      	bne.n	8003f80 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2220      	movs	r2, #32
 8003fb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003fc2:	bf00      	nop
 8003fc4:	3754      	adds	r7, #84	; 0x54
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fcc:	4770      	bx	lr

08003fce <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003fce:	b580      	push	{r7, lr}
 8003fd0:	b084      	sub	sp, #16
 8003fd2:	af00      	add	r7, sp, #0
 8003fd4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fda:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003fe8:	68f8      	ldr	r0, [r7, #12]
 8003fea:	f7ff fecb 	bl	8003d84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003fee:	bf00      	nop
 8003ff0:	3710      	adds	r7, #16
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}

08003ff6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003ff6:	b480      	push	{r7}
 8003ff8:	b085      	sub	sp, #20
 8003ffa:	af00      	add	r7, sp, #0
 8003ffc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004004:	b2db      	uxtb	r3, r3
 8004006:	2b21      	cmp	r3, #33	; 0x21
 8004008:	d13e      	bne.n	8004088 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004012:	d114      	bne.n	800403e <UART_Transmit_IT+0x48>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	691b      	ldr	r3, [r3, #16]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d110      	bne.n	800403e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6a1b      	ldr	r3, [r3, #32]
 8004020:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	881b      	ldrh	r3, [r3, #0]
 8004026:	461a      	mov	r2, r3
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004030:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6a1b      	ldr	r3, [r3, #32]
 8004036:	1c9a      	adds	r2, r3, #2
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	621a      	str	r2, [r3, #32]
 800403c:	e008      	b.n	8004050 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6a1b      	ldr	r3, [r3, #32]
 8004042:	1c59      	adds	r1, r3, #1
 8004044:	687a      	ldr	r2, [r7, #4]
 8004046:	6211      	str	r1, [r2, #32]
 8004048:	781a      	ldrb	r2, [r3, #0]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004054:	b29b      	uxth	r3, r3
 8004056:	3b01      	subs	r3, #1
 8004058:	b29b      	uxth	r3, r3
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	4619      	mov	r1, r3
 800405e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004060:	2b00      	cmp	r3, #0
 8004062:	d10f      	bne.n	8004084 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	68da      	ldr	r2, [r3, #12]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004072:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	68da      	ldr	r2, [r3, #12]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004082:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004084:	2300      	movs	r3, #0
 8004086:	e000      	b.n	800408a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004088:	2302      	movs	r3, #2
  }
}
 800408a:	4618      	mov	r0, r3
 800408c:	3714      	adds	r7, #20
 800408e:	46bd      	mov	sp, r7
 8004090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004094:	4770      	bx	lr

08004096 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004096:	b580      	push	{r7, lr}
 8004098:	b082      	sub	sp, #8
 800409a:	af00      	add	r7, sp, #0
 800409c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	68da      	ldr	r2, [r3, #12]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040ac:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2220      	movs	r2, #32
 80040b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f7ff fe5a 	bl	8003d70 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80040bc:	2300      	movs	r3, #0
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3708      	adds	r7, #8
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}

080040c6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80040c6:	b580      	push	{r7, lr}
 80040c8:	b08c      	sub	sp, #48	; 0x30
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	2b22      	cmp	r3, #34	; 0x22
 80040d8:	f040 80ab 	bne.w	8004232 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040e4:	d117      	bne.n	8004116 <UART_Receive_IT+0x50>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	691b      	ldr	r3, [r3, #16]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d113      	bne.n	8004116 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80040ee:	2300      	movs	r3, #0
 80040f0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040f6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	b29b      	uxth	r3, r3
 8004100:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004104:	b29a      	uxth	r2, r3
 8004106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004108:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800410e:	1c9a      	adds	r2, r3, #2
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	629a      	str	r2, [r3, #40]	; 0x28
 8004114:	e026      	b.n	8004164 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800411a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800411c:	2300      	movs	r3, #0
 800411e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004128:	d007      	beq.n	800413a <UART_Receive_IT+0x74>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d10a      	bne.n	8004148 <UART_Receive_IT+0x82>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	691b      	ldr	r3, [r3, #16]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d106      	bne.n	8004148 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	b2da      	uxtb	r2, r3
 8004142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004144:	701a      	strb	r2, [r3, #0]
 8004146:	e008      	b.n	800415a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	b2db      	uxtb	r3, r3
 8004150:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004154:	b2da      	uxtb	r2, r3
 8004156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004158:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800415e:	1c5a      	adds	r2, r3, #1
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004168:	b29b      	uxth	r3, r3
 800416a:	3b01      	subs	r3, #1
 800416c:	b29b      	uxth	r3, r3
 800416e:	687a      	ldr	r2, [r7, #4]
 8004170:	4619      	mov	r1, r3
 8004172:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004174:	2b00      	cmp	r3, #0
 8004176:	d15a      	bne.n	800422e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	68da      	ldr	r2, [r3, #12]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f022 0220 	bic.w	r2, r2, #32
 8004186:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	68da      	ldr	r2, [r3, #12]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004196:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	695a      	ldr	r2, [r3, #20]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f022 0201 	bic.w	r2, r2, #1
 80041a6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2220      	movs	r2, #32
 80041ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d135      	bne.n	8004224 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2200      	movs	r2, #0
 80041bc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	330c      	adds	r3, #12
 80041c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	e853 3f00 	ldrex	r3, [r3]
 80041cc:	613b      	str	r3, [r7, #16]
   return(result);
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	f023 0310 	bic.w	r3, r3, #16
 80041d4:	627b      	str	r3, [r7, #36]	; 0x24
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	330c      	adds	r3, #12
 80041dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041de:	623a      	str	r2, [r7, #32]
 80041e0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041e2:	69f9      	ldr	r1, [r7, #28]
 80041e4:	6a3a      	ldr	r2, [r7, #32]
 80041e6:	e841 2300 	strex	r3, r2, [r1]
 80041ea:	61bb      	str	r3, [r7, #24]
   return(result);
 80041ec:	69bb      	ldr	r3, [r7, #24]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d1e5      	bne.n	80041be <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f003 0310 	and.w	r3, r3, #16
 80041fc:	2b10      	cmp	r3, #16
 80041fe:	d10a      	bne.n	8004216 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004200:	2300      	movs	r3, #0
 8004202:	60fb      	str	r3, [r7, #12]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	60fb      	str	r3, [r7, #12]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	60fb      	str	r3, [r7, #12]
 8004214:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800421a:	4619      	mov	r1, r3
 800421c:	6878      	ldr	r0, [r7, #4]
 800421e:	f7ff fdbb 	bl	8003d98 <HAL_UARTEx_RxEventCallback>
 8004222:	e002      	b.n	800422a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	f7fd fa93 	bl	8001750 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800422a:	2300      	movs	r3, #0
 800422c:	e002      	b.n	8004234 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800422e:	2300      	movs	r3, #0
 8004230:	e000      	b.n	8004234 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004232:	2302      	movs	r3, #2
  }
}
 8004234:	4618      	mov	r0, r3
 8004236:	3730      	adds	r7, #48	; 0x30
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}

0800423c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800423c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004240:	b0c0      	sub	sp, #256	; 0x100
 8004242:	af00      	add	r7, sp, #0
 8004244:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004248:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	691b      	ldr	r3, [r3, #16]
 8004250:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004254:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004258:	68d9      	ldr	r1, [r3, #12]
 800425a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	ea40 0301 	orr.w	r3, r0, r1
 8004264:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004266:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800426a:	689a      	ldr	r2, [r3, #8]
 800426c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004270:	691b      	ldr	r3, [r3, #16]
 8004272:	431a      	orrs	r2, r3
 8004274:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004278:	695b      	ldr	r3, [r3, #20]
 800427a:	431a      	orrs	r2, r3
 800427c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004280:	69db      	ldr	r3, [r3, #28]
 8004282:	4313      	orrs	r3, r2
 8004284:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004294:	f021 010c 	bic.w	r1, r1, #12
 8004298:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80042a2:	430b      	orrs	r3, r1
 80042a4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80042a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	695b      	ldr	r3, [r3, #20]
 80042ae:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80042b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042b6:	6999      	ldr	r1, [r3, #24]
 80042b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	ea40 0301 	orr.w	r3, r0, r1
 80042c2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80042c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	4b8f      	ldr	r3, [pc, #572]	; (8004508 <UART_SetConfig+0x2cc>)
 80042cc:	429a      	cmp	r2, r3
 80042ce:	d005      	beq.n	80042dc <UART_SetConfig+0xa0>
 80042d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	4b8d      	ldr	r3, [pc, #564]	; (800450c <UART_SetConfig+0x2d0>)
 80042d8:	429a      	cmp	r2, r3
 80042da:	d104      	bne.n	80042e6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80042dc:	f7fe fc26 	bl	8002b2c <HAL_RCC_GetPCLK2Freq>
 80042e0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80042e4:	e003      	b.n	80042ee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80042e6:	f7fe fc0d 	bl	8002b04 <HAL_RCC_GetPCLK1Freq>
 80042ea:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80042ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042f2:	69db      	ldr	r3, [r3, #28]
 80042f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042f8:	f040 810c 	bne.w	8004514 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80042fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004300:	2200      	movs	r2, #0
 8004302:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004306:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800430a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800430e:	4622      	mov	r2, r4
 8004310:	462b      	mov	r3, r5
 8004312:	1891      	adds	r1, r2, r2
 8004314:	65b9      	str	r1, [r7, #88]	; 0x58
 8004316:	415b      	adcs	r3, r3
 8004318:	65fb      	str	r3, [r7, #92]	; 0x5c
 800431a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800431e:	4621      	mov	r1, r4
 8004320:	eb12 0801 	adds.w	r8, r2, r1
 8004324:	4629      	mov	r1, r5
 8004326:	eb43 0901 	adc.w	r9, r3, r1
 800432a:	f04f 0200 	mov.w	r2, #0
 800432e:	f04f 0300 	mov.w	r3, #0
 8004332:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004336:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800433a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800433e:	4690      	mov	r8, r2
 8004340:	4699      	mov	r9, r3
 8004342:	4623      	mov	r3, r4
 8004344:	eb18 0303 	adds.w	r3, r8, r3
 8004348:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800434c:	462b      	mov	r3, r5
 800434e:	eb49 0303 	adc.w	r3, r9, r3
 8004352:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004356:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	2200      	movs	r2, #0
 800435e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004362:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004366:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800436a:	460b      	mov	r3, r1
 800436c:	18db      	adds	r3, r3, r3
 800436e:	653b      	str	r3, [r7, #80]	; 0x50
 8004370:	4613      	mov	r3, r2
 8004372:	eb42 0303 	adc.w	r3, r2, r3
 8004376:	657b      	str	r3, [r7, #84]	; 0x54
 8004378:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800437c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004380:	f7fc fca2 	bl	8000cc8 <__aeabi_uldivmod>
 8004384:	4602      	mov	r2, r0
 8004386:	460b      	mov	r3, r1
 8004388:	4b61      	ldr	r3, [pc, #388]	; (8004510 <UART_SetConfig+0x2d4>)
 800438a:	fba3 2302 	umull	r2, r3, r3, r2
 800438e:	095b      	lsrs	r3, r3, #5
 8004390:	011c      	lsls	r4, r3, #4
 8004392:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004396:	2200      	movs	r2, #0
 8004398:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800439c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80043a0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80043a4:	4642      	mov	r2, r8
 80043a6:	464b      	mov	r3, r9
 80043a8:	1891      	adds	r1, r2, r2
 80043aa:	64b9      	str	r1, [r7, #72]	; 0x48
 80043ac:	415b      	adcs	r3, r3
 80043ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043b0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80043b4:	4641      	mov	r1, r8
 80043b6:	eb12 0a01 	adds.w	sl, r2, r1
 80043ba:	4649      	mov	r1, r9
 80043bc:	eb43 0b01 	adc.w	fp, r3, r1
 80043c0:	f04f 0200 	mov.w	r2, #0
 80043c4:	f04f 0300 	mov.w	r3, #0
 80043c8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80043cc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80043d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80043d4:	4692      	mov	sl, r2
 80043d6:	469b      	mov	fp, r3
 80043d8:	4643      	mov	r3, r8
 80043da:	eb1a 0303 	adds.w	r3, sl, r3
 80043de:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80043e2:	464b      	mov	r3, r9
 80043e4:	eb4b 0303 	adc.w	r3, fp, r3
 80043e8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80043ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	2200      	movs	r2, #0
 80043f4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80043f8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80043fc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004400:	460b      	mov	r3, r1
 8004402:	18db      	adds	r3, r3, r3
 8004404:	643b      	str	r3, [r7, #64]	; 0x40
 8004406:	4613      	mov	r3, r2
 8004408:	eb42 0303 	adc.w	r3, r2, r3
 800440c:	647b      	str	r3, [r7, #68]	; 0x44
 800440e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004412:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004416:	f7fc fc57 	bl	8000cc8 <__aeabi_uldivmod>
 800441a:	4602      	mov	r2, r0
 800441c:	460b      	mov	r3, r1
 800441e:	4611      	mov	r1, r2
 8004420:	4b3b      	ldr	r3, [pc, #236]	; (8004510 <UART_SetConfig+0x2d4>)
 8004422:	fba3 2301 	umull	r2, r3, r3, r1
 8004426:	095b      	lsrs	r3, r3, #5
 8004428:	2264      	movs	r2, #100	; 0x64
 800442a:	fb02 f303 	mul.w	r3, r2, r3
 800442e:	1acb      	subs	r3, r1, r3
 8004430:	00db      	lsls	r3, r3, #3
 8004432:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004436:	4b36      	ldr	r3, [pc, #216]	; (8004510 <UART_SetConfig+0x2d4>)
 8004438:	fba3 2302 	umull	r2, r3, r3, r2
 800443c:	095b      	lsrs	r3, r3, #5
 800443e:	005b      	lsls	r3, r3, #1
 8004440:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004444:	441c      	add	r4, r3
 8004446:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800444a:	2200      	movs	r2, #0
 800444c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004450:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004454:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004458:	4642      	mov	r2, r8
 800445a:	464b      	mov	r3, r9
 800445c:	1891      	adds	r1, r2, r2
 800445e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004460:	415b      	adcs	r3, r3
 8004462:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004464:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004468:	4641      	mov	r1, r8
 800446a:	1851      	adds	r1, r2, r1
 800446c:	6339      	str	r1, [r7, #48]	; 0x30
 800446e:	4649      	mov	r1, r9
 8004470:	414b      	adcs	r3, r1
 8004472:	637b      	str	r3, [r7, #52]	; 0x34
 8004474:	f04f 0200 	mov.w	r2, #0
 8004478:	f04f 0300 	mov.w	r3, #0
 800447c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004480:	4659      	mov	r1, fp
 8004482:	00cb      	lsls	r3, r1, #3
 8004484:	4651      	mov	r1, sl
 8004486:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800448a:	4651      	mov	r1, sl
 800448c:	00ca      	lsls	r2, r1, #3
 800448e:	4610      	mov	r0, r2
 8004490:	4619      	mov	r1, r3
 8004492:	4603      	mov	r3, r0
 8004494:	4642      	mov	r2, r8
 8004496:	189b      	adds	r3, r3, r2
 8004498:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800449c:	464b      	mov	r3, r9
 800449e:	460a      	mov	r2, r1
 80044a0:	eb42 0303 	adc.w	r3, r2, r3
 80044a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80044a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	2200      	movs	r2, #0
 80044b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80044b4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80044b8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80044bc:	460b      	mov	r3, r1
 80044be:	18db      	adds	r3, r3, r3
 80044c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80044c2:	4613      	mov	r3, r2
 80044c4:	eb42 0303 	adc.w	r3, r2, r3
 80044c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80044ce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80044d2:	f7fc fbf9 	bl	8000cc8 <__aeabi_uldivmod>
 80044d6:	4602      	mov	r2, r0
 80044d8:	460b      	mov	r3, r1
 80044da:	4b0d      	ldr	r3, [pc, #52]	; (8004510 <UART_SetConfig+0x2d4>)
 80044dc:	fba3 1302 	umull	r1, r3, r3, r2
 80044e0:	095b      	lsrs	r3, r3, #5
 80044e2:	2164      	movs	r1, #100	; 0x64
 80044e4:	fb01 f303 	mul.w	r3, r1, r3
 80044e8:	1ad3      	subs	r3, r2, r3
 80044ea:	00db      	lsls	r3, r3, #3
 80044ec:	3332      	adds	r3, #50	; 0x32
 80044ee:	4a08      	ldr	r2, [pc, #32]	; (8004510 <UART_SetConfig+0x2d4>)
 80044f0:	fba2 2303 	umull	r2, r3, r2, r3
 80044f4:	095b      	lsrs	r3, r3, #5
 80044f6:	f003 0207 	and.w	r2, r3, #7
 80044fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4422      	add	r2, r4
 8004502:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004504:	e105      	b.n	8004712 <UART_SetConfig+0x4d6>
 8004506:	bf00      	nop
 8004508:	40011000 	.word	0x40011000
 800450c:	40011400 	.word	0x40011400
 8004510:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004514:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004518:	2200      	movs	r2, #0
 800451a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800451e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004522:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004526:	4642      	mov	r2, r8
 8004528:	464b      	mov	r3, r9
 800452a:	1891      	adds	r1, r2, r2
 800452c:	6239      	str	r1, [r7, #32]
 800452e:	415b      	adcs	r3, r3
 8004530:	627b      	str	r3, [r7, #36]	; 0x24
 8004532:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004536:	4641      	mov	r1, r8
 8004538:	1854      	adds	r4, r2, r1
 800453a:	4649      	mov	r1, r9
 800453c:	eb43 0501 	adc.w	r5, r3, r1
 8004540:	f04f 0200 	mov.w	r2, #0
 8004544:	f04f 0300 	mov.w	r3, #0
 8004548:	00eb      	lsls	r3, r5, #3
 800454a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800454e:	00e2      	lsls	r2, r4, #3
 8004550:	4614      	mov	r4, r2
 8004552:	461d      	mov	r5, r3
 8004554:	4643      	mov	r3, r8
 8004556:	18e3      	adds	r3, r4, r3
 8004558:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800455c:	464b      	mov	r3, r9
 800455e:	eb45 0303 	adc.w	r3, r5, r3
 8004562:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004566:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	2200      	movs	r2, #0
 800456e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004572:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004576:	f04f 0200 	mov.w	r2, #0
 800457a:	f04f 0300 	mov.w	r3, #0
 800457e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004582:	4629      	mov	r1, r5
 8004584:	008b      	lsls	r3, r1, #2
 8004586:	4621      	mov	r1, r4
 8004588:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800458c:	4621      	mov	r1, r4
 800458e:	008a      	lsls	r2, r1, #2
 8004590:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004594:	f7fc fb98 	bl	8000cc8 <__aeabi_uldivmod>
 8004598:	4602      	mov	r2, r0
 800459a:	460b      	mov	r3, r1
 800459c:	4b60      	ldr	r3, [pc, #384]	; (8004720 <UART_SetConfig+0x4e4>)
 800459e:	fba3 2302 	umull	r2, r3, r3, r2
 80045a2:	095b      	lsrs	r3, r3, #5
 80045a4:	011c      	lsls	r4, r3, #4
 80045a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045aa:	2200      	movs	r2, #0
 80045ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80045b0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80045b4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80045b8:	4642      	mov	r2, r8
 80045ba:	464b      	mov	r3, r9
 80045bc:	1891      	adds	r1, r2, r2
 80045be:	61b9      	str	r1, [r7, #24]
 80045c0:	415b      	adcs	r3, r3
 80045c2:	61fb      	str	r3, [r7, #28]
 80045c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80045c8:	4641      	mov	r1, r8
 80045ca:	1851      	adds	r1, r2, r1
 80045cc:	6139      	str	r1, [r7, #16]
 80045ce:	4649      	mov	r1, r9
 80045d0:	414b      	adcs	r3, r1
 80045d2:	617b      	str	r3, [r7, #20]
 80045d4:	f04f 0200 	mov.w	r2, #0
 80045d8:	f04f 0300 	mov.w	r3, #0
 80045dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80045e0:	4659      	mov	r1, fp
 80045e2:	00cb      	lsls	r3, r1, #3
 80045e4:	4651      	mov	r1, sl
 80045e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045ea:	4651      	mov	r1, sl
 80045ec:	00ca      	lsls	r2, r1, #3
 80045ee:	4610      	mov	r0, r2
 80045f0:	4619      	mov	r1, r3
 80045f2:	4603      	mov	r3, r0
 80045f4:	4642      	mov	r2, r8
 80045f6:	189b      	adds	r3, r3, r2
 80045f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80045fc:	464b      	mov	r3, r9
 80045fe:	460a      	mov	r2, r1
 8004600:	eb42 0303 	adc.w	r3, r2, r3
 8004604:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004608:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	2200      	movs	r2, #0
 8004610:	67bb      	str	r3, [r7, #120]	; 0x78
 8004612:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004614:	f04f 0200 	mov.w	r2, #0
 8004618:	f04f 0300 	mov.w	r3, #0
 800461c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004620:	4649      	mov	r1, r9
 8004622:	008b      	lsls	r3, r1, #2
 8004624:	4641      	mov	r1, r8
 8004626:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800462a:	4641      	mov	r1, r8
 800462c:	008a      	lsls	r2, r1, #2
 800462e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004632:	f7fc fb49 	bl	8000cc8 <__aeabi_uldivmod>
 8004636:	4602      	mov	r2, r0
 8004638:	460b      	mov	r3, r1
 800463a:	4b39      	ldr	r3, [pc, #228]	; (8004720 <UART_SetConfig+0x4e4>)
 800463c:	fba3 1302 	umull	r1, r3, r3, r2
 8004640:	095b      	lsrs	r3, r3, #5
 8004642:	2164      	movs	r1, #100	; 0x64
 8004644:	fb01 f303 	mul.w	r3, r1, r3
 8004648:	1ad3      	subs	r3, r2, r3
 800464a:	011b      	lsls	r3, r3, #4
 800464c:	3332      	adds	r3, #50	; 0x32
 800464e:	4a34      	ldr	r2, [pc, #208]	; (8004720 <UART_SetConfig+0x4e4>)
 8004650:	fba2 2303 	umull	r2, r3, r2, r3
 8004654:	095b      	lsrs	r3, r3, #5
 8004656:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800465a:	441c      	add	r4, r3
 800465c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004660:	2200      	movs	r2, #0
 8004662:	673b      	str	r3, [r7, #112]	; 0x70
 8004664:	677a      	str	r2, [r7, #116]	; 0x74
 8004666:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800466a:	4642      	mov	r2, r8
 800466c:	464b      	mov	r3, r9
 800466e:	1891      	adds	r1, r2, r2
 8004670:	60b9      	str	r1, [r7, #8]
 8004672:	415b      	adcs	r3, r3
 8004674:	60fb      	str	r3, [r7, #12]
 8004676:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800467a:	4641      	mov	r1, r8
 800467c:	1851      	adds	r1, r2, r1
 800467e:	6039      	str	r1, [r7, #0]
 8004680:	4649      	mov	r1, r9
 8004682:	414b      	adcs	r3, r1
 8004684:	607b      	str	r3, [r7, #4]
 8004686:	f04f 0200 	mov.w	r2, #0
 800468a:	f04f 0300 	mov.w	r3, #0
 800468e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004692:	4659      	mov	r1, fp
 8004694:	00cb      	lsls	r3, r1, #3
 8004696:	4651      	mov	r1, sl
 8004698:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800469c:	4651      	mov	r1, sl
 800469e:	00ca      	lsls	r2, r1, #3
 80046a0:	4610      	mov	r0, r2
 80046a2:	4619      	mov	r1, r3
 80046a4:	4603      	mov	r3, r0
 80046a6:	4642      	mov	r2, r8
 80046a8:	189b      	adds	r3, r3, r2
 80046aa:	66bb      	str	r3, [r7, #104]	; 0x68
 80046ac:	464b      	mov	r3, r9
 80046ae:	460a      	mov	r2, r1
 80046b0:	eb42 0303 	adc.w	r3, r2, r3
 80046b4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80046b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	2200      	movs	r2, #0
 80046be:	663b      	str	r3, [r7, #96]	; 0x60
 80046c0:	667a      	str	r2, [r7, #100]	; 0x64
 80046c2:	f04f 0200 	mov.w	r2, #0
 80046c6:	f04f 0300 	mov.w	r3, #0
 80046ca:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80046ce:	4649      	mov	r1, r9
 80046d0:	008b      	lsls	r3, r1, #2
 80046d2:	4641      	mov	r1, r8
 80046d4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80046d8:	4641      	mov	r1, r8
 80046da:	008a      	lsls	r2, r1, #2
 80046dc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80046e0:	f7fc faf2 	bl	8000cc8 <__aeabi_uldivmod>
 80046e4:	4602      	mov	r2, r0
 80046e6:	460b      	mov	r3, r1
 80046e8:	4b0d      	ldr	r3, [pc, #52]	; (8004720 <UART_SetConfig+0x4e4>)
 80046ea:	fba3 1302 	umull	r1, r3, r3, r2
 80046ee:	095b      	lsrs	r3, r3, #5
 80046f0:	2164      	movs	r1, #100	; 0x64
 80046f2:	fb01 f303 	mul.w	r3, r1, r3
 80046f6:	1ad3      	subs	r3, r2, r3
 80046f8:	011b      	lsls	r3, r3, #4
 80046fa:	3332      	adds	r3, #50	; 0x32
 80046fc:	4a08      	ldr	r2, [pc, #32]	; (8004720 <UART_SetConfig+0x4e4>)
 80046fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004702:	095b      	lsrs	r3, r3, #5
 8004704:	f003 020f 	and.w	r2, r3, #15
 8004708:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4422      	add	r2, r4
 8004710:	609a      	str	r2, [r3, #8]
}
 8004712:	bf00      	nop
 8004714:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004718:	46bd      	mov	sp, r7
 800471a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800471e:	bf00      	nop
 8004720:	51eb851f 	.word	0x51eb851f

08004724 <__errno>:
 8004724:	4b01      	ldr	r3, [pc, #4]	; (800472c <__errno+0x8>)
 8004726:	6818      	ldr	r0, [r3, #0]
 8004728:	4770      	bx	lr
 800472a:	bf00      	nop
 800472c:	2000000c 	.word	0x2000000c

08004730 <__libc_init_array>:
 8004730:	b570      	push	{r4, r5, r6, lr}
 8004732:	4d0d      	ldr	r5, [pc, #52]	; (8004768 <__libc_init_array+0x38>)
 8004734:	4c0d      	ldr	r4, [pc, #52]	; (800476c <__libc_init_array+0x3c>)
 8004736:	1b64      	subs	r4, r4, r5
 8004738:	10a4      	asrs	r4, r4, #2
 800473a:	2600      	movs	r6, #0
 800473c:	42a6      	cmp	r6, r4
 800473e:	d109      	bne.n	8004754 <__libc_init_array+0x24>
 8004740:	4d0b      	ldr	r5, [pc, #44]	; (8004770 <__libc_init_array+0x40>)
 8004742:	4c0c      	ldr	r4, [pc, #48]	; (8004774 <__libc_init_array+0x44>)
 8004744:	f004 fd4a 	bl	80091dc <_init>
 8004748:	1b64      	subs	r4, r4, r5
 800474a:	10a4      	asrs	r4, r4, #2
 800474c:	2600      	movs	r6, #0
 800474e:	42a6      	cmp	r6, r4
 8004750:	d105      	bne.n	800475e <__libc_init_array+0x2e>
 8004752:	bd70      	pop	{r4, r5, r6, pc}
 8004754:	f855 3b04 	ldr.w	r3, [r5], #4
 8004758:	4798      	blx	r3
 800475a:	3601      	adds	r6, #1
 800475c:	e7ee      	b.n	800473c <__libc_init_array+0xc>
 800475e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004762:	4798      	blx	r3
 8004764:	3601      	adds	r6, #1
 8004766:	e7f2      	b.n	800474e <__libc_init_array+0x1e>
 8004768:	08009b14 	.word	0x08009b14
 800476c:	08009b14 	.word	0x08009b14
 8004770:	08009b14 	.word	0x08009b14
 8004774:	08009b18 	.word	0x08009b18

08004778 <memset>:
 8004778:	4402      	add	r2, r0
 800477a:	4603      	mov	r3, r0
 800477c:	4293      	cmp	r3, r2
 800477e:	d100      	bne.n	8004782 <memset+0xa>
 8004780:	4770      	bx	lr
 8004782:	f803 1b01 	strb.w	r1, [r3], #1
 8004786:	e7f9      	b.n	800477c <memset+0x4>

08004788 <__cvt>:
 8004788:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800478c:	ec55 4b10 	vmov	r4, r5, d0
 8004790:	2d00      	cmp	r5, #0
 8004792:	460e      	mov	r6, r1
 8004794:	4619      	mov	r1, r3
 8004796:	462b      	mov	r3, r5
 8004798:	bfbb      	ittet	lt
 800479a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800479e:	461d      	movlt	r5, r3
 80047a0:	2300      	movge	r3, #0
 80047a2:	232d      	movlt	r3, #45	; 0x2d
 80047a4:	700b      	strb	r3, [r1, #0]
 80047a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80047a8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80047ac:	4691      	mov	r9, r2
 80047ae:	f023 0820 	bic.w	r8, r3, #32
 80047b2:	bfbc      	itt	lt
 80047b4:	4622      	movlt	r2, r4
 80047b6:	4614      	movlt	r4, r2
 80047b8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80047bc:	d005      	beq.n	80047ca <__cvt+0x42>
 80047be:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80047c2:	d100      	bne.n	80047c6 <__cvt+0x3e>
 80047c4:	3601      	adds	r6, #1
 80047c6:	2102      	movs	r1, #2
 80047c8:	e000      	b.n	80047cc <__cvt+0x44>
 80047ca:	2103      	movs	r1, #3
 80047cc:	ab03      	add	r3, sp, #12
 80047ce:	9301      	str	r3, [sp, #4]
 80047d0:	ab02      	add	r3, sp, #8
 80047d2:	9300      	str	r3, [sp, #0]
 80047d4:	ec45 4b10 	vmov	d0, r4, r5
 80047d8:	4653      	mov	r3, sl
 80047da:	4632      	mov	r2, r6
 80047dc:	f001 ff2c 	bl	8006638 <_dtoa_r>
 80047e0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80047e4:	4607      	mov	r7, r0
 80047e6:	d102      	bne.n	80047ee <__cvt+0x66>
 80047e8:	f019 0f01 	tst.w	r9, #1
 80047ec:	d022      	beq.n	8004834 <__cvt+0xac>
 80047ee:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80047f2:	eb07 0906 	add.w	r9, r7, r6
 80047f6:	d110      	bne.n	800481a <__cvt+0x92>
 80047f8:	783b      	ldrb	r3, [r7, #0]
 80047fa:	2b30      	cmp	r3, #48	; 0x30
 80047fc:	d10a      	bne.n	8004814 <__cvt+0x8c>
 80047fe:	2200      	movs	r2, #0
 8004800:	2300      	movs	r3, #0
 8004802:	4620      	mov	r0, r4
 8004804:	4629      	mov	r1, r5
 8004806:	f7fc f97f 	bl	8000b08 <__aeabi_dcmpeq>
 800480a:	b918      	cbnz	r0, 8004814 <__cvt+0x8c>
 800480c:	f1c6 0601 	rsb	r6, r6, #1
 8004810:	f8ca 6000 	str.w	r6, [sl]
 8004814:	f8da 3000 	ldr.w	r3, [sl]
 8004818:	4499      	add	r9, r3
 800481a:	2200      	movs	r2, #0
 800481c:	2300      	movs	r3, #0
 800481e:	4620      	mov	r0, r4
 8004820:	4629      	mov	r1, r5
 8004822:	f7fc f971 	bl	8000b08 <__aeabi_dcmpeq>
 8004826:	b108      	cbz	r0, 800482c <__cvt+0xa4>
 8004828:	f8cd 900c 	str.w	r9, [sp, #12]
 800482c:	2230      	movs	r2, #48	; 0x30
 800482e:	9b03      	ldr	r3, [sp, #12]
 8004830:	454b      	cmp	r3, r9
 8004832:	d307      	bcc.n	8004844 <__cvt+0xbc>
 8004834:	9b03      	ldr	r3, [sp, #12]
 8004836:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004838:	1bdb      	subs	r3, r3, r7
 800483a:	4638      	mov	r0, r7
 800483c:	6013      	str	r3, [r2, #0]
 800483e:	b004      	add	sp, #16
 8004840:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004844:	1c59      	adds	r1, r3, #1
 8004846:	9103      	str	r1, [sp, #12]
 8004848:	701a      	strb	r2, [r3, #0]
 800484a:	e7f0      	b.n	800482e <__cvt+0xa6>

0800484c <__exponent>:
 800484c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800484e:	4603      	mov	r3, r0
 8004850:	2900      	cmp	r1, #0
 8004852:	bfb8      	it	lt
 8004854:	4249      	neglt	r1, r1
 8004856:	f803 2b02 	strb.w	r2, [r3], #2
 800485a:	bfb4      	ite	lt
 800485c:	222d      	movlt	r2, #45	; 0x2d
 800485e:	222b      	movge	r2, #43	; 0x2b
 8004860:	2909      	cmp	r1, #9
 8004862:	7042      	strb	r2, [r0, #1]
 8004864:	dd2a      	ble.n	80048bc <__exponent+0x70>
 8004866:	f10d 0407 	add.w	r4, sp, #7
 800486a:	46a4      	mov	ip, r4
 800486c:	270a      	movs	r7, #10
 800486e:	46a6      	mov	lr, r4
 8004870:	460a      	mov	r2, r1
 8004872:	fb91 f6f7 	sdiv	r6, r1, r7
 8004876:	fb07 1516 	mls	r5, r7, r6, r1
 800487a:	3530      	adds	r5, #48	; 0x30
 800487c:	2a63      	cmp	r2, #99	; 0x63
 800487e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8004882:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004886:	4631      	mov	r1, r6
 8004888:	dcf1      	bgt.n	800486e <__exponent+0x22>
 800488a:	3130      	adds	r1, #48	; 0x30
 800488c:	f1ae 0502 	sub.w	r5, lr, #2
 8004890:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004894:	1c44      	adds	r4, r0, #1
 8004896:	4629      	mov	r1, r5
 8004898:	4561      	cmp	r1, ip
 800489a:	d30a      	bcc.n	80048b2 <__exponent+0x66>
 800489c:	f10d 0209 	add.w	r2, sp, #9
 80048a0:	eba2 020e 	sub.w	r2, r2, lr
 80048a4:	4565      	cmp	r5, ip
 80048a6:	bf88      	it	hi
 80048a8:	2200      	movhi	r2, #0
 80048aa:	4413      	add	r3, r2
 80048ac:	1a18      	subs	r0, r3, r0
 80048ae:	b003      	add	sp, #12
 80048b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80048b6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80048ba:	e7ed      	b.n	8004898 <__exponent+0x4c>
 80048bc:	2330      	movs	r3, #48	; 0x30
 80048be:	3130      	adds	r1, #48	; 0x30
 80048c0:	7083      	strb	r3, [r0, #2]
 80048c2:	70c1      	strb	r1, [r0, #3]
 80048c4:	1d03      	adds	r3, r0, #4
 80048c6:	e7f1      	b.n	80048ac <__exponent+0x60>

080048c8 <_printf_float>:
 80048c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048cc:	ed2d 8b02 	vpush	{d8}
 80048d0:	b08d      	sub	sp, #52	; 0x34
 80048d2:	460c      	mov	r4, r1
 80048d4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80048d8:	4616      	mov	r6, r2
 80048da:	461f      	mov	r7, r3
 80048dc:	4605      	mov	r5, r0
 80048de:	f003 f9bf 	bl	8007c60 <_localeconv_r>
 80048e2:	f8d0 a000 	ldr.w	sl, [r0]
 80048e6:	4650      	mov	r0, sl
 80048e8:	f7fb fc92 	bl	8000210 <strlen>
 80048ec:	2300      	movs	r3, #0
 80048ee:	930a      	str	r3, [sp, #40]	; 0x28
 80048f0:	6823      	ldr	r3, [r4, #0]
 80048f2:	9305      	str	r3, [sp, #20]
 80048f4:	f8d8 3000 	ldr.w	r3, [r8]
 80048f8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80048fc:	3307      	adds	r3, #7
 80048fe:	f023 0307 	bic.w	r3, r3, #7
 8004902:	f103 0208 	add.w	r2, r3, #8
 8004906:	f8c8 2000 	str.w	r2, [r8]
 800490a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800490e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004912:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004916:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800491a:	9307      	str	r3, [sp, #28]
 800491c:	f8cd 8018 	str.w	r8, [sp, #24]
 8004920:	ee08 0a10 	vmov	s16, r0
 8004924:	4b9f      	ldr	r3, [pc, #636]	; (8004ba4 <_printf_float+0x2dc>)
 8004926:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800492a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800492e:	f7fc f91d 	bl	8000b6c <__aeabi_dcmpun>
 8004932:	bb88      	cbnz	r0, 8004998 <_printf_float+0xd0>
 8004934:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004938:	4b9a      	ldr	r3, [pc, #616]	; (8004ba4 <_printf_float+0x2dc>)
 800493a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800493e:	f7fc f8f7 	bl	8000b30 <__aeabi_dcmple>
 8004942:	bb48      	cbnz	r0, 8004998 <_printf_float+0xd0>
 8004944:	2200      	movs	r2, #0
 8004946:	2300      	movs	r3, #0
 8004948:	4640      	mov	r0, r8
 800494a:	4649      	mov	r1, r9
 800494c:	f7fc f8e6 	bl	8000b1c <__aeabi_dcmplt>
 8004950:	b110      	cbz	r0, 8004958 <_printf_float+0x90>
 8004952:	232d      	movs	r3, #45	; 0x2d
 8004954:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004958:	4b93      	ldr	r3, [pc, #588]	; (8004ba8 <_printf_float+0x2e0>)
 800495a:	4894      	ldr	r0, [pc, #592]	; (8004bac <_printf_float+0x2e4>)
 800495c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004960:	bf94      	ite	ls
 8004962:	4698      	movls	r8, r3
 8004964:	4680      	movhi	r8, r0
 8004966:	2303      	movs	r3, #3
 8004968:	6123      	str	r3, [r4, #16]
 800496a:	9b05      	ldr	r3, [sp, #20]
 800496c:	f023 0204 	bic.w	r2, r3, #4
 8004970:	6022      	str	r2, [r4, #0]
 8004972:	f04f 0900 	mov.w	r9, #0
 8004976:	9700      	str	r7, [sp, #0]
 8004978:	4633      	mov	r3, r6
 800497a:	aa0b      	add	r2, sp, #44	; 0x2c
 800497c:	4621      	mov	r1, r4
 800497e:	4628      	mov	r0, r5
 8004980:	f000 f9d8 	bl	8004d34 <_printf_common>
 8004984:	3001      	adds	r0, #1
 8004986:	f040 8090 	bne.w	8004aaa <_printf_float+0x1e2>
 800498a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800498e:	b00d      	add	sp, #52	; 0x34
 8004990:	ecbd 8b02 	vpop	{d8}
 8004994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004998:	4642      	mov	r2, r8
 800499a:	464b      	mov	r3, r9
 800499c:	4640      	mov	r0, r8
 800499e:	4649      	mov	r1, r9
 80049a0:	f7fc f8e4 	bl	8000b6c <__aeabi_dcmpun>
 80049a4:	b140      	cbz	r0, 80049b8 <_printf_float+0xf0>
 80049a6:	464b      	mov	r3, r9
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	bfbc      	itt	lt
 80049ac:	232d      	movlt	r3, #45	; 0x2d
 80049ae:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80049b2:	487f      	ldr	r0, [pc, #508]	; (8004bb0 <_printf_float+0x2e8>)
 80049b4:	4b7f      	ldr	r3, [pc, #508]	; (8004bb4 <_printf_float+0x2ec>)
 80049b6:	e7d1      	b.n	800495c <_printf_float+0x94>
 80049b8:	6863      	ldr	r3, [r4, #4]
 80049ba:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80049be:	9206      	str	r2, [sp, #24]
 80049c0:	1c5a      	adds	r2, r3, #1
 80049c2:	d13f      	bne.n	8004a44 <_printf_float+0x17c>
 80049c4:	2306      	movs	r3, #6
 80049c6:	6063      	str	r3, [r4, #4]
 80049c8:	9b05      	ldr	r3, [sp, #20]
 80049ca:	6861      	ldr	r1, [r4, #4]
 80049cc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80049d0:	2300      	movs	r3, #0
 80049d2:	9303      	str	r3, [sp, #12]
 80049d4:	ab0a      	add	r3, sp, #40	; 0x28
 80049d6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80049da:	ab09      	add	r3, sp, #36	; 0x24
 80049dc:	ec49 8b10 	vmov	d0, r8, r9
 80049e0:	9300      	str	r3, [sp, #0]
 80049e2:	6022      	str	r2, [r4, #0]
 80049e4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80049e8:	4628      	mov	r0, r5
 80049ea:	f7ff fecd 	bl	8004788 <__cvt>
 80049ee:	9b06      	ldr	r3, [sp, #24]
 80049f0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80049f2:	2b47      	cmp	r3, #71	; 0x47
 80049f4:	4680      	mov	r8, r0
 80049f6:	d108      	bne.n	8004a0a <_printf_float+0x142>
 80049f8:	1cc8      	adds	r0, r1, #3
 80049fa:	db02      	blt.n	8004a02 <_printf_float+0x13a>
 80049fc:	6863      	ldr	r3, [r4, #4]
 80049fe:	4299      	cmp	r1, r3
 8004a00:	dd41      	ble.n	8004a86 <_printf_float+0x1be>
 8004a02:	f1ab 0b02 	sub.w	fp, fp, #2
 8004a06:	fa5f fb8b 	uxtb.w	fp, fp
 8004a0a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004a0e:	d820      	bhi.n	8004a52 <_printf_float+0x18a>
 8004a10:	3901      	subs	r1, #1
 8004a12:	465a      	mov	r2, fp
 8004a14:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004a18:	9109      	str	r1, [sp, #36]	; 0x24
 8004a1a:	f7ff ff17 	bl	800484c <__exponent>
 8004a1e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004a20:	1813      	adds	r3, r2, r0
 8004a22:	2a01      	cmp	r2, #1
 8004a24:	4681      	mov	r9, r0
 8004a26:	6123      	str	r3, [r4, #16]
 8004a28:	dc02      	bgt.n	8004a30 <_printf_float+0x168>
 8004a2a:	6822      	ldr	r2, [r4, #0]
 8004a2c:	07d2      	lsls	r2, r2, #31
 8004a2e:	d501      	bpl.n	8004a34 <_printf_float+0x16c>
 8004a30:	3301      	adds	r3, #1
 8004a32:	6123      	str	r3, [r4, #16]
 8004a34:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d09c      	beq.n	8004976 <_printf_float+0xae>
 8004a3c:	232d      	movs	r3, #45	; 0x2d
 8004a3e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a42:	e798      	b.n	8004976 <_printf_float+0xae>
 8004a44:	9a06      	ldr	r2, [sp, #24]
 8004a46:	2a47      	cmp	r2, #71	; 0x47
 8004a48:	d1be      	bne.n	80049c8 <_printf_float+0x100>
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d1bc      	bne.n	80049c8 <_printf_float+0x100>
 8004a4e:	2301      	movs	r3, #1
 8004a50:	e7b9      	b.n	80049c6 <_printf_float+0xfe>
 8004a52:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004a56:	d118      	bne.n	8004a8a <_printf_float+0x1c2>
 8004a58:	2900      	cmp	r1, #0
 8004a5a:	6863      	ldr	r3, [r4, #4]
 8004a5c:	dd0b      	ble.n	8004a76 <_printf_float+0x1ae>
 8004a5e:	6121      	str	r1, [r4, #16]
 8004a60:	b913      	cbnz	r3, 8004a68 <_printf_float+0x1a0>
 8004a62:	6822      	ldr	r2, [r4, #0]
 8004a64:	07d0      	lsls	r0, r2, #31
 8004a66:	d502      	bpl.n	8004a6e <_printf_float+0x1a6>
 8004a68:	3301      	adds	r3, #1
 8004a6a:	440b      	add	r3, r1
 8004a6c:	6123      	str	r3, [r4, #16]
 8004a6e:	65a1      	str	r1, [r4, #88]	; 0x58
 8004a70:	f04f 0900 	mov.w	r9, #0
 8004a74:	e7de      	b.n	8004a34 <_printf_float+0x16c>
 8004a76:	b913      	cbnz	r3, 8004a7e <_printf_float+0x1b6>
 8004a78:	6822      	ldr	r2, [r4, #0]
 8004a7a:	07d2      	lsls	r2, r2, #31
 8004a7c:	d501      	bpl.n	8004a82 <_printf_float+0x1ba>
 8004a7e:	3302      	adds	r3, #2
 8004a80:	e7f4      	b.n	8004a6c <_printf_float+0x1a4>
 8004a82:	2301      	movs	r3, #1
 8004a84:	e7f2      	b.n	8004a6c <_printf_float+0x1a4>
 8004a86:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004a8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a8c:	4299      	cmp	r1, r3
 8004a8e:	db05      	blt.n	8004a9c <_printf_float+0x1d4>
 8004a90:	6823      	ldr	r3, [r4, #0]
 8004a92:	6121      	str	r1, [r4, #16]
 8004a94:	07d8      	lsls	r0, r3, #31
 8004a96:	d5ea      	bpl.n	8004a6e <_printf_float+0x1a6>
 8004a98:	1c4b      	adds	r3, r1, #1
 8004a9a:	e7e7      	b.n	8004a6c <_printf_float+0x1a4>
 8004a9c:	2900      	cmp	r1, #0
 8004a9e:	bfd4      	ite	le
 8004aa0:	f1c1 0202 	rsble	r2, r1, #2
 8004aa4:	2201      	movgt	r2, #1
 8004aa6:	4413      	add	r3, r2
 8004aa8:	e7e0      	b.n	8004a6c <_printf_float+0x1a4>
 8004aaa:	6823      	ldr	r3, [r4, #0]
 8004aac:	055a      	lsls	r2, r3, #21
 8004aae:	d407      	bmi.n	8004ac0 <_printf_float+0x1f8>
 8004ab0:	6923      	ldr	r3, [r4, #16]
 8004ab2:	4642      	mov	r2, r8
 8004ab4:	4631      	mov	r1, r6
 8004ab6:	4628      	mov	r0, r5
 8004ab8:	47b8      	blx	r7
 8004aba:	3001      	adds	r0, #1
 8004abc:	d12c      	bne.n	8004b18 <_printf_float+0x250>
 8004abe:	e764      	b.n	800498a <_printf_float+0xc2>
 8004ac0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004ac4:	f240 80e0 	bls.w	8004c88 <_printf_float+0x3c0>
 8004ac8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004acc:	2200      	movs	r2, #0
 8004ace:	2300      	movs	r3, #0
 8004ad0:	f7fc f81a 	bl	8000b08 <__aeabi_dcmpeq>
 8004ad4:	2800      	cmp	r0, #0
 8004ad6:	d034      	beq.n	8004b42 <_printf_float+0x27a>
 8004ad8:	4a37      	ldr	r2, [pc, #220]	; (8004bb8 <_printf_float+0x2f0>)
 8004ada:	2301      	movs	r3, #1
 8004adc:	4631      	mov	r1, r6
 8004ade:	4628      	mov	r0, r5
 8004ae0:	47b8      	blx	r7
 8004ae2:	3001      	adds	r0, #1
 8004ae4:	f43f af51 	beq.w	800498a <_printf_float+0xc2>
 8004ae8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004aec:	429a      	cmp	r2, r3
 8004aee:	db02      	blt.n	8004af6 <_printf_float+0x22e>
 8004af0:	6823      	ldr	r3, [r4, #0]
 8004af2:	07d8      	lsls	r0, r3, #31
 8004af4:	d510      	bpl.n	8004b18 <_printf_float+0x250>
 8004af6:	ee18 3a10 	vmov	r3, s16
 8004afa:	4652      	mov	r2, sl
 8004afc:	4631      	mov	r1, r6
 8004afe:	4628      	mov	r0, r5
 8004b00:	47b8      	blx	r7
 8004b02:	3001      	adds	r0, #1
 8004b04:	f43f af41 	beq.w	800498a <_printf_float+0xc2>
 8004b08:	f04f 0800 	mov.w	r8, #0
 8004b0c:	f104 091a 	add.w	r9, r4, #26
 8004b10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b12:	3b01      	subs	r3, #1
 8004b14:	4543      	cmp	r3, r8
 8004b16:	dc09      	bgt.n	8004b2c <_printf_float+0x264>
 8004b18:	6823      	ldr	r3, [r4, #0]
 8004b1a:	079b      	lsls	r3, r3, #30
 8004b1c:	f100 8105 	bmi.w	8004d2a <_printf_float+0x462>
 8004b20:	68e0      	ldr	r0, [r4, #12]
 8004b22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004b24:	4298      	cmp	r0, r3
 8004b26:	bfb8      	it	lt
 8004b28:	4618      	movlt	r0, r3
 8004b2a:	e730      	b.n	800498e <_printf_float+0xc6>
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	464a      	mov	r2, r9
 8004b30:	4631      	mov	r1, r6
 8004b32:	4628      	mov	r0, r5
 8004b34:	47b8      	blx	r7
 8004b36:	3001      	adds	r0, #1
 8004b38:	f43f af27 	beq.w	800498a <_printf_float+0xc2>
 8004b3c:	f108 0801 	add.w	r8, r8, #1
 8004b40:	e7e6      	b.n	8004b10 <_printf_float+0x248>
 8004b42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	dc39      	bgt.n	8004bbc <_printf_float+0x2f4>
 8004b48:	4a1b      	ldr	r2, [pc, #108]	; (8004bb8 <_printf_float+0x2f0>)
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	4631      	mov	r1, r6
 8004b4e:	4628      	mov	r0, r5
 8004b50:	47b8      	blx	r7
 8004b52:	3001      	adds	r0, #1
 8004b54:	f43f af19 	beq.w	800498a <_printf_float+0xc2>
 8004b58:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	d102      	bne.n	8004b66 <_printf_float+0x29e>
 8004b60:	6823      	ldr	r3, [r4, #0]
 8004b62:	07d9      	lsls	r1, r3, #31
 8004b64:	d5d8      	bpl.n	8004b18 <_printf_float+0x250>
 8004b66:	ee18 3a10 	vmov	r3, s16
 8004b6a:	4652      	mov	r2, sl
 8004b6c:	4631      	mov	r1, r6
 8004b6e:	4628      	mov	r0, r5
 8004b70:	47b8      	blx	r7
 8004b72:	3001      	adds	r0, #1
 8004b74:	f43f af09 	beq.w	800498a <_printf_float+0xc2>
 8004b78:	f04f 0900 	mov.w	r9, #0
 8004b7c:	f104 0a1a 	add.w	sl, r4, #26
 8004b80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b82:	425b      	negs	r3, r3
 8004b84:	454b      	cmp	r3, r9
 8004b86:	dc01      	bgt.n	8004b8c <_printf_float+0x2c4>
 8004b88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b8a:	e792      	b.n	8004ab2 <_printf_float+0x1ea>
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	4652      	mov	r2, sl
 8004b90:	4631      	mov	r1, r6
 8004b92:	4628      	mov	r0, r5
 8004b94:	47b8      	blx	r7
 8004b96:	3001      	adds	r0, #1
 8004b98:	f43f aef7 	beq.w	800498a <_printf_float+0xc2>
 8004b9c:	f109 0901 	add.w	r9, r9, #1
 8004ba0:	e7ee      	b.n	8004b80 <_printf_float+0x2b8>
 8004ba2:	bf00      	nop
 8004ba4:	7fefffff 	.word	0x7fefffff
 8004ba8:	08009660 	.word	0x08009660
 8004bac:	08009664 	.word	0x08009664
 8004bb0:	0800966c 	.word	0x0800966c
 8004bb4:	08009668 	.word	0x08009668
 8004bb8:	08009670 	.word	0x08009670
 8004bbc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004bbe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	bfa8      	it	ge
 8004bc4:	461a      	movge	r2, r3
 8004bc6:	2a00      	cmp	r2, #0
 8004bc8:	4691      	mov	r9, r2
 8004bca:	dc37      	bgt.n	8004c3c <_printf_float+0x374>
 8004bcc:	f04f 0b00 	mov.w	fp, #0
 8004bd0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004bd4:	f104 021a 	add.w	r2, r4, #26
 8004bd8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004bda:	9305      	str	r3, [sp, #20]
 8004bdc:	eba3 0309 	sub.w	r3, r3, r9
 8004be0:	455b      	cmp	r3, fp
 8004be2:	dc33      	bgt.n	8004c4c <_printf_float+0x384>
 8004be4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004be8:	429a      	cmp	r2, r3
 8004bea:	db3b      	blt.n	8004c64 <_printf_float+0x39c>
 8004bec:	6823      	ldr	r3, [r4, #0]
 8004bee:	07da      	lsls	r2, r3, #31
 8004bf0:	d438      	bmi.n	8004c64 <_printf_float+0x39c>
 8004bf2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004bf4:	9a05      	ldr	r2, [sp, #20]
 8004bf6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004bf8:	1a9a      	subs	r2, r3, r2
 8004bfa:	eba3 0901 	sub.w	r9, r3, r1
 8004bfe:	4591      	cmp	r9, r2
 8004c00:	bfa8      	it	ge
 8004c02:	4691      	movge	r9, r2
 8004c04:	f1b9 0f00 	cmp.w	r9, #0
 8004c08:	dc35      	bgt.n	8004c76 <_printf_float+0x3ae>
 8004c0a:	f04f 0800 	mov.w	r8, #0
 8004c0e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004c12:	f104 0a1a 	add.w	sl, r4, #26
 8004c16:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004c1a:	1a9b      	subs	r3, r3, r2
 8004c1c:	eba3 0309 	sub.w	r3, r3, r9
 8004c20:	4543      	cmp	r3, r8
 8004c22:	f77f af79 	ble.w	8004b18 <_printf_float+0x250>
 8004c26:	2301      	movs	r3, #1
 8004c28:	4652      	mov	r2, sl
 8004c2a:	4631      	mov	r1, r6
 8004c2c:	4628      	mov	r0, r5
 8004c2e:	47b8      	blx	r7
 8004c30:	3001      	adds	r0, #1
 8004c32:	f43f aeaa 	beq.w	800498a <_printf_float+0xc2>
 8004c36:	f108 0801 	add.w	r8, r8, #1
 8004c3a:	e7ec      	b.n	8004c16 <_printf_float+0x34e>
 8004c3c:	4613      	mov	r3, r2
 8004c3e:	4631      	mov	r1, r6
 8004c40:	4642      	mov	r2, r8
 8004c42:	4628      	mov	r0, r5
 8004c44:	47b8      	blx	r7
 8004c46:	3001      	adds	r0, #1
 8004c48:	d1c0      	bne.n	8004bcc <_printf_float+0x304>
 8004c4a:	e69e      	b.n	800498a <_printf_float+0xc2>
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	4631      	mov	r1, r6
 8004c50:	4628      	mov	r0, r5
 8004c52:	9205      	str	r2, [sp, #20]
 8004c54:	47b8      	blx	r7
 8004c56:	3001      	adds	r0, #1
 8004c58:	f43f ae97 	beq.w	800498a <_printf_float+0xc2>
 8004c5c:	9a05      	ldr	r2, [sp, #20]
 8004c5e:	f10b 0b01 	add.w	fp, fp, #1
 8004c62:	e7b9      	b.n	8004bd8 <_printf_float+0x310>
 8004c64:	ee18 3a10 	vmov	r3, s16
 8004c68:	4652      	mov	r2, sl
 8004c6a:	4631      	mov	r1, r6
 8004c6c:	4628      	mov	r0, r5
 8004c6e:	47b8      	blx	r7
 8004c70:	3001      	adds	r0, #1
 8004c72:	d1be      	bne.n	8004bf2 <_printf_float+0x32a>
 8004c74:	e689      	b.n	800498a <_printf_float+0xc2>
 8004c76:	9a05      	ldr	r2, [sp, #20]
 8004c78:	464b      	mov	r3, r9
 8004c7a:	4442      	add	r2, r8
 8004c7c:	4631      	mov	r1, r6
 8004c7e:	4628      	mov	r0, r5
 8004c80:	47b8      	blx	r7
 8004c82:	3001      	adds	r0, #1
 8004c84:	d1c1      	bne.n	8004c0a <_printf_float+0x342>
 8004c86:	e680      	b.n	800498a <_printf_float+0xc2>
 8004c88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004c8a:	2a01      	cmp	r2, #1
 8004c8c:	dc01      	bgt.n	8004c92 <_printf_float+0x3ca>
 8004c8e:	07db      	lsls	r3, r3, #31
 8004c90:	d538      	bpl.n	8004d04 <_printf_float+0x43c>
 8004c92:	2301      	movs	r3, #1
 8004c94:	4642      	mov	r2, r8
 8004c96:	4631      	mov	r1, r6
 8004c98:	4628      	mov	r0, r5
 8004c9a:	47b8      	blx	r7
 8004c9c:	3001      	adds	r0, #1
 8004c9e:	f43f ae74 	beq.w	800498a <_printf_float+0xc2>
 8004ca2:	ee18 3a10 	vmov	r3, s16
 8004ca6:	4652      	mov	r2, sl
 8004ca8:	4631      	mov	r1, r6
 8004caa:	4628      	mov	r0, r5
 8004cac:	47b8      	blx	r7
 8004cae:	3001      	adds	r0, #1
 8004cb0:	f43f ae6b 	beq.w	800498a <_printf_float+0xc2>
 8004cb4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004cb8:	2200      	movs	r2, #0
 8004cba:	2300      	movs	r3, #0
 8004cbc:	f7fb ff24 	bl	8000b08 <__aeabi_dcmpeq>
 8004cc0:	b9d8      	cbnz	r0, 8004cfa <_printf_float+0x432>
 8004cc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004cc4:	f108 0201 	add.w	r2, r8, #1
 8004cc8:	3b01      	subs	r3, #1
 8004cca:	4631      	mov	r1, r6
 8004ccc:	4628      	mov	r0, r5
 8004cce:	47b8      	blx	r7
 8004cd0:	3001      	adds	r0, #1
 8004cd2:	d10e      	bne.n	8004cf2 <_printf_float+0x42a>
 8004cd4:	e659      	b.n	800498a <_printf_float+0xc2>
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	4652      	mov	r2, sl
 8004cda:	4631      	mov	r1, r6
 8004cdc:	4628      	mov	r0, r5
 8004cde:	47b8      	blx	r7
 8004ce0:	3001      	adds	r0, #1
 8004ce2:	f43f ae52 	beq.w	800498a <_printf_float+0xc2>
 8004ce6:	f108 0801 	add.w	r8, r8, #1
 8004cea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004cec:	3b01      	subs	r3, #1
 8004cee:	4543      	cmp	r3, r8
 8004cf0:	dcf1      	bgt.n	8004cd6 <_printf_float+0x40e>
 8004cf2:	464b      	mov	r3, r9
 8004cf4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004cf8:	e6dc      	b.n	8004ab4 <_printf_float+0x1ec>
 8004cfa:	f04f 0800 	mov.w	r8, #0
 8004cfe:	f104 0a1a 	add.w	sl, r4, #26
 8004d02:	e7f2      	b.n	8004cea <_printf_float+0x422>
 8004d04:	2301      	movs	r3, #1
 8004d06:	4642      	mov	r2, r8
 8004d08:	e7df      	b.n	8004cca <_printf_float+0x402>
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	464a      	mov	r2, r9
 8004d0e:	4631      	mov	r1, r6
 8004d10:	4628      	mov	r0, r5
 8004d12:	47b8      	blx	r7
 8004d14:	3001      	adds	r0, #1
 8004d16:	f43f ae38 	beq.w	800498a <_printf_float+0xc2>
 8004d1a:	f108 0801 	add.w	r8, r8, #1
 8004d1e:	68e3      	ldr	r3, [r4, #12]
 8004d20:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004d22:	1a5b      	subs	r3, r3, r1
 8004d24:	4543      	cmp	r3, r8
 8004d26:	dcf0      	bgt.n	8004d0a <_printf_float+0x442>
 8004d28:	e6fa      	b.n	8004b20 <_printf_float+0x258>
 8004d2a:	f04f 0800 	mov.w	r8, #0
 8004d2e:	f104 0919 	add.w	r9, r4, #25
 8004d32:	e7f4      	b.n	8004d1e <_printf_float+0x456>

08004d34 <_printf_common>:
 8004d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d38:	4616      	mov	r6, r2
 8004d3a:	4699      	mov	r9, r3
 8004d3c:	688a      	ldr	r2, [r1, #8]
 8004d3e:	690b      	ldr	r3, [r1, #16]
 8004d40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004d44:	4293      	cmp	r3, r2
 8004d46:	bfb8      	it	lt
 8004d48:	4613      	movlt	r3, r2
 8004d4a:	6033      	str	r3, [r6, #0]
 8004d4c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004d50:	4607      	mov	r7, r0
 8004d52:	460c      	mov	r4, r1
 8004d54:	b10a      	cbz	r2, 8004d5a <_printf_common+0x26>
 8004d56:	3301      	adds	r3, #1
 8004d58:	6033      	str	r3, [r6, #0]
 8004d5a:	6823      	ldr	r3, [r4, #0]
 8004d5c:	0699      	lsls	r1, r3, #26
 8004d5e:	bf42      	ittt	mi
 8004d60:	6833      	ldrmi	r3, [r6, #0]
 8004d62:	3302      	addmi	r3, #2
 8004d64:	6033      	strmi	r3, [r6, #0]
 8004d66:	6825      	ldr	r5, [r4, #0]
 8004d68:	f015 0506 	ands.w	r5, r5, #6
 8004d6c:	d106      	bne.n	8004d7c <_printf_common+0x48>
 8004d6e:	f104 0a19 	add.w	sl, r4, #25
 8004d72:	68e3      	ldr	r3, [r4, #12]
 8004d74:	6832      	ldr	r2, [r6, #0]
 8004d76:	1a9b      	subs	r3, r3, r2
 8004d78:	42ab      	cmp	r3, r5
 8004d7a:	dc26      	bgt.n	8004dca <_printf_common+0x96>
 8004d7c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004d80:	1e13      	subs	r3, r2, #0
 8004d82:	6822      	ldr	r2, [r4, #0]
 8004d84:	bf18      	it	ne
 8004d86:	2301      	movne	r3, #1
 8004d88:	0692      	lsls	r2, r2, #26
 8004d8a:	d42b      	bmi.n	8004de4 <_printf_common+0xb0>
 8004d8c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004d90:	4649      	mov	r1, r9
 8004d92:	4638      	mov	r0, r7
 8004d94:	47c0      	blx	r8
 8004d96:	3001      	adds	r0, #1
 8004d98:	d01e      	beq.n	8004dd8 <_printf_common+0xa4>
 8004d9a:	6823      	ldr	r3, [r4, #0]
 8004d9c:	68e5      	ldr	r5, [r4, #12]
 8004d9e:	6832      	ldr	r2, [r6, #0]
 8004da0:	f003 0306 	and.w	r3, r3, #6
 8004da4:	2b04      	cmp	r3, #4
 8004da6:	bf08      	it	eq
 8004da8:	1aad      	subeq	r5, r5, r2
 8004daa:	68a3      	ldr	r3, [r4, #8]
 8004dac:	6922      	ldr	r2, [r4, #16]
 8004dae:	bf0c      	ite	eq
 8004db0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004db4:	2500      	movne	r5, #0
 8004db6:	4293      	cmp	r3, r2
 8004db8:	bfc4      	itt	gt
 8004dba:	1a9b      	subgt	r3, r3, r2
 8004dbc:	18ed      	addgt	r5, r5, r3
 8004dbe:	2600      	movs	r6, #0
 8004dc0:	341a      	adds	r4, #26
 8004dc2:	42b5      	cmp	r5, r6
 8004dc4:	d11a      	bne.n	8004dfc <_printf_common+0xc8>
 8004dc6:	2000      	movs	r0, #0
 8004dc8:	e008      	b.n	8004ddc <_printf_common+0xa8>
 8004dca:	2301      	movs	r3, #1
 8004dcc:	4652      	mov	r2, sl
 8004dce:	4649      	mov	r1, r9
 8004dd0:	4638      	mov	r0, r7
 8004dd2:	47c0      	blx	r8
 8004dd4:	3001      	adds	r0, #1
 8004dd6:	d103      	bne.n	8004de0 <_printf_common+0xac>
 8004dd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004de0:	3501      	adds	r5, #1
 8004de2:	e7c6      	b.n	8004d72 <_printf_common+0x3e>
 8004de4:	18e1      	adds	r1, r4, r3
 8004de6:	1c5a      	adds	r2, r3, #1
 8004de8:	2030      	movs	r0, #48	; 0x30
 8004dea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004dee:	4422      	add	r2, r4
 8004df0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004df4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004df8:	3302      	adds	r3, #2
 8004dfa:	e7c7      	b.n	8004d8c <_printf_common+0x58>
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	4622      	mov	r2, r4
 8004e00:	4649      	mov	r1, r9
 8004e02:	4638      	mov	r0, r7
 8004e04:	47c0      	blx	r8
 8004e06:	3001      	adds	r0, #1
 8004e08:	d0e6      	beq.n	8004dd8 <_printf_common+0xa4>
 8004e0a:	3601      	adds	r6, #1
 8004e0c:	e7d9      	b.n	8004dc2 <_printf_common+0x8e>
	...

08004e10 <_printf_i>:
 8004e10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e14:	7e0f      	ldrb	r7, [r1, #24]
 8004e16:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004e18:	2f78      	cmp	r7, #120	; 0x78
 8004e1a:	4691      	mov	r9, r2
 8004e1c:	4680      	mov	r8, r0
 8004e1e:	460c      	mov	r4, r1
 8004e20:	469a      	mov	sl, r3
 8004e22:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004e26:	d807      	bhi.n	8004e38 <_printf_i+0x28>
 8004e28:	2f62      	cmp	r7, #98	; 0x62
 8004e2a:	d80a      	bhi.n	8004e42 <_printf_i+0x32>
 8004e2c:	2f00      	cmp	r7, #0
 8004e2e:	f000 80d8 	beq.w	8004fe2 <_printf_i+0x1d2>
 8004e32:	2f58      	cmp	r7, #88	; 0x58
 8004e34:	f000 80a3 	beq.w	8004f7e <_printf_i+0x16e>
 8004e38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e3c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004e40:	e03a      	b.n	8004eb8 <_printf_i+0xa8>
 8004e42:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004e46:	2b15      	cmp	r3, #21
 8004e48:	d8f6      	bhi.n	8004e38 <_printf_i+0x28>
 8004e4a:	a101      	add	r1, pc, #4	; (adr r1, 8004e50 <_printf_i+0x40>)
 8004e4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004e50:	08004ea9 	.word	0x08004ea9
 8004e54:	08004ebd 	.word	0x08004ebd
 8004e58:	08004e39 	.word	0x08004e39
 8004e5c:	08004e39 	.word	0x08004e39
 8004e60:	08004e39 	.word	0x08004e39
 8004e64:	08004e39 	.word	0x08004e39
 8004e68:	08004ebd 	.word	0x08004ebd
 8004e6c:	08004e39 	.word	0x08004e39
 8004e70:	08004e39 	.word	0x08004e39
 8004e74:	08004e39 	.word	0x08004e39
 8004e78:	08004e39 	.word	0x08004e39
 8004e7c:	08004fc9 	.word	0x08004fc9
 8004e80:	08004eed 	.word	0x08004eed
 8004e84:	08004fab 	.word	0x08004fab
 8004e88:	08004e39 	.word	0x08004e39
 8004e8c:	08004e39 	.word	0x08004e39
 8004e90:	08004feb 	.word	0x08004feb
 8004e94:	08004e39 	.word	0x08004e39
 8004e98:	08004eed 	.word	0x08004eed
 8004e9c:	08004e39 	.word	0x08004e39
 8004ea0:	08004e39 	.word	0x08004e39
 8004ea4:	08004fb3 	.word	0x08004fb3
 8004ea8:	682b      	ldr	r3, [r5, #0]
 8004eaa:	1d1a      	adds	r2, r3, #4
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	602a      	str	r2, [r5, #0]
 8004eb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004eb4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004eb8:	2301      	movs	r3, #1
 8004eba:	e0a3      	b.n	8005004 <_printf_i+0x1f4>
 8004ebc:	6820      	ldr	r0, [r4, #0]
 8004ebe:	6829      	ldr	r1, [r5, #0]
 8004ec0:	0606      	lsls	r6, r0, #24
 8004ec2:	f101 0304 	add.w	r3, r1, #4
 8004ec6:	d50a      	bpl.n	8004ede <_printf_i+0xce>
 8004ec8:	680e      	ldr	r6, [r1, #0]
 8004eca:	602b      	str	r3, [r5, #0]
 8004ecc:	2e00      	cmp	r6, #0
 8004ece:	da03      	bge.n	8004ed8 <_printf_i+0xc8>
 8004ed0:	232d      	movs	r3, #45	; 0x2d
 8004ed2:	4276      	negs	r6, r6
 8004ed4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ed8:	485e      	ldr	r0, [pc, #376]	; (8005054 <_printf_i+0x244>)
 8004eda:	230a      	movs	r3, #10
 8004edc:	e019      	b.n	8004f12 <_printf_i+0x102>
 8004ede:	680e      	ldr	r6, [r1, #0]
 8004ee0:	602b      	str	r3, [r5, #0]
 8004ee2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004ee6:	bf18      	it	ne
 8004ee8:	b236      	sxthne	r6, r6
 8004eea:	e7ef      	b.n	8004ecc <_printf_i+0xbc>
 8004eec:	682b      	ldr	r3, [r5, #0]
 8004eee:	6820      	ldr	r0, [r4, #0]
 8004ef0:	1d19      	adds	r1, r3, #4
 8004ef2:	6029      	str	r1, [r5, #0]
 8004ef4:	0601      	lsls	r1, r0, #24
 8004ef6:	d501      	bpl.n	8004efc <_printf_i+0xec>
 8004ef8:	681e      	ldr	r6, [r3, #0]
 8004efa:	e002      	b.n	8004f02 <_printf_i+0xf2>
 8004efc:	0646      	lsls	r6, r0, #25
 8004efe:	d5fb      	bpl.n	8004ef8 <_printf_i+0xe8>
 8004f00:	881e      	ldrh	r6, [r3, #0]
 8004f02:	4854      	ldr	r0, [pc, #336]	; (8005054 <_printf_i+0x244>)
 8004f04:	2f6f      	cmp	r7, #111	; 0x6f
 8004f06:	bf0c      	ite	eq
 8004f08:	2308      	moveq	r3, #8
 8004f0a:	230a      	movne	r3, #10
 8004f0c:	2100      	movs	r1, #0
 8004f0e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004f12:	6865      	ldr	r5, [r4, #4]
 8004f14:	60a5      	str	r5, [r4, #8]
 8004f16:	2d00      	cmp	r5, #0
 8004f18:	bfa2      	ittt	ge
 8004f1a:	6821      	ldrge	r1, [r4, #0]
 8004f1c:	f021 0104 	bicge.w	r1, r1, #4
 8004f20:	6021      	strge	r1, [r4, #0]
 8004f22:	b90e      	cbnz	r6, 8004f28 <_printf_i+0x118>
 8004f24:	2d00      	cmp	r5, #0
 8004f26:	d04d      	beq.n	8004fc4 <_printf_i+0x1b4>
 8004f28:	4615      	mov	r5, r2
 8004f2a:	fbb6 f1f3 	udiv	r1, r6, r3
 8004f2e:	fb03 6711 	mls	r7, r3, r1, r6
 8004f32:	5dc7      	ldrb	r7, [r0, r7]
 8004f34:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004f38:	4637      	mov	r7, r6
 8004f3a:	42bb      	cmp	r3, r7
 8004f3c:	460e      	mov	r6, r1
 8004f3e:	d9f4      	bls.n	8004f2a <_printf_i+0x11a>
 8004f40:	2b08      	cmp	r3, #8
 8004f42:	d10b      	bne.n	8004f5c <_printf_i+0x14c>
 8004f44:	6823      	ldr	r3, [r4, #0]
 8004f46:	07de      	lsls	r6, r3, #31
 8004f48:	d508      	bpl.n	8004f5c <_printf_i+0x14c>
 8004f4a:	6923      	ldr	r3, [r4, #16]
 8004f4c:	6861      	ldr	r1, [r4, #4]
 8004f4e:	4299      	cmp	r1, r3
 8004f50:	bfde      	ittt	le
 8004f52:	2330      	movle	r3, #48	; 0x30
 8004f54:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004f58:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004f5c:	1b52      	subs	r2, r2, r5
 8004f5e:	6122      	str	r2, [r4, #16]
 8004f60:	f8cd a000 	str.w	sl, [sp]
 8004f64:	464b      	mov	r3, r9
 8004f66:	aa03      	add	r2, sp, #12
 8004f68:	4621      	mov	r1, r4
 8004f6a:	4640      	mov	r0, r8
 8004f6c:	f7ff fee2 	bl	8004d34 <_printf_common>
 8004f70:	3001      	adds	r0, #1
 8004f72:	d14c      	bne.n	800500e <_printf_i+0x1fe>
 8004f74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004f78:	b004      	add	sp, #16
 8004f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f7e:	4835      	ldr	r0, [pc, #212]	; (8005054 <_printf_i+0x244>)
 8004f80:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004f84:	6829      	ldr	r1, [r5, #0]
 8004f86:	6823      	ldr	r3, [r4, #0]
 8004f88:	f851 6b04 	ldr.w	r6, [r1], #4
 8004f8c:	6029      	str	r1, [r5, #0]
 8004f8e:	061d      	lsls	r5, r3, #24
 8004f90:	d514      	bpl.n	8004fbc <_printf_i+0x1ac>
 8004f92:	07df      	lsls	r7, r3, #31
 8004f94:	bf44      	itt	mi
 8004f96:	f043 0320 	orrmi.w	r3, r3, #32
 8004f9a:	6023      	strmi	r3, [r4, #0]
 8004f9c:	b91e      	cbnz	r6, 8004fa6 <_printf_i+0x196>
 8004f9e:	6823      	ldr	r3, [r4, #0]
 8004fa0:	f023 0320 	bic.w	r3, r3, #32
 8004fa4:	6023      	str	r3, [r4, #0]
 8004fa6:	2310      	movs	r3, #16
 8004fa8:	e7b0      	b.n	8004f0c <_printf_i+0xfc>
 8004faa:	6823      	ldr	r3, [r4, #0]
 8004fac:	f043 0320 	orr.w	r3, r3, #32
 8004fb0:	6023      	str	r3, [r4, #0]
 8004fb2:	2378      	movs	r3, #120	; 0x78
 8004fb4:	4828      	ldr	r0, [pc, #160]	; (8005058 <_printf_i+0x248>)
 8004fb6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004fba:	e7e3      	b.n	8004f84 <_printf_i+0x174>
 8004fbc:	0659      	lsls	r1, r3, #25
 8004fbe:	bf48      	it	mi
 8004fc0:	b2b6      	uxthmi	r6, r6
 8004fc2:	e7e6      	b.n	8004f92 <_printf_i+0x182>
 8004fc4:	4615      	mov	r5, r2
 8004fc6:	e7bb      	b.n	8004f40 <_printf_i+0x130>
 8004fc8:	682b      	ldr	r3, [r5, #0]
 8004fca:	6826      	ldr	r6, [r4, #0]
 8004fcc:	6961      	ldr	r1, [r4, #20]
 8004fce:	1d18      	adds	r0, r3, #4
 8004fd0:	6028      	str	r0, [r5, #0]
 8004fd2:	0635      	lsls	r5, r6, #24
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	d501      	bpl.n	8004fdc <_printf_i+0x1cc>
 8004fd8:	6019      	str	r1, [r3, #0]
 8004fda:	e002      	b.n	8004fe2 <_printf_i+0x1d2>
 8004fdc:	0670      	lsls	r0, r6, #25
 8004fde:	d5fb      	bpl.n	8004fd8 <_printf_i+0x1c8>
 8004fe0:	8019      	strh	r1, [r3, #0]
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	6123      	str	r3, [r4, #16]
 8004fe6:	4615      	mov	r5, r2
 8004fe8:	e7ba      	b.n	8004f60 <_printf_i+0x150>
 8004fea:	682b      	ldr	r3, [r5, #0]
 8004fec:	1d1a      	adds	r2, r3, #4
 8004fee:	602a      	str	r2, [r5, #0]
 8004ff0:	681d      	ldr	r5, [r3, #0]
 8004ff2:	6862      	ldr	r2, [r4, #4]
 8004ff4:	2100      	movs	r1, #0
 8004ff6:	4628      	mov	r0, r5
 8004ff8:	f7fb f912 	bl	8000220 <memchr>
 8004ffc:	b108      	cbz	r0, 8005002 <_printf_i+0x1f2>
 8004ffe:	1b40      	subs	r0, r0, r5
 8005000:	6060      	str	r0, [r4, #4]
 8005002:	6863      	ldr	r3, [r4, #4]
 8005004:	6123      	str	r3, [r4, #16]
 8005006:	2300      	movs	r3, #0
 8005008:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800500c:	e7a8      	b.n	8004f60 <_printf_i+0x150>
 800500e:	6923      	ldr	r3, [r4, #16]
 8005010:	462a      	mov	r2, r5
 8005012:	4649      	mov	r1, r9
 8005014:	4640      	mov	r0, r8
 8005016:	47d0      	blx	sl
 8005018:	3001      	adds	r0, #1
 800501a:	d0ab      	beq.n	8004f74 <_printf_i+0x164>
 800501c:	6823      	ldr	r3, [r4, #0]
 800501e:	079b      	lsls	r3, r3, #30
 8005020:	d413      	bmi.n	800504a <_printf_i+0x23a>
 8005022:	68e0      	ldr	r0, [r4, #12]
 8005024:	9b03      	ldr	r3, [sp, #12]
 8005026:	4298      	cmp	r0, r3
 8005028:	bfb8      	it	lt
 800502a:	4618      	movlt	r0, r3
 800502c:	e7a4      	b.n	8004f78 <_printf_i+0x168>
 800502e:	2301      	movs	r3, #1
 8005030:	4632      	mov	r2, r6
 8005032:	4649      	mov	r1, r9
 8005034:	4640      	mov	r0, r8
 8005036:	47d0      	blx	sl
 8005038:	3001      	adds	r0, #1
 800503a:	d09b      	beq.n	8004f74 <_printf_i+0x164>
 800503c:	3501      	adds	r5, #1
 800503e:	68e3      	ldr	r3, [r4, #12]
 8005040:	9903      	ldr	r1, [sp, #12]
 8005042:	1a5b      	subs	r3, r3, r1
 8005044:	42ab      	cmp	r3, r5
 8005046:	dcf2      	bgt.n	800502e <_printf_i+0x21e>
 8005048:	e7eb      	b.n	8005022 <_printf_i+0x212>
 800504a:	2500      	movs	r5, #0
 800504c:	f104 0619 	add.w	r6, r4, #25
 8005050:	e7f5      	b.n	800503e <_printf_i+0x22e>
 8005052:	bf00      	nop
 8005054:	08009672 	.word	0x08009672
 8005058:	08009683 	.word	0x08009683

0800505c <_scanf_float>:
 800505c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005060:	b087      	sub	sp, #28
 8005062:	4617      	mov	r7, r2
 8005064:	9303      	str	r3, [sp, #12]
 8005066:	688b      	ldr	r3, [r1, #8]
 8005068:	1e5a      	subs	r2, r3, #1
 800506a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800506e:	bf83      	ittte	hi
 8005070:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005074:	195b      	addhi	r3, r3, r5
 8005076:	9302      	strhi	r3, [sp, #8]
 8005078:	2300      	movls	r3, #0
 800507a:	bf86      	itte	hi
 800507c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005080:	608b      	strhi	r3, [r1, #8]
 8005082:	9302      	strls	r3, [sp, #8]
 8005084:	680b      	ldr	r3, [r1, #0]
 8005086:	468b      	mov	fp, r1
 8005088:	2500      	movs	r5, #0
 800508a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800508e:	f84b 3b1c 	str.w	r3, [fp], #28
 8005092:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005096:	4680      	mov	r8, r0
 8005098:	460c      	mov	r4, r1
 800509a:	465e      	mov	r6, fp
 800509c:	46aa      	mov	sl, r5
 800509e:	46a9      	mov	r9, r5
 80050a0:	9501      	str	r5, [sp, #4]
 80050a2:	68a2      	ldr	r2, [r4, #8]
 80050a4:	b152      	cbz	r2, 80050bc <_scanf_float+0x60>
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	781b      	ldrb	r3, [r3, #0]
 80050aa:	2b4e      	cmp	r3, #78	; 0x4e
 80050ac:	d864      	bhi.n	8005178 <_scanf_float+0x11c>
 80050ae:	2b40      	cmp	r3, #64	; 0x40
 80050b0:	d83c      	bhi.n	800512c <_scanf_float+0xd0>
 80050b2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80050b6:	b2c8      	uxtb	r0, r1
 80050b8:	280e      	cmp	r0, #14
 80050ba:	d93a      	bls.n	8005132 <_scanf_float+0xd6>
 80050bc:	f1b9 0f00 	cmp.w	r9, #0
 80050c0:	d003      	beq.n	80050ca <_scanf_float+0x6e>
 80050c2:	6823      	ldr	r3, [r4, #0]
 80050c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050c8:	6023      	str	r3, [r4, #0]
 80050ca:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80050ce:	f1ba 0f01 	cmp.w	sl, #1
 80050d2:	f200 8113 	bhi.w	80052fc <_scanf_float+0x2a0>
 80050d6:	455e      	cmp	r6, fp
 80050d8:	f200 8105 	bhi.w	80052e6 <_scanf_float+0x28a>
 80050dc:	2501      	movs	r5, #1
 80050de:	4628      	mov	r0, r5
 80050e0:	b007      	add	sp, #28
 80050e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050e6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80050ea:	2a0d      	cmp	r2, #13
 80050ec:	d8e6      	bhi.n	80050bc <_scanf_float+0x60>
 80050ee:	a101      	add	r1, pc, #4	; (adr r1, 80050f4 <_scanf_float+0x98>)
 80050f0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80050f4:	08005233 	.word	0x08005233
 80050f8:	080050bd 	.word	0x080050bd
 80050fc:	080050bd 	.word	0x080050bd
 8005100:	080050bd 	.word	0x080050bd
 8005104:	08005293 	.word	0x08005293
 8005108:	0800526b 	.word	0x0800526b
 800510c:	080050bd 	.word	0x080050bd
 8005110:	080050bd 	.word	0x080050bd
 8005114:	08005241 	.word	0x08005241
 8005118:	080050bd 	.word	0x080050bd
 800511c:	080050bd 	.word	0x080050bd
 8005120:	080050bd 	.word	0x080050bd
 8005124:	080050bd 	.word	0x080050bd
 8005128:	080051f9 	.word	0x080051f9
 800512c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8005130:	e7db      	b.n	80050ea <_scanf_float+0x8e>
 8005132:	290e      	cmp	r1, #14
 8005134:	d8c2      	bhi.n	80050bc <_scanf_float+0x60>
 8005136:	a001      	add	r0, pc, #4	; (adr r0, 800513c <_scanf_float+0xe0>)
 8005138:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800513c:	080051eb 	.word	0x080051eb
 8005140:	080050bd 	.word	0x080050bd
 8005144:	080051eb 	.word	0x080051eb
 8005148:	0800527f 	.word	0x0800527f
 800514c:	080050bd 	.word	0x080050bd
 8005150:	08005199 	.word	0x08005199
 8005154:	080051d5 	.word	0x080051d5
 8005158:	080051d5 	.word	0x080051d5
 800515c:	080051d5 	.word	0x080051d5
 8005160:	080051d5 	.word	0x080051d5
 8005164:	080051d5 	.word	0x080051d5
 8005168:	080051d5 	.word	0x080051d5
 800516c:	080051d5 	.word	0x080051d5
 8005170:	080051d5 	.word	0x080051d5
 8005174:	080051d5 	.word	0x080051d5
 8005178:	2b6e      	cmp	r3, #110	; 0x6e
 800517a:	d809      	bhi.n	8005190 <_scanf_float+0x134>
 800517c:	2b60      	cmp	r3, #96	; 0x60
 800517e:	d8b2      	bhi.n	80050e6 <_scanf_float+0x8a>
 8005180:	2b54      	cmp	r3, #84	; 0x54
 8005182:	d077      	beq.n	8005274 <_scanf_float+0x218>
 8005184:	2b59      	cmp	r3, #89	; 0x59
 8005186:	d199      	bne.n	80050bc <_scanf_float+0x60>
 8005188:	2d07      	cmp	r5, #7
 800518a:	d197      	bne.n	80050bc <_scanf_float+0x60>
 800518c:	2508      	movs	r5, #8
 800518e:	e029      	b.n	80051e4 <_scanf_float+0x188>
 8005190:	2b74      	cmp	r3, #116	; 0x74
 8005192:	d06f      	beq.n	8005274 <_scanf_float+0x218>
 8005194:	2b79      	cmp	r3, #121	; 0x79
 8005196:	e7f6      	b.n	8005186 <_scanf_float+0x12a>
 8005198:	6821      	ldr	r1, [r4, #0]
 800519a:	05c8      	lsls	r0, r1, #23
 800519c:	d51a      	bpl.n	80051d4 <_scanf_float+0x178>
 800519e:	9b02      	ldr	r3, [sp, #8]
 80051a0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80051a4:	6021      	str	r1, [r4, #0]
 80051a6:	f109 0901 	add.w	r9, r9, #1
 80051aa:	b11b      	cbz	r3, 80051b4 <_scanf_float+0x158>
 80051ac:	3b01      	subs	r3, #1
 80051ae:	3201      	adds	r2, #1
 80051b0:	9302      	str	r3, [sp, #8]
 80051b2:	60a2      	str	r2, [r4, #8]
 80051b4:	68a3      	ldr	r3, [r4, #8]
 80051b6:	3b01      	subs	r3, #1
 80051b8:	60a3      	str	r3, [r4, #8]
 80051ba:	6923      	ldr	r3, [r4, #16]
 80051bc:	3301      	adds	r3, #1
 80051be:	6123      	str	r3, [r4, #16]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	3b01      	subs	r3, #1
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	607b      	str	r3, [r7, #4]
 80051c8:	f340 8084 	ble.w	80052d4 <_scanf_float+0x278>
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	3301      	adds	r3, #1
 80051d0:	603b      	str	r3, [r7, #0]
 80051d2:	e766      	b.n	80050a2 <_scanf_float+0x46>
 80051d4:	eb1a 0f05 	cmn.w	sl, r5
 80051d8:	f47f af70 	bne.w	80050bc <_scanf_float+0x60>
 80051dc:	6822      	ldr	r2, [r4, #0]
 80051de:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80051e2:	6022      	str	r2, [r4, #0]
 80051e4:	f806 3b01 	strb.w	r3, [r6], #1
 80051e8:	e7e4      	b.n	80051b4 <_scanf_float+0x158>
 80051ea:	6822      	ldr	r2, [r4, #0]
 80051ec:	0610      	lsls	r0, r2, #24
 80051ee:	f57f af65 	bpl.w	80050bc <_scanf_float+0x60>
 80051f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80051f6:	e7f4      	b.n	80051e2 <_scanf_float+0x186>
 80051f8:	f1ba 0f00 	cmp.w	sl, #0
 80051fc:	d10e      	bne.n	800521c <_scanf_float+0x1c0>
 80051fe:	f1b9 0f00 	cmp.w	r9, #0
 8005202:	d10e      	bne.n	8005222 <_scanf_float+0x1c6>
 8005204:	6822      	ldr	r2, [r4, #0]
 8005206:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800520a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800520e:	d108      	bne.n	8005222 <_scanf_float+0x1c6>
 8005210:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005214:	6022      	str	r2, [r4, #0]
 8005216:	f04f 0a01 	mov.w	sl, #1
 800521a:	e7e3      	b.n	80051e4 <_scanf_float+0x188>
 800521c:	f1ba 0f02 	cmp.w	sl, #2
 8005220:	d055      	beq.n	80052ce <_scanf_float+0x272>
 8005222:	2d01      	cmp	r5, #1
 8005224:	d002      	beq.n	800522c <_scanf_float+0x1d0>
 8005226:	2d04      	cmp	r5, #4
 8005228:	f47f af48 	bne.w	80050bc <_scanf_float+0x60>
 800522c:	3501      	adds	r5, #1
 800522e:	b2ed      	uxtb	r5, r5
 8005230:	e7d8      	b.n	80051e4 <_scanf_float+0x188>
 8005232:	f1ba 0f01 	cmp.w	sl, #1
 8005236:	f47f af41 	bne.w	80050bc <_scanf_float+0x60>
 800523a:	f04f 0a02 	mov.w	sl, #2
 800523e:	e7d1      	b.n	80051e4 <_scanf_float+0x188>
 8005240:	b97d      	cbnz	r5, 8005262 <_scanf_float+0x206>
 8005242:	f1b9 0f00 	cmp.w	r9, #0
 8005246:	f47f af3c 	bne.w	80050c2 <_scanf_float+0x66>
 800524a:	6822      	ldr	r2, [r4, #0]
 800524c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005250:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005254:	f47f af39 	bne.w	80050ca <_scanf_float+0x6e>
 8005258:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800525c:	6022      	str	r2, [r4, #0]
 800525e:	2501      	movs	r5, #1
 8005260:	e7c0      	b.n	80051e4 <_scanf_float+0x188>
 8005262:	2d03      	cmp	r5, #3
 8005264:	d0e2      	beq.n	800522c <_scanf_float+0x1d0>
 8005266:	2d05      	cmp	r5, #5
 8005268:	e7de      	b.n	8005228 <_scanf_float+0x1cc>
 800526a:	2d02      	cmp	r5, #2
 800526c:	f47f af26 	bne.w	80050bc <_scanf_float+0x60>
 8005270:	2503      	movs	r5, #3
 8005272:	e7b7      	b.n	80051e4 <_scanf_float+0x188>
 8005274:	2d06      	cmp	r5, #6
 8005276:	f47f af21 	bne.w	80050bc <_scanf_float+0x60>
 800527a:	2507      	movs	r5, #7
 800527c:	e7b2      	b.n	80051e4 <_scanf_float+0x188>
 800527e:	6822      	ldr	r2, [r4, #0]
 8005280:	0591      	lsls	r1, r2, #22
 8005282:	f57f af1b 	bpl.w	80050bc <_scanf_float+0x60>
 8005286:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800528a:	6022      	str	r2, [r4, #0]
 800528c:	f8cd 9004 	str.w	r9, [sp, #4]
 8005290:	e7a8      	b.n	80051e4 <_scanf_float+0x188>
 8005292:	6822      	ldr	r2, [r4, #0]
 8005294:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8005298:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800529c:	d006      	beq.n	80052ac <_scanf_float+0x250>
 800529e:	0550      	lsls	r0, r2, #21
 80052a0:	f57f af0c 	bpl.w	80050bc <_scanf_float+0x60>
 80052a4:	f1b9 0f00 	cmp.w	r9, #0
 80052a8:	f43f af0f 	beq.w	80050ca <_scanf_float+0x6e>
 80052ac:	0591      	lsls	r1, r2, #22
 80052ae:	bf58      	it	pl
 80052b0:	9901      	ldrpl	r1, [sp, #4]
 80052b2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80052b6:	bf58      	it	pl
 80052b8:	eba9 0101 	subpl.w	r1, r9, r1
 80052bc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80052c0:	bf58      	it	pl
 80052c2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80052c6:	6022      	str	r2, [r4, #0]
 80052c8:	f04f 0900 	mov.w	r9, #0
 80052cc:	e78a      	b.n	80051e4 <_scanf_float+0x188>
 80052ce:	f04f 0a03 	mov.w	sl, #3
 80052d2:	e787      	b.n	80051e4 <_scanf_float+0x188>
 80052d4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80052d8:	4639      	mov	r1, r7
 80052da:	4640      	mov	r0, r8
 80052dc:	4798      	blx	r3
 80052de:	2800      	cmp	r0, #0
 80052e0:	f43f aedf 	beq.w	80050a2 <_scanf_float+0x46>
 80052e4:	e6ea      	b.n	80050bc <_scanf_float+0x60>
 80052e6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80052ea:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80052ee:	463a      	mov	r2, r7
 80052f0:	4640      	mov	r0, r8
 80052f2:	4798      	blx	r3
 80052f4:	6923      	ldr	r3, [r4, #16]
 80052f6:	3b01      	subs	r3, #1
 80052f8:	6123      	str	r3, [r4, #16]
 80052fa:	e6ec      	b.n	80050d6 <_scanf_float+0x7a>
 80052fc:	1e6b      	subs	r3, r5, #1
 80052fe:	2b06      	cmp	r3, #6
 8005300:	d825      	bhi.n	800534e <_scanf_float+0x2f2>
 8005302:	2d02      	cmp	r5, #2
 8005304:	d836      	bhi.n	8005374 <_scanf_float+0x318>
 8005306:	455e      	cmp	r6, fp
 8005308:	f67f aee8 	bls.w	80050dc <_scanf_float+0x80>
 800530c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005310:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005314:	463a      	mov	r2, r7
 8005316:	4640      	mov	r0, r8
 8005318:	4798      	blx	r3
 800531a:	6923      	ldr	r3, [r4, #16]
 800531c:	3b01      	subs	r3, #1
 800531e:	6123      	str	r3, [r4, #16]
 8005320:	e7f1      	b.n	8005306 <_scanf_float+0x2aa>
 8005322:	9802      	ldr	r0, [sp, #8]
 8005324:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005328:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800532c:	9002      	str	r0, [sp, #8]
 800532e:	463a      	mov	r2, r7
 8005330:	4640      	mov	r0, r8
 8005332:	4798      	blx	r3
 8005334:	6923      	ldr	r3, [r4, #16]
 8005336:	3b01      	subs	r3, #1
 8005338:	6123      	str	r3, [r4, #16]
 800533a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800533e:	fa5f fa8a 	uxtb.w	sl, sl
 8005342:	f1ba 0f02 	cmp.w	sl, #2
 8005346:	d1ec      	bne.n	8005322 <_scanf_float+0x2c6>
 8005348:	3d03      	subs	r5, #3
 800534a:	b2ed      	uxtb	r5, r5
 800534c:	1b76      	subs	r6, r6, r5
 800534e:	6823      	ldr	r3, [r4, #0]
 8005350:	05da      	lsls	r2, r3, #23
 8005352:	d52f      	bpl.n	80053b4 <_scanf_float+0x358>
 8005354:	055b      	lsls	r3, r3, #21
 8005356:	d510      	bpl.n	800537a <_scanf_float+0x31e>
 8005358:	455e      	cmp	r6, fp
 800535a:	f67f aebf 	bls.w	80050dc <_scanf_float+0x80>
 800535e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005362:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005366:	463a      	mov	r2, r7
 8005368:	4640      	mov	r0, r8
 800536a:	4798      	blx	r3
 800536c:	6923      	ldr	r3, [r4, #16]
 800536e:	3b01      	subs	r3, #1
 8005370:	6123      	str	r3, [r4, #16]
 8005372:	e7f1      	b.n	8005358 <_scanf_float+0x2fc>
 8005374:	46aa      	mov	sl, r5
 8005376:	9602      	str	r6, [sp, #8]
 8005378:	e7df      	b.n	800533a <_scanf_float+0x2de>
 800537a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800537e:	6923      	ldr	r3, [r4, #16]
 8005380:	2965      	cmp	r1, #101	; 0x65
 8005382:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8005386:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 800538a:	6123      	str	r3, [r4, #16]
 800538c:	d00c      	beq.n	80053a8 <_scanf_float+0x34c>
 800538e:	2945      	cmp	r1, #69	; 0x45
 8005390:	d00a      	beq.n	80053a8 <_scanf_float+0x34c>
 8005392:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005396:	463a      	mov	r2, r7
 8005398:	4640      	mov	r0, r8
 800539a:	4798      	blx	r3
 800539c:	6923      	ldr	r3, [r4, #16]
 800539e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80053a2:	3b01      	subs	r3, #1
 80053a4:	1eb5      	subs	r5, r6, #2
 80053a6:	6123      	str	r3, [r4, #16]
 80053a8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80053ac:	463a      	mov	r2, r7
 80053ae:	4640      	mov	r0, r8
 80053b0:	4798      	blx	r3
 80053b2:	462e      	mov	r6, r5
 80053b4:	6825      	ldr	r5, [r4, #0]
 80053b6:	f015 0510 	ands.w	r5, r5, #16
 80053ba:	d159      	bne.n	8005470 <_scanf_float+0x414>
 80053bc:	7035      	strb	r5, [r6, #0]
 80053be:	6823      	ldr	r3, [r4, #0]
 80053c0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80053c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053c8:	d11b      	bne.n	8005402 <_scanf_float+0x3a6>
 80053ca:	9b01      	ldr	r3, [sp, #4]
 80053cc:	454b      	cmp	r3, r9
 80053ce:	eba3 0209 	sub.w	r2, r3, r9
 80053d2:	d123      	bne.n	800541c <_scanf_float+0x3c0>
 80053d4:	2200      	movs	r2, #0
 80053d6:	4659      	mov	r1, fp
 80053d8:	4640      	mov	r0, r8
 80053da:	f000 ff57 	bl	800628c <_strtod_r>
 80053de:	6822      	ldr	r2, [r4, #0]
 80053e0:	9b03      	ldr	r3, [sp, #12]
 80053e2:	f012 0f02 	tst.w	r2, #2
 80053e6:	ec57 6b10 	vmov	r6, r7, d0
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	d021      	beq.n	8005432 <_scanf_float+0x3d6>
 80053ee:	9903      	ldr	r1, [sp, #12]
 80053f0:	1d1a      	adds	r2, r3, #4
 80053f2:	600a      	str	r2, [r1, #0]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	e9c3 6700 	strd	r6, r7, [r3]
 80053fa:	68e3      	ldr	r3, [r4, #12]
 80053fc:	3301      	adds	r3, #1
 80053fe:	60e3      	str	r3, [r4, #12]
 8005400:	e66d      	b.n	80050de <_scanf_float+0x82>
 8005402:	9b04      	ldr	r3, [sp, #16]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d0e5      	beq.n	80053d4 <_scanf_float+0x378>
 8005408:	9905      	ldr	r1, [sp, #20]
 800540a:	230a      	movs	r3, #10
 800540c:	462a      	mov	r2, r5
 800540e:	3101      	adds	r1, #1
 8005410:	4640      	mov	r0, r8
 8005412:	f000 ffc3 	bl	800639c <_strtol_r>
 8005416:	9b04      	ldr	r3, [sp, #16]
 8005418:	9e05      	ldr	r6, [sp, #20]
 800541a:	1ac2      	subs	r2, r0, r3
 800541c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005420:	429e      	cmp	r6, r3
 8005422:	bf28      	it	cs
 8005424:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8005428:	4912      	ldr	r1, [pc, #72]	; (8005474 <_scanf_float+0x418>)
 800542a:	4630      	mov	r0, r6
 800542c:	f000 f8d6 	bl	80055dc <siprintf>
 8005430:	e7d0      	b.n	80053d4 <_scanf_float+0x378>
 8005432:	9903      	ldr	r1, [sp, #12]
 8005434:	f012 0f04 	tst.w	r2, #4
 8005438:	f103 0204 	add.w	r2, r3, #4
 800543c:	600a      	str	r2, [r1, #0]
 800543e:	d1d9      	bne.n	80053f4 <_scanf_float+0x398>
 8005440:	f8d3 8000 	ldr.w	r8, [r3]
 8005444:	ee10 2a10 	vmov	r2, s0
 8005448:	ee10 0a10 	vmov	r0, s0
 800544c:	463b      	mov	r3, r7
 800544e:	4639      	mov	r1, r7
 8005450:	f7fb fb8c 	bl	8000b6c <__aeabi_dcmpun>
 8005454:	b128      	cbz	r0, 8005462 <_scanf_float+0x406>
 8005456:	4808      	ldr	r0, [pc, #32]	; (8005478 <_scanf_float+0x41c>)
 8005458:	f000 f886 	bl	8005568 <nanf>
 800545c:	ed88 0a00 	vstr	s0, [r8]
 8005460:	e7cb      	b.n	80053fa <_scanf_float+0x39e>
 8005462:	4630      	mov	r0, r6
 8005464:	4639      	mov	r1, r7
 8005466:	f7fb fbdf 	bl	8000c28 <__aeabi_d2f>
 800546a:	f8c8 0000 	str.w	r0, [r8]
 800546e:	e7c4      	b.n	80053fa <_scanf_float+0x39e>
 8005470:	2500      	movs	r5, #0
 8005472:	e634      	b.n	80050de <_scanf_float+0x82>
 8005474:	08009694 	.word	0x08009694
 8005478:	08009b08 	.word	0x08009b08

0800547c <_puts_r>:
 800547c:	b570      	push	{r4, r5, r6, lr}
 800547e:	460e      	mov	r6, r1
 8005480:	4605      	mov	r5, r0
 8005482:	b118      	cbz	r0, 800548c <_puts_r+0x10>
 8005484:	6983      	ldr	r3, [r0, #24]
 8005486:	b90b      	cbnz	r3, 800548c <_puts_r+0x10>
 8005488:	f001 ffde 	bl	8007448 <__sinit>
 800548c:	69ab      	ldr	r3, [r5, #24]
 800548e:	68ac      	ldr	r4, [r5, #8]
 8005490:	b913      	cbnz	r3, 8005498 <_puts_r+0x1c>
 8005492:	4628      	mov	r0, r5
 8005494:	f001 ffd8 	bl	8007448 <__sinit>
 8005498:	4b2c      	ldr	r3, [pc, #176]	; (800554c <_puts_r+0xd0>)
 800549a:	429c      	cmp	r4, r3
 800549c:	d120      	bne.n	80054e0 <_puts_r+0x64>
 800549e:	686c      	ldr	r4, [r5, #4]
 80054a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80054a2:	07db      	lsls	r3, r3, #31
 80054a4:	d405      	bmi.n	80054b2 <_puts_r+0x36>
 80054a6:	89a3      	ldrh	r3, [r4, #12]
 80054a8:	0598      	lsls	r0, r3, #22
 80054aa:	d402      	bmi.n	80054b2 <_puts_r+0x36>
 80054ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80054ae:	f002 fbdc 	bl	8007c6a <__retarget_lock_acquire_recursive>
 80054b2:	89a3      	ldrh	r3, [r4, #12]
 80054b4:	0719      	lsls	r1, r3, #28
 80054b6:	d51d      	bpl.n	80054f4 <_puts_r+0x78>
 80054b8:	6923      	ldr	r3, [r4, #16]
 80054ba:	b1db      	cbz	r3, 80054f4 <_puts_r+0x78>
 80054bc:	3e01      	subs	r6, #1
 80054be:	68a3      	ldr	r3, [r4, #8]
 80054c0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80054c4:	3b01      	subs	r3, #1
 80054c6:	60a3      	str	r3, [r4, #8]
 80054c8:	bb39      	cbnz	r1, 800551a <_puts_r+0x9e>
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	da38      	bge.n	8005540 <_puts_r+0xc4>
 80054ce:	4622      	mov	r2, r4
 80054d0:	210a      	movs	r1, #10
 80054d2:	4628      	mov	r0, r5
 80054d4:	f000 ff64 	bl	80063a0 <__swbuf_r>
 80054d8:	3001      	adds	r0, #1
 80054da:	d011      	beq.n	8005500 <_puts_r+0x84>
 80054dc:	250a      	movs	r5, #10
 80054de:	e011      	b.n	8005504 <_puts_r+0x88>
 80054e0:	4b1b      	ldr	r3, [pc, #108]	; (8005550 <_puts_r+0xd4>)
 80054e2:	429c      	cmp	r4, r3
 80054e4:	d101      	bne.n	80054ea <_puts_r+0x6e>
 80054e6:	68ac      	ldr	r4, [r5, #8]
 80054e8:	e7da      	b.n	80054a0 <_puts_r+0x24>
 80054ea:	4b1a      	ldr	r3, [pc, #104]	; (8005554 <_puts_r+0xd8>)
 80054ec:	429c      	cmp	r4, r3
 80054ee:	bf08      	it	eq
 80054f0:	68ec      	ldreq	r4, [r5, #12]
 80054f2:	e7d5      	b.n	80054a0 <_puts_r+0x24>
 80054f4:	4621      	mov	r1, r4
 80054f6:	4628      	mov	r0, r5
 80054f8:	f000 ffa4 	bl	8006444 <__swsetup_r>
 80054fc:	2800      	cmp	r0, #0
 80054fe:	d0dd      	beq.n	80054bc <_puts_r+0x40>
 8005500:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005504:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005506:	07da      	lsls	r2, r3, #31
 8005508:	d405      	bmi.n	8005516 <_puts_r+0x9a>
 800550a:	89a3      	ldrh	r3, [r4, #12]
 800550c:	059b      	lsls	r3, r3, #22
 800550e:	d402      	bmi.n	8005516 <_puts_r+0x9a>
 8005510:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005512:	f002 fbab 	bl	8007c6c <__retarget_lock_release_recursive>
 8005516:	4628      	mov	r0, r5
 8005518:	bd70      	pop	{r4, r5, r6, pc}
 800551a:	2b00      	cmp	r3, #0
 800551c:	da04      	bge.n	8005528 <_puts_r+0xac>
 800551e:	69a2      	ldr	r2, [r4, #24]
 8005520:	429a      	cmp	r2, r3
 8005522:	dc06      	bgt.n	8005532 <_puts_r+0xb6>
 8005524:	290a      	cmp	r1, #10
 8005526:	d004      	beq.n	8005532 <_puts_r+0xb6>
 8005528:	6823      	ldr	r3, [r4, #0]
 800552a:	1c5a      	adds	r2, r3, #1
 800552c:	6022      	str	r2, [r4, #0]
 800552e:	7019      	strb	r1, [r3, #0]
 8005530:	e7c5      	b.n	80054be <_puts_r+0x42>
 8005532:	4622      	mov	r2, r4
 8005534:	4628      	mov	r0, r5
 8005536:	f000 ff33 	bl	80063a0 <__swbuf_r>
 800553a:	3001      	adds	r0, #1
 800553c:	d1bf      	bne.n	80054be <_puts_r+0x42>
 800553e:	e7df      	b.n	8005500 <_puts_r+0x84>
 8005540:	6823      	ldr	r3, [r4, #0]
 8005542:	250a      	movs	r5, #10
 8005544:	1c5a      	adds	r2, r3, #1
 8005546:	6022      	str	r2, [r4, #0]
 8005548:	701d      	strb	r5, [r3, #0]
 800554a:	e7db      	b.n	8005504 <_puts_r+0x88>
 800554c:	080098a4 	.word	0x080098a4
 8005550:	080098c4 	.word	0x080098c4
 8005554:	08009884 	.word	0x08009884

08005558 <puts>:
 8005558:	4b02      	ldr	r3, [pc, #8]	; (8005564 <puts+0xc>)
 800555a:	4601      	mov	r1, r0
 800555c:	6818      	ldr	r0, [r3, #0]
 800555e:	f7ff bf8d 	b.w	800547c <_puts_r>
 8005562:	bf00      	nop
 8005564:	2000000c 	.word	0x2000000c

08005568 <nanf>:
 8005568:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8005570 <nanf+0x8>
 800556c:	4770      	bx	lr
 800556e:	bf00      	nop
 8005570:	7fc00000 	.word	0x7fc00000

08005574 <sniprintf>:
 8005574:	b40c      	push	{r2, r3}
 8005576:	b530      	push	{r4, r5, lr}
 8005578:	4b17      	ldr	r3, [pc, #92]	; (80055d8 <sniprintf+0x64>)
 800557a:	1e0c      	subs	r4, r1, #0
 800557c:	681d      	ldr	r5, [r3, #0]
 800557e:	b09d      	sub	sp, #116	; 0x74
 8005580:	da08      	bge.n	8005594 <sniprintf+0x20>
 8005582:	238b      	movs	r3, #139	; 0x8b
 8005584:	602b      	str	r3, [r5, #0]
 8005586:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800558a:	b01d      	add	sp, #116	; 0x74
 800558c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005590:	b002      	add	sp, #8
 8005592:	4770      	bx	lr
 8005594:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005598:	f8ad 3014 	strh.w	r3, [sp, #20]
 800559c:	bf14      	ite	ne
 800559e:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80055a2:	4623      	moveq	r3, r4
 80055a4:	9304      	str	r3, [sp, #16]
 80055a6:	9307      	str	r3, [sp, #28]
 80055a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80055ac:	9002      	str	r0, [sp, #8]
 80055ae:	9006      	str	r0, [sp, #24]
 80055b0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80055b4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80055b6:	ab21      	add	r3, sp, #132	; 0x84
 80055b8:	a902      	add	r1, sp, #8
 80055ba:	4628      	mov	r0, r5
 80055bc:	9301      	str	r3, [sp, #4]
 80055be:	f003 f9f7 	bl	80089b0 <_svfiprintf_r>
 80055c2:	1c43      	adds	r3, r0, #1
 80055c4:	bfbc      	itt	lt
 80055c6:	238b      	movlt	r3, #139	; 0x8b
 80055c8:	602b      	strlt	r3, [r5, #0]
 80055ca:	2c00      	cmp	r4, #0
 80055cc:	d0dd      	beq.n	800558a <sniprintf+0x16>
 80055ce:	9b02      	ldr	r3, [sp, #8]
 80055d0:	2200      	movs	r2, #0
 80055d2:	701a      	strb	r2, [r3, #0]
 80055d4:	e7d9      	b.n	800558a <sniprintf+0x16>
 80055d6:	bf00      	nop
 80055d8:	2000000c 	.word	0x2000000c

080055dc <siprintf>:
 80055dc:	b40e      	push	{r1, r2, r3}
 80055de:	b500      	push	{lr}
 80055e0:	b09c      	sub	sp, #112	; 0x70
 80055e2:	ab1d      	add	r3, sp, #116	; 0x74
 80055e4:	9002      	str	r0, [sp, #8]
 80055e6:	9006      	str	r0, [sp, #24]
 80055e8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80055ec:	4809      	ldr	r0, [pc, #36]	; (8005614 <siprintf+0x38>)
 80055ee:	9107      	str	r1, [sp, #28]
 80055f0:	9104      	str	r1, [sp, #16]
 80055f2:	4909      	ldr	r1, [pc, #36]	; (8005618 <siprintf+0x3c>)
 80055f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80055f8:	9105      	str	r1, [sp, #20]
 80055fa:	6800      	ldr	r0, [r0, #0]
 80055fc:	9301      	str	r3, [sp, #4]
 80055fe:	a902      	add	r1, sp, #8
 8005600:	f003 f9d6 	bl	80089b0 <_svfiprintf_r>
 8005604:	9b02      	ldr	r3, [sp, #8]
 8005606:	2200      	movs	r2, #0
 8005608:	701a      	strb	r2, [r3, #0]
 800560a:	b01c      	add	sp, #112	; 0x70
 800560c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005610:	b003      	add	sp, #12
 8005612:	4770      	bx	lr
 8005614:	2000000c 	.word	0x2000000c
 8005618:	ffff0208 	.word	0xffff0208

0800561c <strstr>:
 800561c:	780a      	ldrb	r2, [r1, #0]
 800561e:	b570      	push	{r4, r5, r6, lr}
 8005620:	b96a      	cbnz	r2, 800563e <strstr+0x22>
 8005622:	bd70      	pop	{r4, r5, r6, pc}
 8005624:	429a      	cmp	r2, r3
 8005626:	d109      	bne.n	800563c <strstr+0x20>
 8005628:	460c      	mov	r4, r1
 800562a:	4605      	mov	r5, r0
 800562c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8005630:	2b00      	cmp	r3, #0
 8005632:	d0f6      	beq.n	8005622 <strstr+0x6>
 8005634:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8005638:	429e      	cmp	r6, r3
 800563a:	d0f7      	beq.n	800562c <strstr+0x10>
 800563c:	3001      	adds	r0, #1
 800563e:	7803      	ldrb	r3, [r0, #0]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d1ef      	bne.n	8005624 <strstr+0x8>
 8005644:	4618      	mov	r0, r3
 8005646:	e7ec      	b.n	8005622 <strstr+0x6>

08005648 <sulp>:
 8005648:	b570      	push	{r4, r5, r6, lr}
 800564a:	4604      	mov	r4, r0
 800564c:	460d      	mov	r5, r1
 800564e:	ec45 4b10 	vmov	d0, r4, r5
 8005652:	4616      	mov	r6, r2
 8005654:	f002 ff0a 	bl	800846c <__ulp>
 8005658:	ec51 0b10 	vmov	r0, r1, d0
 800565c:	b17e      	cbz	r6, 800567e <sulp+0x36>
 800565e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8005662:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005666:	2b00      	cmp	r3, #0
 8005668:	dd09      	ble.n	800567e <sulp+0x36>
 800566a:	051b      	lsls	r3, r3, #20
 800566c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005670:	2400      	movs	r4, #0
 8005672:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005676:	4622      	mov	r2, r4
 8005678:	462b      	mov	r3, r5
 800567a:	f7fa ffdd 	bl	8000638 <__aeabi_dmul>
 800567e:	bd70      	pop	{r4, r5, r6, pc}

08005680 <_strtod_l>:
 8005680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005684:	ed2d 8b02 	vpush	{d8}
 8005688:	b09d      	sub	sp, #116	; 0x74
 800568a:	461f      	mov	r7, r3
 800568c:	2300      	movs	r3, #0
 800568e:	9318      	str	r3, [sp, #96]	; 0x60
 8005690:	4ba2      	ldr	r3, [pc, #648]	; (800591c <_strtod_l+0x29c>)
 8005692:	9213      	str	r2, [sp, #76]	; 0x4c
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	9305      	str	r3, [sp, #20]
 8005698:	4604      	mov	r4, r0
 800569a:	4618      	mov	r0, r3
 800569c:	4688      	mov	r8, r1
 800569e:	f7fa fdb7 	bl	8000210 <strlen>
 80056a2:	f04f 0a00 	mov.w	sl, #0
 80056a6:	4605      	mov	r5, r0
 80056a8:	f04f 0b00 	mov.w	fp, #0
 80056ac:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80056b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80056b2:	781a      	ldrb	r2, [r3, #0]
 80056b4:	2a2b      	cmp	r2, #43	; 0x2b
 80056b6:	d04e      	beq.n	8005756 <_strtod_l+0xd6>
 80056b8:	d83b      	bhi.n	8005732 <_strtod_l+0xb2>
 80056ba:	2a0d      	cmp	r2, #13
 80056bc:	d834      	bhi.n	8005728 <_strtod_l+0xa8>
 80056be:	2a08      	cmp	r2, #8
 80056c0:	d834      	bhi.n	800572c <_strtod_l+0xac>
 80056c2:	2a00      	cmp	r2, #0
 80056c4:	d03e      	beq.n	8005744 <_strtod_l+0xc4>
 80056c6:	2300      	movs	r3, #0
 80056c8:	930a      	str	r3, [sp, #40]	; 0x28
 80056ca:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80056cc:	7833      	ldrb	r3, [r6, #0]
 80056ce:	2b30      	cmp	r3, #48	; 0x30
 80056d0:	f040 80b0 	bne.w	8005834 <_strtod_l+0x1b4>
 80056d4:	7873      	ldrb	r3, [r6, #1]
 80056d6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80056da:	2b58      	cmp	r3, #88	; 0x58
 80056dc:	d168      	bne.n	80057b0 <_strtod_l+0x130>
 80056de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056e0:	9301      	str	r3, [sp, #4]
 80056e2:	ab18      	add	r3, sp, #96	; 0x60
 80056e4:	9702      	str	r7, [sp, #8]
 80056e6:	9300      	str	r3, [sp, #0]
 80056e8:	4a8d      	ldr	r2, [pc, #564]	; (8005920 <_strtod_l+0x2a0>)
 80056ea:	ab19      	add	r3, sp, #100	; 0x64
 80056ec:	a917      	add	r1, sp, #92	; 0x5c
 80056ee:	4620      	mov	r0, r4
 80056f0:	f001 ffae 	bl	8007650 <__gethex>
 80056f4:	f010 0707 	ands.w	r7, r0, #7
 80056f8:	4605      	mov	r5, r0
 80056fa:	d005      	beq.n	8005708 <_strtod_l+0x88>
 80056fc:	2f06      	cmp	r7, #6
 80056fe:	d12c      	bne.n	800575a <_strtod_l+0xda>
 8005700:	3601      	adds	r6, #1
 8005702:	2300      	movs	r3, #0
 8005704:	9617      	str	r6, [sp, #92]	; 0x5c
 8005706:	930a      	str	r3, [sp, #40]	; 0x28
 8005708:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800570a:	2b00      	cmp	r3, #0
 800570c:	f040 8590 	bne.w	8006230 <_strtod_l+0xbb0>
 8005710:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005712:	b1eb      	cbz	r3, 8005750 <_strtod_l+0xd0>
 8005714:	4652      	mov	r2, sl
 8005716:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800571a:	ec43 2b10 	vmov	d0, r2, r3
 800571e:	b01d      	add	sp, #116	; 0x74
 8005720:	ecbd 8b02 	vpop	{d8}
 8005724:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005728:	2a20      	cmp	r2, #32
 800572a:	d1cc      	bne.n	80056c6 <_strtod_l+0x46>
 800572c:	3301      	adds	r3, #1
 800572e:	9317      	str	r3, [sp, #92]	; 0x5c
 8005730:	e7be      	b.n	80056b0 <_strtod_l+0x30>
 8005732:	2a2d      	cmp	r2, #45	; 0x2d
 8005734:	d1c7      	bne.n	80056c6 <_strtod_l+0x46>
 8005736:	2201      	movs	r2, #1
 8005738:	920a      	str	r2, [sp, #40]	; 0x28
 800573a:	1c5a      	adds	r2, r3, #1
 800573c:	9217      	str	r2, [sp, #92]	; 0x5c
 800573e:	785b      	ldrb	r3, [r3, #1]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d1c2      	bne.n	80056ca <_strtod_l+0x4a>
 8005744:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005746:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800574a:	2b00      	cmp	r3, #0
 800574c:	f040 856e 	bne.w	800622c <_strtod_l+0xbac>
 8005750:	4652      	mov	r2, sl
 8005752:	465b      	mov	r3, fp
 8005754:	e7e1      	b.n	800571a <_strtod_l+0x9a>
 8005756:	2200      	movs	r2, #0
 8005758:	e7ee      	b.n	8005738 <_strtod_l+0xb8>
 800575a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800575c:	b13a      	cbz	r2, 800576e <_strtod_l+0xee>
 800575e:	2135      	movs	r1, #53	; 0x35
 8005760:	a81a      	add	r0, sp, #104	; 0x68
 8005762:	f002 ff8e 	bl	8008682 <__copybits>
 8005766:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005768:	4620      	mov	r0, r4
 800576a:	f002 fb4d 	bl	8007e08 <_Bfree>
 800576e:	3f01      	subs	r7, #1
 8005770:	2f04      	cmp	r7, #4
 8005772:	d806      	bhi.n	8005782 <_strtod_l+0x102>
 8005774:	e8df f007 	tbb	[pc, r7]
 8005778:	1714030a 	.word	0x1714030a
 800577c:	0a          	.byte	0x0a
 800577d:	00          	.byte	0x00
 800577e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8005782:	0728      	lsls	r0, r5, #28
 8005784:	d5c0      	bpl.n	8005708 <_strtod_l+0x88>
 8005786:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800578a:	e7bd      	b.n	8005708 <_strtod_l+0x88>
 800578c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8005790:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005792:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005796:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800579a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800579e:	e7f0      	b.n	8005782 <_strtod_l+0x102>
 80057a0:	f8df b180 	ldr.w	fp, [pc, #384]	; 8005924 <_strtod_l+0x2a4>
 80057a4:	e7ed      	b.n	8005782 <_strtod_l+0x102>
 80057a6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80057aa:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80057ae:	e7e8      	b.n	8005782 <_strtod_l+0x102>
 80057b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80057b2:	1c5a      	adds	r2, r3, #1
 80057b4:	9217      	str	r2, [sp, #92]	; 0x5c
 80057b6:	785b      	ldrb	r3, [r3, #1]
 80057b8:	2b30      	cmp	r3, #48	; 0x30
 80057ba:	d0f9      	beq.n	80057b0 <_strtod_l+0x130>
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d0a3      	beq.n	8005708 <_strtod_l+0x88>
 80057c0:	2301      	movs	r3, #1
 80057c2:	f04f 0900 	mov.w	r9, #0
 80057c6:	9304      	str	r3, [sp, #16]
 80057c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80057ca:	9308      	str	r3, [sp, #32]
 80057cc:	f8cd 901c 	str.w	r9, [sp, #28]
 80057d0:	464f      	mov	r7, r9
 80057d2:	220a      	movs	r2, #10
 80057d4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80057d6:	7806      	ldrb	r6, [r0, #0]
 80057d8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80057dc:	b2d9      	uxtb	r1, r3
 80057de:	2909      	cmp	r1, #9
 80057e0:	d92a      	bls.n	8005838 <_strtod_l+0x1b8>
 80057e2:	9905      	ldr	r1, [sp, #20]
 80057e4:	462a      	mov	r2, r5
 80057e6:	f003 fa3e 	bl	8008c66 <strncmp>
 80057ea:	b398      	cbz	r0, 8005854 <_strtod_l+0x1d4>
 80057ec:	2000      	movs	r0, #0
 80057ee:	4632      	mov	r2, r6
 80057f0:	463d      	mov	r5, r7
 80057f2:	9005      	str	r0, [sp, #20]
 80057f4:	4603      	mov	r3, r0
 80057f6:	2a65      	cmp	r2, #101	; 0x65
 80057f8:	d001      	beq.n	80057fe <_strtod_l+0x17e>
 80057fa:	2a45      	cmp	r2, #69	; 0x45
 80057fc:	d118      	bne.n	8005830 <_strtod_l+0x1b0>
 80057fe:	b91d      	cbnz	r5, 8005808 <_strtod_l+0x188>
 8005800:	9a04      	ldr	r2, [sp, #16]
 8005802:	4302      	orrs	r2, r0
 8005804:	d09e      	beq.n	8005744 <_strtod_l+0xc4>
 8005806:	2500      	movs	r5, #0
 8005808:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800580c:	f108 0201 	add.w	r2, r8, #1
 8005810:	9217      	str	r2, [sp, #92]	; 0x5c
 8005812:	f898 2001 	ldrb.w	r2, [r8, #1]
 8005816:	2a2b      	cmp	r2, #43	; 0x2b
 8005818:	d075      	beq.n	8005906 <_strtod_l+0x286>
 800581a:	2a2d      	cmp	r2, #45	; 0x2d
 800581c:	d07b      	beq.n	8005916 <_strtod_l+0x296>
 800581e:	f04f 0c00 	mov.w	ip, #0
 8005822:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8005826:	2909      	cmp	r1, #9
 8005828:	f240 8082 	bls.w	8005930 <_strtod_l+0x2b0>
 800582c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8005830:	2600      	movs	r6, #0
 8005832:	e09d      	b.n	8005970 <_strtod_l+0x2f0>
 8005834:	2300      	movs	r3, #0
 8005836:	e7c4      	b.n	80057c2 <_strtod_l+0x142>
 8005838:	2f08      	cmp	r7, #8
 800583a:	bfd8      	it	le
 800583c:	9907      	ldrle	r1, [sp, #28]
 800583e:	f100 0001 	add.w	r0, r0, #1
 8005842:	bfda      	itte	le
 8005844:	fb02 3301 	mlale	r3, r2, r1, r3
 8005848:	9307      	strle	r3, [sp, #28]
 800584a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800584e:	3701      	adds	r7, #1
 8005850:	9017      	str	r0, [sp, #92]	; 0x5c
 8005852:	e7bf      	b.n	80057d4 <_strtod_l+0x154>
 8005854:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005856:	195a      	adds	r2, r3, r5
 8005858:	9217      	str	r2, [sp, #92]	; 0x5c
 800585a:	5d5a      	ldrb	r2, [r3, r5]
 800585c:	2f00      	cmp	r7, #0
 800585e:	d037      	beq.n	80058d0 <_strtod_l+0x250>
 8005860:	9005      	str	r0, [sp, #20]
 8005862:	463d      	mov	r5, r7
 8005864:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8005868:	2b09      	cmp	r3, #9
 800586a:	d912      	bls.n	8005892 <_strtod_l+0x212>
 800586c:	2301      	movs	r3, #1
 800586e:	e7c2      	b.n	80057f6 <_strtod_l+0x176>
 8005870:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005872:	1c5a      	adds	r2, r3, #1
 8005874:	9217      	str	r2, [sp, #92]	; 0x5c
 8005876:	785a      	ldrb	r2, [r3, #1]
 8005878:	3001      	adds	r0, #1
 800587a:	2a30      	cmp	r2, #48	; 0x30
 800587c:	d0f8      	beq.n	8005870 <_strtod_l+0x1f0>
 800587e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8005882:	2b08      	cmp	r3, #8
 8005884:	f200 84d9 	bhi.w	800623a <_strtod_l+0xbba>
 8005888:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800588a:	9005      	str	r0, [sp, #20]
 800588c:	2000      	movs	r0, #0
 800588e:	9308      	str	r3, [sp, #32]
 8005890:	4605      	mov	r5, r0
 8005892:	3a30      	subs	r2, #48	; 0x30
 8005894:	f100 0301 	add.w	r3, r0, #1
 8005898:	d014      	beq.n	80058c4 <_strtod_l+0x244>
 800589a:	9905      	ldr	r1, [sp, #20]
 800589c:	4419      	add	r1, r3
 800589e:	9105      	str	r1, [sp, #20]
 80058a0:	462b      	mov	r3, r5
 80058a2:	eb00 0e05 	add.w	lr, r0, r5
 80058a6:	210a      	movs	r1, #10
 80058a8:	4573      	cmp	r3, lr
 80058aa:	d113      	bne.n	80058d4 <_strtod_l+0x254>
 80058ac:	182b      	adds	r3, r5, r0
 80058ae:	2b08      	cmp	r3, #8
 80058b0:	f105 0501 	add.w	r5, r5, #1
 80058b4:	4405      	add	r5, r0
 80058b6:	dc1c      	bgt.n	80058f2 <_strtod_l+0x272>
 80058b8:	9907      	ldr	r1, [sp, #28]
 80058ba:	230a      	movs	r3, #10
 80058bc:	fb03 2301 	mla	r3, r3, r1, r2
 80058c0:	9307      	str	r3, [sp, #28]
 80058c2:	2300      	movs	r3, #0
 80058c4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80058c6:	1c51      	adds	r1, r2, #1
 80058c8:	9117      	str	r1, [sp, #92]	; 0x5c
 80058ca:	7852      	ldrb	r2, [r2, #1]
 80058cc:	4618      	mov	r0, r3
 80058ce:	e7c9      	b.n	8005864 <_strtod_l+0x1e4>
 80058d0:	4638      	mov	r0, r7
 80058d2:	e7d2      	b.n	800587a <_strtod_l+0x1fa>
 80058d4:	2b08      	cmp	r3, #8
 80058d6:	dc04      	bgt.n	80058e2 <_strtod_l+0x262>
 80058d8:	9e07      	ldr	r6, [sp, #28]
 80058da:	434e      	muls	r6, r1
 80058dc:	9607      	str	r6, [sp, #28]
 80058de:	3301      	adds	r3, #1
 80058e0:	e7e2      	b.n	80058a8 <_strtod_l+0x228>
 80058e2:	f103 0c01 	add.w	ip, r3, #1
 80058e6:	f1bc 0f10 	cmp.w	ip, #16
 80058ea:	bfd8      	it	le
 80058ec:	fb01 f909 	mulle.w	r9, r1, r9
 80058f0:	e7f5      	b.n	80058de <_strtod_l+0x25e>
 80058f2:	2d10      	cmp	r5, #16
 80058f4:	bfdc      	itt	le
 80058f6:	230a      	movle	r3, #10
 80058f8:	fb03 2909 	mlale	r9, r3, r9, r2
 80058fc:	e7e1      	b.n	80058c2 <_strtod_l+0x242>
 80058fe:	2300      	movs	r3, #0
 8005900:	9305      	str	r3, [sp, #20]
 8005902:	2301      	movs	r3, #1
 8005904:	e77c      	b.n	8005800 <_strtod_l+0x180>
 8005906:	f04f 0c00 	mov.w	ip, #0
 800590a:	f108 0202 	add.w	r2, r8, #2
 800590e:	9217      	str	r2, [sp, #92]	; 0x5c
 8005910:	f898 2002 	ldrb.w	r2, [r8, #2]
 8005914:	e785      	b.n	8005822 <_strtod_l+0x1a2>
 8005916:	f04f 0c01 	mov.w	ip, #1
 800591a:	e7f6      	b.n	800590a <_strtod_l+0x28a>
 800591c:	0800994c 	.word	0x0800994c
 8005920:	0800969c 	.word	0x0800969c
 8005924:	7ff00000 	.word	0x7ff00000
 8005928:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800592a:	1c51      	adds	r1, r2, #1
 800592c:	9117      	str	r1, [sp, #92]	; 0x5c
 800592e:	7852      	ldrb	r2, [r2, #1]
 8005930:	2a30      	cmp	r2, #48	; 0x30
 8005932:	d0f9      	beq.n	8005928 <_strtod_l+0x2a8>
 8005934:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8005938:	2908      	cmp	r1, #8
 800593a:	f63f af79 	bhi.w	8005830 <_strtod_l+0x1b0>
 800593e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8005942:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005944:	9206      	str	r2, [sp, #24]
 8005946:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005948:	1c51      	adds	r1, r2, #1
 800594a:	9117      	str	r1, [sp, #92]	; 0x5c
 800594c:	7852      	ldrb	r2, [r2, #1]
 800594e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8005952:	2e09      	cmp	r6, #9
 8005954:	d937      	bls.n	80059c6 <_strtod_l+0x346>
 8005956:	9e06      	ldr	r6, [sp, #24]
 8005958:	1b89      	subs	r1, r1, r6
 800595a:	2908      	cmp	r1, #8
 800595c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8005960:	dc02      	bgt.n	8005968 <_strtod_l+0x2e8>
 8005962:	4576      	cmp	r6, lr
 8005964:	bfa8      	it	ge
 8005966:	4676      	movge	r6, lr
 8005968:	f1bc 0f00 	cmp.w	ip, #0
 800596c:	d000      	beq.n	8005970 <_strtod_l+0x2f0>
 800596e:	4276      	negs	r6, r6
 8005970:	2d00      	cmp	r5, #0
 8005972:	d14d      	bne.n	8005a10 <_strtod_l+0x390>
 8005974:	9904      	ldr	r1, [sp, #16]
 8005976:	4301      	orrs	r1, r0
 8005978:	f47f aec6 	bne.w	8005708 <_strtod_l+0x88>
 800597c:	2b00      	cmp	r3, #0
 800597e:	f47f aee1 	bne.w	8005744 <_strtod_l+0xc4>
 8005982:	2a69      	cmp	r2, #105	; 0x69
 8005984:	d027      	beq.n	80059d6 <_strtod_l+0x356>
 8005986:	dc24      	bgt.n	80059d2 <_strtod_l+0x352>
 8005988:	2a49      	cmp	r2, #73	; 0x49
 800598a:	d024      	beq.n	80059d6 <_strtod_l+0x356>
 800598c:	2a4e      	cmp	r2, #78	; 0x4e
 800598e:	f47f aed9 	bne.w	8005744 <_strtod_l+0xc4>
 8005992:	499f      	ldr	r1, [pc, #636]	; (8005c10 <_strtod_l+0x590>)
 8005994:	a817      	add	r0, sp, #92	; 0x5c
 8005996:	f002 f8b3 	bl	8007b00 <__match>
 800599a:	2800      	cmp	r0, #0
 800599c:	f43f aed2 	beq.w	8005744 <_strtod_l+0xc4>
 80059a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80059a2:	781b      	ldrb	r3, [r3, #0]
 80059a4:	2b28      	cmp	r3, #40	; 0x28
 80059a6:	d12d      	bne.n	8005a04 <_strtod_l+0x384>
 80059a8:	499a      	ldr	r1, [pc, #616]	; (8005c14 <_strtod_l+0x594>)
 80059aa:	aa1a      	add	r2, sp, #104	; 0x68
 80059ac:	a817      	add	r0, sp, #92	; 0x5c
 80059ae:	f002 f8bb 	bl	8007b28 <__hexnan>
 80059b2:	2805      	cmp	r0, #5
 80059b4:	d126      	bne.n	8005a04 <_strtod_l+0x384>
 80059b6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80059b8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80059bc:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80059c0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80059c4:	e6a0      	b.n	8005708 <_strtod_l+0x88>
 80059c6:	210a      	movs	r1, #10
 80059c8:	fb01 2e0e 	mla	lr, r1, lr, r2
 80059cc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80059d0:	e7b9      	b.n	8005946 <_strtod_l+0x2c6>
 80059d2:	2a6e      	cmp	r2, #110	; 0x6e
 80059d4:	e7db      	b.n	800598e <_strtod_l+0x30e>
 80059d6:	4990      	ldr	r1, [pc, #576]	; (8005c18 <_strtod_l+0x598>)
 80059d8:	a817      	add	r0, sp, #92	; 0x5c
 80059da:	f002 f891 	bl	8007b00 <__match>
 80059de:	2800      	cmp	r0, #0
 80059e0:	f43f aeb0 	beq.w	8005744 <_strtod_l+0xc4>
 80059e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80059e6:	498d      	ldr	r1, [pc, #564]	; (8005c1c <_strtod_l+0x59c>)
 80059e8:	3b01      	subs	r3, #1
 80059ea:	a817      	add	r0, sp, #92	; 0x5c
 80059ec:	9317      	str	r3, [sp, #92]	; 0x5c
 80059ee:	f002 f887 	bl	8007b00 <__match>
 80059f2:	b910      	cbnz	r0, 80059fa <_strtod_l+0x37a>
 80059f4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80059f6:	3301      	adds	r3, #1
 80059f8:	9317      	str	r3, [sp, #92]	; 0x5c
 80059fa:	f8df b230 	ldr.w	fp, [pc, #560]	; 8005c2c <_strtod_l+0x5ac>
 80059fe:	f04f 0a00 	mov.w	sl, #0
 8005a02:	e681      	b.n	8005708 <_strtod_l+0x88>
 8005a04:	4886      	ldr	r0, [pc, #536]	; (8005c20 <_strtod_l+0x5a0>)
 8005a06:	f003 f8d3 	bl	8008bb0 <nan>
 8005a0a:	ec5b ab10 	vmov	sl, fp, d0
 8005a0e:	e67b      	b.n	8005708 <_strtod_l+0x88>
 8005a10:	9b05      	ldr	r3, [sp, #20]
 8005a12:	9807      	ldr	r0, [sp, #28]
 8005a14:	1af3      	subs	r3, r6, r3
 8005a16:	2f00      	cmp	r7, #0
 8005a18:	bf08      	it	eq
 8005a1a:	462f      	moveq	r7, r5
 8005a1c:	2d10      	cmp	r5, #16
 8005a1e:	9306      	str	r3, [sp, #24]
 8005a20:	46a8      	mov	r8, r5
 8005a22:	bfa8      	it	ge
 8005a24:	f04f 0810 	movge.w	r8, #16
 8005a28:	f7fa fd8c 	bl	8000544 <__aeabi_ui2d>
 8005a2c:	2d09      	cmp	r5, #9
 8005a2e:	4682      	mov	sl, r0
 8005a30:	468b      	mov	fp, r1
 8005a32:	dd13      	ble.n	8005a5c <_strtod_l+0x3dc>
 8005a34:	4b7b      	ldr	r3, [pc, #492]	; (8005c24 <_strtod_l+0x5a4>)
 8005a36:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8005a3a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8005a3e:	f7fa fdfb 	bl	8000638 <__aeabi_dmul>
 8005a42:	4682      	mov	sl, r0
 8005a44:	4648      	mov	r0, r9
 8005a46:	468b      	mov	fp, r1
 8005a48:	f7fa fd7c 	bl	8000544 <__aeabi_ui2d>
 8005a4c:	4602      	mov	r2, r0
 8005a4e:	460b      	mov	r3, r1
 8005a50:	4650      	mov	r0, sl
 8005a52:	4659      	mov	r1, fp
 8005a54:	f7fa fc3a 	bl	80002cc <__adddf3>
 8005a58:	4682      	mov	sl, r0
 8005a5a:	468b      	mov	fp, r1
 8005a5c:	2d0f      	cmp	r5, #15
 8005a5e:	dc38      	bgt.n	8005ad2 <_strtod_l+0x452>
 8005a60:	9b06      	ldr	r3, [sp, #24]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	f43f ae50 	beq.w	8005708 <_strtod_l+0x88>
 8005a68:	dd24      	ble.n	8005ab4 <_strtod_l+0x434>
 8005a6a:	2b16      	cmp	r3, #22
 8005a6c:	dc0b      	bgt.n	8005a86 <_strtod_l+0x406>
 8005a6e:	496d      	ldr	r1, [pc, #436]	; (8005c24 <_strtod_l+0x5a4>)
 8005a70:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005a74:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005a78:	4652      	mov	r2, sl
 8005a7a:	465b      	mov	r3, fp
 8005a7c:	f7fa fddc 	bl	8000638 <__aeabi_dmul>
 8005a80:	4682      	mov	sl, r0
 8005a82:	468b      	mov	fp, r1
 8005a84:	e640      	b.n	8005708 <_strtod_l+0x88>
 8005a86:	9a06      	ldr	r2, [sp, #24]
 8005a88:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	db20      	blt.n	8005ad2 <_strtod_l+0x452>
 8005a90:	4c64      	ldr	r4, [pc, #400]	; (8005c24 <_strtod_l+0x5a4>)
 8005a92:	f1c5 050f 	rsb	r5, r5, #15
 8005a96:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8005a9a:	4652      	mov	r2, sl
 8005a9c:	465b      	mov	r3, fp
 8005a9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005aa2:	f7fa fdc9 	bl	8000638 <__aeabi_dmul>
 8005aa6:	9b06      	ldr	r3, [sp, #24]
 8005aa8:	1b5d      	subs	r5, r3, r5
 8005aaa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8005aae:	e9d4 2300 	ldrd	r2, r3, [r4]
 8005ab2:	e7e3      	b.n	8005a7c <_strtod_l+0x3fc>
 8005ab4:	9b06      	ldr	r3, [sp, #24]
 8005ab6:	3316      	adds	r3, #22
 8005ab8:	db0b      	blt.n	8005ad2 <_strtod_l+0x452>
 8005aba:	9b05      	ldr	r3, [sp, #20]
 8005abc:	1b9e      	subs	r6, r3, r6
 8005abe:	4b59      	ldr	r3, [pc, #356]	; (8005c24 <_strtod_l+0x5a4>)
 8005ac0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8005ac4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005ac8:	4650      	mov	r0, sl
 8005aca:	4659      	mov	r1, fp
 8005acc:	f7fa fede 	bl	800088c <__aeabi_ddiv>
 8005ad0:	e7d6      	b.n	8005a80 <_strtod_l+0x400>
 8005ad2:	9b06      	ldr	r3, [sp, #24]
 8005ad4:	eba5 0808 	sub.w	r8, r5, r8
 8005ad8:	4498      	add	r8, r3
 8005ada:	f1b8 0f00 	cmp.w	r8, #0
 8005ade:	dd74      	ble.n	8005bca <_strtod_l+0x54a>
 8005ae0:	f018 030f 	ands.w	r3, r8, #15
 8005ae4:	d00a      	beq.n	8005afc <_strtod_l+0x47c>
 8005ae6:	494f      	ldr	r1, [pc, #316]	; (8005c24 <_strtod_l+0x5a4>)
 8005ae8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005aec:	4652      	mov	r2, sl
 8005aee:	465b      	mov	r3, fp
 8005af0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005af4:	f7fa fda0 	bl	8000638 <__aeabi_dmul>
 8005af8:	4682      	mov	sl, r0
 8005afa:	468b      	mov	fp, r1
 8005afc:	f038 080f 	bics.w	r8, r8, #15
 8005b00:	d04f      	beq.n	8005ba2 <_strtod_l+0x522>
 8005b02:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8005b06:	dd22      	ble.n	8005b4e <_strtod_l+0x4ce>
 8005b08:	2500      	movs	r5, #0
 8005b0a:	462e      	mov	r6, r5
 8005b0c:	9507      	str	r5, [sp, #28]
 8005b0e:	9505      	str	r5, [sp, #20]
 8005b10:	2322      	movs	r3, #34	; 0x22
 8005b12:	f8df b118 	ldr.w	fp, [pc, #280]	; 8005c2c <_strtod_l+0x5ac>
 8005b16:	6023      	str	r3, [r4, #0]
 8005b18:	f04f 0a00 	mov.w	sl, #0
 8005b1c:	9b07      	ldr	r3, [sp, #28]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	f43f adf2 	beq.w	8005708 <_strtod_l+0x88>
 8005b24:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005b26:	4620      	mov	r0, r4
 8005b28:	f002 f96e 	bl	8007e08 <_Bfree>
 8005b2c:	9905      	ldr	r1, [sp, #20]
 8005b2e:	4620      	mov	r0, r4
 8005b30:	f002 f96a 	bl	8007e08 <_Bfree>
 8005b34:	4631      	mov	r1, r6
 8005b36:	4620      	mov	r0, r4
 8005b38:	f002 f966 	bl	8007e08 <_Bfree>
 8005b3c:	9907      	ldr	r1, [sp, #28]
 8005b3e:	4620      	mov	r0, r4
 8005b40:	f002 f962 	bl	8007e08 <_Bfree>
 8005b44:	4629      	mov	r1, r5
 8005b46:	4620      	mov	r0, r4
 8005b48:	f002 f95e 	bl	8007e08 <_Bfree>
 8005b4c:	e5dc      	b.n	8005708 <_strtod_l+0x88>
 8005b4e:	4b36      	ldr	r3, [pc, #216]	; (8005c28 <_strtod_l+0x5a8>)
 8005b50:	9304      	str	r3, [sp, #16]
 8005b52:	2300      	movs	r3, #0
 8005b54:	ea4f 1828 	mov.w	r8, r8, asr #4
 8005b58:	4650      	mov	r0, sl
 8005b5a:	4659      	mov	r1, fp
 8005b5c:	4699      	mov	r9, r3
 8005b5e:	f1b8 0f01 	cmp.w	r8, #1
 8005b62:	dc21      	bgt.n	8005ba8 <_strtod_l+0x528>
 8005b64:	b10b      	cbz	r3, 8005b6a <_strtod_l+0x4ea>
 8005b66:	4682      	mov	sl, r0
 8005b68:	468b      	mov	fp, r1
 8005b6a:	4b2f      	ldr	r3, [pc, #188]	; (8005c28 <_strtod_l+0x5a8>)
 8005b6c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8005b70:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8005b74:	4652      	mov	r2, sl
 8005b76:	465b      	mov	r3, fp
 8005b78:	e9d9 0100 	ldrd	r0, r1, [r9]
 8005b7c:	f7fa fd5c 	bl	8000638 <__aeabi_dmul>
 8005b80:	4b2a      	ldr	r3, [pc, #168]	; (8005c2c <_strtod_l+0x5ac>)
 8005b82:	460a      	mov	r2, r1
 8005b84:	400b      	ands	r3, r1
 8005b86:	492a      	ldr	r1, [pc, #168]	; (8005c30 <_strtod_l+0x5b0>)
 8005b88:	428b      	cmp	r3, r1
 8005b8a:	4682      	mov	sl, r0
 8005b8c:	d8bc      	bhi.n	8005b08 <_strtod_l+0x488>
 8005b8e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8005b92:	428b      	cmp	r3, r1
 8005b94:	bf86      	itte	hi
 8005b96:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8005c34 <_strtod_l+0x5b4>
 8005b9a:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 8005b9e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	9304      	str	r3, [sp, #16]
 8005ba6:	e084      	b.n	8005cb2 <_strtod_l+0x632>
 8005ba8:	f018 0f01 	tst.w	r8, #1
 8005bac:	d005      	beq.n	8005bba <_strtod_l+0x53a>
 8005bae:	9b04      	ldr	r3, [sp, #16]
 8005bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bb4:	f7fa fd40 	bl	8000638 <__aeabi_dmul>
 8005bb8:	2301      	movs	r3, #1
 8005bba:	9a04      	ldr	r2, [sp, #16]
 8005bbc:	3208      	adds	r2, #8
 8005bbe:	f109 0901 	add.w	r9, r9, #1
 8005bc2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005bc6:	9204      	str	r2, [sp, #16]
 8005bc8:	e7c9      	b.n	8005b5e <_strtod_l+0x4de>
 8005bca:	d0ea      	beq.n	8005ba2 <_strtod_l+0x522>
 8005bcc:	f1c8 0800 	rsb	r8, r8, #0
 8005bd0:	f018 020f 	ands.w	r2, r8, #15
 8005bd4:	d00a      	beq.n	8005bec <_strtod_l+0x56c>
 8005bd6:	4b13      	ldr	r3, [pc, #76]	; (8005c24 <_strtod_l+0x5a4>)
 8005bd8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005bdc:	4650      	mov	r0, sl
 8005bde:	4659      	mov	r1, fp
 8005be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005be4:	f7fa fe52 	bl	800088c <__aeabi_ddiv>
 8005be8:	4682      	mov	sl, r0
 8005bea:	468b      	mov	fp, r1
 8005bec:	ea5f 1828 	movs.w	r8, r8, asr #4
 8005bf0:	d0d7      	beq.n	8005ba2 <_strtod_l+0x522>
 8005bf2:	f1b8 0f1f 	cmp.w	r8, #31
 8005bf6:	dd1f      	ble.n	8005c38 <_strtod_l+0x5b8>
 8005bf8:	2500      	movs	r5, #0
 8005bfa:	462e      	mov	r6, r5
 8005bfc:	9507      	str	r5, [sp, #28]
 8005bfe:	9505      	str	r5, [sp, #20]
 8005c00:	2322      	movs	r3, #34	; 0x22
 8005c02:	f04f 0a00 	mov.w	sl, #0
 8005c06:	f04f 0b00 	mov.w	fp, #0
 8005c0a:	6023      	str	r3, [r4, #0]
 8005c0c:	e786      	b.n	8005b1c <_strtod_l+0x49c>
 8005c0e:	bf00      	nop
 8005c10:	0800966d 	.word	0x0800966d
 8005c14:	080096b0 	.word	0x080096b0
 8005c18:	08009665 	.word	0x08009665
 8005c1c:	080097f4 	.word	0x080097f4
 8005c20:	08009b08 	.word	0x08009b08
 8005c24:	080099e8 	.word	0x080099e8
 8005c28:	080099c0 	.word	0x080099c0
 8005c2c:	7ff00000 	.word	0x7ff00000
 8005c30:	7ca00000 	.word	0x7ca00000
 8005c34:	7fefffff 	.word	0x7fefffff
 8005c38:	f018 0310 	ands.w	r3, r8, #16
 8005c3c:	bf18      	it	ne
 8005c3e:	236a      	movne	r3, #106	; 0x6a
 8005c40:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8005ff0 <_strtod_l+0x970>
 8005c44:	9304      	str	r3, [sp, #16]
 8005c46:	4650      	mov	r0, sl
 8005c48:	4659      	mov	r1, fp
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	f018 0f01 	tst.w	r8, #1
 8005c50:	d004      	beq.n	8005c5c <_strtod_l+0x5dc>
 8005c52:	e9d9 2300 	ldrd	r2, r3, [r9]
 8005c56:	f7fa fcef 	bl	8000638 <__aeabi_dmul>
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8005c60:	f109 0908 	add.w	r9, r9, #8
 8005c64:	d1f2      	bne.n	8005c4c <_strtod_l+0x5cc>
 8005c66:	b10b      	cbz	r3, 8005c6c <_strtod_l+0x5ec>
 8005c68:	4682      	mov	sl, r0
 8005c6a:	468b      	mov	fp, r1
 8005c6c:	9b04      	ldr	r3, [sp, #16]
 8005c6e:	b1c3      	cbz	r3, 8005ca2 <_strtod_l+0x622>
 8005c70:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8005c74:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	4659      	mov	r1, fp
 8005c7c:	dd11      	ble.n	8005ca2 <_strtod_l+0x622>
 8005c7e:	2b1f      	cmp	r3, #31
 8005c80:	f340 8124 	ble.w	8005ecc <_strtod_l+0x84c>
 8005c84:	2b34      	cmp	r3, #52	; 0x34
 8005c86:	bfde      	ittt	le
 8005c88:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8005c8c:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 8005c90:	fa03 f202 	lslle.w	r2, r3, r2
 8005c94:	f04f 0a00 	mov.w	sl, #0
 8005c98:	bfcc      	ite	gt
 8005c9a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8005c9e:	ea02 0b01 	andle.w	fp, r2, r1
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	4650      	mov	r0, sl
 8005ca8:	4659      	mov	r1, fp
 8005caa:	f7fa ff2d 	bl	8000b08 <__aeabi_dcmpeq>
 8005cae:	2800      	cmp	r0, #0
 8005cb0:	d1a2      	bne.n	8005bf8 <_strtod_l+0x578>
 8005cb2:	9b07      	ldr	r3, [sp, #28]
 8005cb4:	9300      	str	r3, [sp, #0]
 8005cb6:	9908      	ldr	r1, [sp, #32]
 8005cb8:	462b      	mov	r3, r5
 8005cba:	463a      	mov	r2, r7
 8005cbc:	4620      	mov	r0, r4
 8005cbe:	f002 f90b 	bl	8007ed8 <__s2b>
 8005cc2:	9007      	str	r0, [sp, #28]
 8005cc4:	2800      	cmp	r0, #0
 8005cc6:	f43f af1f 	beq.w	8005b08 <_strtod_l+0x488>
 8005cca:	9b05      	ldr	r3, [sp, #20]
 8005ccc:	1b9e      	subs	r6, r3, r6
 8005cce:	9b06      	ldr	r3, [sp, #24]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	bfb4      	ite	lt
 8005cd4:	4633      	movlt	r3, r6
 8005cd6:	2300      	movge	r3, #0
 8005cd8:	930c      	str	r3, [sp, #48]	; 0x30
 8005cda:	9b06      	ldr	r3, [sp, #24]
 8005cdc:	2500      	movs	r5, #0
 8005cde:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005ce2:	9312      	str	r3, [sp, #72]	; 0x48
 8005ce4:	462e      	mov	r6, r5
 8005ce6:	9b07      	ldr	r3, [sp, #28]
 8005ce8:	4620      	mov	r0, r4
 8005cea:	6859      	ldr	r1, [r3, #4]
 8005cec:	f002 f84c 	bl	8007d88 <_Balloc>
 8005cf0:	9005      	str	r0, [sp, #20]
 8005cf2:	2800      	cmp	r0, #0
 8005cf4:	f43f af0c 	beq.w	8005b10 <_strtod_l+0x490>
 8005cf8:	9b07      	ldr	r3, [sp, #28]
 8005cfa:	691a      	ldr	r2, [r3, #16]
 8005cfc:	3202      	adds	r2, #2
 8005cfe:	f103 010c 	add.w	r1, r3, #12
 8005d02:	0092      	lsls	r2, r2, #2
 8005d04:	300c      	adds	r0, #12
 8005d06:	f002 f831 	bl	8007d6c <memcpy>
 8005d0a:	ec4b ab10 	vmov	d0, sl, fp
 8005d0e:	aa1a      	add	r2, sp, #104	; 0x68
 8005d10:	a919      	add	r1, sp, #100	; 0x64
 8005d12:	4620      	mov	r0, r4
 8005d14:	f002 fc26 	bl	8008564 <__d2b>
 8005d18:	ec4b ab18 	vmov	d8, sl, fp
 8005d1c:	9018      	str	r0, [sp, #96]	; 0x60
 8005d1e:	2800      	cmp	r0, #0
 8005d20:	f43f aef6 	beq.w	8005b10 <_strtod_l+0x490>
 8005d24:	2101      	movs	r1, #1
 8005d26:	4620      	mov	r0, r4
 8005d28:	f002 f970 	bl	800800c <__i2b>
 8005d2c:	4606      	mov	r6, r0
 8005d2e:	2800      	cmp	r0, #0
 8005d30:	f43f aeee 	beq.w	8005b10 <_strtod_l+0x490>
 8005d34:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005d36:	9904      	ldr	r1, [sp, #16]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	bfab      	itete	ge
 8005d3c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8005d3e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8005d40:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8005d42:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8005d46:	bfac      	ite	ge
 8005d48:	eb03 0902 	addge.w	r9, r3, r2
 8005d4c:	1ad7      	sublt	r7, r2, r3
 8005d4e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8005d50:	eba3 0801 	sub.w	r8, r3, r1
 8005d54:	4490      	add	r8, r2
 8005d56:	4ba1      	ldr	r3, [pc, #644]	; (8005fdc <_strtod_l+0x95c>)
 8005d58:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8005d5c:	4598      	cmp	r8, r3
 8005d5e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8005d62:	f280 80c7 	bge.w	8005ef4 <_strtod_l+0x874>
 8005d66:	eba3 0308 	sub.w	r3, r3, r8
 8005d6a:	2b1f      	cmp	r3, #31
 8005d6c:	eba2 0203 	sub.w	r2, r2, r3
 8005d70:	f04f 0101 	mov.w	r1, #1
 8005d74:	f300 80b1 	bgt.w	8005eda <_strtod_l+0x85a>
 8005d78:	fa01 f303 	lsl.w	r3, r1, r3
 8005d7c:	930d      	str	r3, [sp, #52]	; 0x34
 8005d7e:	2300      	movs	r3, #0
 8005d80:	9308      	str	r3, [sp, #32]
 8005d82:	eb09 0802 	add.w	r8, r9, r2
 8005d86:	9b04      	ldr	r3, [sp, #16]
 8005d88:	45c1      	cmp	r9, r8
 8005d8a:	4417      	add	r7, r2
 8005d8c:	441f      	add	r7, r3
 8005d8e:	464b      	mov	r3, r9
 8005d90:	bfa8      	it	ge
 8005d92:	4643      	movge	r3, r8
 8005d94:	42bb      	cmp	r3, r7
 8005d96:	bfa8      	it	ge
 8005d98:	463b      	movge	r3, r7
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	bfc2      	ittt	gt
 8005d9e:	eba8 0803 	subgt.w	r8, r8, r3
 8005da2:	1aff      	subgt	r7, r7, r3
 8005da4:	eba9 0903 	subgt.w	r9, r9, r3
 8005da8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	dd17      	ble.n	8005dde <_strtod_l+0x75e>
 8005dae:	4631      	mov	r1, r6
 8005db0:	461a      	mov	r2, r3
 8005db2:	4620      	mov	r0, r4
 8005db4:	f002 f9ea 	bl	800818c <__pow5mult>
 8005db8:	4606      	mov	r6, r0
 8005dba:	2800      	cmp	r0, #0
 8005dbc:	f43f aea8 	beq.w	8005b10 <_strtod_l+0x490>
 8005dc0:	4601      	mov	r1, r0
 8005dc2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8005dc4:	4620      	mov	r0, r4
 8005dc6:	f002 f937 	bl	8008038 <__multiply>
 8005dca:	900b      	str	r0, [sp, #44]	; 0x2c
 8005dcc:	2800      	cmp	r0, #0
 8005dce:	f43f ae9f 	beq.w	8005b10 <_strtod_l+0x490>
 8005dd2:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005dd4:	4620      	mov	r0, r4
 8005dd6:	f002 f817 	bl	8007e08 <_Bfree>
 8005dda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ddc:	9318      	str	r3, [sp, #96]	; 0x60
 8005dde:	f1b8 0f00 	cmp.w	r8, #0
 8005de2:	f300 808c 	bgt.w	8005efe <_strtod_l+0x87e>
 8005de6:	9b06      	ldr	r3, [sp, #24]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	dd08      	ble.n	8005dfe <_strtod_l+0x77e>
 8005dec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005dee:	9905      	ldr	r1, [sp, #20]
 8005df0:	4620      	mov	r0, r4
 8005df2:	f002 f9cb 	bl	800818c <__pow5mult>
 8005df6:	9005      	str	r0, [sp, #20]
 8005df8:	2800      	cmp	r0, #0
 8005dfa:	f43f ae89 	beq.w	8005b10 <_strtod_l+0x490>
 8005dfe:	2f00      	cmp	r7, #0
 8005e00:	dd08      	ble.n	8005e14 <_strtod_l+0x794>
 8005e02:	9905      	ldr	r1, [sp, #20]
 8005e04:	463a      	mov	r2, r7
 8005e06:	4620      	mov	r0, r4
 8005e08:	f002 fa1a 	bl	8008240 <__lshift>
 8005e0c:	9005      	str	r0, [sp, #20]
 8005e0e:	2800      	cmp	r0, #0
 8005e10:	f43f ae7e 	beq.w	8005b10 <_strtod_l+0x490>
 8005e14:	f1b9 0f00 	cmp.w	r9, #0
 8005e18:	dd08      	ble.n	8005e2c <_strtod_l+0x7ac>
 8005e1a:	4631      	mov	r1, r6
 8005e1c:	464a      	mov	r2, r9
 8005e1e:	4620      	mov	r0, r4
 8005e20:	f002 fa0e 	bl	8008240 <__lshift>
 8005e24:	4606      	mov	r6, r0
 8005e26:	2800      	cmp	r0, #0
 8005e28:	f43f ae72 	beq.w	8005b10 <_strtod_l+0x490>
 8005e2c:	9a05      	ldr	r2, [sp, #20]
 8005e2e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005e30:	4620      	mov	r0, r4
 8005e32:	f002 fa91 	bl	8008358 <__mdiff>
 8005e36:	4605      	mov	r5, r0
 8005e38:	2800      	cmp	r0, #0
 8005e3a:	f43f ae69 	beq.w	8005b10 <_strtod_l+0x490>
 8005e3e:	68c3      	ldr	r3, [r0, #12]
 8005e40:	930b      	str	r3, [sp, #44]	; 0x2c
 8005e42:	2300      	movs	r3, #0
 8005e44:	60c3      	str	r3, [r0, #12]
 8005e46:	4631      	mov	r1, r6
 8005e48:	f002 fa6a 	bl	8008320 <__mcmp>
 8005e4c:	2800      	cmp	r0, #0
 8005e4e:	da60      	bge.n	8005f12 <_strtod_l+0x892>
 8005e50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e52:	ea53 030a 	orrs.w	r3, r3, sl
 8005e56:	f040 8082 	bne.w	8005f5e <_strtod_l+0x8de>
 8005e5a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d17d      	bne.n	8005f5e <_strtod_l+0x8de>
 8005e62:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005e66:	0d1b      	lsrs	r3, r3, #20
 8005e68:	051b      	lsls	r3, r3, #20
 8005e6a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8005e6e:	d976      	bls.n	8005f5e <_strtod_l+0x8de>
 8005e70:	696b      	ldr	r3, [r5, #20]
 8005e72:	b913      	cbnz	r3, 8005e7a <_strtod_l+0x7fa>
 8005e74:	692b      	ldr	r3, [r5, #16]
 8005e76:	2b01      	cmp	r3, #1
 8005e78:	dd71      	ble.n	8005f5e <_strtod_l+0x8de>
 8005e7a:	4629      	mov	r1, r5
 8005e7c:	2201      	movs	r2, #1
 8005e7e:	4620      	mov	r0, r4
 8005e80:	f002 f9de 	bl	8008240 <__lshift>
 8005e84:	4631      	mov	r1, r6
 8005e86:	4605      	mov	r5, r0
 8005e88:	f002 fa4a 	bl	8008320 <__mcmp>
 8005e8c:	2800      	cmp	r0, #0
 8005e8e:	dd66      	ble.n	8005f5e <_strtod_l+0x8de>
 8005e90:	9904      	ldr	r1, [sp, #16]
 8005e92:	4a53      	ldr	r2, [pc, #332]	; (8005fe0 <_strtod_l+0x960>)
 8005e94:	465b      	mov	r3, fp
 8005e96:	2900      	cmp	r1, #0
 8005e98:	f000 8081 	beq.w	8005f9e <_strtod_l+0x91e>
 8005e9c:	ea02 010b 	and.w	r1, r2, fp
 8005ea0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8005ea4:	dc7b      	bgt.n	8005f9e <_strtod_l+0x91e>
 8005ea6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8005eaa:	f77f aea9 	ble.w	8005c00 <_strtod_l+0x580>
 8005eae:	4b4d      	ldr	r3, [pc, #308]	; (8005fe4 <_strtod_l+0x964>)
 8005eb0:	4650      	mov	r0, sl
 8005eb2:	4659      	mov	r1, fp
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	f7fa fbbf 	bl	8000638 <__aeabi_dmul>
 8005eba:	460b      	mov	r3, r1
 8005ebc:	4303      	orrs	r3, r0
 8005ebe:	bf08      	it	eq
 8005ec0:	2322      	moveq	r3, #34	; 0x22
 8005ec2:	4682      	mov	sl, r0
 8005ec4:	468b      	mov	fp, r1
 8005ec6:	bf08      	it	eq
 8005ec8:	6023      	streq	r3, [r4, #0]
 8005eca:	e62b      	b.n	8005b24 <_strtod_l+0x4a4>
 8005ecc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ed4:	ea03 0a0a 	and.w	sl, r3, sl
 8005ed8:	e6e3      	b.n	8005ca2 <_strtod_l+0x622>
 8005eda:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8005ede:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8005ee2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8005ee6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8005eea:	fa01 f308 	lsl.w	r3, r1, r8
 8005eee:	9308      	str	r3, [sp, #32]
 8005ef0:	910d      	str	r1, [sp, #52]	; 0x34
 8005ef2:	e746      	b.n	8005d82 <_strtod_l+0x702>
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	9308      	str	r3, [sp, #32]
 8005ef8:	2301      	movs	r3, #1
 8005efa:	930d      	str	r3, [sp, #52]	; 0x34
 8005efc:	e741      	b.n	8005d82 <_strtod_l+0x702>
 8005efe:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005f00:	4642      	mov	r2, r8
 8005f02:	4620      	mov	r0, r4
 8005f04:	f002 f99c 	bl	8008240 <__lshift>
 8005f08:	9018      	str	r0, [sp, #96]	; 0x60
 8005f0a:	2800      	cmp	r0, #0
 8005f0c:	f47f af6b 	bne.w	8005de6 <_strtod_l+0x766>
 8005f10:	e5fe      	b.n	8005b10 <_strtod_l+0x490>
 8005f12:	465f      	mov	r7, fp
 8005f14:	d16e      	bne.n	8005ff4 <_strtod_l+0x974>
 8005f16:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005f18:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005f1c:	b342      	cbz	r2, 8005f70 <_strtod_l+0x8f0>
 8005f1e:	4a32      	ldr	r2, [pc, #200]	; (8005fe8 <_strtod_l+0x968>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d128      	bne.n	8005f76 <_strtod_l+0x8f6>
 8005f24:	9b04      	ldr	r3, [sp, #16]
 8005f26:	4651      	mov	r1, sl
 8005f28:	b1eb      	cbz	r3, 8005f66 <_strtod_l+0x8e6>
 8005f2a:	4b2d      	ldr	r3, [pc, #180]	; (8005fe0 <_strtod_l+0x960>)
 8005f2c:	403b      	ands	r3, r7
 8005f2e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005f32:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005f36:	d819      	bhi.n	8005f6c <_strtod_l+0x8ec>
 8005f38:	0d1b      	lsrs	r3, r3, #20
 8005f3a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f42:	4299      	cmp	r1, r3
 8005f44:	d117      	bne.n	8005f76 <_strtod_l+0x8f6>
 8005f46:	4b29      	ldr	r3, [pc, #164]	; (8005fec <_strtod_l+0x96c>)
 8005f48:	429f      	cmp	r7, r3
 8005f4a:	d102      	bne.n	8005f52 <_strtod_l+0x8d2>
 8005f4c:	3101      	adds	r1, #1
 8005f4e:	f43f addf 	beq.w	8005b10 <_strtod_l+0x490>
 8005f52:	4b23      	ldr	r3, [pc, #140]	; (8005fe0 <_strtod_l+0x960>)
 8005f54:	403b      	ands	r3, r7
 8005f56:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8005f5a:	f04f 0a00 	mov.w	sl, #0
 8005f5e:	9b04      	ldr	r3, [sp, #16]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d1a4      	bne.n	8005eae <_strtod_l+0x82e>
 8005f64:	e5de      	b.n	8005b24 <_strtod_l+0x4a4>
 8005f66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005f6a:	e7ea      	b.n	8005f42 <_strtod_l+0x8c2>
 8005f6c:	4613      	mov	r3, r2
 8005f6e:	e7e8      	b.n	8005f42 <_strtod_l+0x8c2>
 8005f70:	ea53 030a 	orrs.w	r3, r3, sl
 8005f74:	d08c      	beq.n	8005e90 <_strtod_l+0x810>
 8005f76:	9b08      	ldr	r3, [sp, #32]
 8005f78:	b1db      	cbz	r3, 8005fb2 <_strtod_l+0x932>
 8005f7a:	423b      	tst	r3, r7
 8005f7c:	d0ef      	beq.n	8005f5e <_strtod_l+0x8de>
 8005f7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005f80:	9a04      	ldr	r2, [sp, #16]
 8005f82:	4650      	mov	r0, sl
 8005f84:	4659      	mov	r1, fp
 8005f86:	b1c3      	cbz	r3, 8005fba <_strtod_l+0x93a>
 8005f88:	f7ff fb5e 	bl	8005648 <sulp>
 8005f8c:	4602      	mov	r2, r0
 8005f8e:	460b      	mov	r3, r1
 8005f90:	ec51 0b18 	vmov	r0, r1, d8
 8005f94:	f7fa f99a 	bl	80002cc <__adddf3>
 8005f98:	4682      	mov	sl, r0
 8005f9a:	468b      	mov	fp, r1
 8005f9c:	e7df      	b.n	8005f5e <_strtod_l+0x8de>
 8005f9e:	4013      	ands	r3, r2
 8005fa0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8005fa4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8005fa8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8005fac:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8005fb0:	e7d5      	b.n	8005f5e <_strtod_l+0x8de>
 8005fb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005fb4:	ea13 0f0a 	tst.w	r3, sl
 8005fb8:	e7e0      	b.n	8005f7c <_strtod_l+0x8fc>
 8005fba:	f7ff fb45 	bl	8005648 <sulp>
 8005fbe:	4602      	mov	r2, r0
 8005fc0:	460b      	mov	r3, r1
 8005fc2:	ec51 0b18 	vmov	r0, r1, d8
 8005fc6:	f7fa f97f 	bl	80002c8 <__aeabi_dsub>
 8005fca:	2200      	movs	r2, #0
 8005fcc:	2300      	movs	r3, #0
 8005fce:	4682      	mov	sl, r0
 8005fd0:	468b      	mov	fp, r1
 8005fd2:	f7fa fd99 	bl	8000b08 <__aeabi_dcmpeq>
 8005fd6:	2800      	cmp	r0, #0
 8005fd8:	d0c1      	beq.n	8005f5e <_strtod_l+0x8de>
 8005fda:	e611      	b.n	8005c00 <_strtod_l+0x580>
 8005fdc:	fffffc02 	.word	0xfffffc02
 8005fe0:	7ff00000 	.word	0x7ff00000
 8005fe4:	39500000 	.word	0x39500000
 8005fe8:	000fffff 	.word	0x000fffff
 8005fec:	7fefffff 	.word	0x7fefffff
 8005ff0:	080096c8 	.word	0x080096c8
 8005ff4:	4631      	mov	r1, r6
 8005ff6:	4628      	mov	r0, r5
 8005ff8:	f002 fb10 	bl	800861c <__ratio>
 8005ffc:	ec59 8b10 	vmov	r8, r9, d0
 8006000:	ee10 0a10 	vmov	r0, s0
 8006004:	2200      	movs	r2, #0
 8006006:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800600a:	4649      	mov	r1, r9
 800600c:	f7fa fd90 	bl	8000b30 <__aeabi_dcmple>
 8006010:	2800      	cmp	r0, #0
 8006012:	d07a      	beq.n	800610a <_strtod_l+0xa8a>
 8006014:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006016:	2b00      	cmp	r3, #0
 8006018:	d04a      	beq.n	80060b0 <_strtod_l+0xa30>
 800601a:	4b95      	ldr	r3, [pc, #596]	; (8006270 <_strtod_l+0xbf0>)
 800601c:	2200      	movs	r2, #0
 800601e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006022:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8006270 <_strtod_l+0xbf0>
 8006026:	f04f 0800 	mov.w	r8, #0
 800602a:	4b92      	ldr	r3, [pc, #584]	; (8006274 <_strtod_l+0xbf4>)
 800602c:	403b      	ands	r3, r7
 800602e:	930d      	str	r3, [sp, #52]	; 0x34
 8006030:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006032:	4b91      	ldr	r3, [pc, #580]	; (8006278 <_strtod_l+0xbf8>)
 8006034:	429a      	cmp	r2, r3
 8006036:	f040 80b0 	bne.w	800619a <_strtod_l+0xb1a>
 800603a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800603e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8006042:	ec4b ab10 	vmov	d0, sl, fp
 8006046:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800604a:	f002 fa0f 	bl	800846c <__ulp>
 800604e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006052:	ec53 2b10 	vmov	r2, r3, d0
 8006056:	f7fa faef 	bl	8000638 <__aeabi_dmul>
 800605a:	4652      	mov	r2, sl
 800605c:	465b      	mov	r3, fp
 800605e:	f7fa f935 	bl	80002cc <__adddf3>
 8006062:	460b      	mov	r3, r1
 8006064:	4983      	ldr	r1, [pc, #524]	; (8006274 <_strtod_l+0xbf4>)
 8006066:	4a85      	ldr	r2, [pc, #532]	; (800627c <_strtod_l+0xbfc>)
 8006068:	4019      	ands	r1, r3
 800606a:	4291      	cmp	r1, r2
 800606c:	4682      	mov	sl, r0
 800606e:	d960      	bls.n	8006132 <_strtod_l+0xab2>
 8006070:	ee18 3a90 	vmov	r3, s17
 8006074:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8006078:	4293      	cmp	r3, r2
 800607a:	d104      	bne.n	8006086 <_strtod_l+0xa06>
 800607c:	ee18 3a10 	vmov	r3, s16
 8006080:	3301      	adds	r3, #1
 8006082:	f43f ad45 	beq.w	8005b10 <_strtod_l+0x490>
 8006086:	f8df b200 	ldr.w	fp, [pc, #512]	; 8006288 <_strtod_l+0xc08>
 800608a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800608e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006090:	4620      	mov	r0, r4
 8006092:	f001 feb9 	bl	8007e08 <_Bfree>
 8006096:	9905      	ldr	r1, [sp, #20]
 8006098:	4620      	mov	r0, r4
 800609a:	f001 feb5 	bl	8007e08 <_Bfree>
 800609e:	4631      	mov	r1, r6
 80060a0:	4620      	mov	r0, r4
 80060a2:	f001 feb1 	bl	8007e08 <_Bfree>
 80060a6:	4629      	mov	r1, r5
 80060a8:	4620      	mov	r0, r4
 80060aa:	f001 fead 	bl	8007e08 <_Bfree>
 80060ae:	e61a      	b.n	8005ce6 <_strtod_l+0x666>
 80060b0:	f1ba 0f00 	cmp.w	sl, #0
 80060b4:	d11b      	bne.n	80060ee <_strtod_l+0xa6e>
 80060b6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80060ba:	b9f3      	cbnz	r3, 80060fa <_strtod_l+0xa7a>
 80060bc:	4b6c      	ldr	r3, [pc, #432]	; (8006270 <_strtod_l+0xbf0>)
 80060be:	2200      	movs	r2, #0
 80060c0:	4640      	mov	r0, r8
 80060c2:	4649      	mov	r1, r9
 80060c4:	f7fa fd2a 	bl	8000b1c <__aeabi_dcmplt>
 80060c8:	b9d0      	cbnz	r0, 8006100 <_strtod_l+0xa80>
 80060ca:	4640      	mov	r0, r8
 80060cc:	4649      	mov	r1, r9
 80060ce:	4b6c      	ldr	r3, [pc, #432]	; (8006280 <_strtod_l+0xc00>)
 80060d0:	2200      	movs	r2, #0
 80060d2:	f7fa fab1 	bl	8000638 <__aeabi_dmul>
 80060d6:	4680      	mov	r8, r0
 80060d8:	4689      	mov	r9, r1
 80060da:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80060de:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 80060e2:	9315      	str	r3, [sp, #84]	; 0x54
 80060e4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80060e8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80060ec:	e79d      	b.n	800602a <_strtod_l+0x9aa>
 80060ee:	f1ba 0f01 	cmp.w	sl, #1
 80060f2:	d102      	bne.n	80060fa <_strtod_l+0xa7a>
 80060f4:	2f00      	cmp	r7, #0
 80060f6:	f43f ad83 	beq.w	8005c00 <_strtod_l+0x580>
 80060fa:	4b62      	ldr	r3, [pc, #392]	; (8006284 <_strtod_l+0xc04>)
 80060fc:	2200      	movs	r2, #0
 80060fe:	e78e      	b.n	800601e <_strtod_l+0x99e>
 8006100:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8006280 <_strtod_l+0xc00>
 8006104:	f04f 0800 	mov.w	r8, #0
 8006108:	e7e7      	b.n	80060da <_strtod_l+0xa5a>
 800610a:	4b5d      	ldr	r3, [pc, #372]	; (8006280 <_strtod_l+0xc00>)
 800610c:	4640      	mov	r0, r8
 800610e:	4649      	mov	r1, r9
 8006110:	2200      	movs	r2, #0
 8006112:	f7fa fa91 	bl	8000638 <__aeabi_dmul>
 8006116:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006118:	4680      	mov	r8, r0
 800611a:	4689      	mov	r9, r1
 800611c:	b933      	cbnz	r3, 800612c <_strtod_l+0xaac>
 800611e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006122:	900e      	str	r0, [sp, #56]	; 0x38
 8006124:	930f      	str	r3, [sp, #60]	; 0x3c
 8006126:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800612a:	e7dd      	b.n	80060e8 <_strtod_l+0xa68>
 800612c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8006130:	e7f9      	b.n	8006126 <_strtod_l+0xaa6>
 8006132:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8006136:	9b04      	ldr	r3, [sp, #16]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d1a8      	bne.n	800608e <_strtod_l+0xa0e>
 800613c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006140:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006142:	0d1b      	lsrs	r3, r3, #20
 8006144:	051b      	lsls	r3, r3, #20
 8006146:	429a      	cmp	r2, r3
 8006148:	d1a1      	bne.n	800608e <_strtod_l+0xa0e>
 800614a:	4640      	mov	r0, r8
 800614c:	4649      	mov	r1, r9
 800614e:	f7fa fdd3 	bl	8000cf8 <__aeabi_d2lz>
 8006152:	f7fa fa43 	bl	80005dc <__aeabi_l2d>
 8006156:	4602      	mov	r2, r0
 8006158:	460b      	mov	r3, r1
 800615a:	4640      	mov	r0, r8
 800615c:	4649      	mov	r1, r9
 800615e:	f7fa f8b3 	bl	80002c8 <__aeabi_dsub>
 8006162:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006164:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006168:	ea43 030a 	orr.w	r3, r3, sl
 800616c:	4313      	orrs	r3, r2
 800616e:	4680      	mov	r8, r0
 8006170:	4689      	mov	r9, r1
 8006172:	d055      	beq.n	8006220 <_strtod_l+0xba0>
 8006174:	a336      	add	r3, pc, #216	; (adr r3, 8006250 <_strtod_l+0xbd0>)
 8006176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800617a:	f7fa fccf 	bl	8000b1c <__aeabi_dcmplt>
 800617e:	2800      	cmp	r0, #0
 8006180:	f47f acd0 	bne.w	8005b24 <_strtod_l+0x4a4>
 8006184:	a334      	add	r3, pc, #208	; (adr r3, 8006258 <_strtod_l+0xbd8>)
 8006186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800618a:	4640      	mov	r0, r8
 800618c:	4649      	mov	r1, r9
 800618e:	f7fa fce3 	bl	8000b58 <__aeabi_dcmpgt>
 8006192:	2800      	cmp	r0, #0
 8006194:	f43f af7b 	beq.w	800608e <_strtod_l+0xa0e>
 8006198:	e4c4      	b.n	8005b24 <_strtod_l+0x4a4>
 800619a:	9b04      	ldr	r3, [sp, #16]
 800619c:	b333      	cbz	r3, 80061ec <_strtod_l+0xb6c>
 800619e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80061a0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80061a4:	d822      	bhi.n	80061ec <_strtod_l+0xb6c>
 80061a6:	a32e      	add	r3, pc, #184	; (adr r3, 8006260 <_strtod_l+0xbe0>)
 80061a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ac:	4640      	mov	r0, r8
 80061ae:	4649      	mov	r1, r9
 80061b0:	f7fa fcbe 	bl	8000b30 <__aeabi_dcmple>
 80061b4:	b1a0      	cbz	r0, 80061e0 <_strtod_l+0xb60>
 80061b6:	4649      	mov	r1, r9
 80061b8:	4640      	mov	r0, r8
 80061ba:	f7fa fd15 	bl	8000be8 <__aeabi_d2uiz>
 80061be:	2801      	cmp	r0, #1
 80061c0:	bf38      	it	cc
 80061c2:	2001      	movcc	r0, #1
 80061c4:	f7fa f9be 	bl	8000544 <__aeabi_ui2d>
 80061c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80061ca:	4680      	mov	r8, r0
 80061cc:	4689      	mov	r9, r1
 80061ce:	bb23      	cbnz	r3, 800621a <_strtod_l+0xb9a>
 80061d0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80061d4:	9010      	str	r0, [sp, #64]	; 0x40
 80061d6:	9311      	str	r3, [sp, #68]	; 0x44
 80061d8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80061dc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80061e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061e2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80061e4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80061e8:	1a9b      	subs	r3, r3, r2
 80061ea:	9309      	str	r3, [sp, #36]	; 0x24
 80061ec:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80061f0:	eeb0 0a48 	vmov.f32	s0, s16
 80061f4:	eef0 0a68 	vmov.f32	s1, s17
 80061f8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80061fc:	f002 f936 	bl	800846c <__ulp>
 8006200:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006204:	ec53 2b10 	vmov	r2, r3, d0
 8006208:	f7fa fa16 	bl	8000638 <__aeabi_dmul>
 800620c:	ec53 2b18 	vmov	r2, r3, d8
 8006210:	f7fa f85c 	bl	80002cc <__adddf3>
 8006214:	4682      	mov	sl, r0
 8006216:	468b      	mov	fp, r1
 8006218:	e78d      	b.n	8006136 <_strtod_l+0xab6>
 800621a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800621e:	e7db      	b.n	80061d8 <_strtod_l+0xb58>
 8006220:	a311      	add	r3, pc, #68	; (adr r3, 8006268 <_strtod_l+0xbe8>)
 8006222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006226:	f7fa fc79 	bl	8000b1c <__aeabi_dcmplt>
 800622a:	e7b2      	b.n	8006192 <_strtod_l+0xb12>
 800622c:	2300      	movs	r3, #0
 800622e:	930a      	str	r3, [sp, #40]	; 0x28
 8006230:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006232:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006234:	6013      	str	r3, [r2, #0]
 8006236:	f7ff ba6b 	b.w	8005710 <_strtod_l+0x90>
 800623a:	2a65      	cmp	r2, #101	; 0x65
 800623c:	f43f ab5f 	beq.w	80058fe <_strtod_l+0x27e>
 8006240:	2a45      	cmp	r2, #69	; 0x45
 8006242:	f43f ab5c 	beq.w	80058fe <_strtod_l+0x27e>
 8006246:	2301      	movs	r3, #1
 8006248:	f7ff bb94 	b.w	8005974 <_strtod_l+0x2f4>
 800624c:	f3af 8000 	nop.w
 8006250:	94a03595 	.word	0x94a03595
 8006254:	3fdfffff 	.word	0x3fdfffff
 8006258:	35afe535 	.word	0x35afe535
 800625c:	3fe00000 	.word	0x3fe00000
 8006260:	ffc00000 	.word	0xffc00000
 8006264:	41dfffff 	.word	0x41dfffff
 8006268:	94a03595 	.word	0x94a03595
 800626c:	3fcfffff 	.word	0x3fcfffff
 8006270:	3ff00000 	.word	0x3ff00000
 8006274:	7ff00000 	.word	0x7ff00000
 8006278:	7fe00000 	.word	0x7fe00000
 800627c:	7c9fffff 	.word	0x7c9fffff
 8006280:	3fe00000 	.word	0x3fe00000
 8006284:	bff00000 	.word	0xbff00000
 8006288:	7fefffff 	.word	0x7fefffff

0800628c <_strtod_r>:
 800628c:	4b01      	ldr	r3, [pc, #4]	; (8006294 <_strtod_r+0x8>)
 800628e:	f7ff b9f7 	b.w	8005680 <_strtod_l>
 8006292:	bf00      	nop
 8006294:	20000074 	.word	0x20000074

08006298 <_strtol_l.constprop.0>:
 8006298:	2b01      	cmp	r3, #1
 800629a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800629e:	d001      	beq.n	80062a4 <_strtol_l.constprop.0+0xc>
 80062a0:	2b24      	cmp	r3, #36	; 0x24
 80062a2:	d906      	bls.n	80062b2 <_strtol_l.constprop.0+0x1a>
 80062a4:	f7fe fa3e 	bl	8004724 <__errno>
 80062a8:	2316      	movs	r3, #22
 80062aa:	6003      	str	r3, [r0, #0]
 80062ac:	2000      	movs	r0, #0
 80062ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062b2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006398 <_strtol_l.constprop.0+0x100>
 80062b6:	460d      	mov	r5, r1
 80062b8:	462e      	mov	r6, r5
 80062ba:	f815 4b01 	ldrb.w	r4, [r5], #1
 80062be:	f814 700c 	ldrb.w	r7, [r4, ip]
 80062c2:	f017 0708 	ands.w	r7, r7, #8
 80062c6:	d1f7      	bne.n	80062b8 <_strtol_l.constprop.0+0x20>
 80062c8:	2c2d      	cmp	r4, #45	; 0x2d
 80062ca:	d132      	bne.n	8006332 <_strtol_l.constprop.0+0x9a>
 80062cc:	782c      	ldrb	r4, [r5, #0]
 80062ce:	2701      	movs	r7, #1
 80062d0:	1cb5      	adds	r5, r6, #2
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d05b      	beq.n	800638e <_strtol_l.constprop.0+0xf6>
 80062d6:	2b10      	cmp	r3, #16
 80062d8:	d109      	bne.n	80062ee <_strtol_l.constprop.0+0x56>
 80062da:	2c30      	cmp	r4, #48	; 0x30
 80062dc:	d107      	bne.n	80062ee <_strtol_l.constprop.0+0x56>
 80062de:	782c      	ldrb	r4, [r5, #0]
 80062e0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80062e4:	2c58      	cmp	r4, #88	; 0x58
 80062e6:	d14d      	bne.n	8006384 <_strtol_l.constprop.0+0xec>
 80062e8:	786c      	ldrb	r4, [r5, #1]
 80062ea:	2310      	movs	r3, #16
 80062ec:	3502      	adds	r5, #2
 80062ee:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80062f2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80062f6:	f04f 0c00 	mov.w	ip, #0
 80062fa:	fbb8 f9f3 	udiv	r9, r8, r3
 80062fe:	4666      	mov	r6, ip
 8006300:	fb03 8a19 	mls	sl, r3, r9, r8
 8006304:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8006308:	f1be 0f09 	cmp.w	lr, #9
 800630c:	d816      	bhi.n	800633c <_strtol_l.constprop.0+0xa4>
 800630e:	4674      	mov	r4, lr
 8006310:	42a3      	cmp	r3, r4
 8006312:	dd24      	ble.n	800635e <_strtol_l.constprop.0+0xc6>
 8006314:	f1bc 0f00 	cmp.w	ip, #0
 8006318:	db1e      	blt.n	8006358 <_strtol_l.constprop.0+0xc0>
 800631a:	45b1      	cmp	r9, r6
 800631c:	d31c      	bcc.n	8006358 <_strtol_l.constprop.0+0xc0>
 800631e:	d101      	bne.n	8006324 <_strtol_l.constprop.0+0x8c>
 8006320:	45a2      	cmp	sl, r4
 8006322:	db19      	blt.n	8006358 <_strtol_l.constprop.0+0xc0>
 8006324:	fb06 4603 	mla	r6, r6, r3, r4
 8006328:	f04f 0c01 	mov.w	ip, #1
 800632c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006330:	e7e8      	b.n	8006304 <_strtol_l.constprop.0+0x6c>
 8006332:	2c2b      	cmp	r4, #43	; 0x2b
 8006334:	bf04      	itt	eq
 8006336:	782c      	ldrbeq	r4, [r5, #0]
 8006338:	1cb5      	addeq	r5, r6, #2
 800633a:	e7ca      	b.n	80062d2 <_strtol_l.constprop.0+0x3a>
 800633c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8006340:	f1be 0f19 	cmp.w	lr, #25
 8006344:	d801      	bhi.n	800634a <_strtol_l.constprop.0+0xb2>
 8006346:	3c37      	subs	r4, #55	; 0x37
 8006348:	e7e2      	b.n	8006310 <_strtol_l.constprop.0+0x78>
 800634a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800634e:	f1be 0f19 	cmp.w	lr, #25
 8006352:	d804      	bhi.n	800635e <_strtol_l.constprop.0+0xc6>
 8006354:	3c57      	subs	r4, #87	; 0x57
 8006356:	e7db      	b.n	8006310 <_strtol_l.constprop.0+0x78>
 8006358:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800635c:	e7e6      	b.n	800632c <_strtol_l.constprop.0+0x94>
 800635e:	f1bc 0f00 	cmp.w	ip, #0
 8006362:	da05      	bge.n	8006370 <_strtol_l.constprop.0+0xd8>
 8006364:	2322      	movs	r3, #34	; 0x22
 8006366:	6003      	str	r3, [r0, #0]
 8006368:	4646      	mov	r6, r8
 800636a:	b942      	cbnz	r2, 800637e <_strtol_l.constprop.0+0xe6>
 800636c:	4630      	mov	r0, r6
 800636e:	e79e      	b.n	80062ae <_strtol_l.constprop.0+0x16>
 8006370:	b107      	cbz	r7, 8006374 <_strtol_l.constprop.0+0xdc>
 8006372:	4276      	negs	r6, r6
 8006374:	2a00      	cmp	r2, #0
 8006376:	d0f9      	beq.n	800636c <_strtol_l.constprop.0+0xd4>
 8006378:	f1bc 0f00 	cmp.w	ip, #0
 800637c:	d000      	beq.n	8006380 <_strtol_l.constprop.0+0xe8>
 800637e:	1e69      	subs	r1, r5, #1
 8006380:	6011      	str	r1, [r2, #0]
 8006382:	e7f3      	b.n	800636c <_strtol_l.constprop.0+0xd4>
 8006384:	2430      	movs	r4, #48	; 0x30
 8006386:	2b00      	cmp	r3, #0
 8006388:	d1b1      	bne.n	80062ee <_strtol_l.constprop.0+0x56>
 800638a:	2308      	movs	r3, #8
 800638c:	e7af      	b.n	80062ee <_strtol_l.constprop.0+0x56>
 800638e:	2c30      	cmp	r4, #48	; 0x30
 8006390:	d0a5      	beq.n	80062de <_strtol_l.constprop.0+0x46>
 8006392:	230a      	movs	r3, #10
 8006394:	e7ab      	b.n	80062ee <_strtol_l.constprop.0+0x56>
 8006396:	bf00      	nop
 8006398:	080096f1 	.word	0x080096f1

0800639c <_strtol_r>:
 800639c:	f7ff bf7c 	b.w	8006298 <_strtol_l.constprop.0>

080063a0 <__swbuf_r>:
 80063a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063a2:	460e      	mov	r6, r1
 80063a4:	4614      	mov	r4, r2
 80063a6:	4605      	mov	r5, r0
 80063a8:	b118      	cbz	r0, 80063b2 <__swbuf_r+0x12>
 80063aa:	6983      	ldr	r3, [r0, #24]
 80063ac:	b90b      	cbnz	r3, 80063b2 <__swbuf_r+0x12>
 80063ae:	f001 f84b 	bl	8007448 <__sinit>
 80063b2:	4b21      	ldr	r3, [pc, #132]	; (8006438 <__swbuf_r+0x98>)
 80063b4:	429c      	cmp	r4, r3
 80063b6:	d12b      	bne.n	8006410 <__swbuf_r+0x70>
 80063b8:	686c      	ldr	r4, [r5, #4]
 80063ba:	69a3      	ldr	r3, [r4, #24]
 80063bc:	60a3      	str	r3, [r4, #8]
 80063be:	89a3      	ldrh	r3, [r4, #12]
 80063c0:	071a      	lsls	r2, r3, #28
 80063c2:	d52f      	bpl.n	8006424 <__swbuf_r+0x84>
 80063c4:	6923      	ldr	r3, [r4, #16]
 80063c6:	b36b      	cbz	r3, 8006424 <__swbuf_r+0x84>
 80063c8:	6923      	ldr	r3, [r4, #16]
 80063ca:	6820      	ldr	r0, [r4, #0]
 80063cc:	1ac0      	subs	r0, r0, r3
 80063ce:	6963      	ldr	r3, [r4, #20]
 80063d0:	b2f6      	uxtb	r6, r6
 80063d2:	4283      	cmp	r3, r0
 80063d4:	4637      	mov	r7, r6
 80063d6:	dc04      	bgt.n	80063e2 <__swbuf_r+0x42>
 80063d8:	4621      	mov	r1, r4
 80063da:	4628      	mov	r0, r5
 80063dc:	f000 ffa0 	bl	8007320 <_fflush_r>
 80063e0:	bb30      	cbnz	r0, 8006430 <__swbuf_r+0x90>
 80063e2:	68a3      	ldr	r3, [r4, #8]
 80063e4:	3b01      	subs	r3, #1
 80063e6:	60a3      	str	r3, [r4, #8]
 80063e8:	6823      	ldr	r3, [r4, #0]
 80063ea:	1c5a      	adds	r2, r3, #1
 80063ec:	6022      	str	r2, [r4, #0]
 80063ee:	701e      	strb	r6, [r3, #0]
 80063f0:	6963      	ldr	r3, [r4, #20]
 80063f2:	3001      	adds	r0, #1
 80063f4:	4283      	cmp	r3, r0
 80063f6:	d004      	beq.n	8006402 <__swbuf_r+0x62>
 80063f8:	89a3      	ldrh	r3, [r4, #12]
 80063fa:	07db      	lsls	r3, r3, #31
 80063fc:	d506      	bpl.n	800640c <__swbuf_r+0x6c>
 80063fe:	2e0a      	cmp	r6, #10
 8006400:	d104      	bne.n	800640c <__swbuf_r+0x6c>
 8006402:	4621      	mov	r1, r4
 8006404:	4628      	mov	r0, r5
 8006406:	f000 ff8b 	bl	8007320 <_fflush_r>
 800640a:	b988      	cbnz	r0, 8006430 <__swbuf_r+0x90>
 800640c:	4638      	mov	r0, r7
 800640e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006410:	4b0a      	ldr	r3, [pc, #40]	; (800643c <__swbuf_r+0x9c>)
 8006412:	429c      	cmp	r4, r3
 8006414:	d101      	bne.n	800641a <__swbuf_r+0x7a>
 8006416:	68ac      	ldr	r4, [r5, #8]
 8006418:	e7cf      	b.n	80063ba <__swbuf_r+0x1a>
 800641a:	4b09      	ldr	r3, [pc, #36]	; (8006440 <__swbuf_r+0xa0>)
 800641c:	429c      	cmp	r4, r3
 800641e:	bf08      	it	eq
 8006420:	68ec      	ldreq	r4, [r5, #12]
 8006422:	e7ca      	b.n	80063ba <__swbuf_r+0x1a>
 8006424:	4621      	mov	r1, r4
 8006426:	4628      	mov	r0, r5
 8006428:	f000 f80c 	bl	8006444 <__swsetup_r>
 800642c:	2800      	cmp	r0, #0
 800642e:	d0cb      	beq.n	80063c8 <__swbuf_r+0x28>
 8006430:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006434:	e7ea      	b.n	800640c <__swbuf_r+0x6c>
 8006436:	bf00      	nop
 8006438:	080098a4 	.word	0x080098a4
 800643c:	080098c4 	.word	0x080098c4
 8006440:	08009884 	.word	0x08009884

08006444 <__swsetup_r>:
 8006444:	4b32      	ldr	r3, [pc, #200]	; (8006510 <__swsetup_r+0xcc>)
 8006446:	b570      	push	{r4, r5, r6, lr}
 8006448:	681d      	ldr	r5, [r3, #0]
 800644a:	4606      	mov	r6, r0
 800644c:	460c      	mov	r4, r1
 800644e:	b125      	cbz	r5, 800645a <__swsetup_r+0x16>
 8006450:	69ab      	ldr	r3, [r5, #24]
 8006452:	b913      	cbnz	r3, 800645a <__swsetup_r+0x16>
 8006454:	4628      	mov	r0, r5
 8006456:	f000 fff7 	bl	8007448 <__sinit>
 800645a:	4b2e      	ldr	r3, [pc, #184]	; (8006514 <__swsetup_r+0xd0>)
 800645c:	429c      	cmp	r4, r3
 800645e:	d10f      	bne.n	8006480 <__swsetup_r+0x3c>
 8006460:	686c      	ldr	r4, [r5, #4]
 8006462:	89a3      	ldrh	r3, [r4, #12]
 8006464:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006468:	0719      	lsls	r1, r3, #28
 800646a:	d42c      	bmi.n	80064c6 <__swsetup_r+0x82>
 800646c:	06dd      	lsls	r5, r3, #27
 800646e:	d411      	bmi.n	8006494 <__swsetup_r+0x50>
 8006470:	2309      	movs	r3, #9
 8006472:	6033      	str	r3, [r6, #0]
 8006474:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006478:	81a3      	strh	r3, [r4, #12]
 800647a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800647e:	e03e      	b.n	80064fe <__swsetup_r+0xba>
 8006480:	4b25      	ldr	r3, [pc, #148]	; (8006518 <__swsetup_r+0xd4>)
 8006482:	429c      	cmp	r4, r3
 8006484:	d101      	bne.n	800648a <__swsetup_r+0x46>
 8006486:	68ac      	ldr	r4, [r5, #8]
 8006488:	e7eb      	b.n	8006462 <__swsetup_r+0x1e>
 800648a:	4b24      	ldr	r3, [pc, #144]	; (800651c <__swsetup_r+0xd8>)
 800648c:	429c      	cmp	r4, r3
 800648e:	bf08      	it	eq
 8006490:	68ec      	ldreq	r4, [r5, #12]
 8006492:	e7e6      	b.n	8006462 <__swsetup_r+0x1e>
 8006494:	0758      	lsls	r0, r3, #29
 8006496:	d512      	bpl.n	80064be <__swsetup_r+0x7a>
 8006498:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800649a:	b141      	cbz	r1, 80064ae <__swsetup_r+0x6a>
 800649c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80064a0:	4299      	cmp	r1, r3
 80064a2:	d002      	beq.n	80064aa <__swsetup_r+0x66>
 80064a4:	4630      	mov	r0, r6
 80064a6:	f002 f947 	bl	8008738 <_free_r>
 80064aa:	2300      	movs	r3, #0
 80064ac:	6363      	str	r3, [r4, #52]	; 0x34
 80064ae:	89a3      	ldrh	r3, [r4, #12]
 80064b0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80064b4:	81a3      	strh	r3, [r4, #12]
 80064b6:	2300      	movs	r3, #0
 80064b8:	6063      	str	r3, [r4, #4]
 80064ba:	6923      	ldr	r3, [r4, #16]
 80064bc:	6023      	str	r3, [r4, #0]
 80064be:	89a3      	ldrh	r3, [r4, #12]
 80064c0:	f043 0308 	orr.w	r3, r3, #8
 80064c4:	81a3      	strh	r3, [r4, #12]
 80064c6:	6923      	ldr	r3, [r4, #16]
 80064c8:	b94b      	cbnz	r3, 80064de <__swsetup_r+0x9a>
 80064ca:	89a3      	ldrh	r3, [r4, #12]
 80064cc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80064d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064d4:	d003      	beq.n	80064de <__swsetup_r+0x9a>
 80064d6:	4621      	mov	r1, r4
 80064d8:	4630      	mov	r0, r6
 80064da:	f001 fbed 	bl	8007cb8 <__smakebuf_r>
 80064de:	89a0      	ldrh	r0, [r4, #12]
 80064e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80064e4:	f010 0301 	ands.w	r3, r0, #1
 80064e8:	d00a      	beq.n	8006500 <__swsetup_r+0xbc>
 80064ea:	2300      	movs	r3, #0
 80064ec:	60a3      	str	r3, [r4, #8]
 80064ee:	6963      	ldr	r3, [r4, #20]
 80064f0:	425b      	negs	r3, r3
 80064f2:	61a3      	str	r3, [r4, #24]
 80064f4:	6923      	ldr	r3, [r4, #16]
 80064f6:	b943      	cbnz	r3, 800650a <__swsetup_r+0xc6>
 80064f8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80064fc:	d1ba      	bne.n	8006474 <__swsetup_r+0x30>
 80064fe:	bd70      	pop	{r4, r5, r6, pc}
 8006500:	0781      	lsls	r1, r0, #30
 8006502:	bf58      	it	pl
 8006504:	6963      	ldrpl	r3, [r4, #20]
 8006506:	60a3      	str	r3, [r4, #8]
 8006508:	e7f4      	b.n	80064f4 <__swsetup_r+0xb0>
 800650a:	2000      	movs	r0, #0
 800650c:	e7f7      	b.n	80064fe <__swsetup_r+0xba>
 800650e:	bf00      	nop
 8006510:	2000000c 	.word	0x2000000c
 8006514:	080098a4 	.word	0x080098a4
 8006518:	080098c4 	.word	0x080098c4
 800651c:	08009884 	.word	0x08009884

08006520 <quorem>:
 8006520:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006524:	6903      	ldr	r3, [r0, #16]
 8006526:	690c      	ldr	r4, [r1, #16]
 8006528:	42a3      	cmp	r3, r4
 800652a:	4607      	mov	r7, r0
 800652c:	f2c0 8081 	blt.w	8006632 <quorem+0x112>
 8006530:	3c01      	subs	r4, #1
 8006532:	f101 0814 	add.w	r8, r1, #20
 8006536:	f100 0514 	add.w	r5, r0, #20
 800653a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800653e:	9301      	str	r3, [sp, #4]
 8006540:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006544:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006548:	3301      	adds	r3, #1
 800654a:	429a      	cmp	r2, r3
 800654c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006550:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006554:	fbb2 f6f3 	udiv	r6, r2, r3
 8006558:	d331      	bcc.n	80065be <quorem+0x9e>
 800655a:	f04f 0e00 	mov.w	lr, #0
 800655e:	4640      	mov	r0, r8
 8006560:	46ac      	mov	ip, r5
 8006562:	46f2      	mov	sl, lr
 8006564:	f850 2b04 	ldr.w	r2, [r0], #4
 8006568:	b293      	uxth	r3, r2
 800656a:	fb06 e303 	mla	r3, r6, r3, lr
 800656e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006572:	b29b      	uxth	r3, r3
 8006574:	ebaa 0303 	sub.w	r3, sl, r3
 8006578:	f8dc a000 	ldr.w	sl, [ip]
 800657c:	0c12      	lsrs	r2, r2, #16
 800657e:	fa13 f38a 	uxtah	r3, r3, sl
 8006582:	fb06 e202 	mla	r2, r6, r2, lr
 8006586:	9300      	str	r3, [sp, #0]
 8006588:	9b00      	ldr	r3, [sp, #0]
 800658a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800658e:	b292      	uxth	r2, r2
 8006590:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006594:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006598:	f8bd 3000 	ldrh.w	r3, [sp]
 800659c:	4581      	cmp	r9, r0
 800659e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80065a2:	f84c 3b04 	str.w	r3, [ip], #4
 80065a6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80065aa:	d2db      	bcs.n	8006564 <quorem+0x44>
 80065ac:	f855 300b 	ldr.w	r3, [r5, fp]
 80065b0:	b92b      	cbnz	r3, 80065be <quorem+0x9e>
 80065b2:	9b01      	ldr	r3, [sp, #4]
 80065b4:	3b04      	subs	r3, #4
 80065b6:	429d      	cmp	r5, r3
 80065b8:	461a      	mov	r2, r3
 80065ba:	d32e      	bcc.n	800661a <quorem+0xfa>
 80065bc:	613c      	str	r4, [r7, #16]
 80065be:	4638      	mov	r0, r7
 80065c0:	f001 feae 	bl	8008320 <__mcmp>
 80065c4:	2800      	cmp	r0, #0
 80065c6:	db24      	blt.n	8006612 <quorem+0xf2>
 80065c8:	3601      	adds	r6, #1
 80065ca:	4628      	mov	r0, r5
 80065cc:	f04f 0c00 	mov.w	ip, #0
 80065d0:	f858 2b04 	ldr.w	r2, [r8], #4
 80065d4:	f8d0 e000 	ldr.w	lr, [r0]
 80065d8:	b293      	uxth	r3, r2
 80065da:	ebac 0303 	sub.w	r3, ip, r3
 80065de:	0c12      	lsrs	r2, r2, #16
 80065e0:	fa13 f38e 	uxtah	r3, r3, lr
 80065e4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80065e8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80065ec:	b29b      	uxth	r3, r3
 80065ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80065f2:	45c1      	cmp	r9, r8
 80065f4:	f840 3b04 	str.w	r3, [r0], #4
 80065f8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80065fc:	d2e8      	bcs.n	80065d0 <quorem+0xb0>
 80065fe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006602:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006606:	b922      	cbnz	r2, 8006612 <quorem+0xf2>
 8006608:	3b04      	subs	r3, #4
 800660a:	429d      	cmp	r5, r3
 800660c:	461a      	mov	r2, r3
 800660e:	d30a      	bcc.n	8006626 <quorem+0x106>
 8006610:	613c      	str	r4, [r7, #16]
 8006612:	4630      	mov	r0, r6
 8006614:	b003      	add	sp, #12
 8006616:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800661a:	6812      	ldr	r2, [r2, #0]
 800661c:	3b04      	subs	r3, #4
 800661e:	2a00      	cmp	r2, #0
 8006620:	d1cc      	bne.n	80065bc <quorem+0x9c>
 8006622:	3c01      	subs	r4, #1
 8006624:	e7c7      	b.n	80065b6 <quorem+0x96>
 8006626:	6812      	ldr	r2, [r2, #0]
 8006628:	3b04      	subs	r3, #4
 800662a:	2a00      	cmp	r2, #0
 800662c:	d1f0      	bne.n	8006610 <quorem+0xf0>
 800662e:	3c01      	subs	r4, #1
 8006630:	e7eb      	b.n	800660a <quorem+0xea>
 8006632:	2000      	movs	r0, #0
 8006634:	e7ee      	b.n	8006614 <quorem+0xf4>
	...

08006638 <_dtoa_r>:
 8006638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800663c:	ed2d 8b04 	vpush	{d8-d9}
 8006640:	ec57 6b10 	vmov	r6, r7, d0
 8006644:	b093      	sub	sp, #76	; 0x4c
 8006646:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006648:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800664c:	9106      	str	r1, [sp, #24]
 800664e:	ee10 aa10 	vmov	sl, s0
 8006652:	4604      	mov	r4, r0
 8006654:	9209      	str	r2, [sp, #36]	; 0x24
 8006656:	930c      	str	r3, [sp, #48]	; 0x30
 8006658:	46bb      	mov	fp, r7
 800665a:	b975      	cbnz	r5, 800667a <_dtoa_r+0x42>
 800665c:	2010      	movs	r0, #16
 800665e:	f001 fb6b 	bl	8007d38 <malloc>
 8006662:	4602      	mov	r2, r0
 8006664:	6260      	str	r0, [r4, #36]	; 0x24
 8006666:	b920      	cbnz	r0, 8006672 <_dtoa_r+0x3a>
 8006668:	4ba7      	ldr	r3, [pc, #668]	; (8006908 <_dtoa_r+0x2d0>)
 800666a:	21ea      	movs	r1, #234	; 0xea
 800666c:	48a7      	ldr	r0, [pc, #668]	; (800690c <_dtoa_r+0x2d4>)
 800666e:	f002 fb2d 	bl	8008ccc <__assert_func>
 8006672:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006676:	6005      	str	r5, [r0, #0]
 8006678:	60c5      	str	r5, [r0, #12]
 800667a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800667c:	6819      	ldr	r1, [r3, #0]
 800667e:	b151      	cbz	r1, 8006696 <_dtoa_r+0x5e>
 8006680:	685a      	ldr	r2, [r3, #4]
 8006682:	604a      	str	r2, [r1, #4]
 8006684:	2301      	movs	r3, #1
 8006686:	4093      	lsls	r3, r2
 8006688:	608b      	str	r3, [r1, #8]
 800668a:	4620      	mov	r0, r4
 800668c:	f001 fbbc 	bl	8007e08 <_Bfree>
 8006690:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006692:	2200      	movs	r2, #0
 8006694:	601a      	str	r2, [r3, #0]
 8006696:	1e3b      	subs	r3, r7, #0
 8006698:	bfaa      	itet	ge
 800669a:	2300      	movge	r3, #0
 800669c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80066a0:	f8c8 3000 	strge.w	r3, [r8]
 80066a4:	4b9a      	ldr	r3, [pc, #616]	; (8006910 <_dtoa_r+0x2d8>)
 80066a6:	bfbc      	itt	lt
 80066a8:	2201      	movlt	r2, #1
 80066aa:	f8c8 2000 	strlt.w	r2, [r8]
 80066ae:	ea33 030b 	bics.w	r3, r3, fp
 80066b2:	d11b      	bne.n	80066ec <_dtoa_r+0xb4>
 80066b4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80066b6:	f242 730f 	movw	r3, #9999	; 0x270f
 80066ba:	6013      	str	r3, [r2, #0]
 80066bc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80066c0:	4333      	orrs	r3, r6
 80066c2:	f000 8592 	beq.w	80071ea <_dtoa_r+0xbb2>
 80066c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80066c8:	b963      	cbnz	r3, 80066e4 <_dtoa_r+0xac>
 80066ca:	4b92      	ldr	r3, [pc, #584]	; (8006914 <_dtoa_r+0x2dc>)
 80066cc:	e022      	b.n	8006714 <_dtoa_r+0xdc>
 80066ce:	4b92      	ldr	r3, [pc, #584]	; (8006918 <_dtoa_r+0x2e0>)
 80066d0:	9301      	str	r3, [sp, #4]
 80066d2:	3308      	adds	r3, #8
 80066d4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80066d6:	6013      	str	r3, [r2, #0]
 80066d8:	9801      	ldr	r0, [sp, #4]
 80066da:	b013      	add	sp, #76	; 0x4c
 80066dc:	ecbd 8b04 	vpop	{d8-d9}
 80066e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066e4:	4b8b      	ldr	r3, [pc, #556]	; (8006914 <_dtoa_r+0x2dc>)
 80066e6:	9301      	str	r3, [sp, #4]
 80066e8:	3303      	adds	r3, #3
 80066ea:	e7f3      	b.n	80066d4 <_dtoa_r+0x9c>
 80066ec:	2200      	movs	r2, #0
 80066ee:	2300      	movs	r3, #0
 80066f0:	4650      	mov	r0, sl
 80066f2:	4659      	mov	r1, fp
 80066f4:	f7fa fa08 	bl	8000b08 <__aeabi_dcmpeq>
 80066f8:	ec4b ab19 	vmov	d9, sl, fp
 80066fc:	4680      	mov	r8, r0
 80066fe:	b158      	cbz	r0, 8006718 <_dtoa_r+0xe0>
 8006700:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006702:	2301      	movs	r3, #1
 8006704:	6013      	str	r3, [r2, #0]
 8006706:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006708:	2b00      	cmp	r3, #0
 800670a:	f000 856b 	beq.w	80071e4 <_dtoa_r+0xbac>
 800670e:	4883      	ldr	r0, [pc, #524]	; (800691c <_dtoa_r+0x2e4>)
 8006710:	6018      	str	r0, [r3, #0]
 8006712:	1e43      	subs	r3, r0, #1
 8006714:	9301      	str	r3, [sp, #4]
 8006716:	e7df      	b.n	80066d8 <_dtoa_r+0xa0>
 8006718:	ec4b ab10 	vmov	d0, sl, fp
 800671c:	aa10      	add	r2, sp, #64	; 0x40
 800671e:	a911      	add	r1, sp, #68	; 0x44
 8006720:	4620      	mov	r0, r4
 8006722:	f001 ff1f 	bl	8008564 <__d2b>
 8006726:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800672a:	ee08 0a10 	vmov	s16, r0
 800672e:	2d00      	cmp	r5, #0
 8006730:	f000 8084 	beq.w	800683c <_dtoa_r+0x204>
 8006734:	ee19 3a90 	vmov	r3, s19
 8006738:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800673c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006740:	4656      	mov	r6, sl
 8006742:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006746:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800674a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800674e:	4b74      	ldr	r3, [pc, #464]	; (8006920 <_dtoa_r+0x2e8>)
 8006750:	2200      	movs	r2, #0
 8006752:	4630      	mov	r0, r6
 8006754:	4639      	mov	r1, r7
 8006756:	f7f9 fdb7 	bl	80002c8 <__aeabi_dsub>
 800675a:	a365      	add	r3, pc, #404	; (adr r3, 80068f0 <_dtoa_r+0x2b8>)
 800675c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006760:	f7f9 ff6a 	bl	8000638 <__aeabi_dmul>
 8006764:	a364      	add	r3, pc, #400	; (adr r3, 80068f8 <_dtoa_r+0x2c0>)
 8006766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800676a:	f7f9 fdaf 	bl	80002cc <__adddf3>
 800676e:	4606      	mov	r6, r0
 8006770:	4628      	mov	r0, r5
 8006772:	460f      	mov	r7, r1
 8006774:	f7f9 fef6 	bl	8000564 <__aeabi_i2d>
 8006778:	a361      	add	r3, pc, #388	; (adr r3, 8006900 <_dtoa_r+0x2c8>)
 800677a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800677e:	f7f9 ff5b 	bl	8000638 <__aeabi_dmul>
 8006782:	4602      	mov	r2, r0
 8006784:	460b      	mov	r3, r1
 8006786:	4630      	mov	r0, r6
 8006788:	4639      	mov	r1, r7
 800678a:	f7f9 fd9f 	bl	80002cc <__adddf3>
 800678e:	4606      	mov	r6, r0
 8006790:	460f      	mov	r7, r1
 8006792:	f7fa fa01 	bl	8000b98 <__aeabi_d2iz>
 8006796:	2200      	movs	r2, #0
 8006798:	9000      	str	r0, [sp, #0]
 800679a:	2300      	movs	r3, #0
 800679c:	4630      	mov	r0, r6
 800679e:	4639      	mov	r1, r7
 80067a0:	f7fa f9bc 	bl	8000b1c <__aeabi_dcmplt>
 80067a4:	b150      	cbz	r0, 80067bc <_dtoa_r+0x184>
 80067a6:	9800      	ldr	r0, [sp, #0]
 80067a8:	f7f9 fedc 	bl	8000564 <__aeabi_i2d>
 80067ac:	4632      	mov	r2, r6
 80067ae:	463b      	mov	r3, r7
 80067b0:	f7fa f9aa 	bl	8000b08 <__aeabi_dcmpeq>
 80067b4:	b910      	cbnz	r0, 80067bc <_dtoa_r+0x184>
 80067b6:	9b00      	ldr	r3, [sp, #0]
 80067b8:	3b01      	subs	r3, #1
 80067ba:	9300      	str	r3, [sp, #0]
 80067bc:	9b00      	ldr	r3, [sp, #0]
 80067be:	2b16      	cmp	r3, #22
 80067c0:	d85a      	bhi.n	8006878 <_dtoa_r+0x240>
 80067c2:	9a00      	ldr	r2, [sp, #0]
 80067c4:	4b57      	ldr	r3, [pc, #348]	; (8006924 <_dtoa_r+0x2ec>)
 80067c6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80067ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ce:	ec51 0b19 	vmov	r0, r1, d9
 80067d2:	f7fa f9a3 	bl	8000b1c <__aeabi_dcmplt>
 80067d6:	2800      	cmp	r0, #0
 80067d8:	d050      	beq.n	800687c <_dtoa_r+0x244>
 80067da:	9b00      	ldr	r3, [sp, #0]
 80067dc:	3b01      	subs	r3, #1
 80067de:	9300      	str	r3, [sp, #0]
 80067e0:	2300      	movs	r3, #0
 80067e2:	930b      	str	r3, [sp, #44]	; 0x2c
 80067e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80067e6:	1b5d      	subs	r5, r3, r5
 80067e8:	1e6b      	subs	r3, r5, #1
 80067ea:	9305      	str	r3, [sp, #20]
 80067ec:	bf45      	ittet	mi
 80067ee:	f1c5 0301 	rsbmi	r3, r5, #1
 80067f2:	9304      	strmi	r3, [sp, #16]
 80067f4:	2300      	movpl	r3, #0
 80067f6:	2300      	movmi	r3, #0
 80067f8:	bf4c      	ite	mi
 80067fa:	9305      	strmi	r3, [sp, #20]
 80067fc:	9304      	strpl	r3, [sp, #16]
 80067fe:	9b00      	ldr	r3, [sp, #0]
 8006800:	2b00      	cmp	r3, #0
 8006802:	db3d      	blt.n	8006880 <_dtoa_r+0x248>
 8006804:	9b05      	ldr	r3, [sp, #20]
 8006806:	9a00      	ldr	r2, [sp, #0]
 8006808:	920a      	str	r2, [sp, #40]	; 0x28
 800680a:	4413      	add	r3, r2
 800680c:	9305      	str	r3, [sp, #20]
 800680e:	2300      	movs	r3, #0
 8006810:	9307      	str	r3, [sp, #28]
 8006812:	9b06      	ldr	r3, [sp, #24]
 8006814:	2b09      	cmp	r3, #9
 8006816:	f200 8089 	bhi.w	800692c <_dtoa_r+0x2f4>
 800681a:	2b05      	cmp	r3, #5
 800681c:	bfc4      	itt	gt
 800681e:	3b04      	subgt	r3, #4
 8006820:	9306      	strgt	r3, [sp, #24]
 8006822:	9b06      	ldr	r3, [sp, #24]
 8006824:	f1a3 0302 	sub.w	r3, r3, #2
 8006828:	bfcc      	ite	gt
 800682a:	2500      	movgt	r5, #0
 800682c:	2501      	movle	r5, #1
 800682e:	2b03      	cmp	r3, #3
 8006830:	f200 8087 	bhi.w	8006942 <_dtoa_r+0x30a>
 8006834:	e8df f003 	tbb	[pc, r3]
 8006838:	59383a2d 	.word	0x59383a2d
 800683c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006840:	441d      	add	r5, r3
 8006842:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006846:	2b20      	cmp	r3, #32
 8006848:	bfc1      	itttt	gt
 800684a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800684e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006852:	fa0b f303 	lslgt.w	r3, fp, r3
 8006856:	fa26 f000 	lsrgt.w	r0, r6, r0
 800685a:	bfda      	itte	le
 800685c:	f1c3 0320 	rsble	r3, r3, #32
 8006860:	fa06 f003 	lslle.w	r0, r6, r3
 8006864:	4318      	orrgt	r0, r3
 8006866:	f7f9 fe6d 	bl	8000544 <__aeabi_ui2d>
 800686a:	2301      	movs	r3, #1
 800686c:	4606      	mov	r6, r0
 800686e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006872:	3d01      	subs	r5, #1
 8006874:	930e      	str	r3, [sp, #56]	; 0x38
 8006876:	e76a      	b.n	800674e <_dtoa_r+0x116>
 8006878:	2301      	movs	r3, #1
 800687a:	e7b2      	b.n	80067e2 <_dtoa_r+0x1aa>
 800687c:	900b      	str	r0, [sp, #44]	; 0x2c
 800687e:	e7b1      	b.n	80067e4 <_dtoa_r+0x1ac>
 8006880:	9b04      	ldr	r3, [sp, #16]
 8006882:	9a00      	ldr	r2, [sp, #0]
 8006884:	1a9b      	subs	r3, r3, r2
 8006886:	9304      	str	r3, [sp, #16]
 8006888:	4253      	negs	r3, r2
 800688a:	9307      	str	r3, [sp, #28]
 800688c:	2300      	movs	r3, #0
 800688e:	930a      	str	r3, [sp, #40]	; 0x28
 8006890:	e7bf      	b.n	8006812 <_dtoa_r+0x1da>
 8006892:	2300      	movs	r3, #0
 8006894:	9308      	str	r3, [sp, #32]
 8006896:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006898:	2b00      	cmp	r3, #0
 800689a:	dc55      	bgt.n	8006948 <_dtoa_r+0x310>
 800689c:	2301      	movs	r3, #1
 800689e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80068a2:	461a      	mov	r2, r3
 80068a4:	9209      	str	r2, [sp, #36]	; 0x24
 80068a6:	e00c      	b.n	80068c2 <_dtoa_r+0x28a>
 80068a8:	2301      	movs	r3, #1
 80068aa:	e7f3      	b.n	8006894 <_dtoa_r+0x25c>
 80068ac:	2300      	movs	r3, #0
 80068ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80068b0:	9308      	str	r3, [sp, #32]
 80068b2:	9b00      	ldr	r3, [sp, #0]
 80068b4:	4413      	add	r3, r2
 80068b6:	9302      	str	r3, [sp, #8]
 80068b8:	3301      	adds	r3, #1
 80068ba:	2b01      	cmp	r3, #1
 80068bc:	9303      	str	r3, [sp, #12]
 80068be:	bfb8      	it	lt
 80068c0:	2301      	movlt	r3, #1
 80068c2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80068c4:	2200      	movs	r2, #0
 80068c6:	6042      	str	r2, [r0, #4]
 80068c8:	2204      	movs	r2, #4
 80068ca:	f102 0614 	add.w	r6, r2, #20
 80068ce:	429e      	cmp	r6, r3
 80068d0:	6841      	ldr	r1, [r0, #4]
 80068d2:	d93d      	bls.n	8006950 <_dtoa_r+0x318>
 80068d4:	4620      	mov	r0, r4
 80068d6:	f001 fa57 	bl	8007d88 <_Balloc>
 80068da:	9001      	str	r0, [sp, #4]
 80068dc:	2800      	cmp	r0, #0
 80068de:	d13b      	bne.n	8006958 <_dtoa_r+0x320>
 80068e0:	4b11      	ldr	r3, [pc, #68]	; (8006928 <_dtoa_r+0x2f0>)
 80068e2:	4602      	mov	r2, r0
 80068e4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80068e8:	e6c0      	b.n	800666c <_dtoa_r+0x34>
 80068ea:	2301      	movs	r3, #1
 80068ec:	e7df      	b.n	80068ae <_dtoa_r+0x276>
 80068ee:	bf00      	nop
 80068f0:	636f4361 	.word	0x636f4361
 80068f4:	3fd287a7 	.word	0x3fd287a7
 80068f8:	8b60c8b3 	.word	0x8b60c8b3
 80068fc:	3fc68a28 	.word	0x3fc68a28
 8006900:	509f79fb 	.word	0x509f79fb
 8006904:	3fd34413 	.word	0x3fd34413
 8006908:	080097fe 	.word	0x080097fe
 800690c:	08009815 	.word	0x08009815
 8006910:	7ff00000 	.word	0x7ff00000
 8006914:	080097fa 	.word	0x080097fa
 8006918:	080097f1 	.word	0x080097f1
 800691c:	08009671 	.word	0x08009671
 8006920:	3ff80000 	.word	0x3ff80000
 8006924:	080099e8 	.word	0x080099e8
 8006928:	08009870 	.word	0x08009870
 800692c:	2501      	movs	r5, #1
 800692e:	2300      	movs	r3, #0
 8006930:	9306      	str	r3, [sp, #24]
 8006932:	9508      	str	r5, [sp, #32]
 8006934:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006938:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800693c:	2200      	movs	r2, #0
 800693e:	2312      	movs	r3, #18
 8006940:	e7b0      	b.n	80068a4 <_dtoa_r+0x26c>
 8006942:	2301      	movs	r3, #1
 8006944:	9308      	str	r3, [sp, #32]
 8006946:	e7f5      	b.n	8006934 <_dtoa_r+0x2fc>
 8006948:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800694a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800694e:	e7b8      	b.n	80068c2 <_dtoa_r+0x28a>
 8006950:	3101      	adds	r1, #1
 8006952:	6041      	str	r1, [r0, #4]
 8006954:	0052      	lsls	r2, r2, #1
 8006956:	e7b8      	b.n	80068ca <_dtoa_r+0x292>
 8006958:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800695a:	9a01      	ldr	r2, [sp, #4]
 800695c:	601a      	str	r2, [r3, #0]
 800695e:	9b03      	ldr	r3, [sp, #12]
 8006960:	2b0e      	cmp	r3, #14
 8006962:	f200 809d 	bhi.w	8006aa0 <_dtoa_r+0x468>
 8006966:	2d00      	cmp	r5, #0
 8006968:	f000 809a 	beq.w	8006aa0 <_dtoa_r+0x468>
 800696c:	9b00      	ldr	r3, [sp, #0]
 800696e:	2b00      	cmp	r3, #0
 8006970:	dd32      	ble.n	80069d8 <_dtoa_r+0x3a0>
 8006972:	4ab7      	ldr	r2, [pc, #732]	; (8006c50 <_dtoa_r+0x618>)
 8006974:	f003 030f 	and.w	r3, r3, #15
 8006978:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800697c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006980:	9b00      	ldr	r3, [sp, #0]
 8006982:	05d8      	lsls	r0, r3, #23
 8006984:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006988:	d516      	bpl.n	80069b8 <_dtoa_r+0x380>
 800698a:	4bb2      	ldr	r3, [pc, #712]	; (8006c54 <_dtoa_r+0x61c>)
 800698c:	ec51 0b19 	vmov	r0, r1, d9
 8006990:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006994:	f7f9 ff7a 	bl	800088c <__aeabi_ddiv>
 8006998:	f007 070f 	and.w	r7, r7, #15
 800699c:	4682      	mov	sl, r0
 800699e:	468b      	mov	fp, r1
 80069a0:	2503      	movs	r5, #3
 80069a2:	4eac      	ldr	r6, [pc, #688]	; (8006c54 <_dtoa_r+0x61c>)
 80069a4:	b957      	cbnz	r7, 80069bc <_dtoa_r+0x384>
 80069a6:	4642      	mov	r2, r8
 80069a8:	464b      	mov	r3, r9
 80069aa:	4650      	mov	r0, sl
 80069ac:	4659      	mov	r1, fp
 80069ae:	f7f9 ff6d 	bl	800088c <__aeabi_ddiv>
 80069b2:	4682      	mov	sl, r0
 80069b4:	468b      	mov	fp, r1
 80069b6:	e028      	b.n	8006a0a <_dtoa_r+0x3d2>
 80069b8:	2502      	movs	r5, #2
 80069ba:	e7f2      	b.n	80069a2 <_dtoa_r+0x36a>
 80069bc:	07f9      	lsls	r1, r7, #31
 80069be:	d508      	bpl.n	80069d2 <_dtoa_r+0x39a>
 80069c0:	4640      	mov	r0, r8
 80069c2:	4649      	mov	r1, r9
 80069c4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80069c8:	f7f9 fe36 	bl	8000638 <__aeabi_dmul>
 80069cc:	3501      	adds	r5, #1
 80069ce:	4680      	mov	r8, r0
 80069d0:	4689      	mov	r9, r1
 80069d2:	107f      	asrs	r7, r7, #1
 80069d4:	3608      	adds	r6, #8
 80069d6:	e7e5      	b.n	80069a4 <_dtoa_r+0x36c>
 80069d8:	f000 809b 	beq.w	8006b12 <_dtoa_r+0x4da>
 80069dc:	9b00      	ldr	r3, [sp, #0]
 80069de:	4f9d      	ldr	r7, [pc, #628]	; (8006c54 <_dtoa_r+0x61c>)
 80069e0:	425e      	negs	r6, r3
 80069e2:	4b9b      	ldr	r3, [pc, #620]	; (8006c50 <_dtoa_r+0x618>)
 80069e4:	f006 020f 	and.w	r2, r6, #15
 80069e8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80069ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069f0:	ec51 0b19 	vmov	r0, r1, d9
 80069f4:	f7f9 fe20 	bl	8000638 <__aeabi_dmul>
 80069f8:	1136      	asrs	r6, r6, #4
 80069fa:	4682      	mov	sl, r0
 80069fc:	468b      	mov	fp, r1
 80069fe:	2300      	movs	r3, #0
 8006a00:	2502      	movs	r5, #2
 8006a02:	2e00      	cmp	r6, #0
 8006a04:	d17a      	bne.n	8006afc <_dtoa_r+0x4c4>
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d1d3      	bne.n	80069b2 <_dtoa_r+0x37a>
 8006a0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	f000 8082 	beq.w	8006b16 <_dtoa_r+0x4de>
 8006a12:	4b91      	ldr	r3, [pc, #580]	; (8006c58 <_dtoa_r+0x620>)
 8006a14:	2200      	movs	r2, #0
 8006a16:	4650      	mov	r0, sl
 8006a18:	4659      	mov	r1, fp
 8006a1a:	f7fa f87f 	bl	8000b1c <__aeabi_dcmplt>
 8006a1e:	2800      	cmp	r0, #0
 8006a20:	d079      	beq.n	8006b16 <_dtoa_r+0x4de>
 8006a22:	9b03      	ldr	r3, [sp, #12]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d076      	beq.n	8006b16 <_dtoa_r+0x4de>
 8006a28:	9b02      	ldr	r3, [sp, #8]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	dd36      	ble.n	8006a9c <_dtoa_r+0x464>
 8006a2e:	9b00      	ldr	r3, [sp, #0]
 8006a30:	4650      	mov	r0, sl
 8006a32:	4659      	mov	r1, fp
 8006a34:	1e5f      	subs	r7, r3, #1
 8006a36:	2200      	movs	r2, #0
 8006a38:	4b88      	ldr	r3, [pc, #544]	; (8006c5c <_dtoa_r+0x624>)
 8006a3a:	f7f9 fdfd 	bl	8000638 <__aeabi_dmul>
 8006a3e:	9e02      	ldr	r6, [sp, #8]
 8006a40:	4682      	mov	sl, r0
 8006a42:	468b      	mov	fp, r1
 8006a44:	3501      	adds	r5, #1
 8006a46:	4628      	mov	r0, r5
 8006a48:	f7f9 fd8c 	bl	8000564 <__aeabi_i2d>
 8006a4c:	4652      	mov	r2, sl
 8006a4e:	465b      	mov	r3, fp
 8006a50:	f7f9 fdf2 	bl	8000638 <__aeabi_dmul>
 8006a54:	4b82      	ldr	r3, [pc, #520]	; (8006c60 <_dtoa_r+0x628>)
 8006a56:	2200      	movs	r2, #0
 8006a58:	f7f9 fc38 	bl	80002cc <__adddf3>
 8006a5c:	46d0      	mov	r8, sl
 8006a5e:	46d9      	mov	r9, fp
 8006a60:	4682      	mov	sl, r0
 8006a62:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8006a66:	2e00      	cmp	r6, #0
 8006a68:	d158      	bne.n	8006b1c <_dtoa_r+0x4e4>
 8006a6a:	4b7e      	ldr	r3, [pc, #504]	; (8006c64 <_dtoa_r+0x62c>)
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	4640      	mov	r0, r8
 8006a70:	4649      	mov	r1, r9
 8006a72:	f7f9 fc29 	bl	80002c8 <__aeabi_dsub>
 8006a76:	4652      	mov	r2, sl
 8006a78:	465b      	mov	r3, fp
 8006a7a:	4680      	mov	r8, r0
 8006a7c:	4689      	mov	r9, r1
 8006a7e:	f7fa f86b 	bl	8000b58 <__aeabi_dcmpgt>
 8006a82:	2800      	cmp	r0, #0
 8006a84:	f040 8295 	bne.w	8006fb2 <_dtoa_r+0x97a>
 8006a88:	4652      	mov	r2, sl
 8006a8a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006a8e:	4640      	mov	r0, r8
 8006a90:	4649      	mov	r1, r9
 8006a92:	f7fa f843 	bl	8000b1c <__aeabi_dcmplt>
 8006a96:	2800      	cmp	r0, #0
 8006a98:	f040 8289 	bne.w	8006fae <_dtoa_r+0x976>
 8006a9c:	ec5b ab19 	vmov	sl, fp, d9
 8006aa0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	f2c0 8148 	blt.w	8006d38 <_dtoa_r+0x700>
 8006aa8:	9a00      	ldr	r2, [sp, #0]
 8006aaa:	2a0e      	cmp	r2, #14
 8006aac:	f300 8144 	bgt.w	8006d38 <_dtoa_r+0x700>
 8006ab0:	4b67      	ldr	r3, [pc, #412]	; (8006c50 <_dtoa_r+0x618>)
 8006ab2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006ab6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006aba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	f280 80d5 	bge.w	8006c6c <_dtoa_r+0x634>
 8006ac2:	9b03      	ldr	r3, [sp, #12]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	f300 80d1 	bgt.w	8006c6c <_dtoa_r+0x634>
 8006aca:	f040 826f 	bne.w	8006fac <_dtoa_r+0x974>
 8006ace:	4b65      	ldr	r3, [pc, #404]	; (8006c64 <_dtoa_r+0x62c>)
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	4640      	mov	r0, r8
 8006ad4:	4649      	mov	r1, r9
 8006ad6:	f7f9 fdaf 	bl	8000638 <__aeabi_dmul>
 8006ada:	4652      	mov	r2, sl
 8006adc:	465b      	mov	r3, fp
 8006ade:	f7fa f831 	bl	8000b44 <__aeabi_dcmpge>
 8006ae2:	9e03      	ldr	r6, [sp, #12]
 8006ae4:	4637      	mov	r7, r6
 8006ae6:	2800      	cmp	r0, #0
 8006ae8:	f040 8245 	bne.w	8006f76 <_dtoa_r+0x93e>
 8006aec:	9d01      	ldr	r5, [sp, #4]
 8006aee:	2331      	movs	r3, #49	; 0x31
 8006af0:	f805 3b01 	strb.w	r3, [r5], #1
 8006af4:	9b00      	ldr	r3, [sp, #0]
 8006af6:	3301      	adds	r3, #1
 8006af8:	9300      	str	r3, [sp, #0]
 8006afa:	e240      	b.n	8006f7e <_dtoa_r+0x946>
 8006afc:	07f2      	lsls	r2, r6, #31
 8006afe:	d505      	bpl.n	8006b0c <_dtoa_r+0x4d4>
 8006b00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b04:	f7f9 fd98 	bl	8000638 <__aeabi_dmul>
 8006b08:	3501      	adds	r5, #1
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	1076      	asrs	r6, r6, #1
 8006b0e:	3708      	adds	r7, #8
 8006b10:	e777      	b.n	8006a02 <_dtoa_r+0x3ca>
 8006b12:	2502      	movs	r5, #2
 8006b14:	e779      	b.n	8006a0a <_dtoa_r+0x3d2>
 8006b16:	9f00      	ldr	r7, [sp, #0]
 8006b18:	9e03      	ldr	r6, [sp, #12]
 8006b1a:	e794      	b.n	8006a46 <_dtoa_r+0x40e>
 8006b1c:	9901      	ldr	r1, [sp, #4]
 8006b1e:	4b4c      	ldr	r3, [pc, #304]	; (8006c50 <_dtoa_r+0x618>)
 8006b20:	4431      	add	r1, r6
 8006b22:	910d      	str	r1, [sp, #52]	; 0x34
 8006b24:	9908      	ldr	r1, [sp, #32]
 8006b26:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006b2a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006b2e:	2900      	cmp	r1, #0
 8006b30:	d043      	beq.n	8006bba <_dtoa_r+0x582>
 8006b32:	494d      	ldr	r1, [pc, #308]	; (8006c68 <_dtoa_r+0x630>)
 8006b34:	2000      	movs	r0, #0
 8006b36:	f7f9 fea9 	bl	800088c <__aeabi_ddiv>
 8006b3a:	4652      	mov	r2, sl
 8006b3c:	465b      	mov	r3, fp
 8006b3e:	f7f9 fbc3 	bl	80002c8 <__aeabi_dsub>
 8006b42:	9d01      	ldr	r5, [sp, #4]
 8006b44:	4682      	mov	sl, r0
 8006b46:	468b      	mov	fp, r1
 8006b48:	4649      	mov	r1, r9
 8006b4a:	4640      	mov	r0, r8
 8006b4c:	f7fa f824 	bl	8000b98 <__aeabi_d2iz>
 8006b50:	4606      	mov	r6, r0
 8006b52:	f7f9 fd07 	bl	8000564 <__aeabi_i2d>
 8006b56:	4602      	mov	r2, r0
 8006b58:	460b      	mov	r3, r1
 8006b5a:	4640      	mov	r0, r8
 8006b5c:	4649      	mov	r1, r9
 8006b5e:	f7f9 fbb3 	bl	80002c8 <__aeabi_dsub>
 8006b62:	3630      	adds	r6, #48	; 0x30
 8006b64:	f805 6b01 	strb.w	r6, [r5], #1
 8006b68:	4652      	mov	r2, sl
 8006b6a:	465b      	mov	r3, fp
 8006b6c:	4680      	mov	r8, r0
 8006b6e:	4689      	mov	r9, r1
 8006b70:	f7f9 ffd4 	bl	8000b1c <__aeabi_dcmplt>
 8006b74:	2800      	cmp	r0, #0
 8006b76:	d163      	bne.n	8006c40 <_dtoa_r+0x608>
 8006b78:	4642      	mov	r2, r8
 8006b7a:	464b      	mov	r3, r9
 8006b7c:	4936      	ldr	r1, [pc, #216]	; (8006c58 <_dtoa_r+0x620>)
 8006b7e:	2000      	movs	r0, #0
 8006b80:	f7f9 fba2 	bl	80002c8 <__aeabi_dsub>
 8006b84:	4652      	mov	r2, sl
 8006b86:	465b      	mov	r3, fp
 8006b88:	f7f9 ffc8 	bl	8000b1c <__aeabi_dcmplt>
 8006b8c:	2800      	cmp	r0, #0
 8006b8e:	f040 80b5 	bne.w	8006cfc <_dtoa_r+0x6c4>
 8006b92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006b94:	429d      	cmp	r5, r3
 8006b96:	d081      	beq.n	8006a9c <_dtoa_r+0x464>
 8006b98:	4b30      	ldr	r3, [pc, #192]	; (8006c5c <_dtoa_r+0x624>)
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	4650      	mov	r0, sl
 8006b9e:	4659      	mov	r1, fp
 8006ba0:	f7f9 fd4a 	bl	8000638 <__aeabi_dmul>
 8006ba4:	4b2d      	ldr	r3, [pc, #180]	; (8006c5c <_dtoa_r+0x624>)
 8006ba6:	4682      	mov	sl, r0
 8006ba8:	468b      	mov	fp, r1
 8006baa:	4640      	mov	r0, r8
 8006bac:	4649      	mov	r1, r9
 8006bae:	2200      	movs	r2, #0
 8006bb0:	f7f9 fd42 	bl	8000638 <__aeabi_dmul>
 8006bb4:	4680      	mov	r8, r0
 8006bb6:	4689      	mov	r9, r1
 8006bb8:	e7c6      	b.n	8006b48 <_dtoa_r+0x510>
 8006bba:	4650      	mov	r0, sl
 8006bbc:	4659      	mov	r1, fp
 8006bbe:	f7f9 fd3b 	bl	8000638 <__aeabi_dmul>
 8006bc2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006bc4:	9d01      	ldr	r5, [sp, #4]
 8006bc6:	930f      	str	r3, [sp, #60]	; 0x3c
 8006bc8:	4682      	mov	sl, r0
 8006bca:	468b      	mov	fp, r1
 8006bcc:	4649      	mov	r1, r9
 8006bce:	4640      	mov	r0, r8
 8006bd0:	f7f9 ffe2 	bl	8000b98 <__aeabi_d2iz>
 8006bd4:	4606      	mov	r6, r0
 8006bd6:	f7f9 fcc5 	bl	8000564 <__aeabi_i2d>
 8006bda:	3630      	adds	r6, #48	; 0x30
 8006bdc:	4602      	mov	r2, r0
 8006bde:	460b      	mov	r3, r1
 8006be0:	4640      	mov	r0, r8
 8006be2:	4649      	mov	r1, r9
 8006be4:	f7f9 fb70 	bl	80002c8 <__aeabi_dsub>
 8006be8:	f805 6b01 	strb.w	r6, [r5], #1
 8006bec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006bee:	429d      	cmp	r5, r3
 8006bf0:	4680      	mov	r8, r0
 8006bf2:	4689      	mov	r9, r1
 8006bf4:	f04f 0200 	mov.w	r2, #0
 8006bf8:	d124      	bne.n	8006c44 <_dtoa_r+0x60c>
 8006bfa:	4b1b      	ldr	r3, [pc, #108]	; (8006c68 <_dtoa_r+0x630>)
 8006bfc:	4650      	mov	r0, sl
 8006bfe:	4659      	mov	r1, fp
 8006c00:	f7f9 fb64 	bl	80002cc <__adddf3>
 8006c04:	4602      	mov	r2, r0
 8006c06:	460b      	mov	r3, r1
 8006c08:	4640      	mov	r0, r8
 8006c0a:	4649      	mov	r1, r9
 8006c0c:	f7f9 ffa4 	bl	8000b58 <__aeabi_dcmpgt>
 8006c10:	2800      	cmp	r0, #0
 8006c12:	d173      	bne.n	8006cfc <_dtoa_r+0x6c4>
 8006c14:	4652      	mov	r2, sl
 8006c16:	465b      	mov	r3, fp
 8006c18:	4913      	ldr	r1, [pc, #76]	; (8006c68 <_dtoa_r+0x630>)
 8006c1a:	2000      	movs	r0, #0
 8006c1c:	f7f9 fb54 	bl	80002c8 <__aeabi_dsub>
 8006c20:	4602      	mov	r2, r0
 8006c22:	460b      	mov	r3, r1
 8006c24:	4640      	mov	r0, r8
 8006c26:	4649      	mov	r1, r9
 8006c28:	f7f9 ff78 	bl	8000b1c <__aeabi_dcmplt>
 8006c2c:	2800      	cmp	r0, #0
 8006c2e:	f43f af35 	beq.w	8006a9c <_dtoa_r+0x464>
 8006c32:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006c34:	1e6b      	subs	r3, r5, #1
 8006c36:	930f      	str	r3, [sp, #60]	; 0x3c
 8006c38:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006c3c:	2b30      	cmp	r3, #48	; 0x30
 8006c3e:	d0f8      	beq.n	8006c32 <_dtoa_r+0x5fa>
 8006c40:	9700      	str	r7, [sp, #0]
 8006c42:	e049      	b.n	8006cd8 <_dtoa_r+0x6a0>
 8006c44:	4b05      	ldr	r3, [pc, #20]	; (8006c5c <_dtoa_r+0x624>)
 8006c46:	f7f9 fcf7 	bl	8000638 <__aeabi_dmul>
 8006c4a:	4680      	mov	r8, r0
 8006c4c:	4689      	mov	r9, r1
 8006c4e:	e7bd      	b.n	8006bcc <_dtoa_r+0x594>
 8006c50:	080099e8 	.word	0x080099e8
 8006c54:	080099c0 	.word	0x080099c0
 8006c58:	3ff00000 	.word	0x3ff00000
 8006c5c:	40240000 	.word	0x40240000
 8006c60:	401c0000 	.word	0x401c0000
 8006c64:	40140000 	.word	0x40140000
 8006c68:	3fe00000 	.word	0x3fe00000
 8006c6c:	9d01      	ldr	r5, [sp, #4]
 8006c6e:	4656      	mov	r6, sl
 8006c70:	465f      	mov	r7, fp
 8006c72:	4642      	mov	r2, r8
 8006c74:	464b      	mov	r3, r9
 8006c76:	4630      	mov	r0, r6
 8006c78:	4639      	mov	r1, r7
 8006c7a:	f7f9 fe07 	bl	800088c <__aeabi_ddiv>
 8006c7e:	f7f9 ff8b 	bl	8000b98 <__aeabi_d2iz>
 8006c82:	4682      	mov	sl, r0
 8006c84:	f7f9 fc6e 	bl	8000564 <__aeabi_i2d>
 8006c88:	4642      	mov	r2, r8
 8006c8a:	464b      	mov	r3, r9
 8006c8c:	f7f9 fcd4 	bl	8000638 <__aeabi_dmul>
 8006c90:	4602      	mov	r2, r0
 8006c92:	460b      	mov	r3, r1
 8006c94:	4630      	mov	r0, r6
 8006c96:	4639      	mov	r1, r7
 8006c98:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8006c9c:	f7f9 fb14 	bl	80002c8 <__aeabi_dsub>
 8006ca0:	f805 6b01 	strb.w	r6, [r5], #1
 8006ca4:	9e01      	ldr	r6, [sp, #4]
 8006ca6:	9f03      	ldr	r7, [sp, #12]
 8006ca8:	1bae      	subs	r6, r5, r6
 8006caa:	42b7      	cmp	r7, r6
 8006cac:	4602      	mov	r2, r0
 8006cae:	460b      	mov	r3, r1
 8006cb0:	d135      	bne.n	8006d1e <_dtoa_r+0x6e6>
 8006cb2:	f7f9 fb0b 	bl	80002cc <__adddf3>
 8006cb6:	4642      	mov	r2, r8
 8006cb8:	464b      	mov	r3, r9
 8006cba:	4606      	mov	r6, r0
 8006cbc:	460f      	mov	r7, r1
 8006cbe:	f7f9 ff4b 	bl	8000b58 <__aeabi_dcmpgt>
 8006cc2:	b9d0      	cbnz	r0, 8006cfa <_dtoa_r+0x6c2>
 8006cc4:	4642      	mov	r2, r8
 8006cc6:	464b      	mov	r3, r9
 8006cc8:	4630      	mov	r0, r6
 8006cca:	4639      	mov	r1, r7
 8006ccc:	f7f9 ff1c 	bl	8000b08 <__aeabi_dcmpeq>
 8006cd0:	b110      	cbz	r0, 8006cd8 <_dtoa_r+0x6a0>
 8006cd2:	f01a 0f01 	tst.w	sl, #1
 8006cd6:	d110      	bne.n	8006cfa <_dtoa_r+0x6c2>
 8006cd8:	4620      	mov	r0, r4
 8006cda:	ee18 1a10 	vmov	r1, s16
 8006cde:	f001 f893 	bl	8007e08 <_Bfree>
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	9800      	ldr	r0, [sp, #0]
 8006ce6:	702b      	strb	r3, [r5, #0]
 8006ce8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006cea:	3001      	adds	r0, #1
 8006cec:	6018      	str	r0, [r3, #0]
 8006cee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	f43f acf1 	beq.w	80066d8 <_dtoa_r+0xa0>
 8006cf6:	601d      	str	r5, [r3, #0]
 8006cf8:	e4ee      	b.n	80066d8 <_dtoa_r+0xa0>
 8006cfa:	9f00      	ldr	r7, [sp, #0]
 8006cfc:	462b      	mov	r3, r5
 8006cfe:	461d      	mov	r5, r3
 8006d00:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006d04:	2a39      	cmp	r2, #57	; 0x39
 8006d06:	d106      	bne.n	8006d16 <_dtoa_r+0x6de>
 8006d08:	9a01      	ldr	r2, [sp, #4]
 8006d0a:	429a      	cmp	r2, r3
 8006d0c:	d1f7      	bne.n	8006cfe <_dtoa_r+0x6c6>
 8006d0e:	9901      	ldr	r1, [sp, #4]
 8006d10:	2230      	movs	r2, #48	; 0x30
 8006d12:	3701      	adds	r7, #1
 8006d14:	700a      	strb	r2, [r1, #0]
 8006d16:	781a      	ldrb	r2, [r3, #0]
 8006d18:	3201      	adds	r2, #1
 8006d1a:	701a      	strb	r2, [r3, #0]
 8006d1c:	e790      	b.n	8006c40 <_dtoa_r+0x608>
 8006d1e:	4ba6      	ldr	r3, [pc, #664]	; (8006fb8 <_dtoa_r+0x980>)
 8006d20:	2200      	movs	r2, #0
 8006d22:	f7f9 fc89 	bl	8000638 <__aeabi_dmul>
 8006d26:	2200      	movs	r2, #0
 8006d28:	2300      	movs	r3, #0
 8006d2a:	4606      	mov	r6, r0
 8006d2c:	460f      	mov	r7, r1
 8006d2e:	f7f9 feeb 	bl	8000b08 <__aeabi_dcmpeq>
 8006d32:	2800      	cmp	r0, #0
 8006d34:	d09d      	beq.n	8006c72 <_dtoa_r+0x63a>
 8006d36:	e7cf      	b.n	8006cd8 <_dtoa_r+0x6a0>
 8006d38:	9a08      	ldr	r2, [sp, #32]
 8006d3a:	2a00      	cmp	r2, #0
 8006d3c:	f000 80d7 	beq.w	8006eee <_dtoa_r+0x8b6>
 8006d40:	9a06      	ldr	r2, [sp, #24]
 8006d42:	2a01      	cmp	r2, #1
 8006d44:	f300 80ba 	bgt.w	8006ebc <_dtoa_r+0x884>
 8006d48:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006d4a:	2a00      	cmp	r2, #0
 8006d4c:	f000 80b2 	beq.w	8006eb4 <_dtoa_r+0x87c>
 8006d50:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006d54:	9e07      	ldr	r6, [sp, #28]
 8006d56:	9d04      	ldr	r5, [sp, #16]
 8006d58:	9a04      	ldr	r2, [sp, #16]
 8006d5a:	441a      	add	r2, r3
 8006d5c:	9204      	str	r2, [sp, #16]
 8006d5e:	9a05      	ldr	r2, [sp, #20]
 8006d60:	2101      	movs	r1, #1
 8006d62:	441a      	add	r2, r3
 8006d64:	4620      	mov	r0, r4
 8006d66:	9205      	str	r2, [sp, #20]
 8006d68:	f001 f950 	bl	800800c <__i2b>
 8006d6c:	4607      	mov	r7, r0
 8006d6e:	2d00      	cmp	r5, #0
 8006d70:	dd0c      	ble.n	8006d8c <_dtoa_r+0x754>
 8006d72:	9b05      	ldr	r3, [sp, #20]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	dd09      	ble.n	8006d8c <_dtoa_r+0x754>
 8006d78:	42ab      	cmp	r3, r5
 8006d7a:	9a04      	ldr	r2, [sp, #16]
 8006d7c:	bfa8      	it	ge
 8006d7e:	462b      	movge	r3, r5
 8006d80:	1ad2      	subs	r2, r2, r3
 8006d82:	9204      	str	r2, [sp, #16]
 8006d84:	9a05      	ldr	r2, [sp, #20]
 8006d86:	1aed      	subs	r5, r5, r3
 8006d88:	1ad3      	subs	r3, r2, r3
 8006d8a:	9305      	str	r3, [sp, #20]
 8006d8c:	9b07      	ldr	r3, [sp, #28]
 8006d8e:	b31b      	cbz	r3, 8006dd8 <_dtoa_r+0x7a0>
 8006d90:	9b08      	ldr	r3, [sp, #32]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	f000 80af 	beq.w	8006ef6 <_dtoa_r+0x8be>
 8006d98:	2e00      	cmp	r6, #0
 8006d9a:	dd13      	ble.n	8006dc4 <_dtoa_r+0x78c>
 8006d9c:	4639      	mov	r1, r7
 8006d9e:	4632      	mov	r2, r6
 8006da0:	4620      	mov	r0, r4
 8006da2:	f001 f9f3 	bl	800818c <__pow5mult>
 8006da6:	ee18 2a10 	vmov	r2, s16
 8006daa:	4601      	mov	r1, r0
 8006dac:	4607      	mov	r7, r0
 8006dae:	4620      	mov	r0, r4
 8006db0:	f001 f942 	bl	8008038 <__multiply>
 8006db4:	ee18 1a10 	vmov	r1, s16
 8006db8:	4680      	mov	r8, r0
 8006dba:	4620      	mov	r0, r4
 8006dbc:	f001 f824 	bl	8007e08 <_Bfree>
 8006dc0:	ee08 8a10 	vmov	s16, r8
 8006dc4:	9b07      	ldr	r3, [sp, #28]
 8006dc6:	1b9a      	subs	r2, r3, r6
 8006dc8:	d006      	beq.n	8006dd8 <_dtoa_r+0x7a0>
 8006dca:	ee18 1a10 	vmov	r1, s16
 8006dce:	4620      	mov	r0, r4
 8006dd0:	f001 f9dc 	bl	800818c <__pow5mult>
 8006dd4:	ee08 0a10 	vmov	s16, r0
 8006dd8:	2101      	movs	r1, #1
 8006dda:	4620      	mov	r0, r4
 8006ddc:	f001 f916 	bl	800800c <__i2b>
 8006de0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	4606      	mov	r6, r0
 8006de6:	f340 8088 	ble.w	8006efa <_dtoa_r+0x8c2>
 8006dea:	461a      	mov	r2, r3
 8006dec:	4601      	mov	r1, r0
 8006dee:	4620      	mov	r0, r4
 8006df0:	f001 f9cc 	bl	800818c <__pow5mult>
 8006df4:	9b06      	ldr	r3, [sp, #24]
 8006df6:	2b01      	cmp	r3, #1
 8006df8:	4606      	mov	r6, r0
 8006dfa:	f340 8081 	ble.w	8006f00 <_dtoa_r+0x8c8>
 8006dfe:	f04f 0800 	mov.w	r8, #0
 8006e02:	6933      	ldr	r3, [r6, #16]
 8006e04:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006e08:	6918      	ldr	r0, [r3, #16]
 8006e0a:	f001 f8af 	bl	8007f6c <__hi0bits>
 8006e0e:	f1c0 0020 	rsb	r0, r0, #32
 8006e12:	9b05      	ldr	r3, [sp, #20]
 8006e14:	4418      	add	r0, r3
 8006e16:	f010 001f 	ands.w	r0, r0, #31
 8006e1a:	f000 8092 	beq.w	8006f42 <_dtoa_r+0x90a>
 8006e1e:	f1c0 0320 	rsb	r3, r0, #32
 8006e22:	2b04      	cmp	r3, #4
 8006e24:	f340 808a 	ble.w	8006f3c <_dtoa_r+0x904>
 8006e28:	f1c0 001c 	rsb	r0, r0, #28
 8006e2c:	9b04      	ldr	r3, [sp, #16]
 8006e2e:	4403      	add	r3, r0
 8006e30:	9304      	str	r3, [sp, #16]
 8006e32:	9b05      	ldr	r3, [sp, #20]
 8006e34:	4403      	add	r3, r0
 8006e36:	4405      	add	r5, r0
 8006e38:	9305      	str	r3, [sp, #20]
 8006e3a:	9b04      	ldr	r3, [sp, #16]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	dd07      	ble.n	8006e50 <_dtoa_r+0x818>
 8006e40:	ee18 1a10 	vmov	r1, s16
 8006e44:	461a      	mov	r2, r3
 8006e46:	4620      	mov	r0, r4
 8006e48:	f001 f9fa 	bl	8008240 <__lshift>
 8006e4c:	ee08 0a10 	vmov	s16, r0
 8006e50:	9b05      	ldr	r3, [sp, #20]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	dd05      	ble.n	8006e62 <_dtoa_r+0x82a>
 8006e56:	4631      	mov	r1, r6
 8006e58:	461a      	mov	r2, r3
 8006e5a:	4620      	mov	r0, r4
 8006e5c:	f001 f9f0 	bl	8008240 <__lshift>
 8006e60:	4606      	mov	r6, r0
 8006e62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d06e      	beq.n	8006f46 <_dtoa_r+0x90e>
 8006e68:	ee18 0a10 	vmov	r0, s16
 8006e6c:	4631      	mov	r1, r6
 8006e6e:	f001 fa57 	bl	8008320 <__mcmp>
 8006e72:	2800      	cmp	r0, #0
 8006e74:	da67      	bge.n	8006f46 <_dtoa_r+0x90e>
 8006e76:	9b00      	ldr	r3, [sp, #0]
 8006e78:	3b01      	subs	r3, #1
 8006e7a:	ee18 1a10 	vmov	r1, s16
 8006e7e:	9300      	str	r3, [sp, #0]
 8006e80:	220a      	movs	r2, #10
 8006e82:	2300      	movs	r3, #0
 8006e84:	4620      	mov	r0, r4
 8006e86:	f000 ffe1 	bl	8007e4c <__multadd>
 8006e8a:	9b08      	ldr	r3, [sp, #32]
 8006e8c:	ee08 0a10 	vmov	s16, r0
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	f000 81b1 	beq.w	80071f8 <_dtoa_r+0xbc0>
 8006e96:	2300      	movs	r3, #0
 8006e98:	4639      	mov	r1, r7
 8006e9a:	220a      	movs	r2, #10
 8006e9c:	4620      	mov	r0, r4
 8006e9e:	f000 ffd5 	bl	8007e4c <__multadd>
 8006ea2:	9b02      	ldr	r3, [sp, #8]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	4607      	mov	r7, r0
 8006ea8:	f300 808e 	bgt.w	8006fc8 <_dtoa_r+0x990>
 8006eac:	9b06      	ldr	r3, [sp, #24]
 8006eae:	2b02      	cmp	r3, #2
 8006eb0:	dc51      	bgt.n	8006f56 <_dtoa_r+0x91e>
 8006eb2:	e089      	b.n	8006fc8 <_dtoa_r+0x990>
 8006eb4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006eb6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006eba:	e74b      	b.n	8006d54 <_dtoa_r+0x71c>
 8006ebc:	9b03      	ldr	r3, [sp, #12]
 8006ebe:	1e5e      	subs	r6, r3, #1
 8006ec0:	9b07      	ldr	r3, [sp, #28]
 8006ec2:	42b3      	cmp	r3, r6
 8006ec4:	bfbf      	itttt	lt
 8006ec6:	9b07      	ldrlt	r3, [sp, #28]
 8006ec8:	9607      	strlt	r6, [sp, #28]
 8006eca:	1af2      	sublt	r2, r6, r3
 8006ecc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006ece:	bfb6      	itet	lt
 8006ed0:	189b      	addlt	r3, r3, r2
 8006ed2:	1b9e      	subge	r6, r3, r6
 8006ed4:	930a      	strlt	r3, [sp, #40]	; 0x28
 8006ed6:	9b03      	ldr	r3, [sp, #12]
 8006ed8:	bfb8      	it	lt
 8006eda:	2600      	movlt	r6, #0
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	bfb7      	itett	lt
 8006ee0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8006ee4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006ee8:	1a9d      	sublt	r5, r3, r2
 8006eea:	2300      	movlt	r3, #0
 8006eec:	e734      	b.n	8006d58 <_dtoa_r+0x720>
 8006eee:	9e07      	ldr	r6, [sp, #28]
 8006ef0:	9d04      	ldr	r5, [sp, #16]
 8006ef2:	9f08      	ldr	r7, [sp, #32]
 8006ef4:	e73b      	b.n	8006d6e <_dtoa_r+0x736>
 8006ef6:	9a07      	ldr	r2, [sp, #28]
 8006ef8:	e767      	b.n	8006dca <_dtoa_r+0x792>
 8006efa:	9b06      	ldr	r3, [sp, #24]
 8006efc:	2b01      	cmp	r3, #1
 8006efe:	dc18      	bgt.n	8006f32 <_dtoa_r+0x8fa>
 8006f00:	f1ba 0f00 	cmp.w	sl, #0
 8006f04:	d115      	bne.n	8006f32 <_dtoa_r+0x8fa>
 8006f06:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006f0a:	b993      	cbnz	r3, 8006f32 <_dtoa_r+0x8fa>
 8006f0c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006f10:	0d1b      	lsrs	r3, r3, #20
 8006f12:	051b      	lsls	r3, r3, #20
 8006f14:	b183      	cbz	r3, 8006f38 <_dtoa_r+0x900>
 8006f16:	9b04      	ldr	r3, [sp, #16]
 8006f18:	3301      	adds	r3, #1
 8006f1a:	9304      	str	r3, [sp, #16]
 8006f1c:	9b05      	ldr	r3, [sp, #20]
 8006f1e:	3301      	adds	r3, #1
 8006f20:	9305      	str	r3, [sp, #20]
 8006f22:	f04f 0801 	mov.w	r8, #1
 8006f26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	f47f af6a 	bne.w	8006e02 <_dtoa_r+0x7ca>
 8006f2e:	2001      	movs	r0, #1
 8006f30:	e76f      	b.n	8006e12 <_dtoa_r+0x7da>
 8006f32:	f04f 0800 	mov.w	r8, #0
 8006f36:	e7f6      	b.n	8006f26 <_dtoa_r+0x8ee>
 8006f38:	4698      	mov	r8, r3
 8006f3a:	e7f4      	b.n	8006f26 <_dtoa_r+0x8ee>
 8006f3c:	f43f af7d 	beq.w	8006e3a <_dtoa_r+0x802>
 8006f40:	4618      	mov	r0, r3
 8006f42:	301c      	adds	r0, #28
 8006f44:	e772      	b.n	8006e2c <_dtoa_r+0x7f4>
 8006f46:	9b03      	ldr	r3, [sp, #12]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	dc37      	bgt.n	8006fbc <_dtoa_r+0x984>
 8006f4c:	9b06      	ldr	r3, [sp, #24]
 8006f4e:	2b02      	cmp	r3, #2
 8006f50:	dd34      	ble.n	8006fbc <_dtoa_r+0x984>
 8006f52:	9b03      	ldr	r3, [sp, #12]
 8006f54:	9302      	str	r3, [sp, #8]
 8006f56:	9b02      	ldr	r3, [sp, #8]
 8006f58:	b96b      	cbnz	r3, 8006f76 <_dtoa_r+0x93e>
 8006f5a:	4631      	mov	r1, r6
 8006f5c:	2205      	movs	r2, #5
 8006f5e:	4620      	mov	r0, r4
 8006f60:	f000 ff74 	bl	8007e4c <__multadd>
 8006f64:	4601      	mov	r1, r0
 8006f66:	4606      	mov	r6, r0
 8006f68:	ee18 0a10 	vmov	r0, s16
 8006f6c:	f001 f9d8 	bl	8008320 <__mcmp>
 8006f70:	2800      	cmp	r0, #0
 8006f72:	f73f adbb 	bgt.w	8006aec <_dtoa_r+0x4b4>
 8006f76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f78:	9d01      	ldr	r5, [sp, #4]
 8006f7a:	43db      	mvns	r3, r3
 8006f7c:	9300      	str	r3, [sp, #0]
 8006f7e:	f04f 0800 	mov.w	r8, #0
 8006f82:	4631      	mov	r1, r6
 8006f84:	4620      	mov	r0, r4
 8006f86:	f000 ff3f 	bl	8007e08 <_Bfree>
 8006f8a:	2f00      	cmp	r7, #0
 8006f8c:	f43f aea4 	beq.w	8006cd8 <_dtoa_r+0x6a0>
 8006f90:	f1b8 0f00 	cmp.w	r8, #0
 8006f94:	d005      	beq.n	8006fa2 <_dtoa_r+0x96a>
 8006f96:	45b8      	cmp	r8, r7
 8006f98:	d003      	beq.n	8006fa2 <_dtoa_r+0x96a>
 8006f9a:	4641      	mov	r1, r8
 8006f9c:	4620      	mov	r0, r4
 8006f9e:	f000 ff33 	bl	8007e08 <_Bfree>
 8006fa2:	4639      	mov	r1, r7
 8006fa4:	4620      	mov	r0, r4
 8006fa6:	f000 ff2f 	bl	8007e08 <_Bfree>
 8006faa:	e695      	b.n	8006cd8 <_dtoa_r+0x6a0>
 8006fac:	2600      	movs	r6, #0
 8006fae:	4637      	mov	r7, r6
 8006fb0:	e7e1      	b.n	8006f76 <_dtoa_r+0x93e>
 8006fb2:	9700      	str	r7, [sp, #0]
 8006fb4:	4637      	mov	r7, r6
 8006fb6:	e599      	b.n	8006aec <_dtoa_r+0x4b4>
 8006fb8:	40240000 	.word	0x40240000
 8006fbc:	9b08      	ldr	r3, [sp, #32]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	f000 80ca 	beq.w	8007158 <_dtoa_r+0xb20>
 8006fc4:	9b03      	ldr	r3, [sp, #12]
 8006fc6:	9302      	str	r3, [sp, #8]
 8006fc8:	2d00      	cmp	r5, #0
 8006fca:	dd05      	ble.n	8006fd8 <_dtoa_r+0x9a0>
 8006fcc:	4639      	mov	r1, r7
 8006fce:	462a      	mov	r2, r5
 8006fd0:	4620      	mov	r0, r4
 8006fd2:	f001 f935 	bl	8008240 <__lshift>
 8006fd6:	4607      	mov	r7, r0
 8006fd8:	f1b8 0f00 	cmp.w	r8, #0
 8006fdc:	d05b      	beq.n	8007096 <_dtoa_r+0xa5e>
 8006fde:	6879      	ldr	r1, [r7, #4]
 8006fe0:	4620      	mov	r0, r4
 8006fe2:	f000 fed1 	bl	8007d88 <_Balloc>
 8006fe6:	4605      	mov	r5, r0
 8006fe8:	b928      	cbnz	r0, 8006ff6 <_dtoa_r+0x9be>
 8006fea:	4b87      	ldr	r3, [pc, #540]	; (8007208 <_dtoa_r+0xbd0>)
 8006fec:	4602      	mov	r2, r0
 8006fee:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006ff2:	f7ff bb3b 	b.w	800666c <_dtoa_r+0x34>
 8006ff6:	693a      	ldr	r2, [r7, #16]
 8006ff8:	3202      	adds	r2, #2
 8006ffa:	0092      	lsls	r2, r2, #2
 8006ffc:	f107 010c 	add.w	r1, r7, #12
 8007000:	300c      	adds	r0, #12
 8007002:	f000 feb3 	bl	8007d6c <memcpy>
 8007006:	2201      	movs	r2, #1
 8007008:	4629      	mov	r1, r5
 800700a:	4620      	mov	r0, r4
 800700c:	f001 f918 	bl	8008240 <__lshift>
 8007010:	9b01      	ldr	r3, [sp, #4]
 8007012:	f103 0901 	add.w	r9, r3, #1
 8007016:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800701a:	4413      	add	r3, r2
 800701c:	9305      	str	r3, [sp, #20]
 800701e:	f00a 0301 	and.w	r3, sl, #1
 8007022:	46b8      	mov	r8, r7
 8007024:	9304      	str	r3, [sp, #16]
 8007026:	4607      	mov	r7, r0
 8007028:	4631      	mov	r1, r6
 800702a:	ee18 0a10 	vmov	r0, s16
 800702e:	f7ff fa77 	bl	8006520 <quorem>
 8007032:	4641      	mov	r1, r8
 8007034:	9002      	str	r0, [sp, #8]
 8007036:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800703a:	ee18 0a10 	vmov	r0, s16
 800703e:	f001 f96f 	bl	8008320 <__mcmp>
 8007042:	463a      	mov	r2, r7
 8007044:	9003      	str	r0, [sp, #12]
 8007046:	4631      	mov	r1, r6
 8007048:	4620      	mov	r0, r4
 800704a:	f001 f985 	bl	8008358 <__mdiff>
 800704e:	68c2      	ldr	r2, [r0, #12]
 8007050:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8007054:	4605      	mov	r5, r0
 8007056:	bb02      	cbnz	r2, 800709a <_dtoa_r+0xa62>
 8007058:	4601      	mov	r1, r0
 800705a:	ee18 0a10 	vmov	r0, s16
 800705e:	f001 f95f 	bl	8008320 <__mcmp>
 8007062:	4602      	mov	r2, r0
 8007064:	4629      	mov	r1, r5
 8007066:	4620      	mov	r0, r4
 8007068:	9207      	str	r2, [sp, #28]
 800706a:	f000 fecd 	bl	8007e08 <_Bfree>
 800706e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8007072:	ea43 0102 	orr.w	r1, r3, r2
 8007076:	9b04      	ldr	r3, [sp, #16]
 8007078:	430b      	orrs	r3, r1
 800707a:	464d      	mov	r5, r9
 800707c:	d10f      	bne.n	800709e <_dtoa_r+0xa66>
 800707e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007082:	d02a      	beq.n	80070da <_dtoa_r+0xaa2>
 8007084:	9b03      	ldr	r3, [sp, #12]
 8007086:	2b00      	cmp	r3, #0
 8007088:	dd02      	ble.n	8007090 <_dtoa_r+0xa58>
 800708a:	9b02      	ldr	r3, [sp, #8]
 800708c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007090:	f88b a000 	strb.w	sl, [fp]
 8007094:	e775      	b.n	8006f82 <_dtoa_r+0x94a>
 8007096:	4638      	mov	r0, r7
 8007098:	e7ba      	b.n	8007010 <_dtoa_r+0x9d8>
 800709a:	2201      	movs	r2, #1
 800709c:	e7e2      	b.n	8007064 <_dtoa_r+0xa2c>
 800709e:	9b03      	ldr	r3, [sp, #12]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	db04      	blt.n	80070ae <_dtoa_r+0xa76>
 80070a4:	9906      	ldr	r1, [sp, #24]
 80070a6:	430b      	orrs	r3, r1
 80070a8:	9904      	ldr	r1, [sp, #16]
 80070aa:	430b      	orrs	r3, r1
 80070ac:	d122      	bne.n	80070f4 <_dtoa_r+0xabc>
 80070ae:	2a00      	cmp	r2, #0
 80070b0:	ddee      	ble.n	8007090 <_dtoa_r+0xa58>
 80070b2:	ee18 1a10 	vmov	r1, s16
 80070b6:	2201      	movs	r2, #1
 80070b8:	4620      	mov	r0, r4
 80070ba:	f001 f8c1 	bl	8008240 <__lshift>
 80070be:	4631      	mov	r1, r6
 80070c0:	ee08 0a10 	vmov	s16, r0
 80070c4:	f001 f92c 	bl	8008320 <__mcmp>
 80070c8:	2800      	cmp	r0, #0
 80070ca:	dc03      	bgt.n	80070d4 <_dtoa_r+0xa9c>
 80070cc:	d1e0      	bne.n	8007090 <_dtoa_r+0xa58>
 80070ce:	f01a 0f01 	tst.w	sl, #1
 80070d2:	d0dd      	beq.n	8007090 <_dtoa_r+0xa58>
 80070d4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80070d8:	d1d7      	bne.n	800708a <_dtoa_r+0xa52>
 80070da:	2339      	movs	r3, #57	; 0x39
 80070dc:	f88b 3000 	strb.w	r3, [fp]
 80070e0:	462b      	mov	r3, r5
 80070e2:	461d      	mov	r5, r3
 80070e4:	3b01      	subs	r3, #1
 80070e6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80070ea:	2a39      	cmp	r2, #57	; 0x39
 80070ec:	d071      	beq.n	80071d2 <_dtoa_r+0xb9a>
 80070ee:	3201      	adds	r2, #1
 80070f0:	701a      	strb	r2, [r3, #0]
 80070f2:	e746      	b.n	8006f82 <_dtoa_r+0x94a>
 80070f4:	2a00      	cmp	r2, #0
 80070f6:	dd07      	ble.n	8007108 <_dtoa_r+0xad0>
 80070f8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80070fc:	d0ed      	beq.n	80070da <_dtoa_r+0xaa2>
 80070fe:	f10a 0301 	add.w	r3, sl, #1
 8007102:	f88b 3000 	strb.w	r3, [fp]
 8007106:	e73c      	b.n	8006f82 <_dtoa_r+0x94a>
 8007108:	9b05      	ldr	r3, [sp, #20]
 800710a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800710e:	4599      	cmp	r9, r3
 8007110:	d047      	beq.n	80071a2 <_dtoa_r+0xb6a>
 8007112:	ee18 1a10 	vmov	r1, s16
 8007116:	2300      	movs	r3, #0
 8007118:	220a      	movs	r2, #10
 800711a:	4620      	mov	r0, r4
 800711c:	f000 fe96 	bl	8007e4c <__multadd>
 8007120:	45b8      	cmp	r8, r7
 8007122:	ee08 0a10 	vmov	s16, r0
 8007126:	f04f 0300 	mov.w	r3, #0
 800712a:	f04f 020a 	mov.w	r2, #10
 800712e:	4641      	mov	r1, r8
 8007130:	4620      	mov	r0, r4
 8007132:	d106      	bne.n	8007142 <_dtoa_r+0xb0a>
 8007134:	f000 fe8a 	bl	8007e4c <__multadd>
 8007138:	4680      	mov	r8, r0
 800713a:	4607      	mov	r7, r0
 800713c:	f109 0901 	add.w	r9, r9, #1
 8007140:	e772      	b.n	8007028 <_dtoa_r+0x9f0>
 8007142:	f000 fe83 	bl	8007e4c <__multadd>
 8007146:	4639      	mov	r1, r7
 8007148:	4680      	mov	r8, r0
 800714a:	2300      	movs	r3, #0
 800714c:	220a      	movs	r2, #10
 800714e:	4620      	mov	r0, r4
 8007150:	f000 fe7c 	bl	8007e4c <__multadd>
 8007154:	4607      	mov	r7, r0
 8007156:	e7f1      	b.n	800713c <_dtoa_r+0xb04>
 8007158:	9b03      	ldr	r3, [sp, #12]
 800715a:	9302      	str	r3, [sp, #8]
 800715c:	9d01      	ldr	r5, [sp, #4]
 800715e:	ee18 0a10 	vmov	r0, s16
 8007162:	4631      	mov	r1, r6
 8007164:	f7ff f9dc 	bl	8006520 <quorem>
 8007168:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800716c:	9b01      	ldr	r3, [sp, #4]
 800716e:	f805 ab01 	strb.w	sl, [r5], #1
 8007172:	1aea      	subs	r2, r5, r3
 8007174:	9b02      	ldr	r3, [sp, #8]
 8007176:	4293      	cmp	r3, r2
 8007178:	dd09      	ble.n	800718e <_dtoa_r+0xb56>
 800717a:	ee18 1a10 	vmov	r1, s16
 800717e:	2300      	movs	r3, #0
 8007180:	220a      	movs	r2, #10
 8007182:	4620      	mov	r0, r4
 8007184:	f000 fe62 	bl	8007e4c <__multadd>
 8007188:	ee08 0a10 	vmov	s16, r0
 800718c:	e7e7      	b.n	800715e <_dtoa_r+0xb26>
 800718e:	9b02      	ldr	r3, [sp, #8]
 8007190:	2b00      	cmp	r3, #0
 8007192:	bfc8      	it	gt
 8007194:	461d      	movgt	r5, r3
 8007196:	9b01      	ldr	r3, [sp, #4]
 8007198:	bfd8      	it	le
 800719a:	2501      	movle	r5, #1
 800719c:	441d      	add	r5, r3
 800719e:	f04f 0800 	mov.w	r8, #0
 80071a2:	ee18 1a10 	vmov	r1, s16
 80071a6:	2201      	movs	r2, #1
 80071a8:	4620      	mov	r0, r4
 80071aa:	f001 f849 	bl	8008240 <__lshift>
 80071ae:	4631      	mov	r1, r6
 80071b0:	ee08 0a10 	vmov	s16, r0
 80071b4:	f001 f8b4 	bl	8008320 <__mcmp>
 80071b8:	2800      	cmp	r0, #0
 80071ba:	dc91      	bgt.n	80070e0 <_dtoa_r+0xaa8>
 80071bc:	d102      	bne.n	80071c4 <_dtoa_r+0xb8c>
 80071be:	f01a 0f01 	tst.w	sl, #1
 80071c2:	d18d      	bne.n	80070e0 <_dtoa_r+0xaa8>
 80071c4:	462b      	mov	r3, r5
 80071c6:	461d      	mov	r5, r3
 80071c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80071cc:	2a30      	cmp	r2, #48	; 0x30
 80071ce:	d0fa      	beq.n	80071c6 <_dtoa_r+0xb8e>
 80071d0:	e6d7      	b.n	8006f82 <_dtoa_r+0x94a>
 80071d2:	9a01      	ldr	r2, [sp, #4]
 80071d4:	429a      	cmp	r2, r3
 80071d6:	d184      	bne.n	80070e2 <_dtoa_r+0xaaa>
 80071d8:	9b00      	ldr	r3, [sp, #0]
 80071da:	3301      	adds	r3, #1
 80071dc:	9300      	str	r3, [sp, #0]
 80071de:	2331      	movs	r3, #49	; 0x31
 80071e0:	7013      	strb	r3, [r2, #0]
 80071e2:	e6ce      	b.n	8006f82 <_dtoa_r+0x94a>
 80071e4:	4b09      	ldr	r3, [pc, #36]	; (800720c <_dtoa_r+0xbd4>)
 80071e6:	f7ff ba95 	b.w	8006714 <_dtoa_r+0xdc>
 80071ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	f47f aa6e 	bne.w	80066ce <_dtoa_r+0x96>
 80071f2:	4b07      	ldr	r3, [pc, #28]	; (8007210 <_dtoa_r+0xbd8>)
 80071f4:	f7ff ba8e 	b.w	8006714 <_dtoa_r+0xdc>
 80071f8:	9b02      	ldr	r3, [sp, #8]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	dcae      	bgt.n	800715c <_dtoa_r+0xb24>
 80071fe:	9b06      	ldr	r3, [sp, #24]
 8007200:	2b02      	cmp	r3, #2
 8007202:	f73f aea8 	bgt.w	8006f56 <_dtoa_r+0x91e>
 8007206:	e7a9      	b.n	800715c <_dtoa_r+0xb24>
 8007208:	08009870 	.word	0x08009870
 800720c:	08009670 	.word	0x08009670
 8007210:	080097f1 	.word	0x080097f1

08007214 <__sflush_r>:
 8007214:	898a      	ldrh	r2, [r1, #12]
 8007216:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800721a:	4605      	mov	r5, r0
 800721c:	0710      	lsls	r0, r2, #28
 800721e:	460c      	mov	r4, r1
 8007220:	d458      	bmi.n	80072d4 <__sflush_r+0xc0>
 8007222:	684b      	ldr	r3, [r1, #4]
 8007224:	2b00      	cmp	r3, #0
 8007226:	dc05      	bgt.n	8007234 <__sflush_r+0x20>
 8007228:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800722a:	2b00      	cmp	r3, #0
 800722c:	dc02      	bgt.n	8007234 <__sflush_r+0x20>
 800722e:	2000      	movs	r0, #0
 8007230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007234:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007236:	2e00      	cmp	r6, #0
 8007238:	d0f9      	beq.n	800722e <__sflush_r+0x1a>
 800723a:	2300      	movs	r3, #0
 800723c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007240:	682f      	ldr	r7, [r5, #0]
 8007242:	602b      	str	r3, [r5, #0]
 8007244:	d032      	beq.n	80072ac <__sflush_r+0x98>
 8007246:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007248:	89a3      	ldrh	r3, [r4, #12]
 800724a:	075a      	lsls	r2, r3, #29
 800724c:	d505      	bpl.n	800725a <__sflush_r+0x46>
 800724e:	6863      	ldr	r3, [r4, #4]
 8007250:	1ac0      	subs	r0, r0, r3
 8007252:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007254:	b10b      	cbz	r3, 800725a <__sflush_r+0x46>
 8007256:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007258:	1ac0      	subs	r0, r0, r3
 800725a:	2300      	movs	r3, #0
 800725c:	4602      	mov	r2, r0
 800725e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007260:	6a21      	ldr	r1, [r4, #32]
 8007262:	4628      	mov	r0, r5
 8007264:	47b0      	blx	r6
 8007266:	1c43      	adds	r3, r0, #1
 8007268:	89a3      	ldrh	r3, [r4, #12]
 800726a:	d106      	bne.n	800727a <__sflush_r+0x66>
 800726c:	6829      	ldr	r1, [r5, #0]
 800726e:	291d      	cmp	r1, #29
 8007270:	d82c      	bhi.n	80072cc <__sflush_r+0xb8>
 8007272:	4a2a      	ldr	r2, [pc, #168]	; (800731c <__sflush_r+0x108>)
 8007274:	40ca      	lsrs	r2, r1
 8007276:	07d6      	lsls	r6, r2, #31
 8007278:	d528      	bpl.n	80072cc <__sflush_r+0xb8>
 800727a:	2200      	movs	r2, #0
 800727c:	6062      	str	r2, [r4, #4]
 800727e:	04d9      	lsls	r1, r3, #19
 8007280:	6922      	ldr	r2, [r4, #16]
 8007282:	6022      	str	r2, [r4, #0]
 8007284:	d504      	bpl.n	8007290 <__sflush_r+0x7c>
 8007286:	1c42      	adds	r2, r0, #1
 8007288:	d101      	bne.n	800728e <__sflush_r+0x7a>
 800728a:	682b      	ldr	r3, [r5, #0]
 800728c:	b903      	cbnz	r3, 8007290 <__sflush_r+0x7c>
 800728e:	6560      	str	r0, [r4, #84]	; 0x54
 8007290:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007292:	602f      	str	r7, [r5, #0]
 8007294:	2900      	cmp	r1, #0
 8007296:	d0ca      	beq.n	800722e <__sflush_r+0x1a>
 8007298:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800729c:	4299      	cmp	r1, r3
 800729e:	d002      	beq.n	80072a6 <__sflush_r+0x92>
 80072a0:	4628      	mov	r0, r5
 80072a2:	f001 fa49 	bl	8008738 <_free_r>
 80072a6:	2000      	movs	r0, #0
 80072a8:	6360      	str	r0, [r4, #52]	; 0x34
 80072aa:	e7c1      	b.n	8007230 <__sflush_r+0x1c>
 80072ac:	6a21      	ldr	r1, [r4, #32]
 80072ae:	2301      	movs	r3, #1
 80072b0:	4628      	mov	r0, r5
 80072b2:	47b0      	blx	r6
 80072b4:	1c41      	adds	r1, r0, #1
 80072b6:	d1c7      	bne.n	8007248 <__sflush_r+0x34>
 80072b8:	682b      	ldr	r3, [r5, #0]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d0c4      	beq.n	8007248 <__sflush_r+0x34>
 80072be:	2b1d      	cmp	r3, #29
 80072c0:	d001      	beq.n	80072c6 <__sflush_r+0xb2>
 80072c2:	2b16      	cmp	r3, #22
 80072c4:	d101      	bne.n	80072ca <__sflush_r+0xb6>
 80072c6:	602f      	str	r7, [r5, #0]
 80072c8:	e7b1      	b.n	800722e <__sflush_r+0x1a>
 80072ca:	89a3      	ldrh	r3, [r4, #12]
 80072cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80072d0:	81a3      	strh	r3, [r4, #12]
 80072d2:	e7ad      	b.n	8007230 <__sflush_r+0x1c>
 80072d4:	690f      	ldr	r7, [r1, #16]
 80072d6:	2f00      	cmp	r7, #0
 80072d8:	d0a9      	beq.n	800722e <__sflush_r+0x1a>
 80072da:	0793      	lsls	r3, r2, #30
 80072dc:	680e      	ldr	r6, [r1, #0]
 80072de:	bf08      	it	eq
 80072e0:	694b      	ldreq	r3, [r1, #20]
 80072e2:	600f      	str	r7, [r1, #0]
 80072e4:	bf18      	it	ne
 80072e6:	2300      	movne	r3, #0
 80072e8:	eba6 0807 	sub.w	r8, r6, r7
 80072ec:	608b      	str	r3, [r1, #8]
 80072ee:	f1b8 0f00 	cmp.w	r8, #0
 80072f2:	dd9c      	ble.n	800722e <__sflush_r+0x1a>
 80072f4:	6a21      	ldr	r1, [r4, #32]
 80072f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80072f8:	4643      	mov	r3, r8
 80072fa:	463a      	mov	r2, r7
 80072fc:	4628      	mov	r0, r5
 80072fe:	47b0      	blx	r6
 8007300:	2800      	cmp	r0, #0
 8007302:	dc06      	bgt.n	8007312 <__sflush_r+0xfe>
 8007304:	89a3      	ldrh	r3, [r4, #12]
 8007306:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800730a:	81a3      	strh	r3, [r4, #12]
 800730c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007310:	e78e      	b.n	8007230 <__sflush_r+0x1c>
 8007312:	4407      	add	r7, r0
 8007314:	eba8 0800 	sub.w	r8, r8, r0
 8007318:	e7e9      	b.n	80072ee <__sflush_r+0xda>
 800731a:	bf00      	nop
 800731c:	20400001 	.word	0x20400001

08007320 <_fflush_r>:
 8007320:	b538      	push	{r3, r4, r5, lr}
 8007322:	690b      	ldr	r3, [r1, #16]
 8007324:	4605      	mov	r5, r0
 8007326:	460c      	mov	r4, r1
 8007328:	b913      	cbnz	r3, 8007330 <_fflush_r+0x10>
 800732a:	2500      	movs	r5, #0
 800732c:	4628      	mov	r0, r5
 800732e:	bd38      	pop	{r3, r4, r5, pc}
 8007330:	b118      	cbz	r0, 800733a <_fflush_r+0x1a>
 8007332:	6983      	ldr	r3, [r0, #24]
 8007334:	b90b      	cbnz	r3, 800733a <_fflush_r+0x1a>
 8007336:	f000 f887 	bl	8007448 <__sinit>
 800733a:	4b14      	ldr	r3, [pc, #80]	; (800738c <_fflush_r+0x6c>)
 800733c:	429c      	cmp	r4, r3
 800733e:	d11b      	bne.n	8007378 <_fflush_r+0x58>
 8007340:	686c      	ldr	r4, [r5, #4]
 8007342:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d0ef      	beq.n	800732a <_fflush_r+0xa>
 800734a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800734c:	07d0      	lsls	r0, r2, #31
 800734e:	d404      	bmi.n	800735a <_fflush_r+0x3a>
 8007350:	0599      	lsls	r1, r3, #22
 8007352:	d402      	bmi.n	800735a <_fflush_r+0x3a>
 8007354:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007356:	f000 fc88 	bl	8007c6a <__retarget_lock_acquire_recursive>
 800735a:	4628      	mov	r0, r5
 800735c:	4621      	mov	r1, r4
 800735e:	f7ff ff59 	bl	8007214 <__sflush_r>
 8007362:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007364:	07da      	lsls	r2, r3, #31
 8007366:	4605      	mov	r5, r0
 8007368:	d4e0      	bmi.n	800732c <_fflush_r+0xc>
 800736a:	89a3      	ldrh	r3, [r4, #12]
 800736c:	059b      	lsls	r3, r3, #22
 800736e:	d4dd      	bmi.n	800732c <_fflush_r+0xc>
 8007370:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007372:	f000 fc7b 	bl	8007c6c <__retarget_lock_release_recursive>
 8007376:	e7d9      	b.n	800732c <_fflush_r+0xc>
 8007378:	4b05      	ldr	r3, [pc, #20]	; (8007390 <_fflush_r+0x70>)
 800737a:	429c      	cmp	r4, r3
 800737c:	d101      	bne.n	8007382 <_fflush_r+0x62>
 800737e:	68ac      	ldr	r4, [r5, #8]
 8007380:	e7df      	b.n	8007342 <_fflush_r+0x22>
 8007382:	4b04      	ldr	r3, [pc, #16]	; (8007394 <_fflush_r+0x74>)
 8007384:	429c      	cmp	r4, r3
 8007386:	bf08      	it	eq
 8007388:	68ec      	ldreq	r4, [r5, #12]
 800738a:	e7da      	b.n	8007342 <_fflush_r+0x22>
 800738c:	080098a4 	.word	0x080098a4
 8007390:	080098c4 	.word	0x080098c4
 8007394:	08009884 	.word	0x08009884

08007398 <std>:
 8007398:	2300      	movs	r3, #0
 800739a:	b510      	push	{r4, lr}
 800739c:	4604      	mov	r4, r0
 800739e:	e9c0 3300 	strd	r3, r3, [r0]
 80073a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80073a6:	6083      	str	r3, [r0, #8]
 80073a8:	8181      	strh	r1, [r0, #12]
 80073aa:	6643      	str	r3, [r0, #100]	; 0x64
 80073ac:	81c2      	strh	r2, [r0, #14]
 80073ae:	6183      	str	r3, [r0, #24]
 80073b0:	4619      	mov	r1, r3
 80073b2:	2208      	movs	r2, #8
 80073b4:	305c      	adds	r0, #92	; 0x5c
 80073b6:	f7fd f9df 	bl	8004778 <memset>
 80073ba:	4b05      	ldr	r3, [pc, #20]	; (80073d0 <std+0x38>)
 80073bc:	6263      	str	r3, [r4, #36]	; 0x24
 80073be:	4b05      	ldr	r3, [pc, #20]	; (80073d4 <std+0x3c>)
 80073c0:	62a3      	str	r3, [r4, #40]	; 0x28
 80073c2:	4b05      	ldr	r3, [pc, #20]	; (80073d8 <std+0x40>)
 80073c4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80073c6:	4b05      	ldr	r3, [pc, #20]	; (80073dc <std+0x44>)
 80073c8:	6224      	str	r4, [r4, #32]
 80073ca:	6323      	str	r3, [r4, #48]	; 0x30
 80073cc:	bd10      	pop	{r4, pc}
 80073ce:	bf00      	nop
 80073d0:	08008be1 	.word	0x08008be1
 80073d4:	08008c03 	.word	0x08008c03
 80073d8:	08008c3b 	.word	0x08008c3b
 80073dc:	08008c5f 	.word	0x08008c5f

080073e0 <_cleanup_r>:
 80073e0:	4901      	ldr	r1, [pc, #4]	; (80073e8 <_cleanup_r+0x8>)
 80073e2:	f000 b8af 	b.w	8007544 <_fwalk_reent>
 80073e6:	bf00      	nop
 80073e8:	08007321 	.word	0x08007321

080073ec <__sfmoreglue>:
 80073ec:	b570      	push	{r4, r5, r6, lr}
 80073ee:	2268      	movs	r2, #104	; 0x68
 80073f0:	1e4d      	subs	r5, r1, #1
 80073f2:	4355      	muls	r5, r2
 80073f4:	460e      	mov	r6, r1
 80073f6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80073fa:	f001 fa09 	bl	8008810 <_malloc_r>
 80073fe:	4604      	mov	r4, r0
 8007400:	b140      	cbz	r0, 8007414 <__sfmoreglue+0x28>
 8007402:	2100      	movs	r1, #0
 8007404:	e9c0 1600 	strd	r1, r6, [r0]
 8007408:	300c      	adds	r0, #12
 800740a:	60a0      	str	r0, [r4, #8]
 800740c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007410:	f7fd f9b2 	bl	8004778 <memset>
 8007414:	4620      	mov	r0, r4
 8007416:	bd70      	pop	{r4, r5, r6, pc}

08007418 <__sfp_lock_acquire>:
 8007418:	4801      	ldr	r0, [pc, #4]	; (8007420 <__sfp_lock_acquire+0x8>)
 800741a:	f000 bc26 	b.w	8007c6a <__retarget_lock_acquire_recursive>
 800741e:	bf00      	nop
 8007420:	20000535 	.word	0x20000535

08007424 <__sfp_lock_release>:
 8007424:	4801      	ldr	r0, [pc, #4]	; (800742c <__sfp_lock_release+0x8>)
 8007426:	f000 bc21 	b.w	8007c6c <__retarget_lock_release_recursive>
 800742a:	bf00      	nop
 800742c:	20000535 	.word	0x20000535

08007430 <__sinit_lock_acquire>:
 8007430:	4801      	ldr	r0, [pc, #4]	; (8007438 <__sinit_lock_acquire+0x8>)
 8007432:	f000 bc1a 	b.w	8007c6a <__retarget_lock_acquire_recursive>
 8007436:	bf00      	nop
 8007438:	20000536 	.word	0x20000536

0800743c <__sinit_lock_release>:
 800743c:	4801      	ldr	r0, [pc, #4]	; (8007444 <__sinit_lock_release+0x8>)
 800743e:	f000 bc15 	b.w	8007c6c <__retarget_lock_release_recursive>
 8007442:	bf00      	nop
 8007444:	20000536 	.word	0x20000536

08007448 <__sinit>:
 8007448:	b510      	push	{r4, lr}
 800744a:	4604      	mov	r4, r0
 800744c:	f7ff fff0 	bl	8007430 <__sinit_lock_acquire>
 8007450:	69a3      	ldr	r3, [r4, #24]
 8007452:	b11b      	cbz	r3, 800745c <__sinit+0x14>
 8007454:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007458:	f7ff bff0 	b.w	800743c <__sinit_lock_release>
 800745c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007460:	6523      	str	r3, [r4, #80]	; 0x50
 8007462:	4b13      	ldr	r3, [pc, #76]	; (80074b0 <__sinit+0x68>)
 8007464:	4a13      	ldr	r2, [pc, #76]	; (80074b4 <__sinit+0x6c>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	62a2      	str	r2, [r4, #40]	; 0x28
 800746a:	42a3      	cmp	r3, r4
 800746c:	bf04      	itt	eq
 800746e:	2301      	moveq	r3, #1
 8007470:	61a3      	streq	r3, [r4, #24]
 8007472:	4620      	mov	r0, r4
 8007474:	f000 f820 	bl	80074b8 <__sfp>
 8007478:	6060      	str	r0, [r4, #4]
 800747a:	4620      	mov	r0, r4
 800747c:	f000 f81c 	bl	80074b8 <__sfp>
 8007480:	60a0      	str	r0, [r4, #8]
 8007482:	4620      	mov	r0, r4
 8007484:	f000 f818 	bl	80074b8 <__sfp>
 8007488:	2200      	movs	r2, #0
 800748a:	60e0      	str	r0, [r4, #12]
 800748c:	2104      	movs	r1, #4
 800748e:	6860      	ldr	r0, [r4, #4]
 8007490:	f7ff ff82 	bl	8007398 <std>
 8007494:	68a0      	ldr	r0, [r4, #8]
 8007496:	2201      	movs	r2, #1
 8007498:	2109      	movs	r1, #9
 800749a:	f7ff ff7d 	bl	8007398 <std>
 800749e:	68e0      	ldr	r0, [r4, #12]
 80074a0:	2202      	movs	r2, #2
 80074a2:	2112      	movs	r1, #18
 80074a4:	f7ff ff78 	bl	8007398 <std>
 80074a8:	2301      	movs	r3, #1
 80074aa:	61a3      	str	r3, [r4, #24]
 80074ac:	e7d2      	b.n	8007454 <__sinit+0xc>
 80074ae:	bf00      	nop
 80074b0:	0800965c 	.word	0x0800965c
 80074b4:	080073e1 	.word	0x080073e1

080074b8 <__sfp>:
 80074b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074ba:	4607      	mov	r7, r0
 80074bc:	f7ff ffac 	bl	8007418 <__sfp_lock_acquire>
 80074c0:	4b1e      	ldr	r3, [pc, #120]	; (800753c <__sfp+0x84>)
 80074c2:	681e      	ldr	r6, [r3, #0]
 80074c4:	69b3      	ldr	r3, [r6, #24]
 80074c6:	b913      	cbnz	r3, 80074ce <__sfp+0x16>
 80074c8:	4630      	mov	r0, r6
 80074ca:	f7ff ffbd 	bl	8007448 <__sinit>
 80074ce:	3648      	adds	r6, #72	; 0x48
 80074d0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80074d4:	3b01      	subs	r3, #1
 80074d6:	d503      	bpl.n	80074e0 <__sfp+0x28>
 80074d8:	6833      	ldr	r3, [r6, #0]
 80074da:	b30b      	cbz	r3, 8007520 <__sfp+0x68>
 80074dc:	6836      	ldr	r6, [r6, #0]
 80074de:	e7f7      	b.n	80074d0 <__sfp+0x18>
 80074e0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80074e4:	b9d5      	cbnz	r5, 800751c <__sfp+0x64>
 80074e6:	4b16      	ldr	r3, [pc, #88]	; (8007540 <__sfp+0x88>)
 80074e8:	60e3      	str	r3, [r4, #12]
 80074ea:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80074ee:	6665      	str	r5, [r4, #100]	; 0x64
 80074f0:	f000 fbba 	bl	8007c68 <__retarget_lock_init_recursive>
 80074f4:	f7ff ff96 	bl	8007424 <__sfp_lock_release>
 80074f8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80074fc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007500:	6025      	str	r5, [r4, #0]
 8007502:	61a5      	str	r5, [r4, #24]
 8007504:	2208      	movs	r2, #8
 8007506:	4629      	mov	r1, r5
 8007508:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800750c:	f7fd f934 	bl	8004778 <memset>
 8007510:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007514:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007518:	4620      	mov	r0, r4
 800751a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800751c:	3468      	adds	r4, #104	; 0x68
 800751e:	e7d9      	b.n	80074d4 <__sfp+0x1c>
 8007520:	2104      	movs	r1, #4
 8007522:	4638      	mov	r0, r7
 8007524:	f7ff ff62 	bl	80073ec <__sfmoreglue>
 8007528:	4604      	mov	r4, r0
 800752a:	6030      	str	r0, [r6, #0]
 800752c:	2800      	cmp	r0, #0
 800752e:	d1d5      	bne.n	80074dc <__sfp+0x24>
 8007530:	f7ff ff78 	bl	8007424 <__sfp_lock_release>
 8007534:	230c      	movs	r3, #12
 8007536:	603b      	str	r3, [r7, #0]
 8007538:	e7ee      	b.n	8007518 <__sfp+0x60>
 800753a:	bf00      	nop
 800753c:	0800965c 	.word	0x0800965c
 8007540:	ffff0001 	.word	0xffff0001

08007544 <_fwalk_reent>:
 8007544:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007548:	4606      	mov	r6, r0
 800754a:	4688      	mov	r8, r1
 800754c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007550:	2700      	movs	r7, #0
 8007552:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007556:	f1b9 0901 	subs.w	r9, r9, #1
 800755a:	d505      	bpl.n	8007568 <_fwalk_reent+0x24>
 800755c:	6824      	ldr	r4, [r4, #0]
 800755e:	2c00      	cmp	r4, #0
 8007560:	d1f7      	bne.n	8007552 <_fwalk_reent+0xe>
 8007562:	4638      	mov	r0, r7
 8007564:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007568:	89ab      	ldrh	r3, [r5, #12]
 800756a:	2b01      	cmp	r3, #1
 800756c:	d907      	bls.n	800757e <_fwalk_reent+0x3a>
 800756e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007572:	3301      	adds	r3, #1
 8007574:	d003      	beq.n	800757e <_fwalk_reent+0x3a>
 8007576:	4629      	mov	r1, r5
 8007578:	4630      	mov	r0, r6
 800757a:	47c0      	blx	r8
 800757c:	4307      	orrs	r7, r0
 800757e:	3568      	adds	r5, #104	; 0x68
 8007580:	e7e9      	b.n	8007556 <_fwalk_reent+0x12>

08007582 <rshift>:
 8007582:	6903      	ldr	r3, [r0, #16]
 8007584:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007588:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800758c:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007590:	f100 0414 	add.w	r4, r0, #20
 8007594:	dd45      	ble.n	8007622 <rshift+0xa0>
 8007596:	f011 011f 	ands.w	r1, r1, #31
 800759a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800759e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80075a2:	d10c      	bne.n	80075be <rshift+0x3c>
 80075a4:	f100 0710 	add.w	r7, r0, #16
 80075a8:	4629      	mov	r1, r5
 80075aa:	42b1      	cmp	r1, r6
 80075ac:	d334      	bcc.n	8007618 <rshift+0x96>
 80075ae:	1a9b      	subs	r3, r3, r2
 80075b0:	009b      	lsls	r3, r3, #2
 80075b2:	1eea      	subs	r2, r5, #3
 80075b4:	4296      	cmp	r6, r2
 80075b6:	bf38      	it	cc
 80075b8:	2300      	movcc	r3, #0
 80075ba:	4423      	add	r3, r4
 80075bc:	e015      	b.n	80075ea <rshift+0x68>
 80075be:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80075c2:	f1c1 0820 	rsb	r8, r1, #32
 80075c6:	40cf      	lsrs	r7, r1
 80075c8:	f105 0e04 	add.w	lr, r5, #4
 80075cc:	46a1      	mov	r9, r4
 80075ce:	4576      	cmp	r6, lr
 80075d0:	46f4      	mov	ip, lr
 80075d2:	d815      	bhi.n	8007600 <rshift+0x7e>
 80075d4:	1a9a      	subs	r2, r3, r2
 80075d6:	0092      	lsls	r2, r2, #2
 80075d8:	3a04      	subs	r2, #4
 80075da:	3501      	adds	r5, #1
 80075dc:	42ae      	cmp	r6, r5
 80075de:	bf38      	it	cc
 80075e0:	2200      	movcc	r2, #0
 80075e2:	18a3      	adds	r3, r4, r2
 80075e4:	50a7      	str	r7, [r4, r2]
 80075e6:	b107      	cbz	r7, 80075ea <rshift+0x68>
 80075e8:	3304      	adds	r3, #4
 80075ea:	1b1a      	subs	r2, r3, r4
 80075ec:	42a3      	cmp	r3, r4
 80075ee:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80075f2:	bf08      	it	eq
 80075f4:	2300      	moveq	r3, #0
 80075f6:	6102      	str	r2, [r0, #16]
 80075f8:	bf08      	it	eq
 80075fa:	6143      	streq	r3, [r0, #20]
 80075fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007600:	f8dc c000 	ldr.w	ip, [ip]
 8007604:	fa0c fc08 	lsl.w	ip, ip, r8
 8007608:	ea4c 0707 	orr.w	r7, ip, r7
 800760c:	f849 7b04 	str.w	r7, [r9], #4
 8007610:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007614:	40cf      	lsrs	r7, r1
 8007616:	e7da      	b.n	80075ce <rshift+0x4c>
 8007618:	f851 cb04 	ldr.w	ip, [r1], #4
 800761c:	f847 cf04 	str.w	ip, [r7, #4]!
 8007620:	e7c3      	b.n	80075aa <rshift+0x28>
 8007622:	4623      	mov	r3, r4
 8007624:	e7e1      	b.n	80075ea <rshift+0x68>

08007626 <__hexdig_fun>:
 8007626:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800762a:	2b09      	cmp	r3, #9
 800762c:	d802      	bhi.n	8007634 <__hexdig_fun+0xe>
 800762e:	3820      	subs	r0, #32
 8007630:	b2c0      	uxtb	r0, r0
 8007632:	4770      	bx	lr
 8007634:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007638:	2b05      	cmp	r3, #5
 800763a:	d801      	bhi.n	8007640 <__hexdig_fun+0x1a>
 800763c:	3847      	subs	r0, #71	; 0x47
 800763e:	e7f7      	b.n	8007630 <__hexdig_fun+0xa>
 8007640:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007644:	2b05      	cmp	r3, #5
 8007646:	d801      	bhi.n	800764c <__hexdig_fun+0x26>
 8007648:	3827      	subs	r0, #39	; 0x27
 800764a:	e7f1      	b.n	8007630 <__hexdig_fun+0xa>
 800764c:	2000      	movs	r0, #0
 800764e:	4770      	bx	lr

08007650 <__gethex>:
 8007650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007654:	ed2d 8b02 	vpush	{d8}
 8007658:	b089      	sub	sp, #36	; 0x24
 800765a:	ee08 0a10 	vmov	s16, r0
 800765e:	9304      	str	r3, [sp, #16]
 8007660:	4bb4      	ldr	r3, [pc, #720]	; (8007934 <__gethex+0x2e4>)
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	9301      	str	r3, [sp, #4]
 8007666:	4618      	mov	r0, r3
 8007668:	468b      	mov	fp, r1
 800766a:	4690      	mov	r8, r2
 800766c:	f7f8 fdd0 	bl	8000210 <strlen>
 8007670:	9b01      	ldr	r3, [sp, #4]
 8007672:	f8db 2000 	ldr.w	r2, [fp]
 8007676:	4403      	add	r3, r0
 8007678:	4682      	mov	sl, r0
 800767a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800767e:	9305      	str	r3, [sp, #20]
 8007680:	1c93      	adds	r3, r2, #2
 8007682:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8007686:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800768a:	32fe      	adds	r2, #254	; 0xfe
 800768c:	18d1      	adds	r1, r2, r3
 800768e:	461f      	mov	r7, r3
 8007690:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007694:	9100      	str	r1, [sp, #0]
 8007696:	2830      	cmp	r0, #48	; 0x30
 8007698:	d0f8      	beq.n	800768c <__gethex+0x3c>
 800769a:	f7ff ffc4 	bl	8007626 <__hexdig_fun>
 800769e:	4604      	mov	r4, r0
 80076a0:	2800      	cmp	r0, #0
 80076a2:	d13a      	bne.n	800771a <__gethex+0xca>
 80076a4:	9901      	ldr	r1, [sp, #4]
 80076a6:	4652      	mov	r2, sl
 80076a8:	4638      	mov	r0, r7
 80076aa:	f001 fadc 	bl	8008c66 <strncmp>
 80076ae:	4605      	mov	r5, r0
 80076b0:	2800      	cmp	r0, #0
 80076b2:	d168      	bne.n	8007786 <__gethex+0x136>
 80076b4:	f817 000a 	ldrb.w	r0, [r7, sl]
 80076b8:	eb07 060a 	add.w	r6, r7, sl
 80076bc:	f7ff ffb3 	bl	8007626 <__hexdig_fun>
 80076c0:	2800      	cmp	r0, #0
 80076c2:	d062      	beq.n	800778a <__gethex+0x13a>
 80076c4:	4633      	mov	r3, r6
 80076c6:	7818      	ldrb	r0, [r3, #0]
 80076c8:	2830      	cmp	r0, #48	; 0x30
 80076ca:	461f      	mov	r7, r3
 80076cc:	f103 0301 	add.w	r3, r3, #1
 80076d0:	d0f9      	beq.n	80076c6 <__gethex+0x76>
 80076d2:	f7ff ffa8 	bl	8007626 <__hexdig_fun>
 80076d6:	2301      	movs	r3, #1
 80076d8:	fab0 f480 	clz	r4, r0
 80076dc:	0964      	lsrs	r4, r4, #5
 80076de:	4635      	mov	r5, r6
 80076e0:	9300      	str	r3, [sp, #0]
 80076e2:	463a      	mov	r2, r7
 80076e4:	4616      	mov	r6, r2
 80076e6:	3201      	adds	r2, #1
 80076e8:	7830      	ldrb	r0, [r6, #0]
 80076ea:	f7ff ff9c 	bl	8007626 <__hexdig_fun>
 80076ee:	2800      	cmp	r0, #0
 80076f0:	d1f8      	bne.n	80076e4 <__gethex+0x94>
 80076f2:	9901      	ldr	r1, [sp, #4]
 80076f4:	4652      	mov	r2, sl
 80076f6:	4630      	mov	r0, r6
 80076f8:	f001 fab5 	bl	8008c66 <strncmp>
 80076fc:	b980      	cbnz	r0, 8007720 <__gethex+0xd0>
 80076fe:	b94d      	cbnz	r5, 8007714 <__gethex+0xc4>
 8007700:	eb06 050a 	add.w	r5, r6, sl
 8007704:	462a      	mov	r2, r5
 8007706:	4616      	mov	r6, r2
 8007708:	3201      	adds	r2, #1
 800770a:	7830      	ldrb	r0, [r6, #0]
 800770c:	f7ff ff8b 	bl	8007626 <__hexdig_fun>
 8007710:	2800      	cmp	r0, #0
 8007712:	d1f8      	bne.n	8007706 <__gethex+0xb6>
 8007714:	1bad      	subs	r5, r5, r6
 8007716:	00ad      	lsls	r5, r5, #2
 8007718:	e004      	b.n	8007724 <__gethex+0xd4>
 800771a:	2400      	movs	r4, #0
 800771c:	4625      	mov	r5, r4
 800771e:	e7e0      	b.n	80076e2 <__gethex+0x92>
 8007720:	2d00      	cmp	r5, #0
 8007722:	d1f7      	bne.n	8007714 <__gethex+0xc4>
 8007724:	7833      	ldrb	r3, [r6, #0]
 8007726:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800772a:	2b50      	cmp	r3, #80	; 0x50
 800772c:	d13b      	bne.n	80077a6 <__gethex+0x156>
 800772e:	7873      	ldrb	r3, [r6, #1]
 8007730:	2b2b      	cmp	r3, #43	; 0x2b
 8007732:	d02c      	beq.n	800778e <__gethex+0x13e>
 8007734:	2b2d      	cmp	r3, #45	; 0x2d
 8007736:	d02e      	beq.n	8007796 <__gethex+0x146>
 8007738:	1c71      	adds	r1, r6, #1
 800773a:	f04f 0900 	mov.w	r9, #0
 800773e:	7808      	ldrb	r0, [r1, #0]
 8007740:	f7ff ff71 	bl	8007626 <__hexdig_fun>
 8007744:	1e43      	subs	r3, r0, #1
 8007746:	b2db      	uxtb	r3, r3
 8007748:	2b18      	cmp	r3, #24
 800774a:	d82c      	bhi.n	80077a6 <__gethex+0x156>
 800774c:	f1a0 0210 	sub.w	r2, r0, #16
 8007750:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007754:	f7ff ff67 	bl	8007626 <__hexdig_fun>
 8007758:	1e43      	subs	r3, r0, #1
 800775a:	b2db      	uxtb	r3, r3
 800775c:	2b18      	cmp	r3, #24
 800775e:	d91d      	bls.n	800779c <__gethex+0x14c>
 8007760:	f1b9 0f00 	cmp.w	r9, #0
 8007764:	d000      	beq.n	8007768 <__gethex+0x118>
 8007766:	4252      	negs	r2, r2
 8007768:	4415      	add	r5, r2
 800776a:	f8cb 1000 	str.w	r1, [fp]
 800776e:	b1e4      	cbz	r4, 80077aa <__gethex+0x15a>
 8007770:	9b00      	ldr	r3, [sp, #0]
 8007772:	2b00      	cmp	r3, #0
 8007774:	bf14      	ite	ne
 8007776:	2700      	movne	r7, #0
 8007778:	2706      	moveq	r7, #6
 800777a:	4638      	mov	r0, r7
 800777c:	b009      	add	sp, #36	; 0x24
 800777e:	ecbd 8b02 	vpop	{d8}
 8007782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007786:	463e      	mov	r6, r7
 8007788:	4625      	mov	r5, r4
 800778a:	2401      	movs	r4, #1
 800778c:	e7ca      	b.n	8007724 <__gethex+0xd4>
 800778e:	f04f 0900 	mov.w	r9, #0
 8007792:	1cb1      	adds	r1, r6, #2
 8007794:	e7d3      	b.n	800773e <__gethex+0xee>
 8007796:	f04f 0901 	mov.w	r9, #1
 800779a:	e7fa      	b.n	8007792 <__gethex+0x142>
 800779c:	230a      	movs	r3, #10
 800779e:	fb03 0202 	mla	r2, r3, r2, r0
 80077a2:	3a10      	subs	r2, #16
 80077a4:	e7d4      	b.n	8007750 <__gethex+0x100>
 80077a6:	4631      	mov	r1, r6
 80077a8:	e7df      	b.n	800776a <__gethex+0x11a>
 80077aa:	1bf3      	subs	r3, r6, r7
 80077ac:	3b01      	subs	r3, #1
 80077ae:	4621      	mov	r1, r4
 80077b0:	2b07      	cmp	r3, #7
 80077b2:	dc0b      	bgt.n	80077cc <__gethex+0x17c>
 80077b4:	ee18 0a10 	vmov	r0, s16
 80077b8:	f000 fae6 	bl	8007d88 <_Balloc>
 80077bc:	4604      	mov	r4, r0
 80077be:	b940      	cbnz	r0, 80077d2 <__gethex+0x182>
 80077c0:	4b5d      	ldr	r3, [pc, #372]	; (8007938 <__gethex+0x2e8>)
 80077c2:	4602      	mov	r2, r0
 80077c4:	21de      	movs	r1, #222	; 0xde
 80077c6:	485d      	ldr	r0, [pc, #372]	; (800793c <__gethex+0x2ec>)
 80077c8:	f001 fa80 	bl	8008ccc <__assert_func>
 80077cc:	3101      	adds	r1, #1
 80077ce:	105b      	asrs	r3, r3, #1
 80077d0:	e7ee      	b.n	80077b0 <__gethex+0x160>
 80077d2:	f100 0914 	add.w	r9, r0, #20
 80077d6:	f04f 0b00 	mov.w	fp, #0
 80077da:	f1ca 0301 	rsb	r3, sl, #1
 80077de:	f8cd 9008 	str.w	r9, [sp, #8]
 80077e2:	f8cd b000 	str.w	fp, [sp]
 80077e6:	9306      	str	r3, [sp, #24]
 80077e8:	42b7      	cmp	r7, r6
 80077ea:	d340      	bcc.n	800786e <__gethex+0x21e>
 80077ec:	9802      	ldr	r0, [sp, #8]
 80077ee:	9b00      	ldr	r3, [sp, #0]
 80077f0:	f840 3b04 	str.w	r3, [r0], #4
 80077f4:	eba0 0009 	sub.w	r0, r0, r9
 80077f8:	1080      	asrs	r0, r0, #2
 80077fa:	0146      	lsls	r6, r0, #5
 80077fc:	6120      	str	r0, [r4, #16]
 80077fe:	4618      	mov	r0, r3
 8007800:	f000 fbb4 	bl	8007f6c <__hi0bits>
 8007804:	1a30      	subs	r0, r6, r0
 8007806:	f8d8 6000 	ldr.w	r6, [r8]
 800780a:	42b0      	cmp	r0, r6
 800780c:	dd63      	ble.n	80078d6 <__gethex+0x286>
 800780e:	1b87      	subs	r7, r0, r6
 8007810:	4639      	mov	r1, r7
 8007812:	4620      	mov	r0, r4
 8007814:	f000 ff58 	bl	80086c8 <__any_on>
 8007818:	4682      	mov	sl, r0
 800781a:	b1a8      	cbz	r0, 8007848 <__gethex+0x1f8>
 800781c:	1e7b      	subs	r3, r7, #1
 800781e:	1159      	asrs	r1, r3, #5
 8007820:	f003 021f 	and.w	r2, r3, #31
 8007824:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8007828:	f04f 0a01 	mov.w	sl, #1
 800782c:	fa0a f202 	lsl.w	r2, sl, r2
 8007830:	420a      	tst	r2, r1
 8007832:	d009      	beq.n	8007848 <__gethex+0x1f8>
 8007834:	4553      	cmp	r3, sl
 8007836:	dd05      	ble.n	8007844 <__gethex+0x1f4>
 8007838:	1eb9      	subs	r1, r7, #2
 800783a:	4620      	mov	r0, r4
 800783c:	f000 ff44 	bl	80086c8 <__any_on>
 8007840:	2800      	cmp	r0, #0
 8007842:	d145      	bne.n	80078d0 <__gethex+0x280>
 8007844:	f04f 0a02 	mov.w	sl, #2
 8007848:	4639      	mov	r1, r7
 800784a:	4620      	mov	r0, r4
 800784c:	f7ff fe99 	bl	8007582 <rshift>
 8007850:	443d      	add	r5, r7
 8007852:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007856:	42ab      	cmp	r3, r5
 8007858:	da4c      	bge.n	80078f4 <__gethex+0x2a4>
 800785a:	ee18 0a10 	vmov	r0, s16
 800785e:	4621      	mov	r1, r4
 8007860:	f000 fad2 	bl	8007e08 <_Bfree>
 8007864:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007866:	2300      	movs	r3, #0
 8007868:	6013      	str	r3, [r2, #0]
 800786a:	27a3      	movs	r7, #163	; 0xa3
 800786c:	e785      	b.n	800777a <__gethex+0x12a>
 800786e:	1e73      	subs	r3, r6, #1
 8007870:	9a05      	ldr	r2, [sp, #20]
 8007872:	9303      	str	r3, [sp, #12]
 8007874:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007878:	4293      	cmp	r3, r2
 800787a:	d019      	beq.n	80078b0 <__gethex+0x260>
 800787c:	f1bb 0f20 	cmp.w	fp, #32
 8007880:	d107      	bne.n	8007892 <__gethex+0x242>
 8007882:	9b02      	ldr	r3, [sp, #8]
 8007884:	9a00      	ldr	r2, [sp, #0]
 8007886:	f843 2b04 	str.w	r2, [r3], #4
 800788a:	9302      	str	r3, [sp, #8]
 800788c:	2300      	movs	r3, #0
 800788e:	9300      	str	r3, [sp, #0]
 8007890:	469b      	mov	fp, r3
 8007892:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8007896:	f7ff fec6 	bl	8007626 <__hexdig_fun>
 800789a:	9b00      	ldr	r3, [sp, #0]
 800789c:	f000 000f 	and.w	r0, r0, #15
 80078a0:	fa00 f00b 	lsl.w	r0, r0, fp
 80078a4:	4303      	orrs	r3, r0
 80078a6:	9300      	str	r3, [sp, #0]
 80078a8:	f10b 0b04 	add.w	fp, fp, #4
 80078ac:	9b03      	ldr	r3, [sp, #12]
 80078ae:	e00d      	b.n	80078cc <__gethex+0x27c>
 80078b0:	9b03      	ldr	r3, [sp, #12]
 80078b2:	9a06      	ldr	r2, [sp, #24]
 80078b4:	4413      	add	r3, r2
 80078b6:	42bb      	cmp	r3, r7
 80078b8:	d3e0      	bcc.n	800787c <__gethex+0x22c>
 80078ba:	4618      	mov	r0, r3
 80078bc:	9901      	ldr	r1, [sp, #4]
 80078be:	9307      	str	r3, [sp, #28]
 80078c0:	4652      	mov	r2, sl
 80078c2:	f001 f9d0 	bl	8008c66 <strncmp>
 80078c6:	9b07      	ldr	r3, [sp, #28]
 80078c8:	2800      	cmp	r0, #0
 80078ca:	d1d7      	bne.n	800787c <__gethex+0x22c>
 80078cc:	461e      	mov	r6, r3
 80078ce:	e78b      	b.n	80077e8 <__gethex+0x198>
 80078d0:	f04f 0a03 	mov.w	sl, #3
 80078d4:	e7b8      	b.n	8007848 <__gethex+0x1f8>
 80078d6:	da0a      	bge.n	80078ee <__gethex+0x29e>
 80078d8:	1a37      	subs	r7, r6, r0
 80078da:	4621      	mov	r1, r4
 80078dc:	ee18 0a10 	vmov	r0, s16
 80078e0:	463a      	mov	r2, r7
 80078e2:	f000 fcad 	bl	8008240 <__lshift>
 80078e6:	1bed      	subs	r5, r5, r7
 80078e8:	4604      	mov	r4, r0
 80078ea:	f100 0914 	add.w	r9, r0, #20
 80078ee:	f04f 0a00 	mov.w	sl, #0
 80078f2:	e7ae      	b.n	8007852 <__gethex+0x202>
 80078f4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80078f8:	42a8      	cmp	r0, r5
 80078fa:	dd72      	ble.n	80079e2 <__gethex+0x392>
 80078fc:	1b45      	subs	r5, r0, r5
 80078fe:	42ae      	cmp	r6, r5
 8007900:	dc36      	bgt.n	8007970 <__gethex+0x320>
 8007902:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007906:	2b02      	cmp	r3, #2
 8007908:	d02a      	beq.n	8007960 <__gethex+0x310>
 800790a:	2b03      	cmp	r3, #3
 800790c:	d02c      	beq.n	8007968 <__gethex+0x318>
 800790e:	2b01      	cmp	r3, #1
 8007910:	d11c      	bne.n	800794c <__gethex+0x2fc>
 8007912:	42ae      	cmp	r6, r5
 8007914:	d11a      	bne.n	800794c <__gethex+0x2fc>
 8007916:	2e01      	cmp	r6, #1
 8007918:	d112      	bne.n	8007940 <__gethex+0x2f0>
 800791a:	9a04      	ldr	r2, [sp, #16]
 800791c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007920:	6013      	str	r3, [r2, #0]
 8007922:	2301      	movs	r3, #1
 8007924:	6123      	str	r3, [r4, #16]
 8007926:	f8c9 3000 	str.w	r3, [r9]
 800792a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800792c:	2762      	movs	r7, #98	; 0x62
 800792e:	601c      	str	r4, [r3, #0]
 8007930:	e723      	b.n	800777a <__gethex+0x12a>
 8007932:	bf00      	nop
 8007934:	0800994c 	.word	0x0800994c
 8007938:	08009870 	.word	0x08009870
 800793c:	080098e4 	.word	0x080098e4
 8007940:	1e71      	subs	r1, r6, #1
 8007942:	4620      	mov	r0, r4
 8007944:	f000 fec0 	bl	80086c8 <__any_on>
 8007948:	2800      	cmp	r0, #0
 800794a:	d1e6      	bne.n	800791a <__gethex+0x2ca>
 800794c:	ee18 0a10 	vmov	r0, s16
 8007950:	4621      	mov	r1, r4
 8007952:	f000 fa59 	bl	8007e08 <_Bfree>
 8007956:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007958:	2300      	movs	r3, #0
 800795a:	6013      	str	r3, [r2, #0]
 800795c:	2750      	movs	r7, #80	; 0x50
 800795e:	e70c      	b.n	800777a <__gethex+0x12a>
 8007960:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007962:	2b00      	cmp	r3, #0
 8007964:	d1f2      	bne.n	800794c <__gethex+0x2fc>
 8007966:	e7d8      	b.n	800791a <__gethex+0x2ca>
 8007968:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800796a:	2b00      	cmp	r3, #0
 800796c:	d1d5      	bne.n	800791a <__gethex+0x2ca>
 800796e:	e7ed      	b.n	800794c <__gethex+0x2fc>
 8007970:	1e6f      	subs	r7, r5, #1
 8007972:	f1ba 0f00 	cmp.w	sl, #0
 8007976:	d131      	bne.n	80079dc <__gethex+0x38c>
 8007978:	b127      	cbz	r7, 8007984 <__gethex+0x334>
 800797a:	4639      	mov	r1, r7
 800797c:	4620      	mov	r0, r4
 800797e:	f000 fea3 	bl	80086c8 <__any_on>
 8007982:	4682      	mov	sl, r0
 8007984:	117b      	asrs	r3, r7, #5
 8007986:	2101      	movs	r1, #1
 8007988:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800798c:	f007 071f 	and.w	r7, r7, #31
 8007990:	fa01 f707 	lsl.w	r7, r1, r7
 8007994:	421f      	tst	r7, r3
 8007996:	4629      	mov	r1, r5
 8007998:	4620      	mov	r0, r4
 800799a:	bf18      	it	ne
 800799c:	f04a 0a02 	orrne.w	sl, sl, #2
 80079a0:	1b76      	subs	r6, r6, r5
 80079a2:	f7ff fdee 	bl	8007582 <rshift>
 80079a6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80079aa:	2702      	movs	r7, #2
 80079ac:	f1ba 0f00 	cmp.w	sl, #0
 80079b0:	d048      	beq.n	8007a44 <__gethex+0x3f4>
 80079b2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80079b6:	2b02      	cmp	r3, #2
 80079b8:	d015      	beq.n	80079e6 <__gethex+0x396>
 80079ba:	2b03      	cmp	r3, #3
 80079bc:	d017      	beq.n	80079ee <__gethex+0x39e>
 80079be:	2b01      	cmp	r3, #1
 80079c0:	d109      	bne.n	80079d6 <__gethex+0x386>
 80079c2:	f01a 0f02 	tst.w	sl, #2
 80079c6:	d006      	beq.n	80079d6 <__gethex+0x386>
 80079c8:	f8d9 0000 	ldr.w	r0, [r9]
 80079cc:	ea4a 0a00 	orr.w	sl, sl, r0
 80079d0:	f01a 0f01 	tst.w	sl, #1
 80079d4:	d10e      	bne.n	80079f4 <__gethex+0x3a4>
 80079d6:	f047 0710 	orr.w	r7, r7, #16
 80079da:	e033      	b.n	8007a44 <__gethex+0x3f4>
 80079dc:	f04f 0a01 	mov.w	sl, #1
 80079e0:	e7d0      	b.n	8007984 <__gethex+0x334>
 80079e2:	2701      	movs	r7, #1
 80079e4:	e7e2      	b.n	80079ac <__gethex+0x35c>
 80079e6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80079e8:	f1c3 0301 	rsb	r3, r3, #1
 80079ec:	9315      	str	r3, [sp, #84]	; 0x54
 80079ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d0f0      	beq.n	80079d6 <__gethex+0x386>
 80079f4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80079f8:	f104 0314 	add.w	r3, r4, #20
 80079fc:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007a00:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007a04:	f04f 0c00 	mov.w	ip, #0
 8007a08:	4618      	mov	r0, r3
 8007a0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a0e:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8007a12:	d01c      	beq.n	8007a4e <__gethex+0x3fe>
 8007a14:	3201      	adds	r2, #1
 8007a16:	6002      	str	r2, [r0, #0]
 8007a18:	2f02      	cmp	r7, #2
 8007a1a:	f104 0314 	add.w	r3, r4, #20
 8007a1e:	d13f      	bne.n	8007aa0 <__gethex+0x450>
 8007a20:	f8d8 2000 	ldr.w	r2, [r8]
 8007a24:	3a01      	subs	r2, #1
 8007a26:	42b2      	cmp	r2, r6
 8007a28:	d10a      	bne.n	8007a40 <__gethex+0x3f0>
 8007a2a:	1171      	asrs	r1, r6, #5
 8007a2c:	2201      	movs	r2, #1
 8007a2e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007a32:	f006 061f 	and.w	r6, r6, #31
 8007a36:	fa02 f606 	lsl.w	r6, r2, r6
 8007a3a:	421e      	tst	r6, r3
 8007a3c:	bf18      	it	ne
 8007a3e:	4617      	movne	r7, r2
 8007a40:	f047 0720 	orr.w	r7, r7, #32
 8007a44:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007a46:	601c      	str	r4, [r3, #0]
 8007a48:	9b04      	ldr	r3, [sp, #16]
 8007a4a:	601d      	str	r5, [r3, #0]
 8007a4c:	e695      	b.n	800777a <__gethex+0x12a>
 8007a4e:	4299      	cmp	r1, r3
 8007a50:	f843 cc04 	str.w	ip, [r3, #-4]
 8007a54:	d8d8      	bhi.n	8007a08 <__gethex+0x3b8>
 8007a56:	68a3      	ldr	r3, [r4, #8]
 8007a58:	459b      	cmp	fp, r3
 8007a5a:	db19      	blt.n	8007a90 <__gethex+0x440>
 8007a5c:	6861      	ldr	r1, [r4, #4]
 8007a5e:	ee18 0a10 	vmov	r0, s16
 8007a62:	3101      	adds	r1, #1
 8007a64:	f000 f990 	bl	8007d88 <_Balloc>
 8007a68:	4681      	mov	r9, r0
 8007a6a:	b918      	cbnz	r0, 8007a74 <__gethex+0x424>
 8007a6c:	4b1a      	ldr	r3, [pc, #104]	; (8007ad8 <__gethex+0x488>)
 8007a6e:	4602      	mov	r2, r0
 8007a70:	2184      	movs	r1, #132	; 0x84
 8007a72:	e6a8      	b.n	80077c6 <__gethex+0x176>
 8007a74:	6922      	ldr	r2, [r4, #16]
 8007a76:	3202      	adds	r2, #2
 8007a78:	f104 010c 	add.w	r1, r4, #12
 8007a7c:	0092      	lsls	r2, r2, #2
 8007a7e:	300c      	adds	r0, #12
 8007a80:	f000 f974 	bl	8007d6c <memcpy>
 8007a84:	4621      	mov	r1, r4
 8007a86:	ee18 0a10 	vmov	r0, s16
 8007a8a:	f000 f9bd 	bl	8007e08 <_Bfree>
 8007a8e:	464c      	mov	r4, r9
 8007a90:	6923      	ldr	r3, [r4, #16]
 8007a92:	1c5a      	adds	r2, r3, #1
 8007a94:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007a98:	6122      	str	r2, [r4, #16]
 8007a9a:	2201      	movs	r2, #1
 8007a9c:	615a      	str	r2, [r3, #20]
 8007a9e:	e7bb      	b.n	8007a18 <__gethex+0x3c8>
 8007aa0:	6922      	ldr	r2, [r4, #16]
 8007aa2:	455a      	cmp	r2, fp
 8007aa4:	dd0b      	ble.n	8007abe <__gethex+0x46e>
 8007aa6:	2101      	movs	r1, #1
 8007aa8:	4620      	mov	r0, r4
 8007aaa:	f7ff fd6a 	bl	8007582 <rshift>
 8007aae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007ab2:	3501      	adds	r5, #1
 8007ab4:	42ab      	cmp	r3, r5
 8007ab6:	f6ff aed0 	blt.w	800785a <__gethex+0x20a>
 8007aba:	2701      	movs	r7, #1
 8007abc:	e7c0      	b.n	8007a40 <__gethex+0x3f0>
 8007abe:	f016 061f 	ands.w	r6, r6, #31
 8007ac2:	d0fa      	beq.n	8007aba <__gethex+0x46a>
 8007ac4:	4453      	add	r3, sl
 8007ac6:	f1c6 0620 	rsb	r6, r6, #32
 8007aca:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8007ace:	f000 fa4d 	bl	8007f6c <__hi0bits>
 8007ad2:	42b0      	cmp	r0, r6
 8007ad4:	dbe7      	blt.n	8007aa6 <__gethex+0x456>
 8007ad6:	e7f0      	b.n	8007aba <__gethex+0x46a>
 8007ad8:	08009870 	.word	0x08009870

08007adc <L_shift>:
 8007adc:	f1c2 0208 	rsb	r2, r2, #8
 8007ae0:	0092      	lsls	r2, r2, #2
 8007ae2:	b570      	push	{r4, r5, r6, lr}
 8007ae4:	f1c2 0620 	rsb	r6, r2, #32
 8007ae8:	6843      	ldr	r3, [r0, #4]
 8007aea:	6804      	ldr	r4, [r0, #0]
 8007aec:	fa03 f506 	lsl.w	r5, r3, r6
 8007af0:	432c      	orrs	r4, r5
 8007af2:	40d3      	lsrs	r3, r2
 8007af4:	6004      	str	r4, [r0, #0]
 8007af6:	f840 3f04 	str.w	r3, [r0, #4]!
 8007afa:	4288      	cmp	r0, r1
 8007afc:	d3f4      	bcc.n	8007ae8 <L_shift+0xc>
 8007afe:	bd70      	pop	{r4, r5, r6, pc}

08007b00 <__match>:
 8007b00:	b530      	push	{r4, r5, lr}
 8007b02:	6803      	ldr	r3, [r0, #0]
 8007b04:	3301      	adds	r3, #1
 8007b06:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b0a:	b914      	cbnz	r4, 8007b12 <__match+0x12>
 8007b0c:	6003      	str	r3, [r0, #0]
 8007b0e:	2001      	movs	r0, #1
 8007b10:	bd30      	pop	{r4, r5, pc}
 8007b12:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b16:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8007b1a:	2d19      	cmp	r5, #25
 8007b1c:	bf98      	it	ls
 8007b1e:	3220      	addls	r2, #32
 8007b20:	42a2      	cmp	r2, r4
 8007b22:	d0f0      	beq.n	8007b06 <__match+0x6>
 8007b24:	2000      	movs	r0, #0
 8007b26:	e7f3      	b.n	8007b10 <__match+0x10>

08007b28 <__hexnan>:
 8007b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b2c:	680b      	ldr	r3, [r1, #0]
 8007b2e:	115e      	asrs	r6, r3, #5
 8007b30:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007b34:	f013 031f 	ands.w	r3, r3, #31
 8007b38:	b087      	sub	sp, #28
 8007b3a:	bf18      	it	ne
 8007b3c:	3604      	addne	r6, #4
 8007b3e:	2500      	movs	r5, #0
 8007b40:	1f37      	subs	r7, r6, #4
 8007b42:	4690      	mov	r8, r2
 8007b44:	6802      	ldr	r2, [r0, #0]
 8007b46:	9301      	str	r3, [sp, #4]
 8007b48:	4682      	mov	sl, r0
 8007b4a:	f846 5c04 	str.w	r5, [r6, #-4]
 8007b4e:	46b9      	mov	r9, r7
 8007b50:	463c      	mov	r4, r7
 8007b52:	9502      	str	r5, [sp, #8]
 8007b54:	46ab      	mov	fp, r5
 8007b56:	7851      	ldrb	r1, [r2, #1]
 8007b58:	1c53      	adds	r3, r2, #1
 8007b5a:	9303      	str	r3, [sp, #12]
 8007b5c:	b341      	cbz	r1, 8007bb0 <__hexnan+0x88>
 8007b5e:	4608      	mov	r0, r1
 8007b60:	9205      	str	r2, [sp, #20]
 8007b62:	9104      	str	r1, [sp, #16]
 8007b64:	f7ff fd5f 	bl	8007626 <__hexdig_fun>
 8007b68:	2800      	cmp	r0, #0
 8007b6a:	d14f      	bne.n	8007c0c <__hexnan+0xe4>
 8007b6c:	9904      	ldr	r1, [sp, #16]
 8007b6e:	9a05      	ldr	r2, [sp, #20]
 8007b70:	2920      	cmp	r1, #32
 8007b72:	d818      	bhi.n	8007ba6 <__hexnan+0x7e>
 8007b74:	9b02      	ldr	r3, [sp, #8]
 8007b76:	459b      	cmp	fp, r3
 8007b78:	dd13      	ble.n	8007ba2 <__hexnan+0x7a>
 8007b7a:	454c      	cmp	r4, r9
 8007b7c:	d206      	bcs.n	8007b8c <__hexnan+0x64>
 8007b7e:	2d07      	cmp	r5, #7
 8007b80:	dc04      	bgt.n	8007b8c <__hexnan+0x64>
 8007b82:	462a      	mov	r2, r5
 8007b84:	4649      	mov	r1, r9
 8007b86:	4620      	mov	r0, r4
 8007b88:	f7ff ffa8 	bl	8007adc <L_shift>
 8007b8c:	4544      	cmp	r4, r8
 8007b8e:	d950      	bls.n	8007c32 <__hexnan+0x10a>
 8007b90:	2300      	movs	r3, #0
 8007b92:	f1a4 0904 	sub.w	r9, r4, #4
 8007b96:	f844 3c04 	str.w	r3, [r4, #-4]
 8007b9a:	f8cd b008 	str.w	fp, [sp, #8]
 8007b9e:	464c      	mov	r4, r9
 8007ba0:	461d      	mov	r5, r3
 8007ba2:	9a03      	ldr	r2, [sp, #12]
 8007ba4:	e7d7      	b.n	8007b56 <__hexnan+0x2e>
 8007ba6:	2929      	cmp	r1, #41	; 0x29
 8007ba8:	d156      	bne.n	8007c58 <__hexnan+0x130>
 8007baa:	3202      	adds	r2, #2
 8007bac:	f8ca 2000 	str.w	r2, [sl]
 8007bb0:	f1bb 0f00 	cmp.w	fp, #0
 8007bb4:	d050      	beq.n	8007c58 <__hexnan+0x130>
 8007bb6:	454c      	cmp	r4, r9
 8007bb8:	d206      	bcs.n	8007bc8 <__hexnan+0xa0>
 8007bba:	2d07      	cmp	r5, #7
 8007bbc:	dc04      	bgt.n	8007bc8 <__hexnan+0xa0>
 8007bbe:	462a      	mov	r2, r5
 8007bc0:	4649      	mov	r1, r9
 8007bc2:	4620      	mov	r0, r4
 8007bc4:	f7ff ff8a 	bl	8007adc <L_shift>
 8007bc8:	4544      	cmp	r4, r8
 8007bca:	d934      	bls.n	8007c36 <__hexnan+0x10e>
 8007bcc:	f1a8 0204 	sub.w	r2, r8, #4
 8007bd0:	4623      	mov	r3, r4
 8007bd2:	f853 1b04 	ldr.w	r1, [r3], #4
 8007bd6:	f842 1f04 	str.w	r1, [r2, #4]!
 8007bda:	429f      	cmp	r7, r3
 8007bdc:	d2f9      	bcs.n	8007bd2 <__hexnan+0xaa>
 8007bde:	1b3b      	subs	r3, r7, r4
 8007be0:	f023 0303 	bic.w	r3, r3, #3
 8007be4:	3304      	adds	r3, #4
 8007be6:	3401      	adds	r4, #1
 8007be8:	3e03      	subs	r6, #3
 8007bea:	42b4      	cmp	r4, r6
 8007bec:	bf88      	it	hi
 8007bee:	2304      	movhi	r3, #4
 8007bf0:	4443      	add	r3, r8
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	f843 2b04 	str.w	r2, [r3], #4
 8007bf8:	429f      	cmp	r7, r3
 8007bfa:	d2fb      	bcs.n	8007bf4 <__hexnan+0xcc>
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	b91b      	cbnz	r3, 8007c08 <__hexnan+0xe0>
 8007c00:	4547      	cmp	r7, r8
 8007c02:	d127      	bne.n	8007c54 <__hexnan+0x12c>
 8007c04:	2301      	movs	r3, #1
 8007c06:	603b      	str	r3, [r7, #0]
 8007c08:	2005      	movs	r0, #5
 8007c0a:	e026      	b.n	8007c5a <__hexnan+0x132>
 8007c0c:	3501      	adds	r5, #1
 8007c0e:	2d08      	cmp	r5, #8
 8007c10:	f10b 0b01 	add.w	fp, fp, #1
 8007c14:	dd06      	ble.n	8007c24 <__hexnan+0xfc>
 8007c16:	4544      	cmp	r4, r8
 8007c18:	d9c3      	bls.n	8007ba2 <__hexnan+0x7a>
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	f844 3c04 	str.w	r3, [r4, #-4]
 8007c20:	2501      	movs	r5, #1
 8007c22:	3c04      	subs	r4, #4
 8007c24:	6822      	ldr	r2, [r4, #0]
 8007c26:	f000 000f 	and.w	r0, r0, #15
 8007c2a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8007c2e:	6022      	str	r2, [r4, #0]
 8007c30:	e7b7      	b.n	8007ba2 <__hexnan+0x7a>
 8007c32:	2508      	movs	r5, #8
 8007c34:	e7b5      	b.n	8007ba2 <__hexnan+0x7a>
 8007c36:	9b01      	ldr	r3, [sp, #4]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d0df      	beq.n	8007bfc <__hexnan+0xd4>
 8007c3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007c40:	f1c3 0320 	rsb	r3, r3, #32
 8007c44:	fa22 f303 	lsr.w	r3, r2, r3
 8007c48:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007c4c:	401a      	ands	r2, r3
 8007c4e:	f846 2c04 	str.w	r2, [r6, #-4]
 8007c52:	e7d3      	b.n	8007bfc <__hexnan+0xd4>
 8007c54:	3f04      	subs	r7, #4
 8007c56:	e7d1      	b.n	8007bfc <__hexnan+0xd4>
 8007c58:	2004      	movs	r0, #4
 8007c5a:	b007      	add	sp, #28
 8007c5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007c60 <_localeconv_r>:
 8007c60:	4800      	ldr	r0, [pc, #0]	; (8007c64 <_localeconv_r+0x4>)
 8007c62:	4770      	bx	lr
 8007c64:	20000164 	.word	0x20000164

08007c68 <__retarget_lock_init_recursive>:
 8007c68:	4770      	bx	lr

08007c6a <__retarget_lock_acquire_recursive>:
 8007c6a:	4770      	bx	lr

08007c6c <__retarget_lock_release_recursive>:
 8007c6c:	4770      	bx	lr

08007c6e <__swhatbuf_r>:
 8007c6e:	b570      	push	{r4, r5, r6, lr}
 8007c70:	460e      	mov	r6, r1
 8007c72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c76:	2900      	cmp	r1, #0
 8007c78:	b096      	sub	sp, #88	; 0x58
 8007c7a:	4614      	mov	r4, r2
 8007c7c:	461d      	mov	r5, r3
 8007c7e:	da08      	bge.n	8007c92 <__swhatbuf_r+0x24>
 8007c80:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007c84:	2200      	movs	r2, #0
 8007c86:	602a      	str	r2, [r5, #0]
 8007c88:	061a      	lsls	r2, r3, #24
 8007c8a:	d410      	bmi.n	8007cae <__swhatbuf_r+0x40>
 8007c8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007c90:	e00e      	b.n	8007cb0 <__swhatbuf_r+0x42>
 8007c92:	466a      	mov	r2, sp
 8007c94:	f001 f85a 	bl	8008d4c <_fstat_r>
 8007c98:	2800      	cmp	r0, #0
 8007c9a:	dbf1      	blt.n	8007c80 <__swhatbuf_r+0x12>
 8007c9c:	9a01      	ldr	r2, [sp, #4]
 8007c9e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007ca2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007ca6:	425a      	negs	r2, r3
 8007ca8:	415a      	adcs	r2, r3
 8007caa:	602a      	str	r2, [r5, #0]
 8007cac:	e7ee      	b.n	8007c8c <__swhatbuf_r+0x1e>
 8007cae:	2340      	movs	r3, #64	; 0x40
 8007cb0:	2000      	movs	r0, #0
 8007cb2:	6023      	str	r3, [r4, #0]
 8007cb4:	b016      	add	sp, #88	; 0x58
 8007cb6:	bd70      	pop	{r4, r5, r6, pc}

08007cb8 <__smakebuf_r>:
 8007cb8:	898b      	ldrh	r3, [r1, #12]
 8007cba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007cbc:	079d      	lsls	r5, r3, #30
 8007cbe:	4606      	mov	r6, r0
 8007cc0:	460c      	mov	r4, r1
 8007cc2:	d507      	bpl.n	8007cd4 <__smakebuf_r+0x1c>
 8007cc4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007cc8:	6023      	str	r3, [r4, #0]
 8007cca:	6123      	str	r3, [r4, #16]
 8007ccc:	2301      	movs	r3, #1
 8007cce:	6163      	str	r3, [r4, #20]
 8007cd0:	b002      	add	sp, #8
 8007cd2:	bd70      	pop	{r4, r5, r6, pc}
 8007cd4:	ab01      	add	r3, sp, #4
 8007cd6:	466a      	mov	r2, sp
 8007cd8:	f7ff ffc9 	bl	8007c6e <__swhatbuf_r>
 8007cdc:	9900      	ldr	r1, [sp, #0]
 8007cde:	4605      	mov	r5, r0
 8007ce0:	4630      	mov	r0, r6
 8007ce2:	f000 fd95 	bl	8008810 <_malloc_r>
 8007ce6:	b948      	cbnz	r0, 8007cfc <__smakebuf_r+0x44>
 8007ce8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007cec:	059a      	lsls	r2, r3, #22
 8007cee:	d4ef      	bmi.n	8007cd0 <__smakebuf_r+0x18>
 8007cf0:	f023 0303 	bic.w	r3, r3, #3
 8007cf4:	f043 0302 	orr.w	r3, r3, #2
 8007cf8:	81a3      	strh	r3, [r4, #12]
 8007cfa:	e7e3      	b.n	8007cc4 <__smakebuf_r+0xc>
 8007cfc:	4b0d      	ldr	r3, [pc, #52]	; (8007d34 <__smakebuf_r+0x7c>)
 8007cfe:	62b3      	str	r3, [r6, #40]	; 0x28
 8007d00:	89a3      	ldrh	r3, [r4, #12]
 8007d02:	6020      	str	r0, [r4, #0]
 8007d04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d08:	81a3      	strh	r3, [r4, #12]
 8007d0a:	9b00      	ldr	r3, [sp, #0]
 8007d0c:	6163      	str	r3, [r4, #20]
 8007d0e:	9b01      	ldr	r3, [sp, #4]
 8007d10:	6120      	str	r0, [r4, #16]
 8007d12:	b15b      	cbz	r3, 8007d2c <__smakebuf_r+0x74>
 8007d14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007d18:	4630      	mov	r0, r6
 8007d1a:	f001 f829 	bl	8008d70 <_isatty_r>
 8007d1e:	b128      	cbz	r0, 8007d2c <__smakebuf_r+0x74>
 8007d20:	89a3      	ldrh	r3, [r4, #12]
 8007d22:	f023 0303 	bic.w	r3, r3, #3
 8007d26:	f043 0301 	orr.w	r3, r3, #1
 8007d2a:	81a3      	strh	r3, [r4, #12]
 8007d2c:	89a0      	ldrh	r0, [r4, #12]
 8007d2e:	4305      	orrs	r5, r0
 8007d30:	81a5      	strh	r5, [r4, #12]
 8007d32:	e7cd      	b.n	8007cd0 <__smakebuf_r+0x18>
 8007d34:	080073e1 	.word	0x080073e1

08007d38 <malloc>:
 8007d38:	4b02      	ldr	r3, [pc, #8]	; (8007d44 <malloc+0xc>)
 8007d3a:	4601      	mov	r1, r0
 8007d3c:	6818      	ldr	r0, [r3, #0]
 8007d3e:	f000 bd67 	b.w	8008810 <_malloc_r>
 8007d42:	bf00      	nop
 8007d44:	2000000c 	.word	0x2000000c

08007d48 <__ascii_mbtowc>:
 8007d48:	b082      	sub	sp, #8
 8007d4a:	b901      	cbnz	r1, 8007d4e <__ascii_mbtowc+0x6>
 8007d4c:	a901      	add	r1, sp, #4
 8007d4e:	b142      	cbz	r2, 8007d62 <__ascii_mbtowc+0x1a>
 8007d50:	b14b      	cbz	r3, 8007d66 <__ascii_mbtowc+0x1e>
 8007d52:	7813      	ldrb	r3, [r2, #0]
 8007d54:	600b      	str	r3, [r1, #0]
 8007d56:	7812      	ldrb	r2, [r2, #0]
 8007d58:	1e10      	subs	r0, r2, #0
 8007d5a:	bf18      	it	ne
 8007d5c:	2001      	movne	r0, #1
 8007d5e:	b002      	add	sp, #8
 8007d60:	4770      	bx	lr
 8007d62:	4610      	mov	r0, r2
 8007d64:	e7fb      	b.n	8007d5e <__ascii_mbtowc+0x16>
 8007d66:	f06f 0001 	mvn.w	r0, #1
 8007d6a:	e7f8      	b.n	8007d5e <__ascii_mbtowc+0x16>

08007d6c <memcpy>:
 8007d6c:	440a      	add	r2, r1
 8007d6e:	4291      	cmp	r1, r2
 8007d70:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007d74:	d100      	bne.n	8007d78 <memcpy+0xc>
 8007d76:	4770      	bx	lr
 8007d78:	b510      	push	{r4, lr}
 8007d7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d7e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d82:	4291      	cmp	r1, r2
 8007d84:	d1f9      	bne.n	8007d7a <memcpy+0xe>
 8007d86:	bd10      	pop	{r4, pc}

08007d88 <_Balloc>:
 8007d88:	b570      	push	{r4, r5, r6, lr}
 8007d8a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007d8c:	4604      	mov	r4, r0
 8007d8e:	460d      	mov	r5, r1
 8007d90:	b976      	cbnz	r6, 8007db0 <_Balloc+0x28>
 8007d92:	2010      	movs	r0, #16
 8007d94:	f7ff ffd0 	bl	8007d38 <malloc>
 8007d98:	4602      	mov	r2, r0
 8007d9a:	6260      	str	r0, [r4, #36]	; 0x24
 8007d9c:	b920      	cbnz	r0, 8007da8 <_Balloc+0x20>
 8007d9e:	4b18      	ldr	r3, [pc, #96]	; (8007e00 <_Balloc+0x78>)
 8007da0:	4818      	ldr	r0, [pc, #96]	; (8007e04 <_Balloc+0x7c>)
 8007da2:	2166      	movs	r1, #102	; 0x66
 8007da4:	f000 ff92 	bl	8008ccc <__assert_func>
 8007da8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007dac:	6006      	str	r6, [r0, #0]
 8007dae:	60c6      	str	r6, [r0, #12]
 8007db0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007db2:	68f3      	ldr	r3, [r6, #12]
 8007db4:	b183      	cbz	r3, 8007dd8 <_Balloc+0x50>
 8007db6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007db8:	68db      	ldr	r3, [r3, #12]
 8007dba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007dbe:	b9b8      	cbnz	r0, 8007df0 <_Balloc+0x68>
 8007dc0:	2101      	movs	r1, #1
 8007dc2:	fa01 f605 	lsl.w	r6, r1, r5
 8007dc6:	1d72      	adds	r2, r6, #5
 8007dc8:	0092      	lsls	r2, r2, #2
 8007dca:	4620      	mov	r0, r4
 8007dcc:	f000 fc9d 	bl	800870a <_calloc_r>
 8007dd0:	b160      	cbz	r0, 8007dec <_Balloc+0x64>
 8007dd2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007dd6:	e00e      	b.n	8007df6 <_Balloc+0x6e>
 8007dd8:	2221      	movs	r2, #33	; 0x21
 8007dda:	2104      	movs	r1, #4
 8007ddc:	4620      	mov	r0, r4
 8007dde:	f000 fc94 	bl	800870a <_calloc_r>
 8007de2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007de4:	60f0      	str	r0, [r6, #12]
 8007de6:	68db      	ldr	r3, [r3, #12]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d1e4      	bne.n	8007db6 <_Balloc+0x2e>
 8007dec:	2000      	movs	r0, #0
 8007dee:	bd70      	pop	{r4, r5, r6, pc}
 8007df0:	6802      	ldr	r2, [r0, #0]
 8007df2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007df6:	2300      	movs	r3, #0
 8007df8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007dfc:	e7f7      	b.n	8007dee <_Balloc+0x66>
 8007dfe:	bf00      	nop
 8007e00:	080097fe 	.word	0x080097fe
 8007e04:	08009960 	.word	0x08009960

08007e08 <_Bfree>:
 8007e08:	b570      	push	{r4, r5, r6, lr}
 8007e0a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007e0c:	4605      	mov	r5, r0
 8007e0e:	460c      	mov	r4, r1
 8007e10:	b976      	cbnz	r6, 8007e30 <_Bfree+0x28>
 8007e12:	2010      	movs	r0, #16
 8007e14:	f7ff ff90 	bl	8007d38 <malloc>
 8007e18:	4602      	mov	r2, r0
 8007e1a:	6268      	str	r0, [r5, #36]	; 0x24
 8007e1c:	b920      	cbnz	r0, 8007e28 <_Bfree+0x20>
 8007e1e:	4b09      	ldr	r3, [pc, #36]	; (8007e44 <_Bfree+0x3c>)
 8007e20:	4809      	ldr	r0, [pc, #36]	; (8007e48 <_Bfree+0x40>)
 8007e22:	218a      	movs	r1, #138	; 0x8a
 8007e24:	f000 ff52 	bl	8008ccc <__assert_func>
 8007e28:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007e2c:	6006      	str	r6, [r0, #0]
 8007e2e:	60c6      	str	r6, [r0, #12]
 8007e30:	b13c      	cbz	r4, 8007e42 <_Bfree+0x3a>
 8007e32:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007e34:	6862      	ldr	r2, [r4, #4]
 8007e36:	68db      	ldr	r3, [r3, #12]
 8007e38:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007e3c:	6021      	str	r1, [r4, #0]
 8007e3e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007e42:	bd70      	pop	{r4, r5, r6, pc}
 8007e44:	080097fe 	.word	0x080097fe
 8007e48:	08009960 	.word	0x08009960

08007e4c <__multadd>:
 8007e4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e50:	690d      	ldr	r5, [r1, #16]
 8007e52:	4607      	mov	r7, r0
 8007e54:	460c      	mov	r4, r1
 8007e56:	461e      	mov	r6, r3
 8007e58:	f101 0c14 	add.w	ip, r1, #20
 8007e5c:	2000      	movs	r0, #0
 8007e5e:	f8dc 3000 	ldr.w	r3, [ip]
 8007e62:	b299      	uxth	r1, r3
 8007e64:	fb02 6101 	mla	r1, r2, r1, r6
 8007e68:	0c1e      	lsrs	r6, r3, #16
 8007e6a:	0c0b      	lsrs	r3, r1, #16
 8007e6c:	fb02 3306 	mla	r3, r2, r6, r3
 8007e70:	b289      	uxth	r1, r1
 8007e72:	3001      	adds	r0, #1
 8007e74:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007e78:	4285      	cmp	r5, r0
 8007e7a:	f84c 1b04 	str.w	r1, [ip], #4
 8007e7e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007e82:	dcec      	bgt.n	8007e5e <__multadd+0x12>
 8007e84:	b30e      	cbz	r6, 8007eca <__multadd+0x7e>
 8007e86:	68a3      	ldr	r3, [r4, #8]
 8007e88:	42ab      	cmp	r3, r5
 8007e8a:	dc19      	bgt.n	8007ec0 <__multadd+0x74>
 8007e8c:	6861      	ldr	r1, [r4, #4]
 8007e8e:	4638      	mov	r0, r7
 8007e90:	3101      	adds	r1, #1
 8007e92:	f7ff ff79 	bl	8007d88 <_Balloc>
 8007e96:	4680      	mov	r8, r0
 8007e98:	b928      	cbnz	r0, 8007ea6 <__multadd+0x5a>
 8007e9a:	4602      	mov	r2, r0
 8007e9c:	4b0c      	ldr	r3, [pc, #48]	; (8007ed0 <__multadd+0x84>)
 8007e9e:	480d      	ldr	r0, [pc, #52]	; (8007ed4 <__multadd+0x88>)
 8007ea0:	21b5      	movs	r1, #181	; 0xb5
 8007ea2:	f000 ff13 	bl	8008ccc <__assert_func>
 8007ea6:	6922      	ldr	r2, [r4, #16]
 8007ea8:	3202      	adds	r2, #2
 8007eaa:	f104 010c 	add.w	r1, r4, #12
 8007eae:	0092      	lsls	r2, r2, #2
 8007eb0:	300c      	adds	r0, #12
 8007eb2:	f7ff ff5b 	bl	8007d6c <memcpy>
 8007eb6:	4621      	mov	r1, r4
 8007eb8:	4638      	mov	r0, r7
 8007eba:	f7ff ffa5 	bl	8007e08 <_Bfree>
 8007ebe:	4644      	mov	r4, r8
 8007ec0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007ec4:	3501      	adds	r5, #1
 8007ec6:	615e      	str	r6, [r3, #20]
 8007ec8:	6125      	str	r5, [r4, #16]
 8007eca:	4620      	mov	r0, r4
 8007ecc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ed0:	08009870 	.word	0x08009870
 8007ed4:	08009960 	.word	0x08009960

08007ed8 <__s2b>:
 8007ed8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007edc:	460c      	mov	r4, r1
 8007ede:	4615      	mov	r5, r2
 8007ee0:	461f      	mov	r7, r3
 8007ee2:	2209      	movs	r2, #9
 8007ee4:	3308      	adds	r3, #8
 8007ee6:	4606      	mov	r6, r0
 8007ee8:	fb93 f3f2 	sdiv	r3, r3, r2
 8007eec:	2100      	movs	r1, #0
 8007eee:	2201      	movs	r2, #1
 8007ef0:	429a      	cmp	r2, r3
 8007ef2:	db09      	blt.n	8007f08 <__s2b+0x30>
 8007ef4:	4630      	mov	r0, r6
 8007ef6:	f7ff ff47 	bl	8007d88 <_Balloc>
 8007efa:	b940      	cbnz	r0, 8007f0e <__s2b+0x36>
 8007efc:	4602      	mov	r2, r0
 8007efe:	4b19      	ldr	r3, [pc, #100]	; (8007f64 <__s2b+0x8c>)
 8007f00:	4819      	ldr	r0, [pc, #100]	; (8007f68 <__s2b+0x90>)
 8007f02:	21ce      	movs	r1, #206	; 0xce
 8007f04:	f000 fee2 	bl	8008ccc <__assert_func>
 8007f08:	0052      	lsls	r2, r2, #1
 8007f0a:	3101      	adds	r1, #1
 8007f0c:	e7f0      	b.n	8007ef0 <__s2b+0x18>
 8007f0e:	9b08      	ldr	r3, [sp, #32]
 8007f10:	6143      	str	r3, [r0, #20]
 8007f12:	2d09      	cmp	r5, #9
 8007f14:	f04f 0301 	mov.w	r3, #1
 8007f18:	6103      	str	r3, [r0, #16]
 8007f1a:	dd16      	ble.n	8007f4a <__s2b+0x72>
 8007f1c:	f104 0909 	add.w	r9, r4, #9
 8007f20:	46c8      	mov	r8, r9
 8007f22:	442c      	add	r4, r5
 8007f24:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007f28:	4601      	mov	r1, r0
 8007f2a:	3b30      	subs	r3, #48	; 0x30
 8007f2c:	220a      	movs	r2, #10
 8007f2e:	4630      	mov	r0, r6
 8007f30:	f7ff ff8c 	bl	8007e4c <__multadd>
 8007f34:	45a0      	cmp	r8, r4
 8007f36:	d1f5      	bne.n	8007f24 <__s2b+0x4c>
 8007f38:	f1a5 0408 	sub.w	r4, r5, #8
 8007f3c:	444c      	add	r4, r9
 8007f3e:	1b2d      	subs	r5, r5, r4
 8007f40:	1963      	adds	r3, r4, r5
 8007f42:	42bb      	cmp	r3, r7
 8007f44:	db04      	blt.n	8007f50 <__s2b+0x78>
 8007f46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f4a:	340a      	adds	r4, #10
 8007f4c:	2509      	movs	r5, #9
 8007f4e:	e7f6      	b.n	8007f3e <__s2b+0x66>
 8007f50:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007f54:	4601      	mov	r1, r0
 8007f56:	3b30      	subs	r3, #48	; 0x30
 8007f58:	220a      	movs	r2, #10
 8007f5a:	4630      	mov	r0, r6
 8007f5c:	f7ff ff76 	bl	8007e4c <__multadd>
 8007f60:	e7ee      	b.n	8007f40 <__s2b+0x68>
 8007f62:	bf00      	nop
 8007f64:	08009870 	.word	0x08009870
 8007f68:	08009960 	.word	0x08009960

08007f6c <__hi0bits>:
 8007f6c:	0c03      	lsrs	r3, r0, #16
 8007f6e:	041b      	lsls	r3, r3, #16
 8007f70:	b9d3      	cbnz	r3, 8007fa8 <__hi0bits+0x3c>
 8007f72:	0400      	lsls	r0, r0, #16
 8007f74:	2310      	movs	r3, #16
 8007f76:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007f7a:	bf04      	itt	eq
 8007f7c:	0200      	lsleq	r0, r0, #8
 8007f7e:	3308      	addeq	r3, #8
 8007f80:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007f84:	bf04      	itt	eq
 8007f86:	0100      	lsleq	r0, r0, #4
 8007f88:	3304      	addeq	r3, #4
 8007f8a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007f8e:	bf04      	itt	eq
 8007f90:	0080      	lsleq	r0, r0, #2
 8007f92:	3302      	addeq	r3, #2
 8007f94:	2800      	cmp	r0, #0
 8007f96:	db05      	blt.n	8007fa4 <__hi0bits+0x38>
 8007f98:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007f9c:	f103 0301 	add.w	r3, r3, #1
 8007fa0:	bf08      	it	eq
 8007fa2:	2320      	moveq	r3, #32
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	4770      	bx	lr
 8007fa8:	2300      	movs	r3, #0
 8007faa:	e7e4      	b.n	8007f76 <__hi0bits+0xa>

08007fac <__lo0bits>:
 8007fac:	6803      	ldr	r3, [r0, #0]
 8007fae:	f013 0207 	ands.w	r2, r3, #7
 8007fb2:	4601      	mov	r1, r0
 8007fb4:	d00b      	beq.n	8007fce <__lo0bits+0x22>
 8007fb6:	07da      	lsls	r2, r3, #31
 8007fb8:	d423      	bmi.n	8008002 <__lo0bits+0x56>
 8007fba:	0798      	lsls	r0, r3, #30
 8007fbc:	bf49      	itett	mi
 8007fbe:	085b      	lsrmi	r3, r3, #1
 8007fc0:	089b      	lsrpl	r3, r3, #2
 8007fc2:	2001      	movmi	r0, #1
 8007fc4:	600b      	strmi	r3, [r1, #0]
 8007fc6:	bf5c      	itt	pl
 8007fc8:	600b      	strpl	r3, [r1, #0]
 8007fca:	2002      	movpl	r0, #2
 8007fcc:	4770      	bx	lr
 8007fce:	b298      	uxth	r0, r3
 8007fd0:	b9a8      	cbnz	r0, 8007ffe <__lo0bits+0x52>
 8007fd2:	0c1b      	lsrs	r3, r3, #16
 8007fd4:	2010      	movs	r0, #16
 8007fd6:	b2da      	uxtb	r2, r3
 8007fd8:	b90a      	cbnz	r2, 8007fde <__lo0bits+0x32>
 8007fda:	3008      	adds	r0, #8
 8007fdc:	0a1b      	lsrs	r3, r3, #8
 8007fde:	071a      	lsls	r2, r3, #28
 8007fe0:	bf04      	itt	eq
 8007fe2:	091b      	lsreq	r3, r3, #4
 8007fe4:	3004      	addeq	r0, #4
 8007fe6:	079a      	lsls	r2, r3, #30
 8007fe8:	bf04      	itt	eq
 8007fea:	089b      	lsreq	r3, r3, #2
 8007fec:	3002      	addeq	r0, #2
 8007fee:	07da      	lsls	r2, r3, #31
 8007ff0:	d403      	bmi.n	8007ffa <__lo0bits+0x4e>
 8007ff2:	085b      	lsrs	r3, r3, #1
 8007ff4:	f100 0001 	add.w	r0, r0, #1
 8007ff8:	d005      	beq.n	8008006 <__lo0bits+0x5a>
 8007ffa:	600b      	str	r3, [r1, #0]
 8007ffc:	4770      	bx	lr
 8007ffe:	4610      	mov	r0, r2
 8008000:	e7e9      	b.n	8007fd6 <__lo0bits+0x2a>
 8008002:	2000      	movs	r0, #0
 8008004:	4770      	bx	lr
 8008006:	2020      	movs	r0, #32
 8008008:	4770      	bx	lr
	...

0800800c <__i2b>:
 800800c:	b510      	push	{r4, lr}
 800800e:	460c      	mov	r4, r1
 8008010:	2101      	movs	r1, #1
 8008012:	f7ff feb9 	bl	8007d88 <_Balloc>
 8008016:	4602      	mov	r2, r0
 8008018:	b928      	cbnz	r0, 8008026 <__i2b+0x1a>
 800801a:	4b05      	ldr	r3, [pc, #20]	; (8008030 <__i2b+0x24>)
 800801c:	4805      	ldr	r0, [pc, #20]	; (8008034 <__i2b+0x28>)
 800801e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008022:	f000 fe53 	bl	8008ccc <__assert_func>
 8008026:	2301      	movs	r3, #1
 8008028:	6144      	str	r4, [r0, #20]
 800802a:	6103      	str	r3, [r0, #16]
 800802c:	bd10      	pop	{r4, pc}
 800802e:	bf00      	nop
 8008030:	08009870 	.word	0x08009870
 8008034:	08009960 	.word	0x08009960

08008038 <__multiply>:
 8008038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800803c:	4691      	mov	r9, r2
 800803e:	690a      	ldr	r2, [r1, #16]
 8008040:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008044:	429a      	cmp	r2, r3
 8008046:	bfb8      	it	lt
 8008048:	460b      	movlt	r3, r1
 800804a:	460c      	mov	r4, r1
 800804c:	bfbc      	itt	lt
 800804e:	464c      	movlt	r4, r9
 8008050:	4699      	movlt	r9, r3
 8008052:	6927      	ldr	r7, [r4, #16]
 8008054:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008058:	68a3      	ldr	r3, [r4, #8]
 800805a:	6861      	ldr	r1, [r4, #4]
 800805c:	eb07 060a 	add.w	r6, r7, sl
 8008060:	42b3      	cmp	r3, r6
 8008062:	b085      	sub	sp, #20
 8008064:	bfb8      	it	lt
 8008066:	3101      	addlt	r1, #1
 8008068:	f7ff fe8e 	bl	8007d88 <_Balloc>
 800806c:	b930      	cbnz	r0, 800807c <__multiply+0x44>
 800806e:	4602      	mov	r2, r0
 8008070:	4b44      	ldr	r3, [pc, #272]	; (8008184 <__multiply+0x14c>)
 8008072:	4845      	ldr	r0, [pc, #276]	; (8008188 <__multiply+0x150>)
 8008074:	f240 115d 	movw	r1, #349	; 0x15d
 8008078:	f000 fe28 	bl	8008ccc <__assert_func>
 800807c:	f100 0514 	add.w	r5, r0, #20
 8008080:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008084:	462b      	mov	r3, r5
 8008086:	2200      	movs	r2, #0
 8008088:	4543      	cmp	r3, r8
 800808a:	d321      	bcc.n	80080d0 <__multiply+0x98>
 800808c:	f104 0314 	add.w	r3, r4, #20
 8008090:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008094:	f109 0314 	add.w	r3, r9, #20
 8008098:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800809c:	9202      	str	r2, [sp, #8]
 800809e:	1b3a      	subs	r2, r7, r4
 80080a0:	3a15      	subs	r2, #21
 80080a2:	f022 0203 	bic.w	r2, r2, #3
 80080a6:	3204      	adds	r2, #4
 80080a8:	f104 0115 	add.w	r1, r4, #21
 80080ac:	428f      	cmp	r7, r1
 80080ae:	bf38      	it	cc
 80080b0:	2204      	movcc	r2, #4
 80080b2:	9201      	str	r2, [sp, #4]
 80080b4:	9a02      	ldr	r2, [sp, #8]
 80080b6:	9303      	str	r3, [sp, #12]
 80080b8:	429a      	cmp	r2, r3
 80080ba:	d80c      	bhi.n	80080d6 <__multiply+0x9e>
 80080bc:	2e00      	cmp	r6, #0
 80080be:	dd03      	ble.n	80080c8 <__multiply+0x90>
 80080c0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d05a      	beq.n	800817e <__multiply+0x146>
 80080c8:	6106      	str	r6, [r0, #16]
 80080ca:	b005      	add	sp, #20
 80080cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080d0:	f843 2b04 	str.w	r2, [r3], #4
 80080d4:	e7d8      	b.n	8008088 <__multiply+0x50>
 80080d6:	f8b3 a000 	ldrh.w	sl, [r3]
 80080da:	f1ba 0f00 	cmp.w	sl, #0
 80080de:	d024      	beq.n	800812a <__multiply+0xf2>
 80080e0:	f104 0e14 	add.w	lr, r4, #20
 80080e4:	46a9      	mov	r9, r5
 80080e6:	f04f 0c00 	mov.w	ip, #0
 80080ea:	f85e 2b04 	ldr.w	r2, [lr], #4
 80080ee:	f8d9 1000 	ldr.w	r1, [r9]
 80080f2:	fa1f fb82 	uxth.w	fp, r2
 80080f6:	b289      	uxth	r1, r1
 80080f8:	fb0a 110b 	mla	r1, sl, fp, r1
 80080fc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008100:	f8d9 2000 	ldr.w	r2, [r9]
 8008104:	4461      	add	r1, ip
 8008106:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800810a:	fb0a c20b 	mla	r2, sl, fp, ip
 800810e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008112:	b289      	uxth	r1, r1
 8008114:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008118:	4577      	cmp	r7, lr
 800811a:	f849 1b04 	str.w	r1, [r9], #4
 800811e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008122:	d8e2      	bhi.n	80080ea <__multiply+0xb2>
 8008124:	9a01      	ldr	r2, [sp, #4]
 8008126:	f845 c002 	str.w	ip, [r5, r2]
 800812a:	9a03      	ldr	r2, [sp, #12]
 800812c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008130:	3304      	adds	r3, #4
 8008132:	f1b9 0f00 	cmp.w	r9, #0
 8008136:	d020      	beq.n	800817a <__multiply+0x142>
 8008138:	6829      	ldr	r1, [r5, #0]
 800813a:	f104 0c14 	add.w	ip, r4, #20
 800813e:	46ae      	mov	lr, r5
 8008140:	f04f 0a00 	mov.w	sl, #0
 8008144:	f8bc b000 	ldrh.w	fp, [ip]
 8008148:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800814c:	fb09 220b 	mla	r2, r9, fp, r2
 8008150:	4492      	add	sl, r2
 8008152:	b289      	uxth	r1, r1
 8008154:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008158:	f84e 1b04 	str.w	r1, [lr], #4
 800815c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008160:	f8be 1000 	ldrh.w	r1, [lr]
 8008164:	0c12      	lsrs	r2, r2, #16
 8008166:	fb09 1102 	mla	r1, r9, r2, r1
 800816a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800816e:	4567      	cmp	r7, ip
 8008170:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008174:	d8e6      	bhi.n	8008144 <__multiply+0x10c>
 8008176:	9a01      	ldr	r2, [sp, #4]
 8008178:	50a9      	str	r1, [r5, r2]
 800817a:	3504      	adds	r5, #4
 800817c:	e79a      	b.n	80080b4 <__multiply+0x7c>
 800817e:	3e01      	subs	r6, #1
 8008180:	e79c      	b.n	80080bc <__multiply+0x84>
 8008182:	bf00      	nop
 8008184:	08009870 	.word	0x08009870
 8008188:	08009960 	.word	0x08009960

0800818c <__pow5mult>:
 800818c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008190:	4615      	mov	r5, r2
 8008192:	f012 0203 	ands.w	r2, r2, #3
 8008196:	4606      	mov	r6, r0
 8008198:	460f      	mov	r7, r1
 800819a:	d007      	beq.n	80081ac <__pow5mult+0x20>
 800819c:	4c25      	ldr	r4, [pc, #148]	; (8008234 <__pow5mult+0xa8>)
 800819e:	3a01      	subs	r2, #1
 80081a0:	2300      	movs	r3, #0
 80081a2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80081a6:	f7ff fe51 	bl	8007e4c <__multadd>
 80081aa:	4607      	mov	r7, r0
 80081ac:	10ad      	asrs	r5, r5, #2
 80081ae:	d03d      	beq.n	800822c <__pow5mult+0xa0>
 80081b0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80081b2:	b97c      	cbnz	r4, 80081d4 <__pow5mult+0x48>
 80081b4:	2010      	movs	r0, #16
 80081b6:	f7ff fdbf 	bl	8007d38 <malloc>
 80081ba:	4602      	mov	r2, r0
 80081bc:	6270      	str	r0, [r6, #36]	; 0x24
 80081be:	b928      	cbnz	r0, 80081cc <__pow5mult+0x40>
 80081c0:	4b1d      	ldr	r3, [pc, #116]	; (8008238 <__pow5mult+0xac>)
 80081c2:	481e      	ldr	r0, [pc, #120]	; (800823c <__pow5mult+0xb0>)
 80081c4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80081c8:	f000 fd80 	bl	8008ccc <__assert_func>
 80081cc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80081d0:	6004      	str	r4, [r0, #0]
 80081d2:	60c4      	str	r4, [r0, #12]
 80081d4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80081d8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80081dc:	b94c      	cbnz	r4, 80081f2 <__pow5mult+0x66>
 80081de:	f240 2171 	movw	r1, #625	; 0x271
 80081e2:	4630      	mov	r0, r6
 80081e4:	f7ff ff12 	bl	800800c <__i2b>
 80081e8:	2300      	movs	r3, #0
 80081ea:	f8c8 0008 	str.w	r0, [r8, #8]
 80081ee:	4604      	mov	r4, r0
 80081f0:	6003      	str	r3, [r0, #0]
 80081f2:	f04f 0900 	mov.w	r9, #0
 80081f6:	07eb      	lsls	r3, r5, #31
 80081f8:	d50a      	bpl.n	8008210 <__pow5mult+0x84>
 80081fa:	4639      	mov	r1, r7
 80081fc:	4622      	mov	r2, r4
 80081fe:	4630      	mov	r0, r6
 8008200:	f7ff ff1a 	bl	8008038 <__multiply>
 8008204:	4639      	mov	r1, r7
 8008206:	4680      	mov	r8, r0
 8008208:	4630      	mov	r0, r6
 800820a:	f7ff fdfd 	bl	8007e08 <_Bfree>
 800820e:	4647      	mov	r7, r8
 8008210:	106d      	asrs	r5, r5, #1
 8008212:	d00b      	beq.n	800822c <__pow5mult+0xa0>
 8008214:	6820      	ldr	r0, [r4, #0]
 8008216:	b938      	cbnz	r0, 8008228 <__pow5mult+0x9c>
 8008218:	4622      	mov	r2, r4
 800821a:	4621      	mov	r1, r4
 800821c:	4630      	mov	r0, r6
 800821e:	f7ff ff0b 	bl	8008038 <__multiply>
 8008222:	6020      	str	r0, [r4, #0]
 8008224:	f8c0 9000 	str.w	r9, [r0]
 8008228:	4604      	mov	r4, r0
 800822a:	e7e4      	b.n	80081f6 <__pow5mult+0x6a>
 800822c:	4638      	mov	r0, r7
 800822e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008232:	bf00      	nop
 8008234:	08009ab0 	.word	0x08009ab0
 8008238:	080097fe 	.word	0x080097fe
 800823c:	08009960 	.word	0x08009960

08008240 <__lshift>:
 8008240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008244:	460c      	mov	r4, r1
 8008246:	6849      	ldr	r1, [r1, #4]
 8008248:	6923      	ldr	r3, [r4, #16]
 800824a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800824e:	68a3      	ldr	r3, [r4, #8]
 8008250:	4607      	mov	r7, r0
 8008252:	4691      	mov	r9, r2
 8008254:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008258:	f108 0601 	add.w	r6, r8, #1
 800825c:	42b3      	cmp	r3, r6
 800825e:	db0b      	blt.n	8008278 <__lshift+0x38>
 8008260:	4638      	mov	r0, r7
 8008262:	f7ff fd91 	bl	8007d88 <_Balloc>
 8008266:	4605      	mov	r5, r0
 8008268:	b948      	cbnz	r0, 800827e <__lshift+0x3e>
 800826a:	4602      	mov	r2, r0
 800826c:	4b2a      	ldr	r3, [pc, #168]	; (8008318 <__lshift+0xd8>)
 800826e:	482b      	ldr	r0, [pc, #172]	; (800831c <__lshift+0xdc>)
 8008270:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008274:	f000 fd2a 	bl	8008ccc <__assert_func>
 8008278:	3101      	adds	r1, #1
 800827a:	005b      	lsls	r3, r3, #1
 800827c:	e7ee      	b.n	800825c <__lshift+0x1c>
 800827e:	2300      	movs	r3, #0
 8008280:	f100 0114 	add.w	r1, r0, #20
 8008284:	f100 0210 	add.w	r2, r0, #16
 8008288:	4618      	mov	r0, r3
 800828a:	4553      	cmp	r3, sl
 800828c:	db37      	blt.n	80082fe <__lshift+0xbe>
 800828e:	6920      	ldr	r0, [r4, #16]
 8008290:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008294:	f104 0314 	add.w	r3, r4, #20
 8008298:	f019 091f 	ands.w	r9, r9, #31
 800829c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80082a0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80082a4:	d02f      	beq.n	8008306 <__lshift+0xc6>
 80082a6:	f1c9 0e20 	rsb	lr, r9, #32
 80082aa:	468a      	mov	sl, r1
 80082ac:	f04f 0c00 	mov.w	ip, #0
 80082b0:	681a      	ldr	r2, [r3, #0]
 80082b2:	fa02 f209 	lsl.w	r2, r2, r9
 80082b6:	ea42 020c 	orr.w	r2, r2, ip
 80082ba:	f84a 2b04 	str.w	r2, [sl], #4
 80082be:	f853 2b04 	ldr.w	r2, [r3], #4
 80082c2:	4298      	cmp	r0, r3
 80082c4:	fa22 fc0e 	lsr.w	ip, r2, lr
 80082c8:	d8f2      	bhi.n	80082b0 <__lshift+0x70>
 80082ca:	1b03      	subs	r3, r0, r4
 80082cc:	3b15      	subs	r3, #21
 80082ce:	f023 0303 	bic.w	r3, r3, #3
 80082d2:	3304      	adds	r3, #4
 80082d4:	f104 0215 	add.w	r2, r4, #21
 80082d8:	4290      	cmp	r0, r2
 80082da:	bf38      	it	cc
 80082dc:	2304      	movcc	r3, #4
 80082de:	f841 c003 	str.w	ip, [r1, r3]
 80082e2:	f1bc 0f00 	cmp.w	ip, #0
 80082e6:	d001      	beq.n	80082ec <__lshift+0xac>
 80082e8:	f108 0602 	add.w	r6, r8, #2
 80082ec:	3e01      	subs	r6, #1
 80082ee:	4638      	mov	r0, r7
 80082f0:	612e      	str	r6, [r5, #16]
 80082f2:	4621      	mov	r1, r4
 80082f4:	f7ff fd88 	bl	8007e08 <_Bfree>
 80082f8:	4628      	mov	r0, r5
 80082fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082fe:	f842 0f04 	str.w	r0, [r2, #4]!
 8008302:	3301      	adds	r3, #1
 8008304:	e7c1      	b.n	800828a <__lshift+0x4a>
 8008306:	3904      	subs	r1, #4
 8008308:	f853 2b04 	ldr.w	r2, [r3], #4
 800830c:	f841 2f04 	str.w	r2, [r1, #4]!
 8008310:	4298      	cmp	r0, r3
 8008312:	d8f9      	bhi.n	8008308 <__lshift+0xc8>
 8008314:	e7ea      	b.n	80082ec <__lshift+0xac>
 8008316:	bf00      	nop
 8008318:	08009870 	.word	0x08009870
 800831c:	08009960 	.word	0x08009960

08008320 <__mcmp>:
 8008320:	b530      	push	{r4, r5, lr}
 8008322:	6902      	ldr	r2, [r0, #16]
 8008324:	690c      	ldr	r4, [r1, #16]
 8008326:	1b12      	subs	r2, r2, r4
 8008328:	d10e      	bne.n	8008348 <__mcmp+0x28>
 800832a:	f100 0314 	add.w	r3, r0, #20
 800832e:	3114      	adds	r1, #20
 8008330:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008334:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008338:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800833c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008340:	42a5      	cmp	r5, r4
 8008342:	d003      	beq.n	800834c <__mcmp+0x2c>
 8008344:	d305      	bcc.n	8008352 <__mcmp+0x32>
 8008346:	2201      	movs	r2, #1
 8008348:	4610      	mov	r0, r2
 800834a:	bd30      	pop	{r4, r5, pc}
 800834c:	4283      	cmp	r3, r0
 800834e:	d3f3      	bcc.n	8008338 <__mcmp+0x18>
 8008350:	e7fa      	b.n	8008348 <__mcmp+0x28>
 8008352:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008356:	e7f7      	b.n	8008348 <__mcmp+0x28>

08008358 <__mdiff>:
 8008358:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800835c:	460c      	mov	r4, r1
 800835e:	4606      	mov	r6, r0
 8008360:	4611      	mov	r1, r2
 8008362:	4620      	mov	r0, r4
 8008364:	4690      	mov	r8, r2
 8008366:	f7ff ffdb 	bl	8008320 <__mcmp>
 800836a:	1e05      	subs	r5, r0, #0
 800836c:	d110      	bne.n	8008390 <__mdiff+0x38>
 800836e:	4629      	mov	r1, r5
 8008370:	4630      	mov	r0, r6
 8008372:	f7ff fd09 	bl	8007d88 <_Balloc>
 8008376:	b930      	cbnz	r0, 8008386 <__mdiff+0x2e>
 8008378:	4b3a      	ldr	r3, [pc, #232]	; (8008464 <__mdiff+0x10c>)
 800837a:	4602      	mov	r2, r0
 800837c:	f240 2132 	movw	r1, #562	; 0x232
 8008380:	4839      	ldr	r0, [pc, #228]	; (8008468 <__mdiff+0x110>)
 8008382:	f000 fca3 	bl	8008ccc <__assert_func>
 8008386:	2301      	movs	r3, #1
 8008388:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800838c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008390:	bfa4      	itt	ge
 8008392:	4643      	movge	r3, r8
 8008394:	46a0      	movge	r8, r4
 8008396:	4630      	mov	r0, r6
 8008398:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800839c:	bfa6      	itte	ge
 800839e:	461c      	movge	r4, r3
 80083a0:	2500      	movge	r5, #0
 80083a2:	2501      	movlt	r5, #1
 80083a4:	f7ff fcf0 	bl	8007d88 <_Balloc>
 80083a8:	b920      	cbnz	r0, 80083b4 <__mdiff+0x5c>
 80083aa:	4b2e      	ldr	r3, [pc, #184]	; (8008464 <__mdiff+0x10c>)
 80083ac:	4602      	mov	r2, r0
 80083ae:	f44f 7110 	mov.w	r1, #576	; 0x240
 80083b2:	e7e5      	b.n	8008380 <__mdiff+0x28>
 80083b4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80083b8:	6926      	ldr	r6, [r4, #16]
 80083ba:	60c5      	str	r5, [r0, #12]
 80083bc:	f104 0914 	add.w	r9, r4, #20
 80083c0:	f108 0514 	add.w	r5, r8, #20
 80083c4:	f100 0e14 	add.w	lr, r0, #20
 80083c8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80083cc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80083d0:	f108 0210 	add.w	r2, r8, #16
 80083d4:	46f2      	mov	sl, lr
 80083d6:	2100      	movs	r1, #0
 80083d8:	f859 3b04 	ldr.w	r3, [r9], #4
 80083dc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80083e0:	fa1f f883 	uxth.w	r8, r3
 80083e4:	fa11 f18b 	uxtah	r1, r1, fp
 80083e8:	0c1b      	lsrs	r3, r3, #16
 80083ea:	eba1 0808 	sub.w	r8, r1, r8
 80083ee:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80083f2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80083f6:	fa1f f888 	uxth.w	r8, r8
 80083fa:	1419      	asrs	r1, r3, #16
 80083fc:	454e      	cmp	r6, r9
 80083fe:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008402:	f84a 3b04 	str.w	r3, [sl], #4
 8008406:	d8e7      	bhi.n	80083d8 <__mdiff+0x80>
 8008408:	1b33      	subs	r3, r6, r4
 800840a:	3b15      	subs	r3, #21
 800840c:	f023 0303 	bic.w	r3, r3, #3
 8008410:	3304      	adds	r3, #4
 8008412:	3415      	adds	r4, #21
 8008414:	42a6      	cmp	r6, r4
 8008416:	bf38      	it	cc
 8008418:	2304      	movcc	r3, #4
 800841a:	441d      	add	r5, r3
 800841c:	4473      	add	r3, lr
 800841e:	469e      	mov	lr, r3
 8008420:	462e      	mov	r6, r5
 8008422:	4566      	cmp	r6, ip
 8008424:	d30e      	bcc.n	8008444 <__mdiff+0xec>
 8008426:	f10c 0203 	add.w	r2, ip, #3
 800842a:	1b52      	subs	r2, r2, r5
 800842c:	f022 0203 	bic.w	r2, r2, #3
 8008430:	3d03      	subs	r5, #3
 8008432:	45ac      	cmp	ip, r5
 8008434:	bf38      	it	cc
 8008436:	2200      	movcc	r2, #0
 8008438:	441a      	add	r2, r3
 800843a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800843e:	b17b      	cbz	r3, 8008460 <__mdiff+0x108>
 8008440:	6107      	str	r7, [r0, #16]
 8008442:	e7a3      	b.n	800838c <__mdiff+0x34>
 8008444:	f856 8b04 	ldr.w	r8, [r6], #4
 8008448:	fa11 f288 	uxtah	r2, r1, r8
 800844c:	1414      	asrs	r4, r2, #16
 800844e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008452:	b292      	uxth	r2, r2
 8008454:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008458:	f84e 2b04 	str.w	r2, [lr], #4
 800845c:	1421      	asrs	r1, r4, #16
 800845e:	e7e0      	b.n	8008422 <__mdiff+0xca>
 8008460:	3f01      	subs	r7, #1
 8008462:	e7ea      	b.n	800843a <__mdiff+0xe2>
 8008464:	08009870 	.word	0x08009870
 8008468:	08009960 	.word	0x08009960

0800846c <__ulp>:
 800846c:	b082      	sub	sp, #8
 800846e:	ed8d 0b00 	vstr	d0, [sp]
 8008472:	9b01      	ldr	r3, [sp, #4]
 8008474:	4912      	ldr	r1, [pc, #72]	; (80084c0 <__ulp+0x54>)
 8008476:	4019      	ands	r1, r3
 8008478:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800847c:	2900      	cmp	r1, #0
 800847e:	dd05      	ble.n	800848c <__ulp+0x20>
 8008480:	2200      	movs	r2, #0
 8008482:	460b      	mov	r3, r1
 8008484:	ec43 2b10 	vmov	d0, r2, r3
 8008488:	b002      	add	sp, #8
 800848a:	4770      	bx	lr
 800848c:	4249      	negs	r1, r1
 800848e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8008492:	ea4f 5021 	mov.w	r0, r1, asr #20
 8008496:	f04f 0200 	mov.w	r2, #0
 800849a:	f04f 0300 	mov.w	r3, #0
 800849e:	da04      	bge.n	80084aa <__ulp+0x3e>
 80084a0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80084a4:	fa41 f300 	asr.w	r3, r1, r0
 80084a8:	e7ec      	b.n	8008484 <__ulp+0x18>
 80084aa:	f1a0 0114 	sub.w	r1, r0, #20
 80084ae:	291e      	cmp	r1, #30
 80084b0:	bfda      	itte	le
 80084b2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80084b6:	fa20 f101 	lsrle.w	r1, r0, r1
 80084ba:	2101      	movgt	r1, #1
 80084bc:	460a      	mov	r2, r1
 80084be:	e7e1      	b.n	8008484 <__ulp+0x18>
 80084c0:	7ff00000 	.word	0x7ff00000

080084c4 <__b2d>:
 80084c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084c6:	6905      	ldr	r5, [r0, #16]
 80084c8:	f100 0714 	add.w	r7, r0, #20
 80084cc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80084d0:	1f2e      	subs	r6, r5, #4
 80084d2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80084d6:	4620      	mov	r0, r4
 80084d8:	f7ff fd48 	bl	8007f6c <__hi0bits>
 80084dc:	f1c0 0320 	rsb	r3, r0, #32
 80084e0:	280a      	cmp	r0, #10
 80084e2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8008560 <__b2d+0x9c>
 80084e6:	600b      	str	r3, [r1, #0]
 80084e8:	dc14      	bgt.n	8008514 <__b2d+0x50>
 80084ea:	f1c0 0e0b 	rsb	lr, r0, #11
 80084ee:	fa24 f10e 	lsr.w	r1, r4, lr
 80084f2:	42b7      	cmp	r7, r6
 80084f4:	ea41 030c 	orr.w	r3, r1, ip
 80084f8:	bf34      	ite	cc
 80084fa:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80084fe:	2100      	movcs	r1, #0
 8008500:	3015      	adds	r0, #21
 8008502:	fa04 f000 	lsl.w	r0, r4, r0
 8008506:	fa21 f10e 	lsr.w	r1, r1, lr
 800850a:	ea40 0201 	orr.w	r2, r0, r1
 800850e:	ec43 2b10 	vmov	d0, r2, r3
 8008512:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008514:	42b7      	cmp	r7, r6
 8008516:	bf3a      	itte	cc
 8008518:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800851c:	f1a5 0608 	subcc.w	r6, r5, #8
 8008520:	2100      	movcs	r1, #0
 8008522:	380b      	subs	r0, #11
 8008524:	d017      	beq.n	8008556 <__b2d+0x92>
 8008526:	f1c0 0c20 	rsb	ip, r0, #32
 800852a:	fa04 f500 	lsl.w	r5, r4, r0
 800852e:	42be      	cmp	r6, r7
 8008530:	fa21 f40c 	lsr.w	r4, r1, ip
 8008534:	ea45 0504 	orr.w	r5, r5, r4
 8008538:	bf8c      	ite	hi
 800853a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800853e:	2400      	movls	r4, #0
 8008540:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8008544:	fa01 f000 	lsl.w	r0, r1, r0
 8008548:	fa24 f40c 	lsr.w	r4, r4, ip
 800854c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008550:	ea40 0204 	orr.w	r2, r0, r4
 8008554:	e7db      	b.n	800850e <__b2d+0x4a>
 8008556:	ea44 030c 	orr.w	r3, r4, ip
 800855a:	460a      	mov	r2, r1
 800855c:	e7d7      	b.n	800850e <__b2d+0x4a>
 800855e:	bf00      	nop
 8008560:	3ff00000 	.word	0x3ff00000

08008564 <__d2b>:
 8008564:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008568:	4689      	mov	r9, r1
 800856a:	2101      	movs	r1, #1
 800856c:	ec57 6b10 	vmov	r6, r7, d0
 8008570:	4690      	mov	r8, r2
 8008572:	f7ff fc09 	bl	8007d88 <_Balloc>
 8008576:	4604      	mov	r4, r0
 8008578:	b930      	cbnz	r0, 8008588 <__d2b+0x24>
 800857a:	4602      	mov	r2, r0
 800857c:	4b25      	ldr	r3, [pc, #148]	; (8008614 <__d2b+0xb0>)
 800857e:	4826      	ldr	r0, [pc, #152]	; (8008618 <__d2b+0xb4>)
 8008580:	f240 310a 	movw	r1, #778	; 0x30a
 8008584:	f000 fba2 	bl	8008ccc <__assert_func>
 8008588:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800858c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008590:	bb35      	cbnz	r5, 80085e0 <__d2b+0x7c>
 8008592:	2e00      	cmp	r6, #0
 8008594:	9301      	str	r3, [sp, #4]
 8008596:	d028      	beq.n	80085ea <__d2b+0x86>
 8008598:	4668      	mov	r0, sp
 800859a:	9600      	str	r6, [sp, #0]
 800859c:	f7ff fd06 	bl	8007fac <__lo0bits>
 80085a0:	9900      	ldr	r1, [sp, #0]
 80085a2:	b300      	cbz	r0, 80085e6 <__d2b+0x82>
 80085a4:	9a01      	ldr	r2, [sp, #4]
 80085a6:	f1c0 0320 	rsb	r3, r0, #32
 80085aa:	fa02 f303 	lsl.w	r3, r2, r3
 80085ae:	430b      	orrs	r3, r1
 80085b0:	40c2      	lsrs	r2, r0
 80085b2:	6163      	str	r3, [r4, #20]
 80085b4:	9201      	str	r2, [sp, #4]
 80085b6:	9b01      	ldr	r3, [sp, #4]
 80085b8:	61a3      	str	r3, [r4, #24]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	bf14      	ite	ne
 80085be:	2202      	movne	r2, #2
 80085c0:	2201      	moveq	r2, #1
 80085c2:	6122      	str	r2, [r4, #16]
 80085c4:	b1d5      	cbz	r5, 80085fc <__d2b+0x98>
 80085c6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80085ca:	4405      	add	r5, r0
 80085cc:	f8c9 5000 	str.w	r5, [r9]
 80085d0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80085d4:	f8c8 0000 	str.w	r0, [r8]
 80085d8:	4620      	mov	r0, r4
 80085da:	b003      	add	sp, #12
 80085dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80085e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80085e4:	e7d5      	b.n	8008592 <__d2b+0x2e>
 80085e6:	6161      	str	r1, [r4, #20]
 80085e8:	e7e5      	b.n	80085b6 <__d2b+0x52>
 80085ea:	a801      	add	r0, sp, #4
 80085ec:	f7ff fcde 	bl	8007fac <__lo0bits>
 80085f0:	9b01      	ldr	r3, [sp, #4]
 80085f2:	6163      	str	r3, [r4, #20]
 80085f4:	2201      	movs	r2, #1
 80085f6:	6122      	str	r2, [r4, #16]
 80085f8:	3020      	adds	r0, #32
 80085fa:	e7e3      	b.n	80085c4 <__d2b+0x60>
 80085fc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008600:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008604:	f8c9 0000 	str.w	r0, [r9]
 8008608:	6918      	ldr	r0, [r3, #16]
 800860a:	f7ff fcaf 	bl	8007f6c <__hi0bits>
 800860e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008612:	e7df      	b.n	80085d4 <__d2b+0x70>
 8008614:	08009870 	.word	0x08009870
 8008618:	08009960 	.word	0x08009960

0800861c <__ratio>:
 800861c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008620:	4688      	mov	r8, r1
 8008622:	4669      	mov	r1, sp
 8008624:	4681      	mov	r9, r0
 8008626:	f7ff ff4d 	bl	80084c4 <__b2d>
 800862a:	a901      	add	r1, sp, #4
 800862c:	4640      	mov	r0, r8
 800862e:	ec55 4b10 	vmov	r4, r5, d0
 8008632:	f7ff ff47 	bl	80084c4 <__b2d>
 8008636:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800863a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800863e:	eba3 0c02 	sub.w	ip, r3, r2
 8008642:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008646:	1a9b      	subs	r3, r3, r2
 8008648:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800864c:	ec51 0b10 	vmov	r0, r1, d0
 8008650:	2b00      	cmp	r3, #0
 8008652:	bfd6      	itet	le
 8008654:	460a      	movle	r2, r1
 8008656:	462a      	movgt	r2, r5
 8008658:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800865c:	468b      	mov	fp, r1
 800865e:	462f      	mov	r7, r5
 8008660:	bfd4      	ite	le
 8008662:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8008666:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800866a:	4620      	mov	r0, r4
 800866c:	ee10 2a10 	vmov	r2, s0
 8008670:	465b      	mov	r3, fp
 8008672:	4639      	mov	r1, r7
 8008674:	f7f8 f90a 	bl	800088c <__aeabi_ddiv>
 8008678:	ec41 0b10 	vmov	d0, r0, r1
 800867c:	b003      	add	sp, #12
 800867e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008682 <__copybits>:
 8008682:	3901      	subs	r1, #1
 8008684:	b570      	push	{r4, r5, r6, lr}
 8008686:	1149      	asrs	r1, r1, #5
 8008688:	6914      	ldr	r4, [r2, #16]
 800868a:	3101      	adds	r1, #1
 800868c:	f102 0314 	add.w	r3, r2, #20
 8008690:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008694:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008698:	1f05      	subs	r5, r0, #4
 800869a:	42a3      	cmp	r3, r4
 800869c:	d30c      	bcc.n	80086b8 <__copybits+0x36>
 800869e:	1aa3      	subs	r3, r4, r2
 80086a0:	3b11      	subs	r3, #17
 80086a2:	f023 0303 	bic.w	r3, r3, #3
 80086a6:	3211      	adds	r2, #17
 80086a8:	42a2      	cmp	r2, r4
 80086aa:	bf88      	it	hi
 80086ac:	2300      	movhi	r3, #0
 80086ae:	4418      	add	r0, r3
 80086b0:	2300      	movs	r3, #0
 80086b2:	4288      	cmp	r0, r1
 80086b4:	d305      	bcc.n	80086c2 <__copybits+0x40>
 80086b6:	bd70      	pop	{r4, r5, r6, pc}
 80086b8:	f853 6b04 	ldr.w	r6, [r3], #4
 80086bc:	f845 6f04 	str.w	r6, [r5, #4]!
 80086c0:	e7eb      	b.n	800869a <__copybits+0x18>
 80086c2:	f840 3b04 	str.w	r3, [r0], #4
 80086c6:	e7f4      	b.n	80086b2 <__copybits+0x30>

080086c8 <__any_on>:
 80086c8:	f100 0214 	add.w	r2, r0, #20
 80086cc:	6900      	ldr	r0, [r0, #16]
 80086ce:	114b      	asrs	r3, r1, #5
 80086d0:	4298      	cmp	r0, r3
 80086d2:	b510      	push	{r4, lr}
 80086d4:	db11      	blt.n	80086fa <__any_on+0x32>
 80086d6:	dd0a      	ble.n	80086ee <__any_on+0x26>
 80086d8:	f011 011f 	ands.w	r1, r1, #31
 80086dc:	d007      	beq.n	80086ee <__any_on+0x26>
 80086de:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80086e2:	fa24 f001 	lsr.w	r0, r4, r1
 80086e6:	fa00 f101 	lsl.w	r1, r0, r1
 80086ea:	428c      	cmp	r4, r1
 80086ec:	d10b      	bne.n	8008706 <__any_on+0x3e>
 80086ee:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80086f2:	4293      	cmp	r3, r2
 80086f4:	d803      	bhi.n	80086fe <__any_on+0x36>
 80086f6:	2000      	movs	r0, #0
 80086f8:	bd10      	pop	{r4, pc}
 80086fa:	4603      	mov	r3, r0
 80086fc:	e7f7      	b.n	80086ee <__any_on+0x26>
 80086fe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008702:	2900      	cmp	r1, #0
 8008704:	d0f5      	beq.n	80086f2 <__any_on+0x2a>
 8008706:	2001      	movs	r0, #1
 8008708:	e7f6      	b.n	80086f8 <__any_on+0x30>

0800870a <_calloc_r>:
 800870a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800870c:	fba1 2402 	umull	r2, r4, r1, r2
 8008710:	b94c      	cbnz	r4, 8008726 <_calloc_r+0x1c>
 8008712:	4611      	mov	r1, r2
 8008714:	9201      	str	r2, [sp, #4]
 8008716:	f000 f87b 	bl	8008810 <_malloc_r>
 800871a:	9a01      	ldr	r2, [sp, #4]
 800871c:	4605      	mov	r5, r0
 800871e:	b930      	cbnz	r0, 800872e <_calloc_r+0x24>
 8008720:	4628      	mov	r0, r5
 8008722:	b003      	add	sp, #12
 8008724:	bd30      	pop	{r4, r5, pc}
 8008726:	220c      	movs	r2, #12
 8008728:	6002      	str	r2, [r0, #0]
 800872a:	2500      	movs	r5, #0
 800872c:	e7f8      	b.n	8008720 <_calloc_r+0x16>
 800872e:	4621      	mov	r1, r4
 8008730:	f7fc f822 	bl	8004778 <memset>
 8008734:	e7f4      	b.n	8008720 <_calloc_r+0x16>
	...

08008738 <_free_r>:
 8008738:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800873a:	2900      	cmp	r1, #0
 800873c:	d044      	beq.n	80087c8 <_free_r+0x90>
 800873e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008742:	9001      	str	r0, [sp, #4]
 8008744:	2b00      	cmp	r3, #0
 8008746:	f1a1 0404 	sub.w	r4, r1, #4
 800874a:	bfb8      	it	lt
 800874c:	18e4      	addlt	r4, r4, r3
 800874e:	f000 fb4b 	bl	8008de8 <__malloc_lock>
 8008752:	4a1e      	ldr	r2, [pc, #120]	; (80087cc <_free_r+0x94>)
 8008754:	9801      	ldr	r0, [sp, #4]
 8008756:	6813      	ldr	r3, [r2, #0]
 8008758:	b933      	cbnz	r3, 8008768 <_free_r+0x30>
 800875a:	6063      	str	r3, [r4, #4]
 800875c:	6014      	str	r4, [r2, #0]
 800875e:	b003      	add	sp, #12
 8008760:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008764:	f000 bb46 	b.w	8008df4 <__malloc_unlock>
 8008768:	42a3      	cmp	r3, r4
 800876a:	d908      	bls.n	800877e <_free_r+0x46>
 800876c:	6825      	ldr	r5, [r4, #0]
 800876e:	1961      	adds	r1, r4, r5
 8008770:	428b      	cmp	r3, r1
 8008772:	bf01      	itttt	eq
 8008774:	6819      	ldreq	r1, [r3, #0]
 8008776:	685b      	ldreq	r3, [r3, #4]
 8008778:	1949      	addeq	r1, r1, r5
 800877a:	6021      	streq	r1, [r4, #0]
 800877c:	e7ed      	b.n	800875a <_free_r+0x22>
 800877e:	461a      	mov	r2, r3
 8008780:	685b      	ldr	r3, [r3, #4]
 8008782:	b10b      	cbz	r3, 8008788 <_free_r+0x50>
 8008784:	42a3      	cmp	r3, r4
 8008786:	d9fa      	bls.n	800877e <_free_r+0x46>
 8008788:	6811      	ldr	r1, [r2, #0]
 800878a:	1855      	adds	r5, r2, r1
 800878c:	42a5      	cmp	r5, r4
 800878e:	d10b      	bne.n	80087a8 <_free_r+0x70>
 8008790:	6824      	ldr	r4, [r4, #0]
 8008792:	4421      	add	r1, r4
 8008794:	1854      	adds	r4, r2, r1
 8008796:	42a3      	cmp	r3, r4
 8008798:	6011      	str	r1, [r2, #0]
 800879a:	d1e0      	bne.n	800875e <_free_r+0x26>
 800879c:	681c      	ldr	r4, [r3, #0]
 800879e:	685b      	ldr	r3, [r3, #4]
 80087a0:	6053      	str	r3, [r2, #4]
 80087a2:	4421      	add	r1, r4
 80087a4:	6011      	str	r1, [r2, #0]
 80087a6:	e7da      	b.n	800875e <_free_r+0x26>
 80087a8:	d902      	bls.n	80087b0 <_free_r+0x78>
 80087aa:	230c      	movs	r3, #12
 80087ac:	6003      	str	r3, [r0, #0]
 80087ae:	e7d6      	b.n	800875e <_free_r+0x26>
 80087b0:	6825      	ldr	r5, [r4, #0]
 80087b2:	1961      	adds	r1, r4, r5
 80087b4:	428b      	cmp	r3, r1
 80087b6:	bf04      	itt	eq
 80087b8:	6819      	ldreq	r1, [r3, #0]
 80087ba:	685b      	ldreq	r3, [r3, #4]
 80087bc:	6063      	str	r3, [r4, #4]
 80087be:	bf04      	itt	eq
 80087c0:	1949      	addeq	r1, r1, r5
 80087c2:	6021      	streq	r1, [r4, #0]
 80087c4:	6054      	str	r4, [r2, #4]
 80087c6:	e7ca      	b.n	800875e <_free_r+0x26>
 80087c8:	b003      	add	sp, #12
 80087ca:	bd30      	pop	{r4, r5, pc}
 80087cc:	20000538 	.word	0x20000538

080087d0 <sbrk_aligned>:
 80087d0:	b570      	push	{r4, r5, r6, lr}
 80087d2:	4e0e      	ldr	r6, [pc, #56]	; (800880c <sbrk_aligned+0x3c>)
 80087d4:	460c      	mov	r4, r1
 80087d6:	6831      	ldr	r1, [r6, #0]
 80087d8:	4605      	mov	r5, r0
 80087da:	b911      	cbnz	r1, 80087e2 <sbrk_aligned+0x12>
 80087dc:	f000 f9f0 	bl	8008bc0 <_sbrk_r>
 80087e0:	6030      	str	r0, [r6, #0]
 80087e2:	4621      	mov	r1, r4
 80087e4:	4628      	mov	r0, r5
 80087e6:	f000 f9eb 	bl	8008bc0 <_sbrk_r>
 80087ea:	1c43      	adds	r3, r0, #1
 80087ec:	d00a      	beq.n	8008804 <sbrk_aligned+0x34>
 80087ee:	1cc4      	adds	r4, r0, #3
 80087f0:	f024 0403 	bic.w	r4, r4, #3
 80087f4:	42a0      	cmp	r0, r4
 80087f6:	d007      	beq.n	8008808 <sbrk_aligned+0x38>
 80087f8:	1a21      	subs	r1, r4, r0
 80087fa:	4628      	mov	r0, r5
 80087fc:	f000 f9e0 	bl	8008bc0 <_sbrk_r>
 8008800:	3001      	adds	r0, #1
 8008802:	d101      	bne.n	8008808 <sbrk_aligned+0x38>
 8008804:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008808:	4620      	mov	r0, r4
 800880a:	bd70      	pop	{r4, r5, r6, pc}
 800880c:	2000053c 	.word	0x2000053c

08008810 <_malloc_r>:
 8008810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008814:	1ccd      	adds	r5, r1, #3
 8008816:	f025 0503 	bic.w	r5, r5, #3
 800881a:	3508      	adds	r5, #8
 800881c:	2d0c      	cmp	r5, #12
 800881e:	bf38      	it	cc
 8008820:	250c      	movcc	r5, #12
 8008822:	2d00      	cmp	r5, #0
 8008824:	4607      	mov	r7, r0
 8008826:	db01      	blt.n	800882c <_malloc_r+0x1c>
 8008828:	42a9      	cmp	r1, r5
 800882a:	d905      	bls.n	8008838 <_malloc_r+0x28>
 800882c:	230c      	movs	r3, #12
 800882e:	603b      	str	r3, [r7, #0]
 8008830:	2600      	movs	r6, #0
 8008832:	4630      	mov	r0, r6
 8008834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008838:	4e2e      	ldr	r6, [pc, #184]	; (80088f4 <_malloc_r+0xe4>)
 800883a:	f000 fad5 	bl	8008de8 <__malloc_lock>
 800883e:	6833      	ldr	r3, [r6, #0]
 8008840:	461c      	mov	r4, r3
 8008842:	bb34      	cbnz	r4, 8008892 <_malloc_r+0x82>
 8008844:	4629      	mov	r1, r5
 8008846:	4638      	mov	r0, r7
 8008848:	f7ff ffc2 	bl	80087d0 <sbrk_aligned>
 800884c:	1c43      	adds	r3, r0, #1
 800884e:	4604      	mov	r4, r0
 8008850:	d14d      	bne.n	80088ee <_malloc_r+0xde>
 8008852:	6834      	ldr	r4, [r6, #0]
 8008854:	4626      	mov	r6, r4
 8008856:	2e00      	cmp	r6, #0
 8008858:	d140      	bne.n	80088dc <_malloc_r+0xcc>
 800885a:	6823      	ldr	r3, [r4, #0]
 800885c:	4631      	mov	r1, r6
 800885e:	4638      	mov	r0, r7
 8008860:	eb04 0803 	add.w	r8, r4, r3
 8008864:	f000 f9ac 	bl	8008bc0 <_sbrk_r>
 8008868:	4580      	cmp	r8, r0
 800886a:	d13a      	bne.n	80088e2 <_malloc_r+0xd2>
 800886c:	6821      	ldr	r1, [r4, #0]
 800886e:	3503      	adds	r5, #3
 8008870:	1a6d      	subs	r5, r5, r1
 8008872:	f025 0503 	bic.w	r5, r5, #3
 8008876:	3508      	adds	r5, #8
 8008878:	2d0c      	cmp	r5, #12
 800887a:	bf38      	it	cc
 800887c:	250c      	movcc	r5, #12
 800887e:	4629      	mov	r1, r5
 8008880:	4638      	mov	r0, r7
 8008882:	f7ff ffa5 	bl	80087d0 <sbrk_aligned>
 8008886:	3001      	adds	r0, #1
 8008888:	d02b      	beq.n	80088e2 <_malloc_r+0xd2>
 800888a:	6823      	ldr	r3, [r4, #0]
 800888c:	442b      	add	r3, r5
 800888e:	6023      	str	r3, [r4, #0]
 8008890:	e00e      	b.n	80088b0 <_malloc_r+0xa0>
 8008892:	6822      	ldr	r2, [r4, #0]
 8008894:	1b52      	subs	r2, r2, r5
 8008896:	d41e      	bmi.n	80088d6 <_malloc_r+0xc6>
 8008898:	2a0b      	cmp	r2, #11
 800889a:	d916      	bls.n	80088ca <_malloc_r+0xba>
 800889c:	1961      	adds	r1, r4, r5
 800889e:	42a3      	cmp	r3, r4
 80088a0:	6025      	str	r5, [r4, #0]
 80088a2:	bf18      	it	ne
 80088a4:	6059      	strne	r1, [r3, #4]
 80088a6:	6863      	ldr	r3, [r4, #4]
 80088a8:	bf08      	it	eq
 80088aa:	6031      	streq	r1, [r6, #0]
 80088ac:	5162      	str	r2, [r4, r5]
 80088ae:	604b      	str	r3, [r1, #4]
 80088b0:	4638      	mov	r0, r7
 80088b2:	f104 060b 	add.w	r6, r4, #11
 80088b6:	f000 fa9d 	bl	8008df4 <__malloc_unlock>
 80088ba:	f026 0607 	bic.w	r6, r6, #7
 80088be:	1d23      	adds	r3, r4, #4
 80088c0:	1af2      	subs	r2, r6, r3
 80088c2:	d0b6      	beq.n	8008832 <_malloc_r+0x22>
 80088c4:	1b9b      	subs	r3, r3, r6
 80088c6:	50a3      	str	r3, [r4, r2]
 80088c8:	e7b3      	b.n	8008832 <_malloc_r+0x22>
 80088ca:	6862      	ldr	r2, [r4, #4]
 80088cc:	42a3      	cmp	r3, r4
 80088ce:	bf0c      	ite	eq
 80088d0:	6032      	streq	r2, [r6, #0]
 80088d2:	605a      	strne	r2, [r3, #4]
 80088d4:	e7ec      	b.n	80088b0 <_malloc_r+0xa0>
 80088d6:	4623      	mov	r3, r4
 80088d8:	6864      	ldr	r4, [r4, #4]
 80088da:	e7b2      	b.n	8008842 <_malloc_r+0x32>
 80088dc:	4634      	mov	r4, r6
 80088de:	6876      	ldr	r6, [r6, #4]
 80088e0:	e7b9      	b.n	8008856 <_malloc_r+0x46>
 80088e2:	230c      	movs	r3, #12
 80088e4:	603b      	str	r3, [r7, #0]
 80088e6:	4638      	mov	r0, r7
 80088e8:	f000 fa84 	bl	8008df4 <__malloc_unlock>
 80088ec:	e7a1      	b.n	8008832 <_malloc_r+0x22>
 80088ee:	6025      	str	r5, [r4, #0]
 80088f0:	e7de      	b.n	80088b0 <_malloc_r+0xa0>
 80088f2:	bf00      	nop
 80088f4:	20000538 	.word	0x20000538

080088f8 <__ssputs_r>:
 80088f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088fc:	688e      	ldr	r6, [r1, #8]
 80088fe:	429e      	cmp	r6, r3
 8008900:	4682      	mov	sl, r0
 8008902:	460c      	mov	r4, r1
 8008904:	4690      	mov	r8, r2
 8008906:	461f      	mov	r7, r3
 8008908:	d838      	bhi.n	800897c <__ssputs_r+0x84>
 800890a:	898a      	ldrh	r2, [r1, #12]
 800890c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008910:	d032      	beq.n	8008978 <__ssputs_r+0x80>
 8008912:	6825      	ldr	r5, [r4, #0]
 8008914:	6909      	ldr	r1, [r1, #16]
 8008916:	eba5 0901 	sub.w	r9, r5, r1
 800891a:	6965      	ldr	r5, [r4, #20]
 800891c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008920:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008924:	3301      	adds	r3, #1
 8008926:	444b      	add	r3, r9
 8008928:	106d      	asrs	r5, r5, #1
 800892a:	429d      	cmp	r5, r3
 800892c:	bf38      	it	cc
 800892e:	461d      	movcc	r5, r3
 8008930:	0553      	lsls	r3, r2, #21
 8008932:	d531      	bpl.n	8008998 <__ssputs_r+0xa0>
 8008934:	4629      	mov	r1, r5
 8008936:	f7ff ff6b 	bl	8008810 <_malloc_r>
 800893a:	4606      	mov	r6, r0
 800893c:	b950      	cbnz	r0, 8008954 <__ssputs_r+0x5c>
 800893e:	230c      	movs	r3, #12
 8008940:	f8ca 3000 	str.w	r3, [sl]
 8008944:	89a3      	ldrh	r3, [r4, #12]
 8008946:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800894a:	81a3      	strh	r3, [r4, #12]
 800894c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008950:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008954:	6921      	ldr	r1, [r4, #16]
 8008956:	464a      	mov	r2, r9
 8008958:	f7ff fa08 	bl	8007d6c <memcpy>
 800895c:	89a3      	ldrh	r3, [r4, #12]
 800895e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008962:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008966:	81a3      	strh	r3, [r4, #12]
 8008968:	6126      	str	r6, [r4, #16]
 800896a:	6165      	str	r5, [r4, #20]
 800896c:	444e      	add	r6, r9
 800896e:	eba5 0509 	sub.w	r5, r5, r9
 8008972:	6026      	str	r6, [r4, #0]
 8008974:	60a5      	str	r5, [r4, #8]
 8008976:	463e      	mov	r6, r7
 8008978:	42be      	cmp	r6, r7
 800897a:	d900      	bls.n	800897e <__ssputs_r+0x86>
 800897c:	463e      	mov	r6, r7
 800897e:	6820      	ldr	r0, [r4, #0]
 8008980:	4632      	mov	r2, r6
 8008982:	4641      	mov	r1, r8
 8008984:	f000 fa16 	bl	8008db4 <memmove>
 8008988:	68a3      	ldr	r3, [r4, #8]
 800898a:	1b9b      	subs	r3, r3, r6
 800898c:	60a3      	str	r3, [r4, #8]
 800898e:	6823      	ldr	r3, [r4, #0]
 8008990:	4433      	add	r3, r6
 8008992:	6023      	str	r3, [r4, #0]
 8008994:	2000      	movs	r0, #0
 8008996:	e7db      	b.n	8008950 <__ssputs_r+0x58>
 8008998:	462a      	mov	r2, r5
 800899a:	f000 fa31 	bl	8008e00 <_realloc_r>
 800899e:	4606      	mov	r6, r0
 80089a0:	2800      	cmp	r0, #0
 80089a2:	d1e1      	bne.n	8008968 <__ssputs_r+0x70>
 80089a4:	6921      	ldr	r1, [r4, #16]
 80089a6:	4650      	mov	r0, sl
 80089a8:	f7ff fec6 	bl	8008738 <_free_r>
 80089ac:	e7c7      	b.n	800893e <__ssputs_r+0x46>
	...

080089b0 <_svfiprintf_r>:
 80089b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089b4:	4698      	mov	r8, r3
 80089b6:	898b      	ldrh	r3, [r1, #12]
 80089b8:	061b      	lsls	r3, r3, #24
 80089ba:	b09d      	sub	sp, #116	; 0x74
 80089bc:	4607      	mov	r7, r0
 80089be:	460d      	mov	r5, r1
 80089c0:	4614      	mov	r4, r2
 80089c2:	d50e      	bpl.n	80089e2 <_svfiprintf_r+0x32>
 80089c4:	690b      	ldr	r3, [r1, #16]
 80089c6:	b963      	cbnz	r3, 80089e2 <_svfiprintf_r+0x32>
 80089c8:	2140      	movs	r1, #64	; 0x40
 80089ca:	f7ff ff21 	bl	8008810 <_malloc_r>
 80089ce:	6028      	str	r0, [r5, #0]
 80089d0:	6128      	str	r0, [r5, #16]
 80089d2:	b920      	cbnz	r0, 80089de <_svfiprintf_r+0x2e>
 80089d4:	230c      	movs	r3, #12
 80089d6:	603b      	str	r3, [r7, #0]
 80089d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80089dc:	e0d1      	b.n	8008b82 <_svfiprintf_r+0x1d2>
 80089de:	2340      	movs	r3, #64	; 0x40
 80089e0:	616b      	str	r3, [r5, #20]
 80089e2:	2300      	movs	r3, #0
 80089e4:	9309      	str	r3, [sp, #36]	; 0x24
 80089e6:	2320      	movs	r3, #32
 80089e8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80089ec:	f8cd 800c 	str.w	r8, [sp, #12]
 80089f0:	2330      	movs	r3, #48	; 0x30
 80089f2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008b9c <_svfiprintf_r+0x1ec>
 80089f6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80089fa:	f04f 0901 	mov.w	r9, #1
 80089fe:	4623      	mov	r3, r4
 8008a00:	469a      	mov	sl, r3
 8008a02:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a06:	b10a      	cbz	r2, 8008a0c <_svfiprintf_r+0x5c>
 8008a08:	2a25      	cmp	r2, #37	; 0x25
 8008a0a:	d1f9      	bne.n	8008a00 <_svfiprintf_r+0x50>
 8008a0c:	ebba 0b04 	subs.w	fp, sl, r4
 8008a10:	d00b      	beq.n	8008a2a <_svfiprintf_r+0x7a>
 8008a12:	465b      	mov	r3, fp
 8008a14:	4622      	mov	r2, r4
 8008a16:	4629      	mov	r1, r5
 8008a18:	4638      	mov	r0, r7
 8008a1a:	f7ff ff6d 	bl	80088f8 <__ssputs_r>
 8008a1e:	3001      	adds	r0, #1
 8008a20:	f000 80aa 	beq.w	8008b78 <_svfiprintf_r+0x1c8>
 8008a24:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008a26:	445a      	add	r2, fp
 8008a28:	9209      	str	r2, [sp, #36]	; 0x24
 8008a2a:	f89a 3000 	ldrb.w	r3, [sl]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	f000 80a2 	beq.w	8008b78 <_svfiprintf_r+0x1c8>
 8008a34:	2300      	movs	r3, #0
 8008a36:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008a3a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008a3e:	f10a 0a01 	add.w	sl, sl, #1
 8008a42:	9304      	str	r3, [sp, #16]
 8008a44:	9307      	str	r3, [sp, #28]
 8008a46:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008a4a:	931a      	str	r3, [sp, #104]	; 0x68
 8008a4c:	4654      	mov	r4, sl
 8008a4e:	2205      	movs	r2, #5
 8008a50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a54:	4851      	ldr	r0, [pc, #324]	; (8008b9c <_svfiprintf_r+0x1ec>)
 8008a56:	f7f7 fbe3 	bl	8000220 <memchr>
 8008a5a:	9a04      	ldr	r2, [sp, #16]
 8008a5c:	b9d8      	cbnz	r0, 8008a96 <_svfiprintf_r+0xe6>
 8008a5e:	06d0      	lsls	r0, r2, #27
 8008a60:	bf44      	itt	mi
 8008a62:	2320      	movmi	r3, #32
 8008a64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a68:	0711      	lsls	r1, r2, #28
 8008a6a:	bf44      	itt	mi
 8008a6c:	232b      	movmi	r3, #43	; 0x2b
 8008a6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a72:	f89a 3000 	ldrb.w	r3, [sl]
 8008a76:	2b2a      	cmp	r3, #42	; 0x2a
 8008a78:	d015      	beq.n	8008aa6 <_svfiprintf_r+0xf6>
 8008a7a:	9a07      	ldr	r2, [sp, #28]
 8008a7c:	4654      	mov	r4, sl
 8008a7e:	2000      	movs	r0, #0
 8008a80:	f04f 0c0a 	mov.w	ip, #10
 8008a84:	4621      	mov	r1, r4
 8008a86:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008a8a:	3b30      	subs	r3, #48	; 0x30
 8008a8c:	2b09      	cmp	r3, #9
 8008a8e:	d94e      	bls.n	8008b2e <_svfiprintf_r+0x17e>
 8008a90:	b1b0      	cbz	r0, 8008ac0 <_svfiprintf_r+0x110>
 8008a92:	9207      	str	r2, [sp, #28]
 8008a94:	e014      	b.n	8008ac0 <_svfiprintf_r+0x110>
 8008a96:	eba0 0308 	sub.w	r3, r0, r8
 8008a9a:	fa09 f303 	lsl.w	r3, r9, r3
 8008a9e:	4313      	orrs	r3, r2
 8008aa0:	9304      	str	r3, [sp, #16]
 8008aa2:	46a2      	mov	sl, r4
 8008aa4:	e7d2      	b.n	8008a4c <_svfiprintf_r+0x9c>
 8008aa6:	9b03      	ldr	r3, [sp, #12]
 8008aa8:	1d19      	adds	r1, r3, #4
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	9103      	str	r1, [sp, #12]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	bfbb      	ittet	lt
 8008ab2:	425b      	neglt	r3, r3
 8008ab4:	f042 0202 	orrlt.w	r2, r2, #2
 8008ab8:	9307      	strge	r3, [sp, #28]
 8008aba:	9307      	strlt	r3, [sp, #28]
 8008abc:	bfb8      	it	lt
 8008abe:	9204      	strlt	r2, [sp, #16]
 8008ac0:	7823      	ldrb	r3, [r4, #0]
 8008ac2:	2b2e      	cmp	r3, #46	; 0x2e
 8008ac4:	d10c      	bne.n	8008ae0 <_svfiprintf_r+0x130>
 8008ac6:	7863      	ldrb	r3, [r4, #1]
 8008ac8:	2b2a      	cmp	r3, #42	; 0x2a
 8008aca:	d135      	bne.n	8008b38 <_svfiprintf_r+0x188>
 8008acc:	9b03      	ldr	r3, [sp, #12]
 8008ace:	1d1a      	adds	r2, r3, #4
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	9203      	str	r2, [sp, #12]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	bfb8      	it	lt
 8008ad8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008adc:	3402      	adds	r4, #2
 8008ade:	9305      	str	r3, [sp, #20]
 8008ae0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008bac <_svfiprintf_r+0x1fc>
 8008ae4:	7821      	ldrb	r1, [r4, #0]
 8008ae6:	2203      	movs	r2, #3
 8008ae8:	4650      	mov	r0, sl
 8008aea:	f7f7 fb99 	bl	8000220 <memchr>
 8008aee:	b140      	cbz	r0, 8008b02 <_svfiprintf_r+0x152>
 8008af0:	2340      	movs	r3, #64	; 0x40
 8008af2:	eba0 000a 	sub.w	r0, r0, sl
 8008af6:	fa03 f000 	lsl.w	r0, r3, r0
 8008afa:	9b04      	ldr	r3, [sp, #16]
 8008afc:	4303      	orrs	r3, r0
 8008afe:	3401      	adds	r4, #1
 8008b00:	9304      	str	r3, [sp, #16]
 8008b02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b06:	4826      	ldr	r0, [pc, #152]	; (8008ba0 <_svfiprintf_r+0x1f0>)
 8008b08:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008b0c:	2206      	movs	r2, #6
 8008b0e:	f7f7 fb87 	bl	8000220 <memchr>
 8008b12:	2800      	cmp	r0, #0
 8008b14:	d038      	beq.n	8008b88 <_svfiprintf_r+0x1d8>
 8008b16:	4b23      	ldr	r3, [pc, #140]	; (8008ba4 <_svfiprintf_r+0x1f4>)
 8008b18:	bb1b      	cbnz	r3, 8008b62 <_svfiprintf_r+0x1b2>
 8008b1a:	9b03      	ldr	r3, [sp, #12]
 8008b1c:	3307      	adds	r3, #7
 8008b1e:	f023 0307 	bic.w	r3, r3, #7
 8008b22:	3308      	adds	r3, #8
 8008b24:	9303      	str	r3, [sp, #12]
 8008b26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b28:	4433      	add	r3, r6
 8008b2a:	9309      	str	r3, [sp, #36]	; 0x24
 8008b2c:	e767      	b.n	80089fe <_svfiprintf_r+0x4e>
 8008b2e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008b32:	460c      	mov	r4, r1
 8008b34:	2001      	movs	r0, #1
 8008b36:	e7a5      	b.n	8008a84 <_svfiprintf_r+0xd4>
 8008b38:	2300      	movs	r3, #0
 8008b3a:	3401      	adds	r4, #1
 8008b3c:	9305      	str	r3, [sp, #20]
 8008b3e:	4619      	mov	r1, r3
 8008b40:	f04f 0c0a 	mov.w	ip, #10
 8008b44:	4620      	mov	r0, r4
 8008b46:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008b4a:	3a30      	subs	r2, #48	; 0x30
 8008b4c:	2a09      	cmp	r2, #9
 8008b4e:	d903      	bls.n	8008b58 <_svfiprintf_r+0x1a8>
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d0c5      	beq.n	8008ae0 <_svfiprintf_r+0x130>
 8008b54:	9105      	str	r1, [sp, #20]
 8008b56:	e7c3      	b.n	8008ae0 <_svfiprintf_r+0x130>
 8008b58:	fb0c 2101 	mla	r1, ip, r1, r2
 8008b5c:	4604      	mov	r4, r0
 8008b5e:	2301      	movs	r3, #1
 8008b60:	e7f0      	b.n	8008b44 <_svfiprintf_r+0x194>
 8008b62:	ab03      	add	r3, sp, #12
 8008b64:	9300      	str	r3, [sp, #0]
 8008b66:	462a      	mov	r2, r5
 8008b68:	4b0f      	ldr	r3, [pc, #60]	; (8008ba8 <_svfiprintf_r+0x1f8>)
 8008b6a:	a904      	add	r1, sp, #16
 8008b6c:	4638      	mov	r0, r7
 8008b6e:	f7fb feab 	bl	80048c8 <_printf_float>
 8008b72:	1c42      	adds	r2, r0, #1
 8008b74:	4606      	mov	r6, r0
 8008b76:	d1d6      	bne.n	8008b26 <_svfiprintf_r+0x176>
 8008b78:	89ab      	ldrh	r3, [r5, #12]
 8008b7a:	065b      	lsls	r3, r3, #25
 8008b7c:	f53f af2c 	bmi.w	80089d8 <_svfiprintf_r+0x28>
 8008b80:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008b82:	b01d      	add	sp, #116	; 0x74
 8008b84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b88:	ab03      	add	r3, sp, #12
 8008b8a:	9300      	str	r3, [sp, #0]
 8008b8c:	462a      	mov	r2, r5
 8008b8e:	4b06      	ldr	r3, [pc, #24]	; (8008ba8 <_svfiprintf_r+0x1f8>)
 8008b90:	a904      	add	r1, sp, #16
 8008b92:	4638      	mov	r0, r7
 8008b94:	f7fc f93c 	bl	8004e10 <_printf_i>
 8008b98:	e7eb      	b.n	8008b72 <_svfiprintf_r+0x1c2>
 8008b9a:	bf00      	nop
 8008b9c:	08009abc 	.word	0x08009abc
 8008ba0:	08009ac6 	.word	0x08009ac6
 8008ba4:	080048c9 	.word	0x080048c9
 8008ba8:	080088f9 	.word	0x080088f9
 8008bac:	08009ac2 	.word	0x08009ac2

08008bb0 <nan>:
 8008bb0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008bb8 <nan+0x8>
 8008bb4:	4770      	bx	lr
 8008bb6:	bf00      	nop
 8008bb8:	00000000 	.word	0x00000000
 8008bbc:	7ff80000 	.word	0x7ff80000

08008bc0 <_sbrk_r>:
 8008bc0:	b538      	push	{r3, r4, r5, lr}
 8008bc2:	4d06      	ldr	r5, [pc, #24]	; (8008bdc <_sbrk_r+0x1c>)
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	4604      	mov	r4, r0
 8008bc8:	4608      	mov	r0, r1
 8008bca:	602b      	str	r3, [r5, #0]
 8008bcc:	f7f9 fa4e 	bl	800206c <_sbrk>
 8008bd0:	1c43      	adds	r3, r0, #1
 8008bd2:	d102      	bne.n	8008bda <_sbrk_r+0x1a>
 8008bd4:	682b      	ldr	r3, [r5, #0]
 8008bd6:	b103      	cbz	r3, 8008bda <_sbrk_r+0x1a>
 8008bd8:	6023      	str	r3, [r4, #0]
 8008bda:	bd38      	pop	{r3, r4, r5, pc}
 8008bdc:	20000540 	.word	0x20000540

08008be0 <__sread>:
 8008be0:	b510      	push	{r4, lr}
 8008be2:	460c      	mov	r4, r1
 8008be4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008be8:	f000 fa92 	bl	8009110 <_read_r>
 8008bec:	2800      	cmp	r0, #0
 8008bee:	bfab      	itete	ge
 8008bf0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008bf2:	89a3      	ldrhlt	r3, [r4, #12]
 8008bf4:	181b      	addge	r3, r3, r0
 8008bf6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008bfa:	bfac      	ite	ge
 8008bfc:	6563      	strge	r3, [r4, #84]	; 0x54
 8008bfe:	81a3      	strhlt	r3, [r4, #12]
 8008c00:	bd10      	pop	{r4, pc}

08008c02 <__swrite>:
 8008c02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c06:	461f      	mov	r7, r3
 8008c08:	898b      	ldrh	r3, [r1, #12]
 8008c0a:	05db      	lsls	r3, r3, #23
 8008c0c:	4605      	mov	r5, r0
 8008c0e:	460c      	mov	r4, r1
 8008c10:	4616      	mov	r6, r2
 8008c12:	d505      	bpl.n	8008c20 <__swrite+0x1e>
 8008c14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c18:	2302      	movs	r3, #2
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	f000 f8b8 	bl	8008d90 <_lseek_r>
 8008c20:	89a3      	ldrh	r3, [r4, #12]
 8008c22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008c26:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008c2a:	81a3      	strh	r3, [r4, #12]
 8008c2c:	4632      	mov	r2, r6
 8008c2e:	463b      	mov	r3, r7
 8008c30:	4628      	mov	r0, r5
 8008c32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008c36:	f000 b837 	b.w	8008ca8 <_write_r>

08008c3a <__sseek>:
 8008c3a:	b510      	push	{r4, lr}
 8008c3c:	460c      	mov	r4, r1
 8008c3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c42:	f000 f8a5 	bl	8008d90 <_lseek_r>
 8008c46:	1c43      	adds	r3, r0, #1
 8008c48:	89a3      	ldrh	r3, [r4, #12]
 8008c4a:	bf15      	itete	ne
 8008c4c:	6560      	strne	r0, [r4, #84]	; 0x54
 8008c4e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008c52:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008c56:	81a3      	strheq	r3, [r4, #12]
 8008c58:	bf18      	it	ne
 8008c5a:	81a3      	strhne	r3, [r4, #12]
 8008c5c:	bd10      	pop	{r4, pc}

08008c5e <__sclose>:
 8008c5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c62:	f000 b851 	b.w	8008d08 <_close_r>

08008c66 <strncmp>:
 8008c66:	b510      	push	{r4, lr}
 8008c68:	b17a      	cbz	r2, 8008c8a <strncmp+0x24>
 8008c6a:	4603      	mov	r3, r0
 8008c6c:	3901      	subs	r1, #1
 8008c6e:	1884      	adds	r4, r0, r2
 8008c70:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008c74:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008c78:	4290      	cmp	r0, r2
 8008c7a:	d101      	bne.n	8008c80 <strncmp+0x1a>
 8008c7c:	42a3      	cmp	r3, r4
 8008c7e:	d101      	bne.n	8008c84 <strncmp+0x1e>
 8008c80:	1a80      	subs	r0, r0, r2
 8008c82:	bd10      	pop	{r4, pc}
 8008c84:	2800      	cmp	r0, #0
 8008c86:	d1f3      	bne.n	8008c70 <strncmp+0xa>
 8008c88:	e7fa      	b.n	8008c80 <strncmp+0x1a>
 8008c8a:	4610      	mov	r0, r2
 8008c8c:	e7f9      	b.n	8008c82 <strncmp+0x1c>

08008c8e <__ascii_wctomb>:
 8008c8e:	b149      	cbz	r1, 8008ca4 <__ascii_wctomb+0x16>
 8008c90:	2aff      	cmp	r2, #255	; 0xff
 8008c92:	bf85      	ittet	hi
 8008c94:	238a      	movhi	r3, #138	; 0x8a
 8008c96:	6003      	strhi	r3, [r0, #0]
 8008c98:	700a      	strbls	r2, [r1, #0]
 8008c9a:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8008c9e:	bf98      	it	ls
 8008ca0:	2001      	movls	r0, #1
 8008ca2:	4770      	bx	lr
 8008ca4:	4608      	mov	r0, r1
 8008ca6:	4770      	bx	lr

08008ca8 <_write_r>:
 8008ca8:	b538      	push	{r3, r4, r5, lr}
 8008caa:	4d07      	ldr	r5, [pc, #28]	; (8008cc8 <_write_r+0x20>)
 8008cac:	4604      	mov	r4, r0
 8008cae:	4608      	mov	r0, r1
 8008cb0:	4611      	mov	r1, r2
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	602a      	str	r2, [r5, #0]
 8008cb6:	461a      	mov	r2, r3
 8008cb8:	f7f8 fe56 	bl	8001968 <_write>
 8008cbc:	1c43      	adds	r3, r0, #1
 8008cbe:	d102      	bne.n	8008cc6 <_write_r+0x1e>
 8008cc0:	682b      	ldr	r3, [r5, #0]
 8008cc2:	b103      	cbz	r3, 8008cc6 <_write_r+0x1e>
 8008cc4:	6023      	str	r3, [r4, #0]
 8008cc6:	bd38      	pop	{r3, r4, r5, pc}
 8008cc8:	20000540 	.word	0x20000540

08008ccc <__assert_func>:
 8008ccc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008cce:	4614      	mov	r4, r2
 8008cd0:	461a      	mov	r2, r3
 8008cd2:	4b09      	ldr	r3, [pc, #36]	; (8008cf8 <__assert_func+0x2c>)
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	4605      	mov	r5, r0
 8008cd8:	68d8      	ldr	r0, [r3, #12]
 8008cda:	b14c      	cbz	r4, 8008cf0 <__assert_func+0x24>
 8008cdc:	4b07      	ldr	r3, [pc, #28]	; (8008cfc <__assert_func+0x30>)
 8008cde:	9100      	str	r1, [sp, #0]
 8008ce0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008ce4:	4906      	ldr	r1, [pc, #24]	; (8008d00 <__assert_func+0x34>)
 8008ce6:	462b      	mov	r3, r5
 8008ce8:	f000 f81e 	bl	8008d28 <fiprintf>
 8008cec:	f000 fa22 	bl	8009134 <abort>
 8008cf0:	4b04      	ldr	r3, [pc, #16]	; (8008d04 <__assert_func+0x38>)
 8008cf2:	461c      	mov	r4, r3
 8008cf4:	e7f3      	b.n	8008cde <__assert_func+0x12>
 8008cf6:	bf00      	nop
 8008cf8:	2000000c 	.word	0x2000000c
 8008cfc:	08009acd 	.word	0x08009acd
 8008d00:	08009ada 	.word	0x08009ada
 8008d04:	08009b08 	.word	0x08009b08

08008d08 <_close_r>:
 8008d08:	b538      	push	{r3, r4, r5, lr}
 8008d0a:	4d06      	ldr	r5, [pc, #24]	; (8008d24 <_close_r+0x1c>)
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	4604      	mov	r4, r0
 8008d10:	4608      	mov	r0, r1
 8008d12:	602b      	str	r3, [r5, #0]
 8008d14:	f7f9 f975 	bl	8002002 <_close>
 8008d18:	1c43      	adds	r3, r0, #1
 8008d1a:	d102      	bne.n	8008d22 <_close_r+0x1a>
 8008d1c:	682b      	ldr	r3, [r5, #0]
 8008d1e:	b103      	cbz	r3, 8008d22 <_close_r+0x1a>
 8008d20:	6023      	str	r3, [r4, #0]
 8008d22:	bd38      	pop	{r3, r4, r5, pc}
 8008d24:	20000540 	.word	0x20000540

08008d28 <fiprintf>:
 8008d28:	b40e      	push	{r1, r2, r3}
 8008d2a:	b503      	push	{r0, r1, lr}
 8008d2c:	4601      	mov	r1, r0
 8008d2e:	ab03      	add	r3, sp, #12
 8008d30:	4805      	ldr	r0, [pc, #20]	; (8008d48 <fiprintf+0x20>)
 8008d32:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d36:	6800      	ldr	r0, [r0, #0]
 8008d38:	9301      	str	r3, [sp, #4]
 8008d3a:	f000 f8b9 	bl	8008eb0 <_vfiprintf_r>
 8008d3e:	b002      	add	sp, #8
 8008d40:	f85d eb04 	ldr.w	lr, [sp], #4
 8008d44:	b003      	add	sp, #12
 8008d46:	4770      	bx	lr
 8008d48:	2000000c 	.word	0x2000000c

08008d4c <_fstat_r>:
 8008d4c:	b538      	push	{r3, r4, r5, lr}
 8008d4e:	4d07      	ldr	r5, [pc, #28]	; (8008d6c <_fstat_r+0x20>)
 8008d50:	2300      	movs	r3, #0
 8008d52:	4604      	mov	r4, r0
 8008d54:	4608      	mov	r0, r1
 8008d56:	4611      	mov	r1, r2
 8008d58:	602b      	str	r3, [r5, #0]
 8008d5a:	f7f9 f95e 	bl	800201a <_fstat>
 8008d5e:	1c43      	adds	r3, r0, #1
 8008d60:	d102      	bne.n	8008d68 <_fstat_r+0x1c>
 8008d62:	682b      	ldr	r3, [r5, #0]
 8008d64:	b103      	cbz	r3, 8008d68 <_fstat_r+0x1c>
 8008d66:	6023      	str	r3, [r4, #0]
 8008d68:	bd38      	pop	{r3, r4, r5, pc}
 8008d6a:	bf00      	nop
 8008d6c:	20000540 	.word	0x20000540

08008d70 <_isatty_r>:
 8008d70:	b538      	push	{r3, r4, r5, lr}
 8008d72:	4d06      	ldr	r5, [pc, #24]	; (8008d8c <_isatty_r+0x1c>)
 8008d74:	2300      	movs	r3, #0
 8008d76:	4604      	mov	r4, r0
 8008d78:	4608      	mov	r0, r1
 8008d7a:	602b      	str	r3, [r5, #0]
 8008d7c:	f7f9 f95d 	bl	800203a <_isatty>
 8008d80:	1c43      	adds	r3, r0, #1
 8008d82:	d102      	bne.n	8008d8a <_isatty_r+0x1a>
 8008d84:	682b      	ldr	r3, [r5, #0]
 8008d86:	b103      	cbz	r3, 8008d8a <_isatty_r+0x1a>
 8008d88:	6023      	str	r3, [r4, #0]
 8008d8a:	bd38      	pop	{r3, r4, r5, pc}
 8008d8c:	20000540 	.word	0x20000540

08008d90 <_lseek_r>:
 8008d90:	b538      	push	{r3, r4, r5, lr}
 8008d92:	4d07      	ldr	r5, [pc, #28]	; (8008db0 <_lseek_r+0x20>)
 8008d94:	4604      	mov	r4, r0
 8008d96:	4608      	mov	r0, r1
 8008d98:	4611      	mov	r1, r2
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	602a      	str	r2, [r5, #0]
 8008d9e:	461a      	mov	r2, r3
 8008da0:	f7f9 f956 	bl	8002050 <_lseek>
 8008da4:	1c43      	adds	r3, r0, #1
 8008da6:	d102      	bne.n	8008dae <_lseek_r+0x1e>
 8008da8:	682b      	ldr	r3, [r5, #0]
 8008daa:	b103      	cbz	r3, 8008dae <_lseek_r+0x1e>
 8008dac:	6023      	str	r3, [r4, #0]
 8008dae:	bd38      	pop	{r3, r4, r5, pc}
 8008db0:	20000540 	.word	0x20000540

08008db4 <memmove>:
 8008db4:	4288      	cmp	r0, r1
 8008db6:	b510      	push	{r4, lr}
 8008db8:	eb01 0402 	add.w	r4, r1, r2
 8008dbc:	d902      	bls.n	8008dc4 <memmove+0x10>
 8008dbe:	4284      	cmp	r4, r0
 8008dc0:	4623      	mov	r3, r4
 8008dc2:	d807      	bhi.n	8008dd4 <memmove+0x20>
 8008dc4:	1e43      	subs	r3, r0, #1
 8008dc6:	42a1      	cmp	r1, r4
 8008dc8:	d008      	beq.n	8008ddc <memmove+0x28>
 8008dca:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008dce:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008dd2:	e7f8      	b.n	8008dc6 <memmove+0x12>
 8008dd4:	4402      	add	r2, r0
 8008dd6:	4601      	mov	r1, r0
 8008dd8:	428a      	cmp	r2, r1
 8008dda:	d100      	bne.n	8008dde <memmove+0x2a>
 8008ddc:	bd10      	pop	{r4, pc}
 8008dde:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008de2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008de6:	e7f7      	b.n	8008dd8 <memmove+0x24>

08008de8 <__malloc_lock>:
 8008de8:	4801      	ldr	r0, [pc, #4]	; (8008df0 <__malloc_lock+0x8>)
 8008dea:	f7fe bf3e 	b.w	8007c6a <__retarget_lock_acquire_recursive>
 8008dee:	bf00      	nop
 8008df0:	20000534 	.word	0x20000534

08008df4 <__malloc_unlock>:
 8008df4:	4801      	ldr	r0, [pc, #4]	; (8008dfc <__malloc_unlock+0x8>)
 8008df6:	f7fe bf39 	b.w	8007c6c <__retarget_lock_release_recursive>
 8008dfa:	bf00      	nop
 8008dfc:	20000534 	.word	0x20000534

08008e00 <_realloc_r>:
 8008e00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e04:	4680      	mov	r8, r0
 8008e06:	4614      	mov	r4, r2
 8008e08:	460e      	mov	r6, r1
 8008e0a:	b921      	cbnz	r1, 8008e16 <_realloc_r+0x16>
 8008e0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008e10:	4611      	mov	r1, r2
 8008e12:	f7ff bcfd 	b.w	8008810 <_malloc_r>
 8008e16:	b92a      	cbnz	r2, 8008e24 <_realloc_r+0x24>
 8008e18:	f7ff fc8e 	bl	8008738 <_free_r>
 8008e1c:	4625      	mov	r5, r4
 8008e1e:	4628      	mov	r0, r5
 8008e20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e24:	f000 f98d 	bl	8009142 <_malloc_usable_size_r>
 8008e28:	4284      	cmp	r4, r0
 8008e2a:	4607      	mov	r7, r0
 8008e2c:	d802      	bhi.n	8008e34 <_realloc_r+0x34>
 8008e2e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008e32:	d812      	bhi.n	8008e5a <_realloc_r+0x5a>
 8008e34:	4621      	mov	r1, r4
 8008e36:	4640      	mov	r0, r8
 8008e38:	f7ff fcea 	bl	8008810 <_malloc_r>
 8008e3c:	4605      	mov	r5, r0
 8008e3e:	2800      	cmp	r0, #0
 8008e40:	d0ed      	beq.n	8008e1e <_realloc_r+0x1e>
 8008e42:	42bc      	cmp	r4, r7
 8008e44:	4622      	mov	r2, r4
 8008e46:	4631      	mov	r1, r6
 8008e48:	bf28      	it	cs
 8008e4a:	463a      	movcs	r2, r7
 8008e4c:	f7fe ff8e 	bl	8007d6c <memcpy>
 8008e50:	4631      	mov	r1, r6
 8008e52:	4640      	mov	r0, r8
 8008e54:	f7ff fc70 	bl	8008738 <_free_r>
 8008e58:	e7e1      	b.n	8008e1e <_realloc_r+0x1e>
 8008e5a:	4635      	mov	r5, r6
 8008e5c:	e7df      	b.n	8008e1e <_realloc_r+0x1e>

08008e5e <__sfputc_r>:
 8008e5e:	6893      	ldr	r3, [r2, #8]
 8008e60:	3b01      	subs	r3, #1
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	b410      	push	{r4}
 8008e66:	6093      	str	r3, [r2, #8]
 8008e68:	da08      	bge.n	8008e7c <__sfputc_r+0x1e>
 8008e6a:	6994      	ldr	r4, [r2, #24]
 8008e6c:	42a3      	cmp	r3, r4
 8008e6e:	db01      	blt.n	8008e74 <__sfputc_r+0x16>
 8008e70:	290a      	cmp	r1, #10
 8008e72:	d103      	bne.n	8008e7c <__sfputc_r+0x1e>
 8008e74:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e78:	f7fd ba92 	b.w	80063a0 <__swbuf_r>
 8008e7c:	6813      	ldr	r3, [r2, #0]
 8008e7e:	1c58      	adds	r0, r3, #1
 8008e80:	6010      	str	r0, [r2, #0]
 8008e82:	7019      	strb	r1, [r3, #0]
 8008e84:	4608      	mov	r0, r1
 8008e86:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e8a:	4770      	bx	lr

08008e8c <__sfputs_r>:
 8008e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e8e:	4606      	mov	r6, r0
 8008e90:	460f      	mov	r7, r1
 8008e92:	4614      	mov	r4, r2
 8008e94:	18d5      	adds	r5, r2, r3
 8008e96:	42ac      	cmp	r4, r5
 8008e98:	d101      	bne.n	8008e9e <__sfputs_r+0x12>
 8008e9a:	2000      	movs	r0, #0
 8008e9c:	e007      	b.n	8008eae <__sfputs_r+0x22>
 8008e9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ea2:	463a      	mov	r2, r7
 8008ea4:	4630      	mov	r0, r6
 8008ea6:	f7ff ffda 	bl	8008e5e <__sfputc_r>
 8008eaa:	1c43      	adds	r3, r0, #1
 8008eac:	d1f3      	bne.n	8008e96 <__sfputs_r+0xa>
 8008eae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008eb0 <_vfiprintf_r>:
 8008eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008eb4:	460d      	mov	r5, r1
 8008eb6:	b09d      	sub	sp, #116	; 0x74
 8008eb8:	4614      	mov	r4, r2
 8008eba:	4698      	mov	r8, r3
 8008ebc:	4606      	mov	r6, r0
 8008ebe:	b118      	cbz	r0, 8008ec8 <_vfiprintf_r+0x18>
 8008ec0:	6983      	ldr	r3, [r0, #24]
 8008ec2:	b90b      	cbnz	r3, 8008ec8 <_vfiprintf_r+0x18>
 8008ec4:	f7fe fac0 	bl	8007448 <__sinit>
 8008ec8:	4b89      	ldr	r3, [pc, #548]	; (80090f0 <_vfiprintf_r+0x240>)
 8008eca:	429d      	cmp	r5, r3
 8008ecc:	d11b      	bne.n	8008f06 <_vfiprintf_r+0x56>
 8008ece:	6875      	ldr	r5, [r6, #4]
 8008ed0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008ed2:	07d9      	lsls	r1, r3, #31
 8008ed4:	d405      	bmi.n	8008ee2 <_vfiprintf_r+0x32>
 8008ed6:	89ab      	ldrh	r3, [r5, #12]
 8008ed8:	059a      	lsls	r2, r3, #22
 8008eda:	d402      	bmi.n	8008ee2 <_vfiprintf_r+0x32>
 8008edc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008ede:	f7fe fec4 	bl	8007c6a <__retarget_lock_acquire_recursive>
 8008ee2:	89ab      	ldrh	r3, [r5, #12]
 8008ee4:	071b      	lsls	r3, r3, #28
 8008ee6:	d501      	bpl.n	8008eec <_vfiprintf_r+0x3c>
 8008ee8:	692b      	ldr	r3, [r5, #16]
 8008eea:	b9eb      	cbnz	r3, 8008f28 <_vfiprintf_r+0x78>
 8008eec:	4629      	mov	r1, r5
 8008eee:	4630      	mov	r0, r6
 8008ef0:	f7fd faa8 	bl	8006444 <__swsetup_r>
 8008ef4:	b1c0      	cbz	r0, 8008f28 <_vfiprintf_r+0x78>
 8008ef6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008ef8:	07dc      	lsls	r4, r3, #31
 8008efa:	d50e      	bpl.n	8008f1a <_vfiprintf_r+0x6a>
 8008efc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008f00:	b01d      	add	sp, #116	; 0x74
 8008f02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f06:	4b7b      	ldr	r3, [pc, #492]	; (80090f4 <_vfiprintf_r+0x244>)
 8008f08:	429d      	cmp	r5, r3
 8008f0a:	d101      	bne.n	8008f10 <_vfiprintf_r+0x60>
 8008f0c:	68b5      	ldr	r5, [r6, #8]
 8008f0e:	e7df      	b.n	8008ed0 <_vfiprintf_r+0x20>
 8008f10:	4b79      	ldr	r3, [pc, #484]	; (80090f8 <_vfiprintf_r+0x248>)
 8008f12:	429d      	cmp	r5, r3
 8008f14:	bf08      	it	eq
 8008f16:	68f5      	ldreq	r5, [r6, #12]
 8008f18:	e7da      	b.n	8008ed0 <_vfiprintf_r+0x20>
 8008f1a:	89ab      	ldrh	r3, [r5, #12]
 8008f1c:	0598      	lsls	r0, r3, #22
 8008f1e:	d4ed      	bmi.n	8008efc <_vfiprintf_r+0x4c>
 8008f20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008f22:	f7fe fea3 	bl	8007c6c <__retarget_lock_release_recursive>
 8008f26:	e7e9      	b.n	8008efc <_vfiprintf_r+0x4c>
 8008f28:	2300      	movs	r3, #0
 8008f2a:	9309      	str	r3, [sp, #36]	; 0x24
 8008f2c:	2320      	movs	r3, #32
 8008f2e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008f32:	f8cd 800c 	str.w	r8, [sp, #12]
 8008f36:	2330      	movs	r3, #48	; 0x30
 8008f38:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80090fc <_vfiprintf_r+0x24c>
 8008f3c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008f40:	f04f 0901 	mov.w	r9, #1
 8008f44:	4623      	mov	r3, r4
 8008f46:	469a      	mov	sl, r3
 8008f48:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f4c:	b10a      	cbz	r2, 8008f52 <_vfiprintf_r+0xa2>
 8008f4e:	2a25      	cmp	r2, #37	; 0x25
 8008f50:	d1f9      	bne.n	8008f46 <_vfiprintf_r+0x96>
 8008f52:	ebba 0b04 	subs.w	fp, sl, r4
 8008f56:	d00b      	beq.n	8008f70 <_vfiprintf_r+0xc0>
 8008f58:	465b      	mov	r3, fp
 8008f5a:	4622      	mov	r2, r4
 8008f5c:	4629      	mov	r1, r5
 8008f5e:	4630      	mov	r0, r6
 8008f60:	f7ff ff94 	bl	8008e8c <__sfputs_r>
 8008f64:	3001      	adds	r0, #1
 8008f66:	f000 80aa 	beq.w	80090be <_vfiprintf_r+0x20e>
 8008f6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f6c:	445a      	add	r2, fp
 8008f6e:	9209      	str	r2, [sp, #36]	; 0x24
 8008f70:	f89a 3000 	ldrb.w	r3, [sl]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	f000 80a2 	beq.w	80090be <_vfiprintf_r+0x20e>
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008f80:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f84:	f10a 0a01 	add.w	sl, sl, #1
 8008f88:	9304      	str	r3, [sp, #16]
 8008f8a:	9307      	str	r3, [sp, #28]
 8008f8c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008f90:	931a      	str	r3, [sp, #104]	; 0x68
 8008f92:	4654      	mov	r4, sl
 8008f94:	2205      	movs	r2, #5
 8008f96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f9a:	4858      	ldr	r0, [pc, #352]	; (80090fc <_vfiprintf_r+0x24c>)
 8008f9c:	f7f7 f940 	bl	8000220 <memchr>
 8008fa0:	9a04      	ldr	r2, [sp, #16]
 8008fa2:	b9d8      	cbnz	r0, 8008fdc <_vfiprintf_r+0x12c>
 8008fa4:	06d1      	lsls	r1, r2, #27
 8008fa6:	bf44      	itt	mi
 8008fa8:	2320      	movmi	r3, #32
 8008faa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008fae:	0713      	lsls	r3, r2, #28
 8008fb0:	bf44      	itt	mi
 8008fb2:	232b      	movmi	r3, #43	; 0x2b
 8008fb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008fb8:	f89a 3000 	ldrb.w	r3, [sl]
 8008fbc:	2b2a      	cmp	r3, #42	; 0x2a
 8008fbe:	d015      	beq.n	8008fec <_vfiprintf_r+0x13c>
 8008fc0:	9a07      	ldr	r2, [sp, #28]
 8008fc2:	4654      	mov	r4, sl
 8008fc4:	2000      	movs	r0, #0
 8008fc6:	f04f 0c0a 	mov.w	ip, #10
 8008fca:	4621      	mov	r1, r4
 8008fcc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008fd0:	3b30      	subs	r3, #48	; 0x30
 8008fd2:	2b09      	cmp	r3, #9
 8008fd4:	d94e      	bls.n	8009074 <_vfiprintf_r+0x1c4>
 8008fd6:	b1b0      	cbz	r0, 8009006 <_vfiprintf_r+0x156>
 8008fd8:	9207      	str	r2, [sp, #28]
 8008fda:	e014      	b.n	8009006 <_vfiprintf_r+0x156>
 8008fdc:	eba0 0308 	sub.w	r3, r0, r8
 8008fe0:	fa09 f303 	lsl.w	r3, r9, r3
 8008fe4:	4313      	orrs	r3, r2
 8008fe6:	9304      	str	r3, [sp, #16]
 8008fe8:	46a2      	mov	sl, r4
 8008fea:	e7d2      	b.n	8008f92 <_vfiprintf_r+0xe2>
 8008fec:	9b03      	ldr	r3, [sp, #12]
 8008fee:	1d19      	adds	r1, r3, #4
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	9103      	str	r1, [sp, #12]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	bfbb      	ittet	lt
 8008ff8:	425b      	neglt	r3, r3
 8008ffa:	f042 0202 	orrlt.w	r2, r2, #2
 8008ffe:	9307      	strge	r3, [sp, #28]
 8009000:	9307      	strlt	r3, [sp, #28]
 8009002:	bfb8      	it	lt
 8009004:	9204      	strlt	r2, [sp, #16]
 8009006:	7823      	ldrb	r3, [r4, #0]
 8009008:	2b2e      	cmp	r3, #46	; 0x2e
 800900a:	d10c      	bne.n	8009026 <_vfiprintf_r+0x176>
 800900c:	7863      	ldrb	r3, [r4, #1]
 800900e:	2b2a      	cmp	r3, #42	; 0x2a
 8009010:	d135      	bne.n	800907e <_vfiprintf_r+0x1ce>
 8009012:	9b03      	ldr	r3, [sp, #12]
 8009014:	1d1a      	adds	r2, r3, #4
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	9203      	str	r2, [sp, #12]
 800901a:	2b00      	cmp	r3, #0
 800901c:	bfb8      	it	lt
 800901e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009022:	3402      	adds	r4, #2
 8009024:	9305      	str	r3, [sp, #20]
 8009026:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800910c <_vfiprintf_r+0x25c>
 800902a:	7821      	ldrb	r1, [r4, #0]
 800902c:	2203      	movs	r2, #3
 800902e:	4650      	mov	r0, sl
 8009030:	f7f7 f8f6 	bl	8000220 <memchr>
 8009034:	b140      	cbz	r0, 8009048 <_vfiprintf_r+0x198>
 8009036:	2340      	movs	r3, #64	; 0x40
 8009038:	eba0 000a 	sub.w	r0, r0, sl
 800903c:	fa03 f000 	lsl.w	r0, r3, r0
 8009040:	9b04      	ldr	r3, [sp, #16]
 8009042:	4303      	orrs	r3, r0
 8009044:	3401      	adds	r4, #1
 8009046:	9304      	str	r3, [sp, #16]
 8009048:	f814 1b01 	ldrb.w	r1, [r4], #1
 800904c:	482c      	ldr	r0, [pc, #176]	; (8009100 <_vfiprintf_r+0x250>)
 800904e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009052:	2206      	movs	r2, #6
 8009054:	f7f7 f8e4 	bl	8000220 <memchr>
 8009058:	2800      	cmp	r0, #0
 800905a:	d03f      	beq.n	80090dc <_vfiprintf_r+0x22c>
 800905c:	4b29      	ldr	r3, [pc, #164]	; (8009104 <_vfiprintf_r+0x254>)
 800905e:	bb1b      	cbnz	r3, 80090a8 <_vfiprintf_r+0x1f8>
 8009060:	9b03      	ldr	r3, [sp, #12]
 8009062:	3307      	adds	r3, #7
 8009064:	f023 0307 	bic.w	r3, r3, #7
 8009068:	3308      	adds	r3, #8
 800906a:	9303      	str	r3, [sp, #12]
 800906c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800906e:	443b      	add	r3, r7
 8009070:	9309      	str	r3, [sp, #36]	; 0x24
 8009072:	e767      	b.n	8008f44 <_vfiprintf_r+0x94>
 8009074:	fb0c 3202 	mla	r2, ip, r2, r3
 8009078:	460c      	mov	r4, r1
 800907a:	2001      	movs	r0, #1
 800907c:	e7a5      	b.n	8008fca <_vfiprintf_r+0x11a>
 800907e:	2300      	movs	r3, #0
 8009080:	3401      	adds	r4, #1
 8009082:	9305      	str	r3, [sp, #20]
 8009084:	4619      	mov	r1, r3
 8009086:	f04f 0c0a 	mov.w	ip, #10
 800908a:	4620      	mov	r0, r4
 800908c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009090:	3a30      	subs	r2, #48	; 0x30
 8009092:	2a09      	cmp	r2, #9
 8009094:	d903      	bls.n	800909e <_vfiprintf_r+0x1ee>
 8009096:	2b00      	cmp	r3, #0
 8009098:	d0c5      	beq.n	8009026 <_vfiprintf_r+0x176>
 800909a:	9105      	str	r1, [sp, #20]
 800909c:	e7c3      	b.n	8009026 <_vfiprintf_r+0x176>
 800909e:	fb0c 2101 	mla	r1, ip, r1, r2
 80090a2:	4604      	mov	r4, r0
 80090a4:	2301      	movs	r3, #1
 80090a6:	e7f0      	b.n	800908a <_vfiprintf_r+0x1da>
 80090a8:	ab03      	add	r3, sp, #12
 80090aa:	9300      	str	r3, [sp, #0]
 80090ac:	462a      	mov	r2, r5
 80090ae:	4b16      	ldr	r3, [pc, #88]	; (8009108 <_vfiprintf_r+0x258>)
 80090b0:	a904      	add	r1, sp, #16
 80090b2:	4630      	mov	r0, r6
 80090b4:	f7fb fc08 	bl	80048c8 <_printf_float>
 80090b8:	4607      	mov	r7, r0
 80090ba:	1c78      	adds	r0, r7, #1
 80090bc:	d1d6      	bne.n	800906c <_vfiprintf_r+0x1bc>
 80090be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80090c0:	07d9      	lsls	r1, r3, #31
 80090c2:	d405      	bmi.n	80090d0 <_vfiprintf_r+0x220>
 80090c4:	89ab      	ldrh	r3, [r5, #12]
 80090c6:	059a      	lsls	r2, r3, #22
 80090c8:	d402      	bmi.n	80090d0 <_vfiprintf_r+0x220>
 80090ca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80090cc:	f7fe fdce 	bl	8007c6c <__retarget_lock_release_recursive>
 80090d0:	89ab      	ldrh	r3, [r5, #12]
 80090d2:	065b      	lsls	r3, r3, #25
 80090d4:	f53f af12 	bmi.w	8008efc <_vfiprintf_r+0x4c>
 80090d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80090da:	e711      	b.n	8008f00 <_vfiprintf_r+0x50>
 80090dc:	ab03      	add	r3, sp, #12
 80090de:	9300      	str	r3, [sp, #0]
 80090e0:	462a      	mov	r2, r5
 80090e2:	4b09      	ldr	r3, [pc, #36]	; (8009108 <_vfiprintf_r+0x258>)
 80090e4:	a904      	add	r1, sp, #16
 80090e6:	4630      	mov	r0, r6
 80090e8:	f7fb fe92 	bl	8004e10 <_printf_i>
 80090ec:	e7e4      	b.n	80090b8 <_vfiprintf_r+0x208>
 80090ee:	bf00      	nop
 80090f0:	080098a4 	.word	0x080098a4
 80090f4:	080098c4 	.word	0x080098c4
 80090f8:	08009884 	.word	0x08009884
 80090fc:	08009abc 	.word	0x08009abc
 8009100:	08009ac6 	.word	0x08009ac6
 8009104:	080048c9 	.word	0x080048c9
 8009108:	08008e8d 	.word	0x08008e8d
 800910c:	08009ac2 	.word	0x08009ac2

08009110 <_read_r>:
 8009110:	b538      	push	{r3, r4, r5, lr}
 8009112:	4d07      	ldr	r5, [pc, #28]	; (8009130 <_read_r+0x20>)
 8009114:	4604      	mov	r4, r0
 8009116:	4608      	mov	r0, r1
 8009118:	4611      	mov	r1, r2
 800911a:	2200      	movs	r2, #0
 800911c:	602a      	str	r2, [r5, #0]
 800911e:	461a      	mov	r2, r3
 8009120:	f7f8 ff52 	bl	8001fc8 <_read>
 8009124:	1c43      	adds	r3, r0, #1
 8009126:	d102      	bne.n	800912e <_read_r+0x1e>
 8009128:	682b      	ldr	r3, [r5, #0]
 800912a:	b103      	cbz	r3, 800912e <_read_r+0x1e>
 800912c:	6023      	str	r3, [r4, #0]
 800912e:	bd38      	pop	{r3, r4, r5, pc}
 8009130:	20000540 	.word	0x20000540

08009134 <abort>:
 8009134:	b508      	push	{r3, lr}
 8009136:	2006      	movs	r0, #6
 8009138:	f000 f834 	bl	80091a4 <raise>
 800913c:	2001      	movs	r0, #1
 800913e:	f7f8 ff39 	bl	8001fb4 <_exit>

08009142 <_malloc_usable_size_r>:
 8009142:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009146:	1f18      	subs	r0, r3, #4
 8009148:	2b00      	cmp	r3, #0
 800914a:	bfbc      	itt	lt
 800914c:	580b      	ldrlt	r3, [r1, r0]
 800914e:	18c0      	addlt	r0, r0, r3
 8009150:	4770      	bx	lr

08009152 <_raise_r>:
 8009152:	291f      	cmp	r1, #31
 8009154:	b538      	push	{r3, r4, r5, lr}
 8009156:	4604      	mov	r4, r0
 8009158:	460d      	mov	r5, r1
 800915a:	d904      	bls.n	8009166 <_raise_r+0x14>
 800915c:	2316      	movs	r3, #22
 800915e:	6003      	str	r3, [r0, #0]
 8009160:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009164:	bd38      	pop	{r3, r4, r5, pc}
 8009166:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009168:	b112      	cbz	r2, 8009170 <_raise_r+0x1e>
 800916a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800916e:	b94b      	cbnz	r3, 8009184 <_raise_r+0x32>
 8009170:	4620      	mov	r0, r4
 8009172:	f000 f831 	bl	80091d8 <_getpid_r>
 8009176:	462a      	mov	r2, r5
 8009178:	4601      	mov	r1, r0
 800917a:	4620      	mov	r0, r4
 800917c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009180:	f000 b818 	b.w	80091b4 <_kill_r>
 8009184:	2b01      	cmp	r3, #1
 8009186:	d00a      	beq.n	800919e <_raise_r+0x4c>
 8009188:	1c59      	adds	r1, r3, #1
 800918a:	d103      	bne.n	8009194 <_raise_r+0x42>
 800918c:	2316      	movs	r3, #22
 800918e:	6003      	str	r3, [r0, #0]
 8009190:	2001      	movs	r0, #1
 8009192:	e7e7      	b.n	8009164 <_raise_r+0x12>
 8009194:	2400      	movs	r4, #0
 8009196:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800919a:	4628      	mov	r0, r5
 800919c:	4798      	blx	r3
 800919e:	2000      	movs	r0, #0
 80091a0:	e7e0      	b.n	8009164 <_raise_r+0x12>
	...

080091a4 <raise>:
 80091a4:	4b02      	ldr	r3, [pc, #8]	; (80091b0 <raise+0xc>)
 80091a6:	4601      	mov	r1, r0
 80091a8:	6818      	ldr	r0, [r3, #0]
 80091aa:	f7ff bfd2 	b.w	8009152 <_raise_r>
 80091ae:	bf00      	nop
 80091b0:	2000000c 	.word	0x2000000c

080091b4 <_kill_r>:
 80091b4:	b538      	push	{r3, r4, r5, lr}
 80091b6:	4d07      	ldr	r5, [pc, #28]	; (80091d4 <_kill_r+0x20>)
 80091b8:	2300      	movs	r3, #0
 80091ba:	4604      	mov	r4, r0
 80091bc:	4608      	mov	r0, r1
 80091be:	4611      	mov	r1, r2
 80091c0:	602b      	str	r3, [r5, #0]
 80091c2:	f7f8 fee7 	bl	8001f94 <_kill>
 80091c6:	1c43      	adds	r3, r0, #1
 80091c8:	d102      	bne.n	80091d0 <_kill_r+0x1c>
 80091ca:	682b      	ldr	r3, [r5, #0]
 80091cc:	b103      	cbz	r3, 80091d0 <_kill_r+0x1c>
 80091ce:	6023      	str	r3, [r4, #0]
 80091d0:	bd38      	pop	{r3, r4, r5, pc}
 80091d2:	bf00      	nop
 80091d4:	20000540 	.word	0x20000540

080091d8 <_getpid_r>:
 80091d8:	f7f8 bed4 	b.w	8001f84 <_getpid>

080091dc <_init>:
 80091dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091de:	bf00      	nop
 80091e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091e2:	bc08      	pop	{r3}
 80091e4:	469e      	mov	lr, r3
 80091e6:	4770      	bx	lr

080091e8 <_fini>:
 80091e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091ea:	bf00      	nop
 80091ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091ee:	bc08      	pop	{r3}
 80091f0:	469e      	mov	lr, r3
 80091f2:	4770      	bx	lr
