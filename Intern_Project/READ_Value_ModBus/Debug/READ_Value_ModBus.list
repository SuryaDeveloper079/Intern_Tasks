
READ_Value_ModBus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000087c4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000078c  08008998  08008998  00018998  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009124  08009124  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08009124  08009124  00019124  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800912c  0800912c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800912c  0800912c  0001912c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009130  08009130  00019130  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08009134  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  200001e0  08009314  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000029c  08009314  0002029c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a300  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b94  00000000  00000000  0002a510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000830  00000000  00000000  0002c0a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000778  00000000  00000000  0002c8d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021cf4  00000000  00000000  0002d050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000aa09  00000000  00000000  0004ed44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c9c49  00000000  00000000  0005974d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00123396  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003678  00000000  00000000  001233e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800897c 	.word	0x0800897c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	0800897c 	.word	0x0800897c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cdc:	f000 b9aa 	b.w	8001034 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	468e      	mov	lr, r1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d14d      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d72:	428a      	cmp	r2, r1
 8000d74:	4694      	mov	ip, r2
 8000d76:	d969      	bls.n	8000e4c <__udivmoddi4+0xe8>
 8000d78:	fab2 f282 	clz	r2, r2
 8000d7c:	b152      	cbz	r2, 8000d94 <__udivmoddi4+0x30>
 8000d7e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d82:	f1c2 0120 	rsb	r1, r2, #32
 8000d86:	fa20 f101 	lsr.w	r1, r0, r1
 8000d8a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d92:	4094      	lsls	r4, r2
 8000d94:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d98:	0c21      	lsrs	r1, r4, #16
 8000d9a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d9e:	fa1f f78c 	uxth.w	r7, ip
 8000da2:	fb08 e316 	mls	r3, r8, r6, lr
 8000da6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000daa:	fb06 f107 	mul.w	r1, r6, r7
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000dba:	f080 811f 	bcs.w	8000ffc <__udivmoddi4+0x298>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 811c 	bls.w	8000ffc <__udivmoddi4+0x298>
 8000dc4:	3e02      	subs	r6, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a5b      	subs	r3, r3, r1
 8000dca:	b2a4      	uxth	r4, r4
 8000dcc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd8:	fb00 f707 	mul.w	r7, r0, r7
 8000ddc:	42a7      	cmp	r7, r4
 8000dde:	d90a      	bls.n	8000df6 <__udivmoddi4+0x92>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000de8:	f080 810a 	bcs.w	8001000 <__udivmoddi4+0x29c>
 8000dec:	42a7      	cmp	r7, r4
 8000dee:	f240 8107 	bls.w	8001000 <__udivmoddi4+0x29c>
 8000df2:	4464      	add	r4, ip
 8000df4:	3802      	subs	r0, #2
 8000df6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dfa:	1be4      	subs	r4, r4, r7
 8000dfc:	2600      	movs	r6, #0
 8000dfe:	b11d      	cbz	r5, 8000e08 <__udivmoddi4+0xa4>
 8000e00:	40d4      	lsrs	r4, r2
 8000e02:	2300      	movs	r3, #0
 8000e04:	e9c5 4300 	strd	r4, r3, [r5]
 8000e08:	4631      	mov	r1, r6
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d909      	bls.n	8000e26 <__udivmoddi4+0xc2>
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	f000 80ef 	beq.w	8000ff6 <__udivmoddi4+0x292>
 8000e18:	2600      	movs	r6, #0
 8000e1a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e1e:	4630      	mov	r0, r6
 8000e20:	4631      	mov	r1, r6
 8000e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e26:	fab3 f683 	clz	r6, r3
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	d14a      	bne.n	8000ec4 <__udivmoddi4+0x160>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d302      	bcc.n	8000e38 <__udivmoddi4+0xd4>
 8000e32:	4282      	cmp	r2, r0
 8000e34:	f200 80f9 	bhi.w	800102a <__udivmoddi4+0x2c6>
 8000e38:	1a84      	subs	r4, r0, r2
 8000e3a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e3e:	2001      	movs	r0, #1
 8000e40:	469e      	mov	lr, r3
 8000e42:	2d00      	cmp	r5, #0
 8000e44:	d0e0      	beq.n	8000e08 <__udivmoddi4+0xa4>
 8000e46:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e4a:	e7dd      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000e4c:	b902      	cbnz	r2, 8000e50 <__udivmoddi4+0xec>
 8000e4e:	deff      	udf	#255	; 0xff
 8000e50:	fab2 f282 	clz	r2, r2
 8000e54:	2a00      	cmp	r2, #0
 8000e56:	f040 8092 	bne.w	8000f7e <__udivmoddi4+0x21a>
 8000e5a:	eba1 010c 	sub.w	r1, r1, ip
 8000e5e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e62:	fa1f fe8c 	uxth.w	lr, ip
 8000e66:	2601      	movs	r6, #1
 8000e68:	0c20      	lsrs	r0, r4, #16
 8000e6a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e6e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e72:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e76:	fb0e f003 	mul.w	r0, lr, r3
 8000e7a:	4288      	cmp	r0, r1
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x12c>
 8000e7e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e82:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x12a>
 8000e88:	4288      	cmp	r0, r1
 8000e8a:	f200 80cb 	bhi.w	8001024 <__udivmoddi4+0x2c0>
 8000e8e:	4643      	mov	r3, r8
 8000e90:	1a09      	subs	r1, r1, r0
 8000e92:	b2a4      	uxth	r4, r4
 8000e94:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e98:	fb07 1110 	mls	r1, r7, r0, r1
 8000e9c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ea0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ea4:	45a6      	cmp	lr, r4
 8000ea6:	d908      	bls.n	8000eba <__udivmoddi4+0x156>
 8000ea8:	eb1c 0404 	adds.w	r4, ip, r4
 8000eac:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000eb0:	d202      	bcs.n	8000eb8 <__udivmoddi4+0x154>
 8000eb2:	45a6      	cmp	lr, r4
 8000eb4:	f200 80bb 	bhi.w	800102e <__udivmoddi4+0x2ca>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	eba4 040e 	sub.w	r4, r4, lr
 8000ebe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ec2:	e79c      	b.n	8000dfe <__udivmoddi4+0x9a>
 8000ec4:	f1c6 0720 	rsb	r7, r6, #32
 8000ec8:	40b3      	lsls	r3, r6
 8000eca:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ece:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ed2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ed6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eda:	431c      	orrs	r4, r3
 8000edc:	40f9      	lsrs	r1, r7
 8000ede:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ee2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ee6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eea:	0c20      	lsrs	r0, r4, #16
 8000eec:	fa1f fe8c 	uxth.w	lr, ip
 8000ef0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ef4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ef8:	fb08 f00e 	mul.w	r0, r8, lr
 8000efc:	4288      	cmp	r0, r1
 8000efe:	fa02 f206 	lsl.w	r2, r2, r6
 8000f02:	d90b      	bls.n	8000f1c <__udivmoddi4+0x1b8>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000f0c:	f080 8088 	bcs.w	8001020 <__udivmoddi4+0x2bc>
 8000f10:	4288      	cmp	r0, r1
 8000f12:	f240 8085 	bls.w	8001020 <__udivmoddi4+0x2bc>
 8000f16:	f1a8 0802 	sub.w	r8, r8, #2
 8000f1a:	4461      	add	r1, ip
 8000f1c:	1a09      	subs	r1, r1, r0
 8000f1e:	b2a4      	uxth	r4, r4
 8000f20:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f24:	fb09 1110 	mls	r1, r9, r0, r1
 8000f28:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f2c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f30:	458e      	cmp	lr, r1
 8000f32:	d908      	bls.n	8000f46 <__udivmoddi4+0x1e2>
 8000f34:	eb1c 0101 	adds.w	r1, ip, r1
 8000f38:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000f3c:	d26c      	bcs.n	8001018 <__udivmoddi4+0x2b4>
 8000f3e:	458e      	cmp	lr, r1
 8000f40:	d96a      	bls.n	8001018 <__udivmoddi4+0x2b4>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4461      	add	r1, ip
 8000f46:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f4a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f4e:	eba1 010e 	sub.w	r1, r1, lr
 8000f52:	42a1      	cmp	r1, r4
 8000f54:	46c8      	mov	r8, r9
 8000f56:	46a6      	mov	lr, r4
 8000f58:	d356      	bcc.n	8001008 <__udivmoddi4+0x2a4>
 8000f5a:	d053      	beq.n	8001004 <__udivmoddi4+0x2a0>
 8000f5c:	b15d      	cbz	r5, 8000f76 <__udivmoddi4+0x212>
 8000f5e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f62:	eb61 010e 	sbc.w	r1, r1, lr
 8000f66:	fa01 f707 	lsl.w	r7, r1, r7
 8000f6a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f6e:	40f1      	lsrs	r1, r6
 8000f70:	431f      	orrs	r7, r3
 8000f72:	e9c5 7100 	strd	r7, r1, [r5]
 8000f76:	2600      	movs	r6, #0
 8000f78:	4631      	mov	r1, r6
 8000f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f7e:	f1c2 0320 	rsb	r3, r2, #32
 8000f82:	40d8      	lsrs	r0, r3
 8000f84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f88:	fa21 f303 	lsr.w	r3, r1, r3
 8000f8c:	4091      	lsls	r1, r2
 8000f8e:	4301      	orrs	r1, r0
 8000f90:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f94:	fa1f fe8c 	uxth.w	lr, ip
 8000f98:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f9c:	fb07 3610 	mls	r6, r7, r0, r3
 8000fa0:	0c0b      	lsrs	r3, r1, #16
 8000fa2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fa6:	fb00 f60e 	mul.w	r6, r0, lr
 8000faa:	429e      	cmp	r6, r3
 8000fac:	fa04 f402 	lsl.w	r4, r4, r2
 8000fb0:	d908      	bls.n	8000fc4 <__udivmoddi4+0x260>
 8000fb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb6:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000fba:	d22f      	bcs.n	800101c <__udivmoddi4+0x2b8>
 8000fbc:	429e      	cmp	r6, r3
 8000fbe:	d92d      	bls.n	800101c <__udivmoddi4+0x2b8>
 8000fc0:	3802      	subs	r0, #2
 8000fc2:	4463      	add	r3, ip
 8000fc4:	1b9b      	subs	r3, r3, r6
 8000fc6:	b289      	uxth	r1, r1
 8000fc8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fcc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fd4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fd8:	428b      	cmp	r3, r1
 8000fda:	d908      	bls.n	8000fee <__udivmoddi4+0x28a>
 8000fdc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fe0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000fe4:	d216      	bcs.n	8001014 <__udivmoddi4+0x2b0>
 8000fe6:	428b      	cmp	r3, r1
 8000fe8:	d914      	bls.n	8001014 <__udivmoddi4+0x2b0>
 8000fea:	3e02      	subs	r6, #2
 8000fec:	4461      	add	r1, ip
 8000fee:	1ac9      	subs	r1, r1, r3
 8000ff0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ff4:	e738      	b.n	8000e68 <__udivmoddi4+0x104>
 8000ff6:	462e      	mov	r6, r5
 8000ff8:	4628      	mov	r0, r5
 8000ffa:	e705      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000ffc:	4606      	mov	r6, r0
 8000ffe:	e6e3      	b.n	8000dc8 <__udivmoddi4+0x64>
 8001000:	4618      	mov	r0, r3
 8001002:	e6f8      	b.n	8000df6 <__udivmoddi4+0x92>
 8001004:	454b      	cmp	r3, r9
 8001006:	d2a9      	bcs.n	8000f5c <__udivmoddi4+0x1f8>
 8001008:	ebb9 0802 	subs.w	r8, r9, r2
 800100c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001010:	3801      	subs	r0, #1
 8001012:	e7a3      	b.n	8000f5c <__udivmoddi4+0x1f8>
 8001014:	4646      	mov	r6, r8
 8001016:	e7ea      	b.n	8000fee <__udivmoddi4+0x28a>
 8001018:	4620      	mov	r0, r4
 800101a:	e794      	b.n	8000f46 <__udivmoddi4+0x1e2>
 800101c:	4640      	mov	r0, r8
 800101e:	e7d1      	b.n	8000fc4 <__udivmoddi4+0x260>
 8001020:	46d0      	mov	r8, sl
 8001022:	e77b      	b.n	8000f1c <__udivmoddi4+0x1b8>
 8001024:	3b02      	subs	r3, #2
 8001026:	4461      	add	r1, ip
 8001028:	e732      	b.n	8000e90 <__udivmoddi4+0x12c>
 800102a:	4630      	mov	r0, r6
 800102c:	e709      	b.n	8000e42 <__udivmoddi4+0xde>
 800102e:	4464      	add	r4, ip
 8001030:	3802      	subs	r0, #2
 8001032:	e742      	b.n	8000eba <__udivmoddi4+0x156>

08001034 <__aeabi_idiv0>:
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop

08001038 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001040:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001044:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001048:	f003 0301 	and.w	r3, r3, #1
 800104c:	2b00      	cmp	r3, #0
 800104e:	d013      	beq.n	8001078 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001050:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001054:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001058:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800105c:	2b00      	cmp	r3, #0
 800105e:	d00b      	beq.n	8001078 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001060:	e000      	b.n	8001064 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001062:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001064:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d0f9      	beq.n	8001062 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800106e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001072:	687a      	ldr	r2, [r7, #4]
 8001074:	b2d2      	uxtb	r2, r2
 8001076:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001078:	687b      	ldr	r3, [r7, #4]
}
 800107a:	4618      	mov	r0, r3
 800107c:	370c      	adds	r7, #12
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
	...

08001088 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001088:	b580      	push	{r7, lr}
 800108a:	b088      	sub	sp, #32
 800108c:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800108e:	f000 fce5 	bl	8001a5c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001092:	f000 f9b1 	bl	80013f8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001096:	f000 fa71 	bl	800157c <MX_GPIO_Init>
	MX_USART2_UART_Init();
 800109a:	f000 fa45 	bl	8001528 <MX_USART2_UART_Init>
	MX_USART1_UART_Init();
 800109e:	f000 fa19 	bl	80014d4 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	/* USER CODE END 2 */
    // Read and print voltage
    float voltage = ReadModbusParameter(0x00, 0x00, 0x00, 0x02);
 80010a2:	2302      	movs	r3, #2
 80010a4:	2200      	movs	r2, #0
 80010a6:	2100      	movs	r1, #0
 80010a8:	2000      	movs	r0, #0
 80010aa:	f000 f883 	bl	80011b4 <ReadModbusParameter>
 80010ae:	ed87 0a07 	vstr	s0, [r7, #28]
    printf("Voltage: %.2f V\n", voltage);
 80010b2:	69f8      	ldr	r0, [r7, #28]
 80010b4:	f7ff fa68 	bl	8000588 <__aeabi_f2d>
 80010b8:	4602      	mov	r2, r0
 80010ba:	460b      	mov	r3, r1
 80010bc:	4835      	ldr	r0, [pc, #212]	; (8001194 <main+0x10c>)
 80010be:	f003 fddb 	bl	8004c78 <iprintf>

    // Read and print current
    float current = ReadModbusParameter(0x00, 0x06, 0x00, 0x02);
 80010c2:	2302      	movs	r3, #2
 80010c4:	2200      	movs	r2, #0
 80010c6:	2106      	movs	r1, #6
 80010c8:	2000      	movs	r0, #0
 80010ca:	f000 f873 	bl	80011b4 <ReadModbusParameter>
 80010ce:	ed87 0a06 	vstr	s0, [r7, #24]
    printf("Current: %.2f A\n", current);
 80010d2:	69b8      	ldr	r0, [r7, #24]
 80010d4:	f7ff fa58 	bl	8000588 <__aeabi_f2d>
 80010d8:	4602      	mov	r2, r0
 80010da:	460b      	mov	r3, r1
 80010dc:	482e      	ldr	r0, [pc, #184]	; (8001198 <main+0x110>)
 80010de:	f003 fdcb 	bl	8004c78 <iprintf>

    // Read and print frequency
    float frequency = ReadModbusParameter(0x00, 0x46, 0x00, 0x02);
 80010e2:	2302      	movs	r3, #2
 80010e4:	2200      	movs	r2, #0
 80010e6:	2146      	movs	r1, #70	; 0x46
 80010e8:	2000      	movs	r0, #0
 80010ea:	f000 f863 	bl	80011b4 <ReadModbusParameter>
 80010ee:	ed87 0a05 	vstr	s0, [r7, #20]
    printf("Frequency: %.2f Hz\n", frequency);
 80010f2:	6978      	ldr	r0, [r7, #20]
 80010f4:	f7ff fa48 	bl	8000588 <__aeabi_f2d>
 80010f8:	4602      	mov	r2, r0
 80010fa:	460b      	mov	r3, r1
 80010fc:	4827      	ldr	r0, [pc, #156]	; (800119c <main+0x114>)
 80010fe:	f003 fdbb 	bl	8004c78 <iprintf>

    // Read and print power
    float power = ReadModbusParameter(0x00, 0x0C, 0x00, 0x02);
 8001102:	2302      	movs	r3, #2
 8001104:	2200      	movs	r2, #0
 8001106:	210c      	movs	r1, #12
 8001108:	2000      	movs	r0, #0
 800110a:	f000 f853 	bl	80011b4 <ReadModbusParameter>
 800110e:	ed87 0a04 	vstr	s0, [r7, #16]
    printf("Power: %.2f W\n", power);
 8001112:	6938      	ldr	r0, [r7, #16]
 8001114:	f7ff fa38 	bl	8000588 <__aeabi_f2d>
 8001118:	4602      	mov	r2, r0
 800111a:	460b      	mov	r3, r1
 800111c:	4820      	ldr	r0, [pc, #128]	; (80011a0 <main+0x118>)
 800111e:	f003 fdab 	bl	8004c78 <iprintf>

    // Read and print power factor
    float powerFactor = ReadModbusParameter(0x00, 0x1E, 0x00, 0x02);
 8001122:	2302      	movs	r3, #2
 8001124:	2200      	movs	r2, #0
 8001126:	211e      	movs	r1, #30
 8001128:	2000      	movs	r0, #0
 800112a:	f000 f843 	bl	80011b4 <ReadModbusParameter>
 800112e:	ed87 0a03 	vstr	s0, [r7, #12]
    printf("Power Factor: %.2f\n", powerFactor);
 8001132:	68f8      	ldr	r0, [r7, #12]
 8001134:	f7ff fa28 	bl	8000588 <__aeabi_f2d>
 8001138:	4602      	mov	r2, r0
 800113a:	460b      	mov	r3, r1
 800113c:	4819      	ldr	r0, [pc, #100]	; (80011a4 <main+0x11c>)
 800113e:	f003 fd9b 	bl	8004c78 <iprintf>

    // Read and print RPM
    float rpm = ReadModbusParameter(0x00, 0x88, 0x00, 0x02);
 8001142:	2302      	movs	r3, #2
 8001144:	2200      	movs	r2, #0
 8001146:	2188      	movs	r1, #136	; 0x88
 8001148:	2000      	movs	r0, #0
 800114a:	f000 f833 	bl	80011b4 <ReadModbusParameter>
 800114e:	ed87 0a02 	vstr	s0, [r7, #8]
    printf("RPM: %.2f\n", rpm);
 8001152:	68b8      	ldr	r0, [r7, #8]
 8001154:	f7ff fa18 	bl	8000588 <__aeabi_f2d>
 8001158:	4602      	mov	r2, r0
 800115a:	460b      	mov	r3, r1
 800115c:	4812      	ldr	r0, [pc, #72]	; (80011a8 <main+0x120>)
 800115e:	f003 fd8b 	bl	8004c78 <iprintf>

    //Energy and print Energy
    float energy = ReadModbusParameter(0x00, 0x6E, 0x00, 0x02);
 8001162:	2302      	movs	r3, #2
 8001164:	2200      	movs	r2, #0
 8001166:	216e      	movs	r1, #110	; 0x6e
 8001168:	2000      	movs	r0, #0
 800116a:	f000 f823 	bl	80011b4 <ReadModbusParameter>
 800116e:	ed87 0a01 	vstr	s0, [r7, #4]
    printf("Energy : %.3f\nKWh", energy/1000);
 8001172:	edd7 7a01 	vldr	s15, [r7, #4]
 8001176:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80011ac <main+0x124>
 800117a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800117e:	ee16 0a90 	vmov	r0, s13
 8001182:	f7ff fa01 	bl	8000588 <__aeabi_f2d>
 8001186:	4602      	mov	r2, r0
 8001188:	460b      	mov	r3, r1
 800118a:	4809      	ldr	r0, [pc, #36]	; (80011b0 <main+0x128>)
 800118c:	f003 fd74 	bl	8004c78 <iprintf>


  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001190:	e7fe      	b.n	8001190 <main+0x108>
 8001192:	bf00      	nop
 8001194:	08008998 	.word	0x08008998
 8001198:	080089ac 	.word	0x080089ac
 800119c:	080089c0 	.word	0x080089c0
 80011a0:	080089d4 	.word	0x080089d4
 80011a4:	080089e4 	.word	0x080089e4
 80011a8:	080089f8 	.word	0x080089f8
 80011ac:	447a0000 	.word	0x447a0000
 80011b0:	08008a04 	.word	0x08008a04

080011b4 <ReadModbusParameter>:
  }
  /* USER CODE END 3 */
}

// Function to send a Modbus request and receive the response
float ReadModbusParameter(uint8_t regAddressHigh, uint8_t regAddressLow, uint8_t regCountHigh, uint8_t regCountLow) {
 80011b4:	b590      	push	{r4, r7, lr}
 80011b6:	b08b      	sub	sp, #44	; 0x2c
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	4604      	mov	r4, r0
 80011bc:	4608      	mov	r0, r1
 80011be:	4611      	mov	r1, r2
 80011c0:	461a      	mov	r2, r3
 80011c2:	4623      	mov	r3, r4
 80011c4:	71fb      	strb	r3, [r7, #7]
 80011c6:	4603      	mov	r3, r0
 80011c8:	71bb      	strb	r3, [r7, #6]
 80011ca:	460b      	mov	r3, r1
 80011cc:	717b      	strb	r3, [r7, #5]
 80011ce:	4613      	mov	r3, r2
 80011d0:	713b      	strb	r3, [r7, #4]
    uint8_t txData[8];
    uint8_t rxData[9];

    txData[0] = 0x01; // Slave Address
 80011d2:	2301      	movs	r3, #1
 80011d4:	763b      	strb	r3, [r7, #24]
    txData[1] = 0x03; // Function Code
 80011d6:	2303      	movs	r3, #3
 80011d8:	767b      	strb	r3, [r7, #25]
    txData[2] = regAddressHigh;
 80011da:	79fb      	ldrb	r3, [r7, #7]
 80011dc:	76bb      	strb	r3, [r7, #26]
    txData[3] = regAddressLow;
 80011de:	79bb      	ldrb	r3, [r7, #6]
 80011e0:	76fb      	strb	r3, [r7, #27]
    txData[4] = regCountHigh;
 80011e2:	797b      	ldrb	r3, [r7, #5]
 80011e4:	773b      	strb	r3, [r7, #28]
    txData[5] = regCountLow;
 80011e6:	793b      	ldrb	r3, [r7, #4]
 80011e8:	777b      	strb	r3, [r7, #29]

    uint16_t crc = crc16(txData, 6);
 80011ea:	f107 0318 	add.w	r3, r7, #24
 80011ee:	2106      	movs	r1, #6
 80011f0:	4618      	mov	r0, r3
 80011f2:	f000 fa37 	bl	8001664 <crc16>
 80011f6:	4603      	mov	r3, r0
 80011f8:	84fb      	strh	r3, [r7, #38]	; 0x26
    txData[6] = crc & 0xFF;
 80011fa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	77bb      	strb	r3, [r7, #30]
    txData[7] = (crc >> 8) & 0xFF;
 8001200:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001202:	0a1b      	lsrs	r3, r3, #8
 8001204:	b29b      	uxth	r3, r3
 8001206:	b2db      	uxtb	r3, r3
 8001208:	77fb      	strb	r3, [r7, #31]

    if (HAL_UART_Transmit(&huart1, txData, sizeof(txData), 1000) == HAL_OK) {
 800120a:	f107 0118 	add.w	r1, r7, #24
 800120e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001212:	2208      	movs	r2, #8
 8001214:	4822      	ldr	r0, [pc, #136]	; (80012a0 <ReadModbusParameter+0xec>)
 8001216:	f001 fe1a 	bl	8002e4e <HAL_UART_Transmit>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d135      	bne.n	800128c <ReadModbusParameter+0xd8>
        Print_Raw_Data(txData, sizeof(txData));
 8001220:	f107 0318 	add.w	r3, r7, #24
 8001224:	2108      	movs	r1, #8
 8001226:	4618      	mov	r0, r3
 8001228:	f000 f898 	bl	800135c <Print_Raw_Data>
        if (HAL_UART_Receive(&huart1, rxData, sizeof(rxData), 1000) == HAL_OK) {
 800122c:	f107 010c 	add.w	r1, r7, #12
 8001230:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001234:	2209      	movs	r2, #9
 8001236:	481a      	ldr	r0, [pc, #104]	; (80012a0 <ReadModbusParameter+0xec>)
 8001238:	f001 fe9b 	bl	8002f72 <HAL_UART_Receive>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d11e      	bne.n	8001280 <ReadModbusParameter+0xcc>
            Print_Raw_Data(rxData, sizeof(rxData));
 8001242:	f107 030c 	add.w	r3, r7, #12
 8001246:	2109      	movs	r1, #9
 8001248:	4618      	mov	r0, r3
 800124a:	f000 f887 	bl	800135c <Print_Raw_Data>
            uint8_t byte1 = rxData[3];
 800124e:	7bfb      	ldrb	r3, [r7, #15]
 8001250:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
            uint8_t byte2 = rxData[4];
 8001254:	7c3b      	ldrb	r3, [r7, #16]
 8001256:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            uint8_t byte3 = rxData[5];
 800125a:	7c7b      	ldrb	r3, [r7, #17]
 800125c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            uint8_t byte4 = rxData[6];
 8001260:	7cbb      	ldrb	r3, [r7, #18]
 8001262:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
            return ieee754_to_float(byte1, byte2, byte3, byte4);
 8001266:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800126a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800126e:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8001272:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
 8001276:	f000 f819 	bl	80012ac <ieee754_to_float>
 800127a:	eef0 7a40 	vmov.f32	s15, s0
 800127e:	e00a      	b.n	8001296 <ReadModbusParameter+0xe2>
        } else {
            printf("Failed to receive data\n");
 8001280:	4808      	ldr	r0, [pc, #32]	; (80012a4 <ReadModbusParameter+0xf0>)
 8001282:	f003 fd7f 	bl	8004d84 <puts>
            return -1;
 8001286:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800128a:	e004      	b.n	8001296 <ReadModbusParameter+0xe2>
        }
    } else {
        printf("Failed to transmit data\n");
 800128c:	4806      	ldr	r0, [pc, #24]	; (80012a8 <ReadModbusParameter+0xf4>)
 800128e:	f003 fd79 	bl	8004d84 <puts>
        return -1;
 8001292:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
    }
}
 8001296:	eeb0 0a67 	vmov.f32	s0, s15
 800129a:	372c      	adds	r7, #44	; 0x2c
 800129c:	46bd      	mov	sp, r7
 800129e:	bd90      	pop	{r4, r7, pc}
 80012a0:	200001fc 	.word	0x200001fc
 80012a4:	08008a18 	.word	0x08008a18
 80012a8:	08008a30 	.word	0x08008a30

080012ac <ieee754_to_float>:

// Function to convert 32-bit IEEE 754 floating-point number to float
float ieee754_to_float(uint8_t byte1, uint8_t byte2, uint8_t byte3, uint8_t byte4) {
 80012ac:	b490      	push	{r4, r7}
 80012ae:	b088      	sub	sp, #32
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	4604      	mov	r4, r0
 80012b4:	4608      	mov	r0, r1
 80012b6:	4611      	mov	r1, r2
 80012b8:	461a      	mov	r2, r3
 80012ba:	4623      	mov	r3, r4
 80012bc:	71fb      	strb	r3, [r7, #7]
 80012be:	4603      	mov	r3, r0
 80012c0:	71bb      	strb	r3, [r7, #6]
 80012c2:	460b      	mov	r3, r1
 80012c4:	717b      	strb	r3, [r7, #5]
 80012c6:	4613      	mov	r3, r2
 80012c8:	713b      	strb	r3, [r7, #4]
    uint32_t raw_value = (byte1 << 24) | (byte2 << 16) | (byte3 << 8) | byte4;
 80012ca:	79fb      	ldrb	r3, [r7, #7]
 80012cc:	061a      	lsls	r2, r3, #24
 80012ce:	79bb      	ldrb	r3, [r7, #6]
 80012d0:	041b      	lsls	r3, r3, #16
 80012d2:	431a      	orrs	r2, r3
 80012d4:	797b      	ldrb	r3, [r7, #5]
 80012d6:	021b      	lsls	r3, r3, #8
 80012d8:	431a      	orrs	r2, r3
 80012da:	793b      	ldrb	r3, [r7, #4]
 80012dc:	4313      	orrs	r3, r2
 80012de:	61bb      	str	r3, [r7, #24]

    int sign = (raw_value >> 31) & 0x1;
 80012e0:	69bb      	ldr	r3, [r7, #24]
 80012e2:	0fdb      	lsrs	r3, r3, #31
 80012e4:	617b      	str	r3, [r7, #20]
    int exponent = (raw_value >> 23) & 0xFF;
 80012e6:	69bb      	ldr	r3, [r7, #24]
 80012e8:	0ddb      	lsrs	r3, r3, #23
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	613b      	str	r3, [r7, #16]
    uint32_t mantissa = raw_value & 0x7FFFFF;
 80012ee:	69bb      	ldr	r3, [r7, #24]
 80012f0:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80012f4:	60fb      	str	r3, [r7, #12]

    float normalized_mantissa = 1 + (float)mantissa / (1 << 23);
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	ee07 3a90 	vmov	s15, r3
 80012fc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001300:	eddf 6a15 	vldr	s13, [pc, #84]	; 8001358 <ieee754_to_float+0xac>
 8001304:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001308:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800130c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001310:	edc7 7a02 	vstr	s15, [r7, #8]
    float final_value = normalized_mantissa * (1 << (exponent - 127));
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	3b7f      	subs	r3, #127	; 0x7f
 8001318:	2201      	movs	r2, #1
 800131a:	fa02 f303 	lsl.w	r3, r2, r3
 800131e:	ee07 3a90 	vmov	s15, r3
 8001322:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001326:	ed97 7a02 	vldr	s14, [r7, #8]
 800132a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800132e:	edc7 7a07 	vstr	s15, [r7, #28]

    if (sign) {
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d005      	beq.n	8001344 <ieee754_to_float+0x98>
        final_value = -final_value;
 8001338:	edd7 7a07 	vldr	s15, [r7, #28]
 800133c:	eef1 7a67 	vneg.f32	s15, s15
 8001340:	edc7 7a07 	vstr	s15, [r7, #28]
    }

    return final_value;
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	ee07 3a90 	vmov	s15, r3
}
 800134a:	eeb0 0a67 	vmov.f32	s0, s15
 800134e:	3720      	adds	r7, #32
 8001350:	46bd      	mov	sp, r7
 8001352:	bc90      	pop	{r4, r7}
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	4b000000 	.word	0x4b000000

0800135c <Print_Raw_Data>:

void Print_Raw_Data(uint8_t* data, uint16_t length)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b084      	sub	sp, #16
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
 8001364:	460b      	mov	r3, r1
 8001366:	807b      	strh	r3, [r7, #2]
    printf("Raw Data: ");
 8001368:	4812      	ldr	r0, [pc, #72]	; (80013b4 <Print_Raw_Data+0x58>)
 800136a:	f003 fc85 	bl	8004c78 <iprintf>
    for (uint16_t i = 0; i < length; i++)
 800136e:	2300      	movs	r3, #0
 8001370:	81fb      	strh	r3, [r7, #14]
 8001372:	e013      	b.n	800139c <Print_Raw_Data+0x40>
    {
        printf("0x%02X ", data[i]);
 8001374:	89fb      	ldrh	r3, [r7, #14]
 8001376:	687a      	ldr	r2, [r7, #4]
 8001378:	4413      	add	r3, r2
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	4619      	mov	r1, r3
 800137e:	480e      	ldr	r0, [pc, #56]	; (80013b8 <Print_Raw_Data+0x5c>)
 8001380:	f003 fc7a 	bl	8004c78 <iprintf>
        if ((i + 1) % 16 == 0) // New line every 16 bytes
 8001384:	89fb      	ldrh	r3, [r7, #14]
 8001386:	3301      	adds	r3, #1
 8001388:	f003 030f 	and.w	r3, r3, #15
 800138c:	2b00      	cmp	r3, #0
 800138e:	d102      	bne.n	8001396 <Print_Raw_Data+0x3a>
        {
            printf("\r\n");
 8001390:	480a      	ldr	r0, [pc, #40]	; (80013bc <Print_Raw_Data+0x60>)
 8001392:	f003 fcf7 	bl	8004d84 <puts>
    for (uint16_t i = 0; i < length; i++)
 8001396:	89fb      	ldrh	r3, [r7, #14]
 8001398:	3301      	adds	r3, #1
 800139a:	81fb      	strh	r3, [r7, #14]
 800139c:	89fa      	ldrh	r2, [r7, #14]
 800139e:	887b      	ldrh	r3, [r7, #2]
 80013a0:	429a      	cmp	r2, r3
 80013a2:	d3e7      	bcc.n	8001374 <Print_Raw_Data+0x18>
        }
    }
    printf("\r\n");
 80013a4:	4805      	ldr	r0, [pc, #20]	; (80013bc <Print_Raw_Data+0x60>)
 80013a6:	f003 fced 	bl	8004d84 <puts>
}
 80013aa:	bf00      	nop
 80013ac:	3710      	adds	r7, #16
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	08008a48 	.word	0x08008a48
 80013b8:	08008a54 	.word	0x08008a54
 80013bc:	08008a5c 	.word	0x08008a5c

080013c0 <_write>:


int _write(int file, char *ptr, int len)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b086      	sub	sp, #24
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	60f8      	str	r0, [r7, #12]
 80013c8:	60b9      	str	r1, [r7, #8]
 80013ca:	607a      	str	r2, [r7, #4]
    (void)file;
    int DataIdx;

    for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013cc:	2300      	movs	r3, #0
 80013ce:	617b      	str	r3, [r7, #20]
 80013d0:	e009      	b.n	80013e6 <_write+0x26>
    {
        ITM_SendChar(*ptr++);
 80013d2:	68bb      	ldr	r3, [r7, #8]
 80013d4:	1c5a      	adds	r2, r3, #1
 80013d6:	60ba      	str	r2, [r7, #8]
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	4618      	mov	r0, r3
 80013dc:	f7ff fe2c 	bl	8001038 <ITM_SendChar>
    for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	3301      	adds	r3, #1
 80013e4:	617b      	str	r3, [r7, #20]
 80013e6:	697a      	ldr	r2, [r7, #20]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	429a      	cmp	r2, r3
 80013ec:	dbf1      	blt.n	80013d2 <_write+0x12>
    }
    return len;
 80013ee:	687b      	ldr	r3, [r7, #4]
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	3718      	adds	r7, #24
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}

080013f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b094      	sub	sp, #80	; 0x50
 80013fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013fe:	f107 031c 	add.w	r3, r7, #28
 8001402:	2234      	movs	r2, #52	; 0x34
 8001404:	2100      	movs	r1, #0
 8001406:	4618      	mov	r0, r3
 8001408:	f002 fdb4 	bl	8003f74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800140c:	f107 0308 	add.w	r3, r7, #8
 8001410:	2200      	movs	r2, #0
 8001412:	601a      	str	r2, [r3, #0]
 8001414:	605a      	str	r2, [r3, #4]
 8001416:	609a      	str	r2, [r3, #8]
 8001418:	60da      	str	r2, [r3, #12]
 800141a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800141c:	2300      	movs	r3, #0
 800141e:	607b      	str	r3, [r7, #4]
 8001420:	4b2a      	ldr	r3, [pc, #168]	; (80014cc <SystemClock_Config+0xd4>)
 8001422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001424:	4a29      	ldr	r2, [pc, #164]	; (80014cc <SystemClock_Config+0xd4>)
 8001426:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800142a:	6413      	str	r3, [r2, #64]	; 0x40
 800142c:	4b27      	ldr	r3, [pc, #156]	; (80014cc <SystemClock_Config+0xd4>)
 800142e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001430:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001434:	607b      	str	r3, [r7, #4]
 8001436:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001438:	2300      	movs	r3, #0
 800143a:	603b      	str	r3, [r7, #0]
 800143c:	4b24      	ldr	r3, [pc, #144]	; (80014d0 <SystemClock_Config+0xd8>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001444:	4a22      	ldr	r2, [pc, #136]	; (80014d0 <SystemClock_Config+0xd8>)
 8001446:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800144a:	6013      	str	r3, [r2, #0]
 800144c:	4b20      	ldr	r3, [pc, #128]	; (80014d0 <SystemClock_Config+0xd8>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001454:	603b      	str	r3, [r7, #0]
 8001456:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001458:	2302      	movs	r3, #2
 800145a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800145c:	2301      	movs	r3, #1
 800145e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001460:	2310      	movs	r3, #16
 8001462:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001464:	2302      	movs	r3, #2
 8001466:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001468:	2300      	movs	r3, #0
 800146a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 800146c:	2310      	movs	r3, #16
 800146e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001470:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001474:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001476:	2304      	movs	r3, #4
 8001478:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800147a:	2302      	movs	r3, #2
 800147c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800147e:	2302      	movs	r3, #2
 8001480:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001482:	f107 031c 	add.w	r3, r7, #28
 8001486:	4618      	mov	r0, r3
 8001488:	f001 f9f6 	bl	8002878 <HAL_RCC_OscConfig>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001492:	f000 f8e1 	bl	8001658 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001496:	230f      	movs	r3, #15
 8001498:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800149a:	2302      	movs	r3, #2
 800149c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800149e:	2300      	movs	r3, #0
 80014a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014a8:	2300      	movs	r3, #0
 80014aa:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80014ac:	f107 0308 	add.w	r3, r7, #8
 80014b0:	2102      	movs	r1, #2
 80014b2:	4618      	mov	r0, r3
 80014b4:	f000 fe96 	bl	80021e4 <HAL_RCC_ClockConfig>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80014be:	f000 f8cb 	bl	8001658 <Error_Handler>
  }
}
 80014c2:	bf00      	nop
 80014c4:	3750      	adds	r7, #80	; 0x50
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	40023800 	.word	0x40023800
 80014d0:	40007000 	.word	0x40007000

080014d4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80014d8:	4b11      	ldr	r3, [pc, #68]	; (8001520 <MX_USART1_UART_Init+0x4c>)
 80014da:	4a12      	ldr	r2, [pc, #72]	; (8001524 <MX_USART1_UART_Init+0x50>)
 80014dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80014de:	4b10      	ldr	r3, [pc, #64]	; (8001520 <MX_USART1_UART_Init+0x4c>)
 80014e0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80014e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014e6:	4b0e      	ldr	r3, [pc, #56]	; (8001520 <MX_USART1_UART_Init+0x4c>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014ec:	4b0c      	ldr	r3, [pc, #48]	; (8001520 <MX_USART1_UART_Init+0x4c>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014f2:	4b0b      	ldr	r3, [pc, #44]	; (8001520 <MX_USART1_UART_Init+0x4c>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014f8:	4b09      	ldr	r3, [pc, #36]	; (8001520 <MX_USART1_UART_Init+0x4c>)
 80014fa:	220c      	movs	r2, #12
 80014fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014fe:	4b08      	ldr	r3, [pc, #32]	; (8001520 <MX_USART1_UART_Init+0x4c>)
 8001500:	2200      	movs	r2, #0
 8001502:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001504:	4b06      	ldr	r3, [pc, #24]	; (8001520 <MX_USART1_UART_Init+0x4c>)
 8001506:	2200      	movs	r2, #0
 8001508:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800150a:	4805      	ldr	r0, [pc, #20]	; (8001520 <MX_USART1_UART_Init+0x4c>)
 800150c:	f001 fc52 	bl	8002db4 <HAL_UART_Init>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001516:	f000 f89f 	bl	8001658 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800151a:	bf00      	nop
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	200001fc 	.word	0x200001fc
 8001524:	40011000 	.word	0x40011000

08001528 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800152c:	4b11      	ldr	r3, [pc, #68]	; (8001574 <MX_USART2_UART_Init+0x4c>)
 800152e:	4a12      	ldr	r2, [pc, #72]	; (8001578 <MX_USART2_UART_Init+0x50>)
 8001530:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001532:	4b10      	ldr	r3, [pc, #64]	; (8001574 <MX_USART2_UART_Init+0x4c>)
 8001534:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001538:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800153a:	4b0e      	ldr	r3, [pc, #56]	; (8001574 <MX_USART2_UART_Init+0x4c>)
 800153c:	2200      	movs	r2, #0
 800153e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001540:	4b0c      	ldr	r3, [pc, #48]	; (8001574 <MX_USART2_UART_Init+0x4c>)
 8001542:	2200      	movs	r2, #0
 8001544:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001546:	4b0b      	ldr	r3, [pc, #44]	; (8001574 <MX_USART2_UART_Init+0x4c>)
 8001548:	2200      	movs	r2, #0
 800154a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800154c:	4b09      	ldr	r3, [pc, #36]	; (8001574 <MX_USART2_UART_Init+0x4c>)
 800154e:	220c      	movs	r2, #12
 8001550:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001552:	4b08      	ldr	r3, [pc, #32]	; (8001574 <MX_USART2_UART_Init+0x4c>)
 8001554:	2200      	movs	r2, #0
 8001556:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001558:	4b06      	ldr	r3, [pc, #24]	; (8001574 <MX_USART2_UART_Init+0x4c>)
 800155a:	2200      	movs	r2, #0
 800155c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800155e:	4805      	ldr	r0, [pc, #20]	; (8001574 <MX_USART2_UART_Init+0x4c>)
 8001560:	f001 fc28 	bl	8002db4 <HAL_UART_Init>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800156a:	f000 f875 	bl	8001658 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800156e:	bf00      	nop
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	20000240 	.word	0x20000240
 8001578:	40004400 	.word	0x40004400

0800157c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b08a      	sub	sp, #40	; 0x28
 8001580:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001582:	f107 0314 	add.w	r3, r7, #20
 8001586:	2200      	movs	r2, #0
 8001588:	601a      	str	r2, [r3, #0]
 800158a:	605a      	str	r2, [r3, #4]
 800158c:	609a      	str	r2, [r3, #8]
 800158e:	60da      	str	r2, [r3, #12]
 8001590:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001592:	2300      	movs	r3, #0
 8001594:	613b      	str	r3, [r7, #16]
 8001596:	4b2d      	ldr	r3, [pc, #180]	; (800164c <MX_GPIO_Init+0xd0>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	4a2c      	ldr	r2, [pc, #176]	; (800164c <MX_GPIO_Init+0xd0>)
 800159c:	f043 0304 	orr.w	r3, r3, #4
 80015a0:	6313      	str	r3, [r2, #48]	; 0x30
 80015a2:	4b2a      	ldr	r3, [pc, #168]	; (800164c <MX_GPIO_Init+0xd0>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a6:	f003 0304 	and.w	r3, r3, #4
 80015aa:	613b      	str	r3, [r7, #16]
 80015ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015ae:	2300      	movs	r3, #0
 80015b0:	60fb      	str	r3, [r7, #12]
 80015b2:	4b26      	ldr	r3, [pc, #152]	; (800164c <MX_GPIO_Init+0xd0>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b6:	4a25      	ldr	r2, [pc, #148]	; (800164c <MX_GPIO_Init+0xd0>)
 80015b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015bc:	6313      	str	r3, [r2, #48]	; 0x30
 80015be:	4b23      	ldr	r3, [pc, #140]	; (800164c <MX_GPIO_Init+0xd0>)
 80015c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015c6:	60fb      	str	r3, [r7, #12]
 80015c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ca:	2300      	movs	r3, #0
 80015cc:	60bb      	str	r3, [r7, #8]
 80015ce:	4b1f      	ldr	r3, [pc, #124]	; (800164c <MX_GPIO_Init+0xd0>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d2:	4a1e      	ldr	r2, [pc, #120]	; (800164c <MX_GPIO_Init+0xd0>)
 80015d4:	f043 0301 	orr.w	r3, r3, #1
 80015d8:	6313      	str	r3, [r2, #48]	; 0x30
 80015da:	4b1c      	ldr	r3, [pc, #112]	; (800164c <MX_GPIO_Init+0xd0>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015de:	f003 0301 	and.w	r3, r3, #1
 80015e2:	60bb      	str	r3, [r7, #8]
 80015e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015e6:	2300      	movs	r3, #0
 80015e8:	607b      	str	r3, [r7, #4]
 80015ea:	4b18      	ldr	r3, [pc, #96]	; (800164c <MX_GPIO_Init+0xd0>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ee:	4a17      	ldr	r2, [pc, #92]	; (800164c <MX_GPIO_Init+0xd0>)
 80015f0:	f043 0302 	orr.w	r3, r3, #2
 80015f4:	6313      	str	r3, [r2, #48]	; 0x30
 80015f6:	4b15      	ldr	r3, [pc, #84]	; (800164c <MX_GPIO_Init+0xd0>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fa:	f003 0302 	and.w	r3, r3, #2
 80015fe:	607b      	str	r3, [r7, #4]
 8001600:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001602:	2200      	movs	r2, #0
 8001604:	2120      	movs	r1, #32
 8001606:	4812      	ldr	r0, [pc, #72]	; (8001650 <MX_GPIO_Init+0xd4>)
 8001608:	f000 fdd2 	bl	80021b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800160c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001610:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001612:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001616:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001618:	2300      	movs	r3, #0
 800161a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800161c:	f107 0314 	add.w	r3, r7, #20
 8001620:	4619      	mov	r1, r3
 8001622:	480c      	ldr	r0, [pc, #48]	; (8001654 <MX_GPIO_Init+0xd8>)
 8001624:	f000 fc30 	bl	8001e88 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001628:	2320      	movs	r3, #32
 800162a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800162c:	2301      	movs	r3, #1
 800162e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001630:	2300      	movs	r3, #0
 8001632:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001634:	2300      	movs	r3, #0
 8001636:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001638:	f107 0314 	add.w	r3, r7, #20
 800163c:	4619      	mov	r1, r3
 800163e:	4804      	ldr	r0, [pc, #16]	; (8001650 <MX_GPIO_Init+0xd4>)
 8001640:	f000 fc22 	bl	8001e88 <HAL_GPIO_Init>

}
 8001644:	bf00      	nop
 8001646:	3728      	adds	r7, #40	; 0x28
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	40023800 	.word	0x40023800
 8001650:	40020000 	.word	0x40020000
 8001654:	40020800 	.word	0x40020800

08001658 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800165c:	b672      	cpsid	i
}
 800165e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001660:	e7fe      	b.n	8001660 <Error_Handler+0x8>
	...

08001664 <crc16>:
    0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42,
    0x43, 0x83, 0x41, 0x81, 0x80, 0x40
};

uint16_t crc16(uint8_t *buffer, uint16_t buffer_length)
{
 8001664:	b480      	push	{r7}
 8001666:	b085      	sub	sp, #20
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
 800166c:	460b      	mov	r3, r1
 800166e:	807b      	strh	r3, [r7, #2]
    uint8_t crc_hi = 0xFF; /* high CRC byte initialized */
 8001670:	23ff      	movs	r3, #255	; 0xff
 8001672:	73fb      	strb	r3, [r7, #15]
    uint8_t crc_lo = 0xFF; /* low CRC byte initialized */
 8001674:	23ff      	movs	r3, #255	; 0xff
 8001676:	73bb      	strb	r3, [r7, #14]
    unsigned int i; /* will index into CRC lookup */

    /* pass through message buffer */
    while (buffer_length--) {
 8001678:	e013      	b.n	80016a2 <crc16+0x3e>
        i = crc_lo ^ *buffer++; /* calculate the CRC  */
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	1c5a      	adds	r2, r3, #1
 800167e:	607a      	str	r2, [r7, #4]
 8001680:	781a      	ldrb	r2, [r3, #0]
 8001682:	7bbb      	ldrb	r3, [r7, #14]
 8001684:	4053      	eors	r3, r2
 8001686:	b2db      	uxtb	r3, r3
 8001688:	60bb      	str	r3, [r7, #8]
        crc_lo = crc_hi ^ table_crc_hi[i];
 800168a:	4a0f      	ldr	r2, [pc, #60]	; (80016c8 <crc16+0x64>)
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	4413      	add	r3, r2
 8001690:	781a      	ldrb	r2, [r3, #0]
 8001692:	7bfb      	ldrb	r3, [r7, #15]
 8001694:	4053      	eors	r3, r2
 8001696:	73bb      	strb	r3, [r7, #14]
        crc_hi = table_crc_lo[i];
 8001698:	4a0c      	ldr	r2, [pc, #48]	; (80016cc <crc16+0x68>)
 800169a:	68bb      	ldr	r3, [r7, #8]
 800169c:	4413      	add	r3, r2
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	73fb      	strb	r3, [r7, #15]
    while (buffer_length--) {
 80016a2:	887b      	ldrh	r3, [r7, #2]
 80016a4:	1e5a      	subs	r2, r3, #1
 80016a6:	807a      	strh	r2, [r7, #2]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d1e6      	bne.n	800167a <crc16+0x16>
    }

    return (crc_hi << 8 | crc_lo);
 80016ac:	7bfb      	ldrb	r3, [r7, #15]
 80016ae:	021b      	lsls	r3, r3, #8
 80016b0:	b21a      	sxth	r2, r3
 80016b2:	7bbb      	ldrb	r3, [r7, #14]
 80016b4:	b21b      	sxth	r3, r3
 80016b6:	4313      	orrs	r3, r2
 80016b8:	b21b      	sxth	r3, r3
 80016ba:	b29b      	uxth	r3, r3
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3714      	adds	r7, #20
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr
 80016c8:	08008a60 	.word	0x08008a60
 80016cc:	08008b60 	.word	0x08008b60

080016d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016d6:	2300      	movs	r3, #0
 80016d8:	607b      	str	r3, [r7, #4]
 80016da:	4b10      	ldr	r3, [pc, #64]	; (800171c <HAL_MspInit+0x4c>)
 80016dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016de:	4a0f      	ldr	r2, [pc, #60]	; (800171c <HAL_MspInit+0x4c>)
 80016e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016e4:	6453      	str	r3, [r2, #68]	; 0x44
 80016e6:	4b0d      	ldr	r3, [pc, #52]	; (800171c <HAL_MspInit+0x4c>)
 80016e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016ee:	607b      	str	r3, [r7, #4]
 80016f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016f2:	2300      	movs	r3, #0
 80016f4:	603b      	str	r3, [r7, #0]
 80016f6:	4b09      	ldr	r3, [pc, #36]	; (800171c <HAL_MspInit+0x4c>)
 80016f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fa:	4a08      	ldr	r2, [pc, #32]	; (800171c <HAL_MspInit+0x4c>)
 80016fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001700:	6413      	str	r3, [r2, #64]	; 0x40
 8001702:	4b06      	ldr	r3, [pc, #24]	; (800171c <HAL_MspInit+0x4c>)
 8001704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001706:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800170a:	603b      	str	r3, [r7, #0]
 800170c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800170e:	2007      	movs	r0, #7
 8001710:	f000 fae6 	bl	8001ce0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001714:	bf00      	nop
 8001716:	3708      	adds	r7, #8
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	40023800 	.word	0x40023800

08001720 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b08c      	sub	sp, #48	; 0x30
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001728:	f107 031c 	add.w	r3, r7, #28
 800172c:	2200      	movs	r2, #0
 800172e:	601a      	str	r2, [r3, #0]
 8001730:	605a      	str	r2, [r3, #4]
 8001732:	609a      	str	r2, [r3, #8]
 8001734:	60da      	str	r2, [r3, #12]
 8001736:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a36      	ldr	r2, [pc, #216]	; (8001818 <HAL_UART_MspInit+0xf8>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d135      	bne.n	80017ae <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001742:	2300      	movs	r3, #0
 8001744:	61bb      	str	r3, [r7, #24]
 8001746:	4b35      	ldr	r3, [pc, #212]	; (800181c <HAL_UART_MspInit+0xfc>)
 8001748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800174a:	4a34      	ldr	r2, [pc, #208]	; (800181c <HAL_UART_MspInit+0xfc>)
 800174c:	f043 0310 	orr.w	r3, r3, #16
 8001750:	6453      	str	r3, [r2, #68]	; 0x44
 8001752:	4b32      	ldr	r3, [pc, #200]	; (800181c <HAL_UART_MspInit+0xfc>)
 8001754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001756:	f003 0310 	and.w	r3, r3, #16
 800175a:	61bb      	str	r3, [r7, #24]
 800175c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800175e:	2300      	movs	r3, #0
 8001760:	617b      	str	r3, [r7, #20]
 8001762:	4b2e      	ldr	r3, [pc, #184]	; (800181c <HAL_UART_MspInit+0xfc>)
 8001764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001766:	4a2d      	ldr	r2, [pc, #180]	; (800181c <HAL_UART_MspInit+0xfc>)
 8001768:	f043 0301 	orr.w	r3, r3, #1
 800176c:	6313      	str	r3, [r2, #48]	; 0x30
 800176e:	4b2b      	ldr	r3, [pc, #172]	; (800181c <HAL_UART_MspInit+0xfc>)
 8001770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001772:	f003 0301 	and.w	r3, r3, #1
 8001776:	617b      	str	r3, [r7, #20]
 8001778:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800177a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800177e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001780:	2302      	movs	r3, #2
 8001782:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001784:	2300      	movs	r3, #0
 8001786:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001788:	2303      	movs	r3, #3
 800178a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800178c:	2307      	movs	r3, #7
 800178e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001790:	f107 031c 	add.w	r3, r7, #28
 8001794:	4619      	mov	r1, r3
 8001796:	4822      	ldr	r0, [pc, #136]	; (8001820 <HAL_UART_MspInit+0x100>)
 8001798:	f000 fb76 	bl	8001e88 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800179c:	2200      	movs	r2, #0
 800179e:	2100      	movs	r1, #0
 80017a0:	2025      	movs	r0, #37	; 0x25
 80017a2:	f000 faa8 	bl	8001cf6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80017a6:	2025      	movs	r0, #37	; 0x25
 80017a8:	f000 fac1 	bl	8001d2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80017ac:	e030      	b.n	8001810 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a1c      	ldr	r2, [pc, #112]	; (8001824 <HAL_UART_MspInit+0x104>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d12b      	bne.n	8001810 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80017b8:	2300      	movs	r3, #0
 80017ba:	613b      	str	r3, [r7, #16]
 80017bc:	4b17      	ldr	r3, [pc, #92]	; (800181c <HAL_UART_MspInit+0xfc>)
 80017be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c0:	4a16      	ldr	r2, [pc, #88]	; (800181c <HAL_UART_MspInit+0xfc>)
 80017c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017c6:	6413      	str	r3, [r2, #64]	; 0x40
 80017c8:	4b14      	ldr	r3, [pc, #80]	; (800181c <HAL_UART_MspInit+0xfc>)
 80017ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017d0:	613b      	str	r3, [r7, #16]
 80017d2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017d4:	2300      	movs	r3, #0
 80017d6:	60fb      	str	r3, [r7, #12]
 80017d8:	4b10      	ldr	r3, [pc, #64]	; (800181c <HAL_UART_MspInit+0xfc>)
 80017da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017dc:	4a0f      	ldr	r2, [pc, #60]	; (800181c <HAL_UART_MspInit+0xfc>)
 80017de:	f043 0301 	orr.w	r3, r3, #1
 80017e2:	6313      	str	r3, [r2, #48]	; 0x30
 80017e4:	4b0d      	ldr	r3, [pc, #52]	; (800181c <HAL_UART_MspInit+0xfc>)
 80017e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e8:	f003 0301 	and.w	r3, r3, #1
 80017ec:	60fb      	str	r3, [r7, #12]
 80017ee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80017f0:	230c      	movs	r3, #12
 80017f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f4:	2302      	movs	r3, #2
 80017f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f8:	2300      	movs	r3, #0
 80017fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017fc:	2303      	movs	r3, #3
 80017fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001800:	2307      	movs	r3, #7
 8001802:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001804:	f107 031c 	add.w	r3, r7, #28
 8001808:	4619      	mov	r1, r3
 800180a:	4805      	ldr	r0, [pc, #20]	; (8001820 <HAL_UART_MspInit+0x100>)
 800180c:	f000 fb3c 	bl	8001e88 <HAL_GPIO_Init>
}
 8001810:	bf00      	nop
 8001812:	3730      	adds	r7, #48	; 0x30
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	40011000 	.word	0x40011000
 800181c:	40023800 	.word	0x40023800
 8001820:	40020000 	.word	0x40020000
 8001824:	40004400 	.word	0x40004400

08001828 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800182c:	e7fe      	b.n	800182c <NMI_Handler+0x4>

0800182e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800182e:	b480      	push	{r7}
 8001830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001832:	e7fe      	b.n	8001832 <HardFault_Handler+0x4>

08001834 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001838:	e7fe      	b.n	8001838 <MemManage_Handler+0x4>

0800183a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800183a:	b480      	push	{r7}
 800183c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800183e:	e7fe      	b.n	800183e <BusFault_Handler+0x4>

08001840 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001844:	e7fe      	b.n	8001844 <UsageFault_Handler+0x4>

08001846 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001846:	b480      	push	{r7}
 8001848:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800184a:	bf00      	nop
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr

08001854 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001858:	bf00      	nop
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr

08001862 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001862:	b480      	push	{r7}
 8001864:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001866:	bf00      	nop
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr

08001870 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001874:	f000 f944 	bl	8001b00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001878:	bf00      	nop
 800187a:	bd80      	pop	{r7, pc}

0800187c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001880:	4802      	ldr	r0, [pc, #8]	; (800188c <USART1_IRQHandler+0x10>)
 8001882:	f001 fc19 	bl	80030b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001886:	bf00      	nop
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	200001fc 	.word	0x200001fc

08001890 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  return 1;
 8001894:	2301      	movs	r3, #1
}
 8001896:	4618      	mov	r0, r3
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr

080018a0 <_kill>:

int _kill(int pid, int sig)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
 80018a8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80018aa:	f002 fb39 	bl	8003f20 <__errno>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2216      	movs	r2, #22
 80018b2:	601a      	str	r2, [r3, #0]
  return -1;
 80018b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	3708      	adds	r7, #8
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}

080018c0 <_exit>:

void _exit (int status)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80018c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80018cc:	6878      	ldr	r0, [r7, #4]
 80018ce:	f7ff ffe7 	bl	80018a0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80018d2:	e7fe      	b.n	80018d2 <_exit+0x12>

080018d4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b086      	sub	sp, #24
 80018d8:	af00      	add	r7, sp, #0
 80018da:	60f8      	str	r0, [r7, #12]
 80018dc:	60b9      	str	r1, [r7, #8]
 80018de:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018e0:	2300      	movs	r3, #0
 80018e2:	617b      	str	r3, [r7, #20]
 80018e4:	e00a      	b.n	80018fc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80018e6:	f3af 8000 	nop.w
 80018ea:	4601      	mov	r1, r0
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	1c5a      	adds	r2, r3, #1
 80018f0:	60ba      	str	r2, [r7, #8]
 80018f2:	b2ca      	uxtb	r2, r1
 80018f4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	3301      	adds	r3, #1
 80018fa:	617b      	str	r3, [r7, #20]
 80018fc:	697a      	ldr	r2, [r7, #20]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	429a      	cmp	r2, r3
 8001902:	dbf0      	blt.n	80018e6 <_read+0x12>
  }

  return len;
 8001904:	687b      	ldr	r3, [r7, #4]
}
 8001906:	4618      	mov	r0, r3
 8001908:	3718      	adds	r7, #24
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}

0800190e <_close>:
  }
  return len;
}

int _close(int file)
{
 800190e:	b480      	push	{r7}
 8001910:	b083      	sub	sp, #12
 8001912:	af00      	add	r7, sp, #0
 8001914:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001916:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800191a:	4618      	mov	r0, r3
 800191c:	370c      	adds	r7, #12
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr

08001926 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001926:	b480      	push	{r7}
 8001928:	b083      	sub	sp, #12
 800192a:	af00      	add	r7, sp, #0
 800192c:	6078      	str	r0, [r7, #4]
 800192e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001936:	605a      	str	r2, [r3, #4]
  return 0;
 8001938:	2300      	movs	r3, #0
}
 800193a:	4618      	mov	r0, r3
 800193c:	370c      	adds	r7, #12
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr

08001946 <_isatty>:

int _isatty(int file)
{
 8001946:	b480      	push	{r7}
 8001948:	b083      	sub	sp, #12
 800194a:	af00      	add	r7, sp, #0
 800194c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800194e:	2301      	movs	r3, #1
}
 8001950:	4618      	mov	r0, r3
 8001952:	370c      	adds	r7, #12
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr

0800195c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800195c:	b480      	push	{r7}
 800195e:	b085      	sub	sp, #20
 8001960:	af00      	add	r7, sp, #0
 8001962:	60f8      	str	r0, [r7, #12]
 8001964:	60b9      	str	r1, [r7, #8]
 8001966:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001968:	2300      	movs	r3, #0
}
 800196a:	4618      	mov	r0, r3
 800196c:	3714      	adds	r7, #20
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
	...

08001978 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b086      	sub	sp, #24
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001980:	4a14      	ldr	r2, [pc, #80]	; (80019d4 <_sbrk+0x5c>)
 8001982:	4b15      	ldr	r3, [pc, #84]	; (80019d8 <_sbrk+0x60>)
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800198c:	4b13      	ldr	r3, [pc, #76]	; (80019dc <_sbrk+0x64>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d102      	bne.n	800199a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001994:	4b11      	ldr	r3, [pc, #68]	; (80019dc <_sbrk+0x64>)
 8001996:	4a12      	ldr	r2, [pc, #72]	; (80019e0 <_sbrk+0x68>)
 8001998:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800199a:	4b10      	ldr	r3, [pc, #64]	; (80019dc <_sbrk+0x64>)
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4413      	add	r3, r2
 80019a2:	693a      	ldr	r2, [r7, #16]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d207      	bcs.n	80019b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019a8:	f002 faba 	bl	8003f20 <__errno>
 80019ac:	4603      	mov	r3, r0
 80019ae:	220c      	movs	r2, #12
 80019b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019b6:	e009      	b.n	80019cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019b8:	4b08      	ldr	r3, [pc, #32]	; (80019dc <_sbrk+0x64>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019be:	4b07      	ldr	r3, [pc, #28]	; (80019dc <_sbrk+0x64>)
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	4413      	add	r3, r2
 80019c6:	4a05      	ldr	r2, [pc, #20]	; (80019dc <_sbrk+0x64>)
 80019c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019ca:	68fb      	ldr	r3, [r7, #12]
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3718      	adds	r7, #24
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	20020000 	.word	0x20020000
 80019d8:	00000400 	.word	0x00000400
 80019dc:	20000284 	.word	0x20000284
 80019e0:	200002a0 	.word	0x200002a0

080019e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019e8:	4b06      	ldr	r3, [pc, #24]	; (8001a04 <SystemInit+0x20>)
 80019ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019ee:	4a05      	ldr	r2, [pc, #20]	; (8001a04 <SystemInit+0x20>)
 80019f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019f8:	bf00      	nop
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	e000ed00 	.word	0xe000ed00

08001a08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001a08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a40 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a0c:	480d      	ldr	r0, [pc, #52]	; (8001a44 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a0e:	490e      	ldr	r1, [pc, #56]	; (8001a48 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a10:	4a0e      	ldr	r2, [pc, #56]	; (8001a4c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a14:	e002      	b.n	8001a1c <LoopCopyDataInit>

08001a16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a1a:	3304      	adds	r3, #4

08001a1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a20:	d3f9      	bcc.n	8001a16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a22:	4a0b      	ldr	r2, [pc, #44]	; (8001a50 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a24:	4c0b      	ldr	r4, [pc, #44]	; (8001a54 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a28:	e001      	b.n	8001a2e <LoopFillZerobss>

08001a2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a2c:	3204      	adds	r2, #4

08001a2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a30:	d3fb      	bcc.n	8001a2a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a32:	f7ff ffd7 	bl	80019e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a36:	f002 fa79 	bl	8003f2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a3a:	f7ff fb25 	bl	8001088 <main>
  bx  lr    
 8001a3e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a40:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a48:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001a4c:	08009134 	.word	0x08009134
  ldr r2, =_sbss
 8001a50:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001a54:	2000029c 	.word	0x2000029c

08001a58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a58:	e7fe      	b.n	8001a58 <ADC_IRQHandler>
	...

08001a5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a60:	4b0e      	ldr	r3, [pc, #56]	; (8001a9c <HAL_Init+0x40>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a0d      	ldr	r2, [pc, #52]	; (8001a9c <HAL_Init+0x40>)
 8001a66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a6a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a6c:	4b0b      	ldr	r3, [pc, #44]	; (8001a9c <HAL_Init+0x40>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a0a      	ldr	r2, [pc, #40]	; (8001a9c <HAL_Init+0x40>)
 8001a72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a76:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a78:	4b08      	ldr	r3, [pc, #32]	; (8001a9c <HAL_Init+0x40>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a07      	ldr	r2, [pc, #28]	; (8001a9c <HAL_Init+0x40>)
 8001a7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a84:	2003      	movs	r0, #3
 8001a86:	f000 f92b 	bl	8001ce0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a8a:	2000      	movs	r0, #0
 8001a8c:	f000 f808 	bl	8001aa0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a90:	f7ff fe1e 	bl	80016d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a94:	2300      	movs	r3, #0
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	40023c00 	.word	0x40023c00

08001aa0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001aa8:	4b12      	ldr	r3, [pc, #72]	; (8001af4 <HAL_InitTick+0x54>)
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	4b12      	ldr	r3, [pc, #72]	; (8001af8 <HAL_InitTick+0x58>)
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ab6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001aba:	fbb2 f3f3 	udiv	r3, r2, r3
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f000 f943 	bl	8001d4a <HAL_SYSTICK_Config>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e00e      	b.n	8001aec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2b0f      	cmp	r3, #15
 8001ad2:	d80a      	bhi.n	8001aea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	6879      	ldr	r1, [r7, #4]
 8001ad8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001adc:	f000 f90b 	bl	8001cf6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ae0:	4a06      	ldr	r2, [pc, #24]	; (8001afc <HAL_InitTick+0x5c>)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	e000      	b.n	8001aec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3708      	adds	r7, #8
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	20000000 	.word	0x20000000
 8001af8:	20000008 	.word	0x20000008
 8001afc:	20000004 	.word	0x20000004

08001b00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b04:	4b06      	ldr	r3, [pc, #24]	; (8001b20 <HAL_IncTick+0x20>)
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	461a      	mov	r2, r3
 8001b0a:	4b06      	ldr	r3, [pc, #24]	; (8001b24 <HAL_IncTick+0x24>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4413      	add	r3, r2
 8001b10:	4a04      	ldr	r2, [pc, #16]	; (8001b24 <HAL_IncTick+0x24>)
 8001b12:	6013      	str	r3, [r2, #0]
}
 8001b14:	bf00      	nop
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	20000008 	.word	0x20000008
 8001b24:	20000288 	.word	0x20000288

08001b28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b2c:	4b03      	ldr	r3, [pc, #12]	; (8001b3c <HAL_GetTick+0x14>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr
 8001b3a:	bf00      	nop
 8001b3c:	20000288 	.word	0x20000288

08001b40 <__NVIC_SetPriorityGrouping>:
{
 8001b40:	b480      	push	{r7}
 8001b42:	b085      	sub	sp, #20
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f003 0307 	and.w	r3, r3, #7
 8001b4e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b50:	4b0c      	ldr	r3, [pc, #48]	; (8001b84 <__NVIC_SetPriorityGrouping+0x44>)
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b56:	68ba      	ldr	r2, [r7, #8]
 8001b58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b72:	4a04      	ldr	r2, [pc, #16]	; (8001b84 <__NVIC_SetPriorityGrouping+0x44>)
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	60d3      	str	r3, [r2, #12]
}
 8001b78:	bf00      	nop
 8001b7a:	3714      	adds	r7, #20
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr
 8001b84:	e000ed00 	.word	0xe000ed00

08001b88 <__NVIC_GetPriorityGrouping>:
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b8c:	4b04      	ldr	r3, [pc, #16]	; (8001ba0 <__NVIC_GetPriorityGrouping+0x18>)
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	0a1b      	lsrs	r3, r3, #8
 8001b92:	f003 0307 	and.w	r3, r3, #7
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr
 8001ba0:	e000ed00 	.word	0xe000ed00

08001ba4 <__NVIC_EnableIRQ>:
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	4603      	mov	r3, r0
 8001bac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	db0b      	blt.n	8001bce <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bb6:	79fb      	ldrb	r3, [r7, #7]
 8001bb8:	f003 021f 	and.w	r2, r3, #31
 8001bbc:	4907      	ldr	r1, [pc, #28]	; (8001bdc <__NVIC_EnableIRQ+0x38>)
 8001bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc2:	095b      	lsrs	r3, r3, #5
 8001bc4:	2001      	movs	r0, #1
 8001bc6:	fa00 f202 	lsl.w	r2, r0, r2
 8001bca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001bce:	bf00      	nop
 8001bd0:	370c      	adds	r7, #12
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	e000e100 	.word	0xe000e100

08001be0 <__NVIC_SetPriority>:
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	4603      	mov	r3, r0
 8001be8:	6039      	str	r1, [r7, #0]
 8001bea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	db0a      	blt.n	8001c0a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	b2da      	uxtb	r2, r3
 8001bf8:	490c      	ldr	r1, [pc, #48]	; (8001c2c <__NVIC_SetPriority+0x4c>)
 8001bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bfe:	0112      	lsls	r2, r2, #4
 8001c00:	b2d2      	uxtb	r2, r2
 8001c02:	440b      	add	r3, r1
 8001c04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001c08:	e00a      	b.n	8001c20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	b2da      	uxtb	r2, r3
 8001c0e:	4908      	ldr	r1, [pc, #32]	; (8001c30 <__NVIC_SetPriority+0x50>)
 8001c10:	79fb      	ldrb	r3, [r7, #7]
 8001c12:	f003 030f 	and.w	r3, r3, #15
 8001c16:	3b04      	subs	r3, #4
 8001c18:	0112      	lsls	r2, r2, #4
 8001c1a:	b2d2      	uxtb	r2, r2
 8001c1c:	440b      	add	r3, r1
 8001c1e:	761a      	strb	r2, [r3, #24]
}
 8001c20:	bf00      	nop
 8001c22:	370c      	adds	r7, #12
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr
 8001c2c:	e000e100 	.word	0xe000e100
 8001c30:	e000ed00 	.word	0xe000ed00

08001c34 <NVIC_EncodePriority>:
{
 8001c34:	b480      	push	{r7}
 8001c36:	b089      	sub	sp, #36	; 0x24
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	60f8      	str	r0, [r7, #12]
 8001c3c:	60b9      	str	r1, [r7, #8]
 8001c3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	f003 0307 	and.w	r3, r3, #7
 8001c46:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	f1c3 0307 	rsb	r3, r3, #7
 8001c4e:	2b04      	cmp	r3, #4
 8001c50:	bf28      	it	cs
 8001c52:	2304      	movcs	r3, #4
 8001c54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	3304      	adds	r3, #4
 8001c5a:	2b06      	cmp	r3, #6
 8001c5c:	d902      	bls.n	8001c64 <NVIC_EncodePriority+0x30>
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	3b03      	subs	r3, #3
 8001c62:	e000      	b.n	8001c66 <NVIC_EncodePriority+0x32>
 8001c64:	2300      	movs	r3, #0
 8001c66:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001c6c:	69bb      	ldr	r3, [r7, #24]
 8001c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c72:	43da      	mvns	r2, r3
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	401a      	ands	r2, r3
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c7c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	fa01 f303 	lsl.w	r3, r1, r3
 8001c86:	43d9      	mvns	r1, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c8c:	4313      	orrs	r3, r2
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3724      	adds	r7, #36	; 0x24
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
	...

08001c9c <SysTick_Config>:
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	3b01      	subs	r3, #1
 8001ca8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cac:	d301      	bcc.n	8001cb2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e00f      	b.n	8001cd2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cb2:	4a0a      	ldr	r2, [pc, #40]	; (8001cdc <SysTick_Config+0x40>)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	3b01      	subs	r3, #1
 8001cb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cba:	210f      	movs	r1, #15
 8001cbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001cc0:	f7ff ff8e 	bl	8001be0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cc4:	4b05      	ldr	r3, [pc, #20]	; (8001cdc <SysTick_Config+0x40>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cca:	4b04      	ldr	r3, [pc, #16]	; (8001cdc <SysTick_Config+0x40>)
 8001ccc:	2207      	movs	r2, #7
 8001cce:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001cd0:	2300      	movs	r3, #0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3708      	adds	r7, #8
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	e000e010 	.word	0xe000e010

08001ce0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ce8:	6878      	ldr	r0, [r7, #4]
 8001cea:	f7ff ff29 	bl	8001b40 <__NVIC_SetPriorityGrouping>
}
 8001cee:	bf00      	nop
 8001cf0:	3708      	adds	r7, #8
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}

08001cf6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cf6:	b580      	push	{r7, lr}
 8001cf8:	b086      	sub	sp, #24
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	60b9      	str	r1, [r7, #8]
 8001d00:	607a      	str	r2, [r7, #4]
 8001d02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d04:	2300      	movs	r3, #0
 8001d06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d08:	f7ff ff3e 	bl	8001b88 <__NVIC_GetPriorityGrouping>
 8001d0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d0e:	687a      	ldr	r2, [r7, #4]
 8001d10:	68b9      	ldr	r1, [r7, #8]
 8001d12:	6978      	ldr	r0, [r7, #20]
 8001d14:	f7ff ff8e 	bl	8001c34 <NVIC_EncodePriority>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d1e:	4611      	mov	r1, r2
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7ff ff5d 	bl	8001be0 <__NVIC_SetPriority>
}
 8001d26:	bf00      	nop
 8001d28:	3718      	adds	r7, #24
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}

08001d2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	b082      	sub	sp, #8
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	4603      	mov	r3, r0
 8001d36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f7ff ff31 	bl	8001ba4 <__NVIC_EnableIRQ>
}
 8001d42:	bf00      	nop
 8001d44:	3708      	adds	r7, #8
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}

08001d4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d4a:	b580      	push	{r7, lr}
 8001d4c:	b082      	sub	sp, #8
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f7ff ffa2 	bl	8001c9c <SysTick_Config>
 8001d58:	4603      	mov	r3, r0
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3708      	adds	r7, #8
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}

08001d62 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d62:	b580      	push	{r7, lr}
 8001d64:	b084      	sub	sp, #16
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d6e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001d70:	f7ff feda 	bl	8001b28 <HAL_GetTick>
 8001d74:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	2b02      	cmp	r3, #2
 8001d80:	d008      	beq.n	8001d94 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2280      	movs	r2, #128	; 0x80
 8001d86:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	e052      	b.n	8001e3a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f022 0216 	bic.w	r2, r2, #22
 8001da2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	695a      	ldr	r2, [r3, #20]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001db2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d103      	bne.n	8001dc4 <HAL_DMA_Abort+0x62>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d007      	beq.n	8001dd4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f022 0208 	bic.w	r2, r2, #8
 8001dd2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f022 0201 	bic.w	r2, r2, #1
 8001de2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001de4:	e013      	b.n	8001e0e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001de6:	f7ff fe9f 	bl	8001b28 <HAL_GetTick>
 8001dea:	4602      	mov	r2, r0
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	1ad3      	subs	r3, r2, r3
 8001df0:	2b05      	cmp	r3, #5
 8001df2:	d90c      	bls.n	8001e0e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2220      	movs	r2, #32
 8001df8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2203      	movs	r2, #3
 8001dfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2200      	movs	r2, #0
 8001e06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e015      	b.n	8001e3a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 0301 	and.w	r3, r3, #1
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d1e4      	bne.n	8001de6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e20:	223f      	movs	r2, #63	; 0x3f
 8001e22:	409a      	lsls	r2, r3
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2200      	movs	r2, #0
 8001e34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001e38:	2300      	movs	r3, #0
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3710      	adds	r7, #16
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}

08001e42 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e42:	b480      	push	{r7}
 8001e44:	b083      	sub	sp, #12
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	2b02      	cmp	r3, #2
 8001e54:	d004      	beq.n	8001e60 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2280      	movs	r2, #128	; 0x80
 8001e5a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	e00c      	b.n	8001e7a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2205      	movs	r2, #5
 8001e64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f022 0201 	bic.w	r2, r2, #1
 8001e76:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001e78:	2300      	movs	r3, #0
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	370c      	adds	r7, #12
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
	...

08001e88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b089      	sub	sp, #36	; 0x24
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e92:	2300      	movs	r3, #0
 8001e94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e96:	2300      	movs	r3, #0
 8001e98:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	61fb      	str	r3, [r7, #28]
 8001ea2:	e165      	b.n	8002170 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	697a      	ldr	r2, [r7, #20]
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001eb8:	693a      	ldr	r2, [r7, #16]
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	f040 8154 	bne.w	800216a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	f003 0303 	and.w	r3, r3, #3
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d005      	beq.n	8001eda <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	d130      	bne.n	8001f3c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ee0:	69fb      	ldr	r3, [r7, #28]
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	2203      	movs	r2, #3
 8001ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eea:	43db      	mvns	r3, r3
 8001eec:	69ba      	ldr	r2, [r7, #24]
 8001eee:	4013      	ands	r3, r2
 8001ef0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	68da      	ldr	r2, [r3, #12]
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	005b      	lsls	r3, r3, #1
 8001efa:	fa02 f303 	lsl.w	r3, r2, r3
 8001efe:	69ba      	ldr	r2, [r7, #24]
 8001f00:	4313      	orrs	r3, r2
 8001f02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	69ba      	ldr	r2, [r7, #24]
 8001f08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f10:	2201      	movs	r2, #1
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	fa02 f303 	lsl.w	r3, r2, r3
 8001f18:	43db      	mvns	r3, r3
 8001f1a:	69ba      	ldr	r2, [r7, #24]
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	091b      	lsrs	r3, r3, #4
 8001f26:	f003 0201 	and.w	r2, r3, #1
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f30:	69ba      	ldr	r2, [r7, #24]
 8001f32:	4313      	orrs	r3, r2
 8001f34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	69ba      	ldr	r2, [r7, #24]
 8001f3a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f003 0303 	and.w	r3, r3, #3
 8001f44:	2b03      	cmp	r3, #3
 8001f46:	d017      	beq.n	8001f78 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	005b      	lsls	r3, r3, #1
 8001f52:	2203      	movs	r2, #3
 8001f54:	fa02 f303 	lsl.w	r3, r2, r3
 8001f58:	43db      	mvns	r3, r3
 8001f5a:	69ba      	ldr	r2, [r7, #24]
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	689a      	ldr	r2, [r3, #8]
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	005b      	lsls	r3, r3, #1
 8001f68:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6c:	69ba      	ldr	r2, [r7, #24]
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	69ba      	ldr	r2, [r7, #24]
 8001f76:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f003 0303 	and.w	r3, r3, #3
 8001f80:	2b02      	cmp	r3, #2
 8001f82:	d123      	bne.n	8001fcc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	08da      	lsrs	r2, r3, #3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	3208      	adds	r2, #8
 8001f8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f90:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	f003 0307 	and.w	r3, r3, #7
 8001f98:	009b      	lsls	r3, r3, #2
 8001f9a:	220f      	movs	r2, #15
 8001f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa0:	43db      	mvns	r3, r3
 8001fa2:	69ba      	ldr	r2, [r7, #24]
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	691a      	ldr	r2, [r3, #16]
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	f003 0307 	and.w	r3, r3, #7
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb8:	69ba      	ldr	r2, [r7, #24]
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	08da      	lsrs	r2, r3, #3
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	3208      	adds	r2, #8
 8001fc6:	69b9      	ldr	r1, [r7, #24]
 8001fc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	005b      	lsls	r3, r3, #1
 8001fd6:	2203      	movs	r2, #3
 8001fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fdc:	43db      	mvns	r3, r3
 8001fde:	69ba      	ldr	r2, [r7, #24]
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f003 0203 	and.w	r2, r3, #3
 8001fec:	69fb      	ldr	r3, [r7, #28]
 8001fee:	005b      	lsls	r3, r3, #1
 8001ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff4:	69ba      	ldr	r2, [r7, #24]
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	69ba      	ldr	r2, [r7, #24]
 8001ffe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002008:	2b00      	cmp	r3, #0
 800200a:	f000 80ae 	beq.w	800216a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800200e:	2300      	movs	r3, #0
 8002010:	60fb      	str	r3, [r7, #12]
 8002012:	4b5d      	ldr	r3, [pc, #372]	; (8002188 <HAL_GPIO_Init+0x300>)
 8002014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002016:	4a5c      	ldr	r2, [pc, #368]	; (8002188 <HAL_GPIO_Init+0x300>)
 8002018:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800201c:	6453      	str	r3, [r2, #68]	; 0x44
 800201e:	4b5a      	ldr	r3, [pc, #360]	; (8002188 <HAL_GPIO_Init+0x300>)
 8002020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002022:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002026:	60fb      	str	r3, [r7, #12]
 8002028:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800202a:	4a58      	ldr	r2, [pc, #352]	; (800218c <HAL_GPIO_Init+0x304>)
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	089b      	lsrs	r3, r3, #2
 8002030:	3302      	adds	r3, #2
 8002032:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002036:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	f003 0303 	and.w	r3, r3, #3
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	220f      	movs	r2, #15
 8002042:	fa02 f303 	lsl.w	r3, r2, r3
 8002046:	43db      	mvns	r3, r3
 8002048:	69ba      	ldr	r2, [r7, #24]
 800204a:	4013      	ands	r3, r2
 800204c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a4f      	ldr	r2, [pc, #316]	; (8002190 <HAL_GPIO_Init+0x308>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d025      	beq.n	80020a2 <HAL_GPIO_Init+0x21a>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a4e      	ldr	r2, [pc, #312]	; (8002194 <HAL_GPIO_Init+0x30c>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d01f      	beq.n	800209e <HAL_GPIO_Init+0x216>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a4d      	ldr	r2, [pc, #308]	; (8002198 <HAL_GPIO_Init+0x310>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d019      	beq.n	800209a <HAL_GPIO_Init+0x212>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a4c      	ldr	r2, [pc, #304]	; (800219c <HAL_GPIO_Init+0x314>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d013      	beq.n	8002096 <HAL_GPIO_Init+0x20e>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a4b      	ldr	r2, [pc, #300]	; (80021a0 <HAL_GPIO_Init+0x318>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d00d      	beq.n	8002092 <HAL_GPIO_Init+0x20a>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a4a      	ldr	r2, [pc, #296]	; (80021a4 <HAL_GPIO_Init+0x31c>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d007      	beq.n	800208e <HAL_GPIO_Init+0x206>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a49      	ldr	r2, [pc, #292]	; (80021a8 <HAL_GPIO_Init+0x320>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d101      	bne.n	800208a <HAL_GPIO_Init+0x202>
 8002086:	2306      	movs	r3, #6
 8002088:	e00c      	b.n	80020a4 <HAL_GPIO_Init+0x21c>
 800208a:	2307      	movs	r3, #7
 800208c:	e00a      	b.n	80020a4 <HAL_GPIO_Init+0x21c>
 800208e:	2305      	movs	r3, #5
 8002090:	e008      	b.n	80020a4 <HAL_GPIO_Init+0x21c>
 8002092:	2304      	movs	r3, #4
 8002094:	e006      	b.n	80020a4 <HAL_GPIO_Init+0x21c>
 8002096:	2303      	movs	r3, #3
 8002098:	e004      	b.n	80020a4 <HAL_GPIO_Init+0x21c>
 800209a:	2302      	movs	r3, #2
 800209c:	e002      	b.n	80020a4 <HAL_GPIO_Init+0x21c>
 800209e:	2301      	movs	r3, #1
 80020a0:	e000      	b.n	80020a4 <HAL_GPIO_Init+0x21c>
 80020a2:	2300      	movs	r3, #0
 80020a4:	69fa      	ldr	r2, [r7, #28]
 80020a6:	f002 0203 	and.w	r2, r2, #3
 80020aa:	0092      	lsls	r2, r2, #2
 80020ac:	4093      	lsls	r3, r2
 80020ae:	69ba      	ldr	r2, [r7, #24]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020b4:	4935      	ldr	r1, [pc, #212]	; (800218c <HAL_GPIO_Init+0x304>)
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	089b      	lsrs	r3, r3, #2
 80020ba:	3302      	adds	r3, #2
 80020bc:	69ba      	ldr	r2, [r7, #24]
 80020be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020c2:	4b3a      	ldr	r3, [pc, #232]	; (80021ac <HAL_GPIO_Init+0x324>)
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	43db      	mvns	r3, r3
 80020cc:	69ba      	ldr	r2, [r7, #24]
 80020ce:	4013      	ands	r3, r2
 80020d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d003      	beq.n	80020e6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80020de:	69ba      	ldr	r2, [r7, #24]
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020e6:	4a31      	ldr	r2, [pc, #196]	; (80021ac <HAL_GPIO_Init+0x324>)
 80020e8:	69bb      	ldr	r3, [r7, #24]
 80020ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020ec:	4b2f      	ldr	r3, [pc, #188]	; (80021ac <HAL_GPIO_Init+0x324>)
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	43db      	mvns	r3, r3
 80020f6:	69ba      	ldr	r2, [r7, #24]
 80020f8:	4013      	ands	r3, r2
 80020fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d003      	beq.n	8002110 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	4313      	orrs	r3, r2
 800210e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002110:	4a26      	ldr	r2, [pc, #152]	; (80021ac <HAL_GPIO_Init+0x324>)
 8002112:	69bb      	ldr	r3, [r7, #24]
 8002114:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002116:	4b25      	ldr	r3, [pc, #148]	; (80021ac <HAL_GPIO_Init+0x324>)
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	43db      	mvns	r3, r3
 8002120:	69ba      	ldr	r2, [r7, #24]
 8002122:	4013      	ands	r3, r2
 8002124:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d003      	beq.n	800213a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002132:	69ba      	ldr	r2, [r7, #24]
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	4313      	orrs	r3, r2
 8002138:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800213a:	4a1c      	ldr	r2, [pc, #112]	; (80021ac <HAL_GPIO_Init+0x324>)
 800213c:	69bb      	ldr	r3, [r7, #24]
 800213e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002140:	4b1a      	ldr	r3, [pc, #104]	; (80021ac <HAL_GPIO_Init+0x324>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	43db      	mvns	r3, r3
 800214a:	69ba      	ldr	r2, [r7, #24]
 800214c:	4013      	ands	r3, r2
 800214e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002158:	2b00      	cmp	r3, #0
 800215a:	d003      	beq.n	8002164 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800215c:	69ba      	ldr	r2, [r7, #24]
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	4313      	orrs	r3, r2
 8002162:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002164:	4a11      	ldr	r2, [pc, #68]	; (80021ac <HAL_GPIO_Init+0x324>)
 8002166:	69bb      	ldr	r3, [r7, #24]
 8002168:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	3301      	adds	r3, #1
 800216e:	61fb      	str	r3, [r7, #28]
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	2b0f      	cmp	r3, #15
 8002174:	f67f ae96 	bls.w	8001ea4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002178:	bf00      	nop
 800217a:	bf00      	nop
 800217c:	3724      	adds	r7, #36	; 0x24
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
 8002186:	bf00      	nop
 8002188:	40023800 	.word	0x40023800
 800218c:	40013800 	.word	0x40013800
 8002190:	40020000 	.word	0x40020000
 8002194:	40020400 	.word	0x40020400
 8002198:	40020800 	.word	0x40020800
 800219c:	40020c00 	.word	0x40020c00
 80021a0:	40021000 	.word	0x40021000
 80021a4:	40021400 	.word	0x40021400
 80021a8:	40021800 	.word	0x40021800
 80021ac:	40013c00 	.word	0x40013c00

080021b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	460b      	mov	r3, r1
 80021ba:	807b      	strh	r3, [r7, #2]
 80021bc:	4613      	mov	r3, r2
 80021be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021c0:	787b      	ldrb	r3, [r7, #1]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d003      	beq.n	80021ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021c6:	887a      	ldrh	r2, [r7, #2]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80021cc:	e003      	b.n	80021d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80021ce:	887b      	ldrh	r3, [r7, #2]
 80021d0:	041a      	lsls	r2, r3, #16
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	619a      	str	r2, [r3, #24]
}
 80021d6:	bf00      	nop
 80021d8:	370c      	adds	r7, #12
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr
	...

080021e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b084      	sub	sp, #16
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d101      	bne.n	80021f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	e0cc      	b.n	8002392 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021f8:	4b68      	ldr	r3, [pc, #416]	; (800239c <HAL_RCC_ClockConfig+0x1b8>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 030f 	and.w	r3, r3, #15
 8002200:	683a      	ldr	r2, [r7, #0]
 8002202:	429a      	cmp	r2, r3
 8002204:	d90c      	bls.n	8002220 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002206:	4b65      	ldr	r3, [pc, #404]	; (800239c <HAL_RCC_ClockConfig+0x1b8>)
 8002208:	683a      	ldr	r2, [r7, #0]
 800220a:	b2d2      	uxtb	r2, r2
 800220c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800220e:	4b63      	ldr	r3, [pc, #396]	; (800239c <HAL_RCC_ClockConfig+0x1b8>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 030f 	and.w	r3, r3, #15
 8002216:	683a      	ldr	r2, [r7, #0]
 8002218:	429a      	cmp	r2, r3
 800221a:	d001      	beq.n	8002220 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	e0b8      	b.n	8002392 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 0302 	and.w	r3, r3, #2
 8002228:	2b00      	cmp	r3, #0
 800222a:	d020      	beq.n	800226e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 0304 	and.w	r3, r3, #4
 8002234:	2b00      	cmp	r3, #0
 8002236:	d005      	beq.n	8002244 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002238:	4b59      	ldr	r3, [pc, #356]	; (80023a0 <HAL_RCC_ClockConfig+0x1bc>)
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	4a58      	ldr	r2, [pc, #352]	; (80023a0 <HAL_RCC_ClockConfig+0x1bc>)
 800223e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002242:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 0308 	and.w	r3, r3, #8
 800224c:	2b00      	cmp	r3, #0
 800224e:	d005      	beq.n	800225c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002250:	4b53      	ldr	r3, [pc, #332]	; (80023a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	4a52      	ldr	r2, [pc, #328]	; (80023a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002256:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800225a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800225c:	4b50      	ldr	r3, [pc, #320]	; (80023a0 <HAL_RCC_ClockConfig+0x1bc>)
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	494d      	ldr	r1, [pc, #308]	; (80023a0 <HAL_RCC_ClockConfig+0x1bc>)
 800226a:	4313      	orrs	r3, r2
 800226c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 0301 	and.w	r3, r3, #1
 8002276:	2b00      	cmp	r3, #0
 8002278:	d044      	beq.n	8002304 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	2b01      	cmp	r3, #1
 8002280:	d107      	bne.n	8002292 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002282:	4b47      	ldr	r3, [pc, #284]	; (80023a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d119      	bne.n	80022c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e07f      	b.n	8002392 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	2b02      	cmp	r3, #2
 8002298:	d003      	beq.n	80022a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800229e:	2b03      	cmp	r3, #3
 80022a0:	d107      	bne.n	80022b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022a2:	4b3f      	ldr	r3, [pc, #252]	; (80023a0 <HAL_RCC_ClockConfig+0x1bc>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d109      	bne.n	80022c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e06f      	b.n	8002392 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022b2:	4b3b      	ldr	r3, [pc, #236]	; (80023a0 <HAL_RCC_ClockConfig+0x1bc>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0302 	and.w	r3, r3, #2
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d101      	bne.n	80022c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e067      	b.n	8002392 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022c2:	4b37      	ldr	r3, [pc, #220]	; (80023a0 <HAL_RCC_ClockConfig+0x1bc>)
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	f023 0203 	bic.w	r2, r3, #3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	4934      	ldr	r1, [pc, #208]	; (80023a0 <HAL_RCC_ClockConfig+0x1bc>)
 80022d0:	4313      	orrs	r3, r2
 80022d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022d4:	f7ff fc28 	bl	8001b28 <HAL_GetTick>
 80022d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022da:	e00a      	b.n	80022f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022dc:	f7ff fc24 	bl	8001b28 <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d901      	bls.n	80022f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e04f      	b.n	8002392 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022f2:	4b2b      	ldr	r3, [pc, #172]	; (80023a0 <HAL_RCC_ClockConfig+0x1bc>)
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	f003 020c 	and.w	r2, r3, #12
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	429a      	cmp	r2, r3
 8002302:	d1eb      	bne.n	80022dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002304:	4b25      	ldr	r3, [pc, #148]	; (800239c <HAL_RCC_ClockConfig+0x1b8>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 030f 	and.w	r3, r3, #15
 800230c:	683a      	ldr	r2, [r7, #0]
 800230e:	429a      	cmp	r2, r3
 8002310:	d20c      	bcs.n	800232c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002312:	4b22      	ldr	r3, [pc, #136]	; (800239c <HAL_RCC_ClockConfig+0x1b8>)
 8002314:	683a      	ldr	r2, [r7, #0]
 8002316:	b2d2      	uxtb	r2, r2
 8002318:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800231a:	4b20      	ldr	r3, [pc, #128]	; (800239c <HAL_RCC_ClockConfig+0x1b8>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 030f 	and.w	r3, r3, #15
 8002322:	683a      	ldr	r2, [r7, #0]
 8002324:	429a      	cmp	r2, r3
 8002326:	d001      	beq.n	800232c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	e032      	b.n	8002392 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 0304 	and.w	r3, r3, #4
 8002334:	2b00      	cmp	r3, #0
 8002336:	d008      	beq.n	800234a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002338:	4b19      	ldr	r3, [pc, #100]	; (80023a0 <HAL_RCC_ClockConfig+0x1bc>)
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	4916      	ldr	r1, [pc, #88]	; (80023a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002346:	4313      	orrs	r3, r2
 8002348:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0308 	and.w	r3, r3, #8
 8002352:	2b00      	cmp	r3, #0
 8002354:	d009      	beq.n	800236a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002356:	4b12      	ldr	r3, [pc, #72]	; (80023a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	691b      	ldr	r3, [r3, #16]
 8002362:	00db      	lsls	r3, r3, #3
 8002364:	490e      	ldr	r1, [pc, #56]	; (80023a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002366:	4313      	orrs	r3, r2
 8002368:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800236a:	f000 f855 	bl	8002418 <HAL_RCC_GetSysClockFreq>
 800236e:	4602      	mov	r2, r0
 8002370:	4b0b      	ldr	r3, [pc, #44]	; (80023a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	091b      	lsrs	r3, r3, #4
 8002376:	f003 030f 	and.w	r3, r3, #15
 800237a:	490a      	ldr	r1, [pc, #40]	; (80023a4 <HAL_RCC_ClockConfig+0x1c0>)
 800237c:	5ccb      	ldrb	r3, [r1, r3]
 800237e:	fa22 f303 	lsr.w	r3, r2, r3
 8002382:	4a09      	ldr	r2, [pc, #36]	; (80023a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002384:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002386:	4b09      	ldr	r3, [pc, #36]	; (80023ac <HAL_RCC_ClockConfig+0x1c8>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4618      	mov	r0, r3
 800238c:	f7ff fb88 	bl	8001aa0 <HAL_InitTick>

  return HAL_OK;
 8002390:	2300      	movs	r3, #0
}
 8002392:	4618      	mov	r0, r3
 8002394:	3710      	adds	r7, #16
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	40023c00 	.word	0x40023c00
 80023a0:	40023800 	.word	0x40023800
 80023a4:	08008c60 	.word	0x08008c60
 80023a8:	20000000 	.word	0x20000000
 80023ac:	20000004 	.word	0x20000004

080023b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023b4:	4b03      	ldr	r3, [pc, #12]	; (80023c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80023b6:	681b      	ldr	r3, [r3, #0]
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr
 80023c2:	bf00      	nop
 80023c4:	20000000 	.word	0x20000000

080023c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80023cc:	f7ff fff0 	bl	80023b0 <HAL_RCC_GetHCLKFreq>
 80023d0:	4602      	mov	r2, r0
 80023d2:	4b05      	ldr	r3, [pc, #20]	; (80023e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	0a9b      	lsrs	r3, r3, #10
 80023d8:	f003 0307 	and.w	r3, r3, #7
 80023dc:	4903      	ldr	r1, [pc, #12]	; (80023ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80023de:	5ccb      	ldrb	r3, [r1, r3]
 80023e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	40023800 	.word	0x40023800
 80023ec:	08008c70 	.word	0x08008c70

080023f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80023f4:	f7ff ffdc 	bl	80023b0 <HAL_RCC_GetHCLKFreq>
 80023f8:	4602      	mov	r2, r0
 80023fa:	4b05      	ldr	r3, [pc, #20]	; (8002410 <HAL_RCC_GetPCLK2Freq+0x20>)
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	0b5b      	lsrs	r3, r3, #13
 8002400:	f003 0307 	and.w	r3, r3, #7
 8002404:	4903      	ldr	r1, [pc, #12]	; (8002414 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002406:	5ccb      	ldrb	r3, [r1, r3]
 8002408:	fa22 f303 	lsr.w	r3, r2, r3
}
 800240c:	4618      	mov	r0, r3
 800240e:	bd80      	pop	{r7, pc}
 8002410:	40023800 	.word	0x40023800
 8002414:	08008c70 	.word	0x08008c70

08002418 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002418:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800241c:	b0ae      	sub	sp, #184	; 0xb8
 800241e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002420:	2300      	movs	r3, #0
 8002422:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002426:	2300      	movs	r3, #0
 8002428:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 800242c:	2300      	movs	r3, #0
 800242e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002432:	2300      	movs	r3, #0
 8002434:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002438:	2300      	movs	r3, #0
 800243a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800243e:	4bcb      	ldr	r3, [pc, #812]	; (800276c <HAL_RCC_GetSysClockFreq+0x354>)
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	f003 030c 	and.w	r3, r3, #12
 8002446:	2b0c      	cmp	r3, #12
 8002448:	f200 8206 	bhi.w	8002858 <HAL_RCC_GetSysClockFreq+0x440>
 800244c:	a201      	add	r2, pc, #4	; (adr r2, 8002454 <HAL_RCC_GetSysClockFreq+0x3c>)
 800244e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002452:	bf00      	nop
 8002454:	08002489 	.word	0x08002489
 8002458:	08002859 	.word	0x08002859
 800245c:	08002859 	.word	0x08002859
 8002460:	08002859 	.word	0x08002859
 8002464:	08002491 	.word	0x08002491
 8002468:	08002859 	.word	0x08002859
 800246c:	08002859 	.word	0x08002859
 8002470:	08002859 	.word	0x08002859
 8002474:	08002499 	.word	0x08002499
 8002478:	08002859 	.word	0x08002859
 800247c:	08002859 	.word	0x08002859
 8002480:	08002859 	.word	0x08002859
 8002484:	08002689 	.word	0x08002689
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002488:	4bb9      	ldr	r3, [pc, #740]	; (8002770 <HAL_RCC_GetSysClockFreq+0x358>)
 800248a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800248e:	e1e7      	b.n	8002860 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002490:	4bb8      	ldr	r3, [pc, #736]	; (8002774 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002492:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002496:	e1e3      	b.n	8002860 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002498:	4bb4      	ldr	r3, [pc, #720]	; (800276c <HAL_RCC_GetSysClockFreq+0x354>)
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80024a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80024a4:	4bb1      	ldr	r3, [pc, #708]	; (800276c <HAL_RCC_GetSysClockFreq+0x354>)
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d071      	beq.n	8002594 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024b0:	4bae      	ldr	r3, [pc, #696]	; (800276c <HAL_RCC_GetSysClockFreq+0x354>)
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	099b      	lsrs	r3, r3, #6
 80024b6:	2200      	movs	r2, #0
 80024b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80024bc:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80024c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80024c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024c8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80024cc:	2300      	movs	r3, #0
 80024ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80024d2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80024d6:	4622      	mov	r2, r4
 80024d8:	462b      	mov	r3, r5
 80024da:	f04f 0000 	mov.w	r0, #0
 80024de:	f04f 0100 	mov.w	r1, #0
 80024e2:	0159      	lsls	r1, r3, #5
 80024e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024e8:	0150      	lsls	r0, r2, #5
 80024ea:	4602      	mov	r2, r0
 80024ec:	460b      	mov	r3, r1
 80024ee:	4621      	mov	r1, r4
 80024f0:	1a51      	subs	r1, r2, r1
 80024f2:	6439      	str	r1, [r7, #64]	; 0x40
 80024f4:	4629      	mov	r1, r5
 80024f6:	eb63 0301 	sbc.w	r3, r3, r1
 80024fa:	647b      	str	r3, [r7, #68]	; 0x44
 80024fc:	f04f 0200 	mov.w	r2, #0
 8002500:	f04f 0300 	mov.w	r3, #0
 8002504:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002508:	4649      	mov	r1, r9
 800250a:	018b      	lsls	r3, r1, #6
 800250c:	4641      	mov	r1, r8
 800250e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002512:	4641      	mov	r1, r8
 8002514:	018a      	lsls	r2, r1, #6
 8002516:	4641      	mov	r1, r8
 8002518:	1a51      	subs	r1, r2, r1
 800251a:	63b9      	str	r1, [r7, #56]	; 0x38
 800251c:	4649      	mov	r1, r9
 800251e:	eb63 0301 	sbc.w	r3, r3, r1
 8002522:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002524:	f04f 0200 	mov.w	r2, #0
 8002528:	f04f 0300 	mov.w	r3, #0
 800252c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002530:	4649      	mov	r1, r9
 8002532:	00cb      	lsls	r3, r1, #3
 8002534:	4641      	mov	r1, r8
 8002536:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800253a:	4641      	mov	r1, r8
 800253c:	00ca      	lsls	r2, r1, #3
 800253e:	4610      	mov	r0, r2
 8002540:	4619      	mov	r1, r3
 8002542:	4603      	mov	r3, r0
 8002544:	4622      	mov	r2, r4
 8002546:	189b      	adds	r3, r3, r2
 8002548:	633b      	str	r3, [r7, #48]	; 0x30
 800254a:	462b      	mov	r3, r5
 800254c:	460a      	mov	r2, r1
 800254e:	eb42 0303 	adc.w	r3, r2, r3
 8002552:	637b      	str	r3, [r7, #52]	; 0x34
 8002554:	f04f 0200 	mov.w	r2, #0
 8002558:	f04f 0300 	mov.w	r3, #0
 800255c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002560:	4629      	mov	r1, r5
 8002562:	024b      	lsls	r3, r1, #9
 8002564:	4621      	mov	r1, r4
 8002566:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800256a:	4621      	mov	r1, r4
 800256c:	024a      	lsls	r2, r1, #9
 800256e:	4610      	mov	r0, r2
 8002570:	4619      	mov	r1, r3
 8002572:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002576:	2200      	movs	r2, #0
 8002578:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800257c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002580:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002584:	f7fe fba0 	bl	8000cc8 <__aeabi_uldivmod>
 8002588:	4602      	mov	r2, r0
 800258a:	460b      	mov	r3, r1
 800258c:	4613      	mov	r3, r2
 800258e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002592:	e067      	b.n	8002664 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002594:	4b75      	ldr	r3, [pc, #468]	; (800276c <HAL_RCC_GetSysClockFreq+0x354>)
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	099b      	lsrs	r3, r3, #6
 800259a:	2200      	movs	r2, #0
 800259c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80025a0:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80025a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80025a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025ac:	67bb      	str	r3, [r7, #120]	; 0x78
 80025ae:	2300      	movs	r3, #0
 80025b0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80025b2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80025b6:	4622      	mov	r2, r4
 80025b8:	462b      	mov	r3, r5
 80025ba:	f04f 0000 	mov.w	r0, #0
 80025be:	f04f 0100 	mov.w	r1, #0
 80025c2:	0159      	lsls	r1, r3, #5
 80025c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025c8:	0150      	lsls	r0, r2, #5
 80025ca:	4602      	mov	r2, r0
 80025cc:	460b      	mov	r3, r1
 80025ce:	4621      	mov	r1, r4
 80025d0:	1a51      	subs	r1, r2, r1
 80025d2:	62b9      	str	r1, [r7, #40]	; 0x28
 80025d4:	4629      	mov	r1, r5
 80025d6:	eb63 0301 	sbc.w	r3, r3, r1
 80025da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025dc:	f04f 0200 	mov.w	r2, #0
 80025e0:	f04f 0300 	mov.w	r3, #0
 80025e4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80025e8:	4649      	mov	r1, r9
 80025ea:	018b      	lsls	r3, r1, #6
 80025ec:	4641      	mov	r1, r8
 80025ee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80025f2:	4641      	mov	r1, r8
 80025f4:	018a      	lsls	r2, r1, #6
 80025f6:	4641      	mov	r1, r8
 80025f8:	ebb2 0a01 	subs.w	sl, r2, r1
 80025fc:	4649      	mov	r1, r9
 80025fe:	eb63 0b01 	sbc.w	fp, r3, r1
 8002602:	f04f 0200 	mov.w	r2, #0
 8002606:	f04f 0300 	mov.w	r3, #0
 800260a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800260e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002612:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002616:	4692      	mov	sl, r2
 8002618:	469b      	mov	fp, r3
 800261a:	4623      	mov	r3, r4
 800261c:	eb1a 0303 	adds.w	r3, sl, r3
 8002620:	623b      	str	r3, [r7, #32]
 8002622:	462b      	mov	r3, r5
 8002624:	eb4b 0303 	adc.w	r3, fp, r3
 8002628:	627b      	str	r3, [r7, #36]	; 0x24
 800262a:	f04f 0200 	mov.w	r2, #0
 800262e:	f04f 0300 	mov.w	r3, #0
 8002632:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002636:	4629      	mov	r1, r5
 8002638:	028b      	lsls	r3, r1, #10
 800263a:	4621      	mov	r1, r4
 800263c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002640:	4621      	mov	r1, r4
 8002642:	028a      	lsls	r2, r1, #10
 8002644:	4610      	mov	r0, r2
 8002646:	4619      	mov	r1, r3
 8002648:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800264c:	2200      	movs	r2, #0
 800264e:	673b      	str	r3, [r7, #112]	; 0x70
 8002650:	677a      	str	r2, [r7, #116]	; 0x74
 8002652:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002656:	f7fe fb37 	bl	8000cc8 <__aeabi_uldivmod>
 800265a:	4602      	mov	r2, r0
 800265c:	460b      	mov	r3, r1
 800265e:	4613      	mov	r3, r2
 8002660:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002664:	4b41      	ldr	r3, [pc, #260]	; (800276c <HAL_RCC_GetSysClockFreq+0x354>)
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	0c1b      	lsrs	r3, r3, #16
 800266a:	f003 0303 	and.w	r3, r3, #3
 800266e:	3301      	adds	r3, #1
 8002670:	005b      	lsls	r3, r3, #1
 8002672:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002676:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800267a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800267e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002682:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002686:	e0eb      	b.n	8002860 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002688:	4b38      	ldr	r3, [pc, #224]	; (800276c <HAL_RCC_GetSysClockFreq+0x354>)
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002690:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002694:	4b35      	ldr	r3, [pc, #212]	; (800276c <HAL_RCC_GetSysClockFreq+0x354>)
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800269c:	2b00      	cmp	r3, #0
 800269e:	d06b      	beq.n	8002778 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026a0:	4b32      	ldr	r3, [pc, #200]	; (800276c <HAL_RCC_GetSysClockFreq+0x354>)
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	099b      	lsrs	r3, r3, #6
 80026a6:	2200      	movs	r2, #0
 80026a8:	66bb      	str	r3, [r7, #104]	; 0x68
 80026aa:	66fa      	str	r2, [r7, #108]	; 0x6c
 80026ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80026ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026b2:	663b      	str	r3, [r7, #96]	; 0x60
 80026b4:	2300      	movs	r3, #0
 80026b6:	667b      	str	r3, [r7, #100]	; 0x64
 80026b8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80026bc:	4622      	mov	r2, r4
 80026be:	462b      	mov	r3, r5
 80026c0:	f04f 0000 	mov.w	r0, #0
 80026c4:	f04f 0100 	mov.w	r1, #0
 80026c8:	0159      	lsls	r1, r3, #5
 80026ca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026ce:	0150      	lsls	r0, r2, #5
 80026d0:	4602      	mov	r2, r0
 80026d2:	460b      	mov	r3, r1
 80026d4:	4621      	mov	r1, r4
 80026d6:	1a51      	subs	r1, r2, r1
 80026d8:	61b9      	str	r1, [r7, #24]
 80026da:	4629      	mov	r1, r5
 80026dc:	eb63 0301 	sbc.w	r3, r3, r1
 80026e0:	61fb      	str	r3, [r7, #28]
 80026e2:	f04f 0200 	mov.w	r2, #0
 80026e6:	f04f 0300 	mov.w	r3, #0
 80026ea:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80026ee:	4659      	mov	r1, fp
 80026f0:	018b      	lsls	r3, r1, #6
 80026f2:	4651      	mov	r1, sl
 80026f4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80026f8:	4651      	mov	r1, sl
 80026fa:	018a      	lsls	r2, r1, #6
 80026fc:	4651      	mov	r1, sl
 80026fe:	ebb2 0801 	subs.w	r8, r2, r1
 8002702:	4659      	mov	r1, fp
 8002704:	eb63 0901 	sbc.w	r9, r3, r1
 8002708:	f04f 0200 	mov.w	r2, #0
 800270c:	f04f 0300 	mov.w	r3, #0
 8002710:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002714:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002718:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800271c:	4690      	mov	r8, r2
 800271e:	4699      	mov	r9, r3
 8002720:	4623      	mov	r3, r4
 8002722:	eb18 0303 	adds.w	r3, r8, r3
 8002726:	613b      	str	r3, [r7, #16]
 8002728:	462b      	mov	r3, r5
 800272a:	eb49 0303 	adc.w	r3, r9, r3
 800272e:	617b      	str	r3, [r7, #20]
 8002730:	f04f 0200 	mov.w	r2, #0
 8002734:	f04f 0300 	mov.w	r3, #0
 8002738:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800273c:	4629      	mov	r1, r5
 800273e:	024b      	lsls	r3, r1, #9
 8002740:	4621      	mov	r1, r4
 8002742:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002746:	4621      	mov	r1, r4
 8002748:	024a      	lsls	r2, r1, #9
 800274a:	4610      	mov	r0, r2
 800274c:	4619      	mov	r1, r3
 800274e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002752:	2200      	movs	r2, #0
 8002754:	65bb      	str	r3, [r7, #88]	; 0x58
 8002756:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002758:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800275c:	f7fe fab4 	bl	8000cc8 <__aeabi_uldivmod>
 8002760:	4602      	mov	r2, r0
 8002762:	460b      	mov	r3, r1
 8002764:	4613      	mov	r3, r2
 8002766:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800276a:	e065      	b.n	8002838 <HAL_RCC_GetSysClockFreq+0x420>
 800276c:	40023800 	.word	0x40023800
 8002770:	00f42400 	.word	0x00f42400
 8002774:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002778:	4b3d      	ldr	r3, [pc, #244]	; (8002870 <HAL_RCC_GetSysClockFreq+0x458>)
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	099b      	lsrs	r3, r3, #6
 800277e:	2200      	movs	r2, #0
 8002780:	4618      	mov	r0, r3
 8002782:	4611      	mov	r1, r2
 8002784:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002788:	653b      	str	r3, [r7, #80]	; 0x50
 800278a:	2300      	movs	r3, #0
 800278c:	657b      	str	r3, [r7, #84]	; 0x54
 800278e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002792:	4642      	mov	r2, r8
 8002794:	464b      	mov	r3, r9
 8002796:	f04f 0000 	mov.w	r0, #0
 800279a:	f04f 0100 	mov.w	r1, #0
 800279e:	0159      	lsls	r1, r3, #5
 80027a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027a4:	0150      	lsls	r0, r2, #5
 80027a6:	4602      	mov	r2, r0
 80027a8:	460b      	mov	r3, r1
 80027aa:	4641      	mov	r1, r8
 80027ac:	1a51      	subs	r1, r2, r1
 80027ae:	60b9      	str	r1, [r7, #8]
 80027b0:	4649      	mov	r1, r9
 80027b2:	eb63 0301 	sbc.w	r3, r3, r1
 80027b6:	60fb      	str	r3, [r7, #12]
 80027b8:	f04f 0200 	mov.w	r2, #0
 80027bc:	f04f 0300 	mov.w	r3, #0
 80027c0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80027c4:	4659      	mov	r1, fp
 80027c6:	018b      	lsls	r3, r1, #6
 80027c8:	4651      	mov	r1, sl
 80027ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80027ce:	4651      	mov	r1, sl
 80027d0:	018a      	lsls	r2, r1, #6
 80027d2:	4651      	mov	r1, sl
 80027d4:	1a54      	subs	r4, r2, r1
 80027d6:	4659      	mov	r1, fp
 80027d8:	eb63 0501 	sbc.w	r5, r3, r1
 80027dc:	f04f 0200 	mov.w	r2, #0
 80027e0:	f04f 0300 	mov.w	r3, #0
 80027e4:	00eb      	lsls	r3, r5, #3
 80027e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80027ea:	00e2      	lsls	r2, r4, #3
 80027ec:	4614      	mov	r4, r2
 80027ee:	461d      	mov	r5, r3
 80027f0:	4643      	mov	r3, r8
 80027f2:	18e3      	adds	r3, r4, r3
 80027f4:	603b      	str	r3, [r7, #0]
 80027f6:	464b      	mov	r3, r9
 80027f8:	eb45 0303 	adc.w	r3, r5, r3
 80027fc:	607b      	str	r3, [r7, #4]
 80027fe:	f04f 0200 	mov.w	r2, #0
 8002802:	f04f 0300 	mov.w	r3, #0
 8002806:	e9d7 4500 	ldrd	r4, r5, [r7]
 800280a:	4629      	mov	r1, r5
 800280c:	028b      	lsls	r3, r1, #10
 800280e:	4621      	mov	r1, r4
 8002810:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002814:	4621      	mov	r1, r4
 8002816:	028a      	lsls	r2, r1, #10
 8002818:	4610      	mov	r0, r2
 800281a:	4619      	mov	r1, r3
 800281c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002820:	2200      	movs	r2, #0
 8002822:	64bb      	str	r3, [r7, #72]	; 0x48
 8002824:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002826:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800282a:	f7fe fa4d 	bl	8000cc8 <__aeabi_uldivmod>
 800282e:	4602      	mov	r2, r0
 8002830:	460b      	mov	r3, r1
 8002832:	4613      	mov	r3, r2
 8002834:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002838:	4b0d      	ldr	r3, [pc, #52]	; (8002870 <HAL_RCC_GetSysClockFreq+0x458>)
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	0f1b      	lsrs	r3, r3, #28
 800283e:	f003 0307 	and.w	r3, r3, #7
 8002842:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8002846:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800284a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800284e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002852:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002856:	e003      	b.n	8002860 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002858:	4b06      	ldr	r3, [pc, #24]	; (8002874 <HAL_RCC_GetSysClockFreq+0x45c>)
 800285a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800285e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002860:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002864:	4618      	mov	r0, r3
 8002866:	37b8      	adds	r7, #184	; 0xb8
 8002868:	46bd      	mov	sp, r7
 800286a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800286e:	bf00      	nop
 8002870:	40023800 	.word	0x40023800
 8002874:	00f42400 	.word	0x00f42400

08002878 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b086      	sub	sp, #24
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d101      	bne.n	800288a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e28d      	b.n	8002da6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0301 	and.w	r3, r3, #1
 8002892:	2b00      	cmp	r3, #0
 8002894:	f000 8083 	beq.w	800299e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002898:	4b94      	ldr	r3, [pc, #592]	; (8002aec <HAL_RCC_OscConfig+0x274>)
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	f003 030c 	and.w	r3, r3, #12
 80028a0:	2b04      	cmp	r3, #4
 80028a2:	d019      	beq.n	80028d8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80028a4:	4b91      	ldr	r3, [pc, #580]	; (8002aec <HAL_RCC_OscConfig+0x274>)
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80028ac:	2b08      	cmp	r3, #8
 80028ae:	d106      	bne.n	80028be <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80028b0:	4b8e      	ldr	r3, [pc, #568]	; (8002aec <HAL_RCC_OscConfig+0x274>)
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028bc:	d00c      	beq.n	80028d8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028be:	4b8b      	ldr	r3, [pc, #556]	; (8002aec <HAL_RCC_OscConfig+0x274>)
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80028c6:	2b0c      	cmp	r3, #12
 80028c8:	d112      	bne.n	80028f0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028ca:	4b88      	ldr	r3, [pc, #544]	; (8002aec <HAL_RCC_OscConfig+0x274>)
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028d6:	d10b      	bne.n	80028f0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028d8:	4b84      	ldr	r3, [pc, #528]	; (8002aec <HAL_RCC_OscConfig+0x274>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d05b      	beq.n	800299c <HAL_RCC_OscConfig+0x124>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d157      	bne.n	800299c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e25a      	b.n	8002da6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028f8:	d106      	bne.n	8002908 <HAL_RCC_OscConfig+0x90>
 80028fa:	4b7c      	ldr	r3, [pc, #496]	; (8002aec <HAL_RCC_OscConfig+0x274>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a7b      	ldr	r2, [pc, #492]	; (8002aec <HAL_RCC_OscConfig+0x274>)
 8002900:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002904:	6013      	str	r3, [r2, #0]
 8002906:	e01d      	b.n	8002944 <HAL_RCC_OscConfig+0xcc>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002910:	d10c      	bne.n	800292c <HAL_RCC_OscConfig+0xb4>
 8002912:	4b76      	ldr	r3, [pc, #472]	; (8002aec <HAL_RCC_OscConfig+0x274>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a75      	ldr	r2, [pc, #468]	; (8002aec <HAL_RCC_OscConfig+0x274>)
 8002918:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800291c:	6013      	str	r3, [r2, #0]
 800291e:	4b73      	ldr	r3, [pc, #460]	; (8002aec <HAL_RCC_OscConfig+0x274>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a72      	ldr	r2, [pc, #456]	; (8002aec <HAL_RCC_OscConfig+0x274>)
 8002924:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002928:	6013      	str	r3, [r2, #0]
 800292a:	e00b      	b.n	8002944 <HAL_RCC_OscConfig+0xcc>
 800292c:	4b6f      	ldr	r3, [pc, #444]	; (8002aec <HAL_RCC_OscConfig+0x274>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a6e      	ldr	r2, [pc, #440]	; (8002aec <HAL_RCC_OscConfig+0x274>)
 8002932:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002936:	6013      	str	r3, [r2, #0]
 8002938:	4b6c      	ldr	r3, [pc, #432]	; (8002aec <HAL_RCC_OscConfig+0x274>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a6b      	ldr	r2, [pc, #428]	; (8002aec <HAL_RCC_OscConfig+0x274>)
 800293e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002942:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d013      	beq.n	8002974 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800294c:	f7ff f8ec 	bl	8001b28 <HAL_GetTick>
 8002950:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002952:	e008      	b.n	8002966 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002954:	f7ff f8e8 	bl	8001b28 <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	2b64      	cmp	r3, #100	; 0x64
 8002960:	d901      	bls.n	8002966 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	e21f      	b.n	8002da6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002966:	4b61      	ldr	r3, [pc, #388]	; (8002aec <HAL_RCC_OscConfig+0x274>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800296e:	2b00      	cmp	r3, #0
 8002970:	d0f0      	beq.n	8002954 <HAL_RCC_OscConfig+0xdc>
 8002972:	e014      	b.n	800299e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002974:	f7ff f8d8 	bl	8001b28 <HAL_GetTick>
 8002978:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800297a:	e008      	b.n	800298e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800297c:	f7ff f8d4 	bl	8001b28 <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	2b64      	cmp	r3, #100	; 0x64
 8002988:	d901      	bls.n	800298e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	e20b      	b.n	8002da6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800298e:	4b57      	ldr	r3, [pc, #348]	; (8002aec <HAL_RCC_OscConfig+0x274>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d1f0      	bne.n	800297c <HAL_RCC_OscConfig+0x104>
 800299a:	e000      	b.n	800299e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800299c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 0302 	and.w	r3, r3, #2
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d06f      	beq.n	8002a8a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80029aa:	4b50      	ldr	r3, [pc, #320]	; (8002aec <HAL_RCC_OscConfig+0x274>)
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	f003 030c 	and.w	r3, r3, #12
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d017      	beq.n	80029e6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80029b6:	4b4d      	ldr	r3, [pc, #308]	; (8002aec <HAL_RCC_OscConfig+0x274>)
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80029be:	2b08      	cmp	r3, #8
 80029c0:	d105      	bne.n	80029ce <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80029c2:	4b4a      	ldr	r3, [pc, #296]	; (8002aec <HAL_RCC_OscConfig+0x274>)
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d00b      	beq.n	80029e6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029ce:	4b47      	ldr	r3, [pc, #284]	; (8002aec <HAL_RCC_OscConfig+0x274>)
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80029d6:	2b0c      	cmp	r3, #12
 80029d8:	d11c      	bne.n	8002a14 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029da:	4b44      	ldr	r3, [pc, #272]	; (8002aec <HAL_RCC_OscConfig+0x274>)
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d116      	bne.n	8002a14 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029e6:	4b41      	ldr	r3, [pc, #260]	; (8002aec <HAL_RCC_OscConfig+0x274>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 0302 	and.w	r3, r3, #2
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d005      	beq.n	80029fe <HAL_RCC_OscConfig+0x186>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	68db      	ldr	r3, [r3, #12]
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d001      	beq.n	80029fe <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e1d3      	b.n	8002da6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029fe:	4b3b      	ldr	r3, [pc, #236]	; (8002aec <HAL_RCC_OscConfig+0x274>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	691b      	ldr	r3, [r3, #16]
 8002a0a:	00db      	lsls	r3, r3, #3
 8002a0c:	4937      	ldr	r1, [pc, #220]	; (8002aec <HAL_RCC_OscConfig+0x274>)
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a12:	e03a      	b.n	8002a8a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d020      	beq.n	8002a5e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a1c:	4b34      	ldr	r3, [pc, #208]	; (8002af0 <HAL_RCC_OscConfig+0x278>)
 8002a1e:	2201      	movs	r2, #1
 8002a20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a22:	f7ff f881 	bl	8001b28 <HAL_GetTick>
 8002a26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a28:	e008      	b.n	8002a3c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a2a:	f7ff f87d 	bl	8001b28 <HAL_GetTick>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	1ad3      	subs	r3, r2, r3
 8002a34:	2b02      	cmp	r3, #2
 8002a36:	d901      	bls.n	8002a3c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002a38:	2303      	movs	r3, #3
 8002a3a:	e1b4      	b.n	8002da6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a3c:	4b2b      	ldr	r3, [pc, #172]	; (8002aec <HAL_RCC_OscConfig+0x274>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 0302 	and.w	r3, r3, #2
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d0f0      	beq.n	8002a2a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a48:	4b28      	ldr	r3, [pc, #160]	; (8002aec <HAL_RCC_OscConfig+0x274>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	691b      	ldr	r3, [r3, #16]
 8002a54:	00db      	lsls	r3, r3, #3
 8002a56:	4925      	ldr	r1, [pc, #148]	; (8002aec <HAL_RCC_OscConfig+0x274>)
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	600b      	str	r3, [r1, #0]
 8002a5c:	e015      	b.n	8002a8a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a5e:	4b24      	ldr	r3, [pc, #144]	; (8002af0 <HAL_RCC_OscConfig+0x278>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a64:	f7ff f860 	bl	8001b28 <HAL_GetTick>
 8002a68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a6a:	e008      	b.n	8002a7e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a6c:	f7ff f85c 	bl	8001b28 <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d901      	bls.n	8002a7e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e193      	b.n	8002da6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a7e:	4b1b      	ldr	r3, [pc, #108]	; (8002aec <HAL_RCC_OscConfig+0x274>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0302 	and.w	r3, r3, #2
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d1f0      	bne.n	8002a6c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0308 	and.w	r3, r3, #8
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d036      	beq.n	8002b04 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	695b      	ldr	r3, [r3, #20]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d016      	beq.n	8002acc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a9e:	4b15      	ldr	r3, [pc, #84]	; (8002af4 <HAL_RCC_OscConfig+0x27c>)
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aa4:	f7ff f840 	bl	8001b28 <HAL_GetTick>
 8002aa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002aaa:	e008      	b.n	8002abe <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002aac:	f7ff f83c 	bl	8001b28 <HAL_GetTick>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	2b02      	cmp	r3, #2
 8002ab8:	d901      	bls.n	8002abe <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002aba:	2303      	movs	r3, #3
 8002abc:	e173      	b.n	8002da6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002abe:	4b0b      	ldr	r3, [pc, #44]	; (8002aec <HAL_RCC_OscConfig+0x274>)
 8002ac0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ac2:	f003 0302 	and.w	r3, r3, #2
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d0f0      	beq.n	8002aac <HAL_RCC_OscConfig+0x234>
 8002aca:	e01b      	b.n	8002b04 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002acc:	4b09      	ldr	r3, [pc, #36]	; (8002af4 <HAL_RCC_OscConfig+0x27c>)
 8002ace:	2200      	movs	r2, #0
 8002ad0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ad2:	f7ff f829 	bl	8001b28 <HAL_GetTick>
 8002ad6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ad8:	e00e      	b.n	8002af8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ada:	f7ff f825 	bl	8001b28 <HAL_GetTick>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	1ad3      	subs	r3, r2, r3
 8002ae4:	2b02      	cmp	r3, #2
 8002ae6:	d907      	bls.n	8002af8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002ae8:	2303      	movs	r3, #3
 8002aea:	e15c      	b.n	8002da6 <HAL_RCC_OscConfig+0x52e>
 8002aec:	40023800 	.word	0x40023800
 8002af0:	42470000 	.word	0x42470000
 8002af4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002af8:	4b8a      	ldr	r3, [pc, #552]	; (8002d24 <HAL_RCC_OscConfig+0x4ac>)
 8002afa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002afc:	f003 0302 	and.w	r3, r3, #2
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d1ea      	bne.n	8002ada <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 0304 	and.w	r3, r3, #4
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	f000 8097 	beq.w	8002c40 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b12:	2300      	movs	r3, #0
 8002b14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b16:	4b83      	ldr	r3, [pc, #524]	; (8002d24 <HAL_RCC_OscConfig+0x4ac>)
 8002b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d10f      	bne.n	8002b42 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b22:	2300      	movs	r3, #0
 8002b24:	60bb      	str	r3, [r7, #8]
 8002b26:	4b7f      	ldr	r3, [pc, #508]	; (8002d24 <HAL_RCC_OscConfig+0x4ac>)
 8002b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2a:	4a7e      	ldr	r2, [pc, #504]	; (8002d24 <HAL_RCC_OscConfig+0x4ac>)
 8002b2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b30:	6413      	str	r3, [r2, #64]	; 0x40
 8002b32:	4b7c      	ldr	r3, [pc, #496]	; (8002d24 <HAL_RCC_OscConfig+0x4ac>)
 8002b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b3a:	60bb      	str	r3, [r7, #8]
 8002b3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b42:	4b79      	ldr	r3, [pc, #484]	; (8002d28 <HAL_RCC_OscConfig+0x4b0>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d118      	bne.n	8002b80 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b4e:	4b76      	ldr	r3, [pc, #472]	; (8002d28 <HAL_RCC_OscConfig+0x4b0>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a75      	ldr	r2, [pc, #468]	; (8002d28 <HAL_RCC_OscConfig+0x4b0>)
 8002b54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b5a:	f7fe ffe5 	bl	8001b28 <HAL_GetTick>
 8002b5e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b60:	e008      	b.n	8002b74 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b62:	f7fe ffe1 	bl	8001b28 <HAL_GetTick>
 8002b66:	4602      	mov	r2, r0
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	1ad3      	subs	r3, r2, r3
 8002b6c:	2b02      	cmp	r3, #2
 8002b6e:	d901      	bls.n	8002b74 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002b70:	2303      	movs	r3, #3
 8002b72:	e118      	b.n	8002da6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b74:	4b6c      	ldr	r3, [pc, #432]	; (8002d28 <HAL_RCC_OscConfig+0x4b0>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d0f0      	beq.n	8002b62 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d106      	bne.n	8002b96 <HAL_RCC_OscConfig+0x31e>
 8002b88:	4b66      	ldr	r3, [pc, #408]	; (8002d24 <HAL_RCC_OscConfig+0x4ac>)
 8002b8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b8c:	4a65      	ldr	r2, [pc, #404]	; (8002d24 <HAL_RCC_OscConfig+0x4ac>)
 8002b8e:	f043 0301 	orr.w	r3, r3, #1
 8002b92:	6713      	str	r3, [r2, #112]	; 0x70
 8002b94:	e01c      	b.n	8002bd0 <HAL_RCC_OscConfig+0x358>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	2b05      	cmp	r3, #5
 8002b9c:	d10c      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x340>
 8002b9e:	4b61      	ldr	r3, [pc, #388]	; (8002d24 <HAL_RCC_OscConfig+0x4ac>)
 8002ba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ba2:	4a60      	ldr	r2, [pc, #384]	; (8002d24 <HAL_RCC_OscConfig+0x4ac>)
 8002ba4:	f043 0304 	orr.w	r3, r3, #4
 8002ba8:	6713      	str	r3, [r2, #112]	; 0x70
 8002baa:	4b5e      	ldr	r3, [pc, #376]	; (8002d24 <HAL_RCC_OscConfig+0x4ac>)
 8002bac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bae:	4a5d      	ldr	r2, [pc, #372]	; (8002d24 <HAL_RCC_OscConfig+0x4ac>)
 8002bb0:	f043 0301 	orr.w	r3, r3, #1
 8002bb4:	6713      	str	r3, [r2, #112]	; 0x70
 8002bb6:	e00b      	b.n	8002bd0 <HAL_RCC_OscConfig+0x358>
 8002bb8:	4b5a      	ldr	r3, [pc, #360]	; (8002d24 <HAL_RCC_OscConfig+0x4ac>)
 8002bba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bbc:	4a59      	ldr	r2, [pc, #356]	; (8002d24 <HAL_RCC_OscConfig+0x4ac>)
 8002bbe:	f023 0301 	bic.w	r3, r3, #1
 8002bc2:	6713      	str	r3, [r2, #112]	; 0x70
 8002bc4:	4b57      	ldr	r3, [pc, #348]	; (8002d24 <HAL_RCC_OscConfig+0x4ac>)
 8002bc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bc8:	4a56      	ldr	r2, [pc, #344]	; (8002d24 <HAL_RCC_OscConfig+0x4ac>)
 8002bca:	f023 0304 	bic.w	r3, r3, #4
 8002bce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d015      	beq.n	8002c04 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bd8:	f7fe ffa6 	bl	8001b28 <HAL_GetTick>
 8002bdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bde:	e00a      	b.n	8002bf6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002be0:	f7fe ffa2 	bl	8001b28 <HAL_GetTick>
 8002be4:	4602      	mov	r2, r0
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d901      	bls.n	8002bf6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	e0d7      	b.n	8002da6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bf6:	4b4b      	ldr	r3, [pc, #300]	; (8002d24 <HAL_RCC_OscConfig+0x4ac>)
 8002bf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bfa:	f003 0302 	and.w	r3, r3, #2
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d0ee      	beq.n	8002be0 <HAL_RCC_OscConfig+0x368>
 8002c02:	e014      	b.n	8002c2e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c04:	f7fe ff90 	bl	8001b28 <HAL_GetTick>
 8002c08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c0a:	e00a      	b.n	8002c22 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c0c:	f7fe ff8c 	bl	8001b28 <HAL_GetTick>
 8002c10:	4602      	mov	r2, r0
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d901      	bls.n	8002c22 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e0c1      	b.n	8002da6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c22:	4b40      	ldr	r3, [pc, #256]	; (8002d24 <HAL_RCC_OscConfig+0x4ac>)
 8002c24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c26:	f003 0302 	and.w	r3, r3, #2
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d1ee      	bne.n	8002c0c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c2e:	7dfb      	ldrb	r3, [r7, #23]
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d105      	bne.n	8002c40 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c34:	4b3b      	ldr	r3, [pc, #236]	; (8002d24 <HAL_RCC_OscConfig+0x4ac>)
 8002c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c38:	4a3a      	ldr	r2, [pc, #232]	; (8002d24 <HAL_RCC_OscConfig+0x4ac>)
 8002c3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c3e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	699b      	ldr	r3, [r3, #24]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	f000 80ad 	beq.w	8002da4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c4a:	4b36      	ldr	r3, [pc, #216]	; (8002d24 <HAL_RCC_OscConfig+0x4ac>)
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	f003 030c 	and.w	r3, r3, #12
 8002c52:	2b08      	cmp	r3, #8
 8002c54:	d060      	beq.n	8002d18 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	699b      	ldr	r3, [r3, #24]
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d145      	bne.n	8002cea <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c5e:	4b33      	ldr	r3, [pc, #204]	; (8002d2c <HAL_RCC_OscConfig+0x4b4>)
 8002c60:	2200      	movs	r2, #0
 8002c62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c64:	f7fe ff60 	bl	8001b28 <HAL_GetTick>
 8002c68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c6a:	e008      	b.n	8002c7e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c6c:	f7fe ff5c 	bl	8001b28 <HAL_GetTick>
 8002c70:	4602      	mov	r2, r0
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d901      	bls.n	8002c7e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e093      	b.n	8002da6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c7e:	4b29      	ldr	r3, [pc, #164]	; (8002d24 <HAL_RCC_OscConfig+0x4ac>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d1f0      	bne.n	8002c6c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	69da      	ldr	r2, [r3, #28]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6a1b      	ldr	r3, [r3, #32]
 8002c92:	431a      	orrs	r2, r3
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c98:	019b      	lsls	r3, r3, #6
 8002c9a:	431a      	orrs	r2, r3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ca0:	085b      	lsrs	r3, r3, #1
 8002ca2:	3b01      	subs	r3, #1
 8002ca4:	041b      	lsls	r3, r3, #16
 8002ca6:	431a      	orrs	r2, r3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cac:	061b      	lsls	r3, r3, #24
 8002cae:	431a      	orrs	r2, r3
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb4:	071b      	lsls	r3, r3, #28
 8002cb6:	491b      	ldr	r1, [pc, #108]	; (8002d24 <HAL_RCC_OscConfig+0x4ac>)
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cbc:	4b1b      	ldr	r3, [pc, #108]	; (8002d2c <HAL_RCC_OscConfig+0x4b4>)
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cc2:	f7fe ff31 	bl	8001b28 <HAL_GetTick>
 8002cc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cc8:	e008      	b.n	8002cdc <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cca:	f7fe ff2d 	bl	8001b28 <HAL_GetTick>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	1ad3      	subs	r3, r2, r3
 8002cd4:	2b02      	cmp	r3, #2
 8002cd6:	d901      	bls.n	8002cdc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002cd8:	2303      	movs	r3, #3
 8002cda:	e064      	b.n	8002da6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cdc:	4b11      	ldr	r3, [pc, #68]	; (8002d24 <HAL_RCC_OscConfig+0x4ac>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d0f0      	beq.n	8002cca <HAL_RCC_OscConfig+0x452>
 8002ce8:	e05c      	b.n	8002da4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cea:	4b10      	ldr	r3, [pc, #64]	; (8002d2c <HAL_RCC_OscConfig+0x4b4>)
 8002cec:	2200      	movs	r2, #0
 8002cee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cf0:	f7fe ff1a 	bl	8001b28 <HAL_GetTick>
 8002cf4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cf6:	e008      	b.n	8002d0a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cf8:	f7fe ff16 	bl	8001b28 <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	2b02      	cmp	r3, #2
 8002d04:	d901      	bls.n	8002d0a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002d06:	2303      	movs	r3, #3
 8002d08:	e04d      	b.n	8002da6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d0a:	4b06      	ldr	r3, [pc, #24]	; (8002d24 <HAL_RCC_OscConfig+0x4ac>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d1f0      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x480>
 8002d16:	e045      	b.n	8002da4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	699b      	ldr	r3, [r3, #24]
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d107      	bne.n	8002d30 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	e040      	b.n	8002da6 <HAL_RCC_OscConfig+0x52e>
 8002d24:	40023800 	.word	0x40023800
 8002d28:	40007000 	.word	0x40007000
 8002d2c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d30:	4b1f      	ldr	r3, [pc, #124]	; (8002db0 <HAL_RCC_OscConfig+0x538>)
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	699b      	ldr	r3, [r3, #24]
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d030      	beq.n	8002da0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d129      	bne.n	8002da0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d122      	bne.n	8002da0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d5a:	68fa      	ldr	r2, [r7, #12]
 8002d5c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002d60:	4013      	ands	r3, r2
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d66:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d119      	bne.n	8002da0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d76:	085b      	lsrs	r3, r3, #1
 8002d78:	3b01      	subs	r3, #1
 8002d7a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d10f      	bne.n	8002da0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d8a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d107      	bne.n	8002da0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d001      	beq.n	8002da4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e000      	b.n	8002da6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002da4:	2300      	movs	r3, #0
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3718      	adds	r7, #24
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop
 8002db0:	40023800 	.word	0x40023800

08002db4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b082      	sub	sp, #8
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d101      	bne.n	8002dc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e03f      	b.n	8002e46 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d106      	bne.n	8002de0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f7fe fca0 	bl	8001720 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2224      	movs	r2, #36	; 0x24
 8002de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	68da      	ldr	r2, [r3, #12]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002df6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	f000 fe1d 	bl	8003a38 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	691a      	ldr	r2, [r3, #16]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e0c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	695a      	ldr	r2, [r3, #20]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e1c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	68da      	ldr	r2, [r3, #12]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e2c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2200      	movs	r2, #0
 8002e32:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2220      	movs	r2, #32
 8002e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2220      	movs	r2, #32
 8002e40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e44:	2300      	movs	r3, #0
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3708      	adds	r7, #8
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}

08002e4e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e4e:	b580      	push	{r7, lr}
 8002e50:	b08a      	sub	sp, #40	; 0x28
 8002e52:	af02      	add	r7, sp, #8
 8002e54:	60f8      	str	r0, [r7, #12]
 8002e56:	60b9      	str	r1, [r7, #8]
 8002e58:	603b      	str	r3, [r7, #0]
 8002e5a:	4613      	mov	r3, r2
 8002e5c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	2b20      	cmp	r3, #32
 8002e6c:	d17c      	bne.n	8002f68 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d002      	beq.n	8002e7a <HAL_UART_Transmit+0x2c>
 8002e74:	88fb      	ldrh	r3, [r7, #6]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d101      	bne.n	8002e7e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e075      	b.n	8002f6a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d101      	bne.n	8002e8c <HAL_UART_Transmit+0x3e>
 8002e88:	2302      	movs	r3, #2
 8002e8a:	e06e      	b.n	8002f6a <HAL_UART_Transmit+0x11c>
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2200      	movs	r2, #0
 8002e98:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2221      	movs	r2, #33	; 0x21
 8002e9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ea2:	f7fe fe41 	bl	8001b28 <HAL_GetTick>
 8002ea6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	88fa      	ldrh	r2, [r7, #6]
 8002eac:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	88fa      	ldrh	r2, [r7, #6]
 8002eb2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ebc:	d108      	bne.n	8002ed0 <HAL_UART_Transmit+0x82>
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	691b      	ldr	r3, [r3, #16]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d104      	bne.n	8002ed0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	61bb      	str	r3, [r7, #24]
 8002ece:	e003      	b.n	8002ed8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2200      	movs	r2, #0
 8002edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002ee0:	e02a      	b.n	8002f38 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	9300      	str	r3, [sp, #0]
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	2180      	movs	r1, #128	; 0x80
 8002eec:	68f8      	ldr	r0, [r7, #12]
 8002eee:	f000 fb9b 	bl	8003628 <UART_WaitOnFlagUntilTimeout>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d001      	beq.n	8002efc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002ef8:	2303      	movs	r3, #3
 8002efa:	e036      	b.n	8002f6a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002efc:	69fb      	ldr	r3, [r7, #28]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d10b      	bne.n	8002f1a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f02:	69bb      	ldr	r3, [r7, #24]
 8002f04:	881b      	ldrh	r3, [r3, #0]
 8002f06:	461a      	mov	r2, r3
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f10:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002f12:	69bb      	ldr	r3, [r7, #24]
 8002f14:	3302      	adds	r3, #2
 8002f16:	61bb      	str	r3, [r7, #24]
 8002f18:	e007      	b.n	8002f2a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	781a      	ldrb	r2, [r3, #0]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002f24:	69fb      	ldr	r3, [r7, #28]
 8002f26:	3301      	adds	r3, #1
 8002f28:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	3b01      	subs	r3, #1
 8002f32:	b29a      	uxth	r2, r3
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f3c:	b29b      	uxth	r3, r3
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d1cf      	bne.n	8002ee2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	9300      	str	r3, [sp, #0]
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	2140      	movs	r1, #64	; 0x40
 8002f4c:	68f8      	ldr	r0, [r7, #12]
 8002f4e:	f000 fb6b 	bl	8003628 <UART_WaitOnFlagUntilTimeout>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d001      	beq.n	8002f5c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002f58:	2303      	movs	r3, #3
 8002f5a:	e006      	b.n	8002f6a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2220      	movs	r2, #32
 8002f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002f64:	2300      	movs	r3, #0
 8002f66:	e000      	b.n	8002f6a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002f68:	2302      	movs	r3, #2
  }
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3720      	adds	r7, #32
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}

08002f72 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f72:	b580      	push	{r7, lr}
 8002f74:	b08a      	sub	sp, #40	; 0x28
 8002f76:	af02      	add	r7, sp, #8
 8002f78:	60f8      	str	r0, [r7, #12]
 8002f7a:	60b9      	str	r1, [r7, #8]
 8002f7c:	603b      	str	r3, [r7, #0]
 8002f7e:	4613      	mov	r3, r2
 8002f80:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002f82:	2300      	movs	r3, #0
 8002f84:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	2b20      	cmp	r3, #32
 8002f90:	f040 808c 	bne.w	80030ac <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d002      	beq.n	8002fa0 <HAL_UART_Receive+0x2e>
 8002f9a:	88fb      	ldrh	r3, [r7, #6]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d101      	bne.n	8002fa4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e084      	b.n	80030ae <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d101      	bne.n	8002fb2 <HAL_UART_Receive+0x40>
 8002fae:	2302      	movs	r3, #2
 8002fb0:	e07d      	b.n	80030ae <HAL_UART_Receive+0x13c>
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2222      	movs	r2, #34	; 0x22
 8002fc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002fce:	f7fe fdab 	bl	8001b28 <HAL_GetTick>
 8002fd2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	88fa      	ldrh	r2, [r7, #6]
 8002fd8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	88fa      	ldrh	r2, [r7, #6]
 8002fde:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fe8:	d108      	bne.n	8002ffc <HAL_UART_Receive+0x8a>
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	691b      	ldr	r3, [r3, #16]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d104      	bne.n	8002ffc <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	61bb      	str	r3, [r7, #24]
 8002ffa:	e003      	b.n	8003004 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003000:	2300      	movs	r3, #0
 8003002:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2200      	movs	r2, #0
 8003008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800300c:	e043      	b.n	8003096 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	9300      	str	r3, [sp, #0]
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	2200      	movs	r2, #0
 8003016:	2120      	movs	r1, #32
 8003018:	68f8      	ldr	r0, [r7, #12]
 800301a:	f000 fb05 	bl	8003628 <UART_WaitOnFlagUntilTimeout>
 800301e:	4603      	mov	r3, r0
 8003020:	2b00      	cmp	r3, #0
 8003022:	d001      	beq.n	8003028 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8003024:	2303      	movs	r3, #3
 8003026:	e042      	b.n	80030ae <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d10c      	bne.n	8003048 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	b29b      	uxth	r3, r3
 8003036:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800303a:	b29a      	uxth	r2, r3
 800303c:	69bb      	ldr	r3, [r7, #24]
 800303e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003040:	69bb      	ldr	r3, [r7, #24]
 8003042:	3302      	adds	r3, #2
 8003044:	61bb      	str	r3, [r7, #24]
 8003046:	e01f      	b.n	8003088 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003050:	d007      	beq.n	8003062 <HAL_UART_Receive+0xf0>
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d10a      	bne.n	8003070 <HAL_UART_Receive+0xfe>
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	691b      	ldr	r3, [r3, #16]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d106      	bne.n	8003070 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	b2da      	uxtb	r2, r3
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	701a      	strb	r2, [r3, #0]
 800306e:	e008      	b.n	8003082 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	b2db      	uxtb	r3, r3
 8003078:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800307c:	b2da      	uxtb	r2, r3
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	3301      	adds	r3, #1
 8003086:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800308c:	b29b      	uxth	r3, r3
 800308e:	3b01      	subs	r3, #1
 8003090:	b29a      	uxth	r2, r3
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800309a:	b29b      	uxth	r3, r3
 800309c:	2b00      	cmp	r3, #0
 800309e:	d1b6      	bne.n	800300e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2220      	movs	r2, #32
 80030a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80030a8:	2300      	movs	r3, #0
 80030aa:	e000      	b.n	80030ae <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80030ac:	2302      	movs	r3, #2
  }
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3720      	adds	r7, #32
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
	...

080030b8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b0ba      	sub	sp, #232	; 0xe8
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	695b      	ldr	r3, [r3, #20]
 80030da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80030de:	2300      	movs	r3, #0
 80030e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80030e4:	2300      	movs	r3, #0
 80030e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80030ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030ee:	f003 030f 	and.w	r3, r3, #15
 80030f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80030f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d10f      	bne.n	800311e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80030fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003102:	f003 0320 	and.w	r3, r3, #32
 8003106:	2b00      	cmp	r3, #0
 8003108:	d009      	beq.n	800311e <HAL_UART_IRQHandler+0x66>
 800310a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800310e:	f003 0320 	and.w	r3, r3, #32
 8003112:	2b00      	cmp	r3, #0
 8003114:	d003      	beq.n	800311e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f000 fbd3 	bl	80038c2 <UART_Receive_IT>
      return;
 800311c:	e256      	b.n	80035cc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800311e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003122:	2b00      	cmp	r3, #0
 8003124:	f000 80de 	beq.w	80032e4 <HAL_UART_IRQHandler+0x22c>
 8003128:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800312c:	f003 0301 	and.w	r3, r3, #1
 8003130:	2b00      	cmp	r3, #0
 8003132:	d106      	bne.n	8003142 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003134:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003138:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800313c:	2b00      	cmp	r3, #0
 800313e:	f000 80d1 	beq.w	80032e4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003142:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003146:	f003 0301 	and.w	r3, r3, #1
 800314a:	2b00      	cmp	r3, #0
 800314c:	d00b      	beq.n	8003166 <HAL_UART_IRQHandler+0xae>
 800314e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003152:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003156:	2b00      	cmp	r3, #0
 8003158:	d005      	beq.n	8003166 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315e:	f043 0201 	orr.w	r2, r3, #1
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003166:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800316a:	f003 0304 	and.w	r3, r3, #4
 800316e:	2b00      	cmp	r3, #0
 8003170:	d00b      	beq.n	800318a <HAL_UART_IRQHandler+0xd2>
 8003172:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003176:	f003 0301 	and.w	r3, r3, #1
 800317a:	2b00      	cmp	r3, #0
 800317c:	d005      	beq.n	800318a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003182:	f043 0202 	orr.w	r2, r3, #2
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800318a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800318e:	f003 0302 	and.w	r3, r3, #2
 8003192:	2b00      	cmp	r3, #0
 8003194:	d00b      	beq.n	80031ae <HAL_UART_IRQHandler+0xf6>
 8003196:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800319a:	f003 0301 	and.w	r3, r3, #1
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d005      	beq.n	80031ae <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a6:	f043 0204 	orr.w	r2, r3, #4
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80031ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031b2:	f003 0308 	and.w	r3, r3, #8
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d011      	beq.n	80031de <HAL_UART_IRQHandler+0x126>
 80031ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031be:	f003 0320 	and.w	r3, r3, #32
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d105      	bne.n	80031d2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80031c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80031ca:	f003 0301 	and.w	r3, r3, #1
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d005      	beq.n	80031de <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d6:	f043 0208 	orr.w	r2, r3, #8
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	f000 81ed 	beq.w	80035c2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80031e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031ec:	f003 0320 	and.w	r3, r3, #32
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d008      	beq.n	8003206 <HAL_UART_IRQHandler+0x14e>
 80031f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031f8:	f003 0320 	and.w	r3, r3, #32
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d002      	beq.n	8003206 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	f000 fb5e 	bl	80038c2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	695b      	ldr	r3, [r3, #20]
 800320c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003210:	2b40      	cmp	r3, #64	; 0x40
 8003212:	bf0c      	ite	eq
 8003214:	2301      	moveq	r3, #1
 8003216:	2300      	movne	r3, #0
 8003218:	b2db      	uxtb	r3, r3
 800321a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003222:	f003 0308 	and.w	r3, r3, #8
 8003226:	2b00      	cmp	r3, #0
 8003228:	d103      	bne.n	8003232 <HAL_UART_IRQHandler+0x17a>
 800322a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800322e:	2b00      	cmp	r3, #0
 8003230:	d04f      	beq.n	80032d2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f000 fa66 	bl	8003704 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	695b      	ldr	r3, [r3, #20]
 800323e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003242:	2b40      	cmp	r3, #64	; 0x40
 8003244:	d141      	bne.n	80032ca <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	3314      	adds	r3, #20
 800324c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003250:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003254:	e853 3f00 	ldrex	r3, [r3]
 8003258:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800325c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003260:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003264:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	3314      	adds	r3, #20
 800326e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003272:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003276:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800327a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800327e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003282:	e841 2300 	strex	r3, r2, [r1]
 8003286:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800328a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800328e:	2b00      	cmp	r3, #0
 8003290:	d1d9      	bne.n	8003246 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003296:	2b00      	cmp	r3, #0
 8003298:	d013      	beq.n	80032c2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800329e:	4a7d      	ldr	r2, [pc, #500]	; (8003494 <HAL_UART_IRQHandler+0x3dc>)
 80032a0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032a6:	4618      	mov	r0, r3
 80032a8:	f7fe fdcb 	bl	8001e42 <HAL_DMA_Abort_IT>
 80032ac:	4603      	mov	r3, r0
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d016      	beq.n	80032e0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032b8:	687a      	ldr	r2, [r7, #4]
 80032ba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80032bc:	4610      	mov	r0, r2
 80032be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032c0:	e00e      	b.n	80032e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f000 f99a 	bl	80035fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032c8:	e00a      	b.n	80032e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f000 f996 	bl	80035fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032d0:	e006      	b.n	80032e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f000 f992 	bl	80035fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2200      	movs	r2, #0
 80032dc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80032de:	e170      	b.n	80035c2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032e0:	bf00      	nop
    return;
 80032e2:	e16e      	b.n	80035c2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	f040 814a 	bne.w	8003582 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80032ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032f2:	f003 0310 	and.w	r3, r3, #16
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	f000 8143 	beq.w	8003582 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80032fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003300:	f003 0310 	and.w	r3, r3, #16
 8003304:	2b00      	cmp	r3, #0
 8003306:	f000 813c 	beq.w	8003582 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800330a:	2300      	movs	r3, #0
 800330c:	60bb      	str	r3, [r7, #8]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	60bb      	str	r3, [r7, #8]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	60bb      	str	r3, [r7, #8]
 800331e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	695b      	ldr	r3, [r3, #20]
 8003326:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800332a:	2b40      	cmp	r3, #64	; 0x40
 800332c:	f040 80b4 	bne.w	8003498 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800333c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003340:	2b00      	cmp	r3, #0
 8003342:	f000 8140 	beq.w	80035c6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800334a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800334e:	429a      	cmp	r2, r3
 8003350:	f080 8139 	bcs.w	80035c6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800335a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003360:	69db      	ldr	r3, [r3, #28]
 8003362:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003366:	f000 8088 	beq.w	800347a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	330c      	adds	r3, #12
 8003370:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003374:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003378:	e853 3f00 	ldrex	r3, [r3]
 800337c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003380:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003384:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003388:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	330c      	adds	r3, #12
 8003392:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003396:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800339a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800339e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80033a2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80033a6:	e841 2300 	strex	r3, r2, [r1]
 80033aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80033ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d1d9      	bne.n	800336a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	3314      	adds	r3, #20
 80033bc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033c0:	e853 3f00 	ldrex	r3, [r3]
 80033c4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80033c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80033c8:	f023 0301 	bic.w	r3, r3, #1
 80033cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	3314      	adds	r3, #20
 80033d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80033da:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80033de:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033e0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80033e2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80033e6:	e841 2300 	strex	r3, r2, [r1]
 80033ea:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80033ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d1e1      	bne.n	80033b6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	3314      	adds	r3, #20
 80033f8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80033fc:	e853 3f00 	ldrex	r3, [r3]
 8003400:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003402:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003404:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003408:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	3314      	adds	r3, #20
 8003412:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003416:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003418:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800341a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800341c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800341e:	e841 2300 	strex	r3, r2, [r1]
 8003422:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003424:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003426:	2b00      	cmp	r3, #0
 8003428:	d1e3      	bne.n	80033f2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2220      	movs	r2, #32
 800342e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2200      	movs	r2, #0
 8003436:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	330c      	adds	r3, #12
 800343e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003440:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003442:	e853 3f00 	ldrex	r3, [r3]
 8003446:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003448:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800344a:	f023 0310 	bic.w	r3, r3, #16
 800344e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	330c      	adds	r3, #12
 8003458:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800345c:	65ba      	str	r2, [r7, #88]	; 0x58
 800345e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003460:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003462:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003464:	e841 2300 	strex	r3, r2, [r1]
 8003468:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800346a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800346c:	2b00      	cmp	r3, #0
 800346e:	d1e3      	bne.n	8003438 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003474:	4618      	mov	r0, r3
 8003476:	f7fe fc74 	bl	8001d62 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003482:	b29b      	uxth	r3, r3
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	b29b      	uxth	r3, r3
 8003488:	4619      	mov	r1, r3
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f000 f8c0 	bl	8003610 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003490:	e099      	b.n	80035c6 <HAL_UART_IRQHandler+0x50e>
 8003492:	bf00      	nop
 8003494:	080037cb 	.word	0x080037cb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	1ad3      	subs	r3, r2, r3
 80034a4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80034ac:	b29b      	uxth	r3, r3
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	f000 808b 	beq.w	80035ca <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80034b4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	f000 8086 	beq.w	80035ca <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	330c      	adds	r3, #12
 80034c4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034c8:	e853 3f00 	ldrex	r3, [r3]
 80034cc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80034ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034d0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80034d4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	330c      	adds	r3, #12
 80034de:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80034e2:	647a      	str	r2, [r7, #68]	; 0x44
 80034e4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034e6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80034e8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80034ea:	e841 2300 	strex	r3, r2, [r1]
 80034ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80034f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d1e3      	bne.n	80034be <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	3314      	adds	r3, #20
 80034fc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003500:	e853 3f00 	ldrex	r3, [r3]
 8003504:	623b      	str	r3, [r7, #32]
   return(result);
 8003506:	6a3b      	ldr	r3, [r7, #32]
 8003508:	f023 0301 	bic.w	r3, r3, #1
 800350c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	3314      	adds	r3, #20
 8003516:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800351a:	633a      	str	r2, [r7, #48]	; 0x30
 800351c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800351e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003520:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003522:	e841 2300 	strex	r3, r2, [r1]
 8003526:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800352a:	2b00      	cmp	r3, #0
 800352c:	d1e3      	bne.n	80034f6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2220      	movs	r2, #32
 8003532:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2200      	movs	r2, #0
 800353a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	330c      	adds	r3, #12
 8003542:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	e853 3f00 	ldrex	r3, [r3]
 800354a:	60fb      	str	r3, [r7, #12]
   return(result);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	f023 0310 	bic.w	r3, r3, #16
 8003552:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	330c      	adds	r3, #12
 800355c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003560:	61fa      	str	r2, [r7, #28]
 8003562:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003564:	69b9      	ldr	r1, [r7, #24]
 8003566:	69fa      	ldr	r2, [r7, #28]
 8003568:	e841 2300 	strex	r3, r2, [r1]
 800356c:	617b      	str	r3, [r7, #20]
   return(result);
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d1e3      	bne.n	800353c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003574:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003578:	4619      	mov	r1, r3
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f000 f848 	bl	8003610 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003580:	e023      	b.n	80035ca <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003582:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003586:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800358a:	2b00      	cmp	r3, #0
 800358c:	d009      	beq.n	80035a2 <HAL_UART_IRQHandler+0x4ea>
 800358e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003592:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003596:	2b00      	cmp	r3, #0
 8003598:	d003      	beq.n	80035a2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f000 f929 	bl	80037f2 <UART_Transmit_IT>
    return;
 80035a0:	e014      	b.n	80035cc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80035a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d00e      	beq.n	80035cc <HAL_UART_IRQHandler+0x514>
 80035ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d008      	beq.n	80035cc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f000 f969 	bl	8003892 <UART_EndTransmit_IT>
    return;
 80035c0:	e004      	b.n	80035cc <HAL_UART_IRQHandler+0x514>
    return;
 80035c2:	bf00      	nop
 80035c4:	e002      	b.n	80035cc <HAL_UART_IRQHandler+0x514>
      return;
 80035c6:	bf00      	nop
 80035c8:	e000      	b.n	80035cc <HAL_UART_IRQHandler+0x514>
      return;
 80035ca:	bf00      	nop
  }
}
 80035cc:	37e8      	adds	r7, #232	; 0xe8
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop

080035d4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b083      	sub	sp, #12
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80035dc:	bf00      	nop
 80035de:	370c      	adds	r7, #12
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr

080035e8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b083      	sub	sp, #12
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80035f0:	bf00      	nop
 80035f2:	370c      	adds	r7, #12
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr

080035fc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b083      	sub	sp, #12
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003604:	bf00      	nop
 8003606:	370c      	adds	r7, #12
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr

08003610 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003610:	b480      	push	{r7}
 8003612:	b083      	sub	sp, #12
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	460b      	mov	r3, r1
 800361a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800361c:	bf00      	nop
 800361e:	370c      	adds	r7, #12
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr

08003628 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b090      	sub	sp, #64	; 0x40
 800362c:	af00      	add	r7, sp, #0
 800362e:	60f8      	str	r0, [r7, #12]
 8003630:	60b9      	str	r1, [r7, #8]
 8003632:	603b      	str	r3, [r7, #0]
 8003634:	4613      	mov	r3, r2
 8003636:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003638:	e050      	b.n	80036dc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800363a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800363c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003640:	d04c      	beq.n	80036dc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003642:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003644:	2b00      	cmp	r3, #0
 8003646:	d007      	beq.n	8003658 <UART_WaitOnFlagUntilTimeout+0x30>
 8003648:	f7fe fa6e 	bl	8001b28 <HAL_GetTick>
 800364c:	4602      	mov	r2, r0
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003654:	429a      	cmp	r2, r3
 8003656:	d241      	bcs.n	80036dc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	330c      	adds	r3, #12
 800365e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003662:	e853 3f00 	ldrex	r3, [r3]
 8003666:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800366a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800366e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	330c      	adds	r3, #12
 8003676:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003678:	637a      	str	r2, [r7, #52]	; 0x34
 800367a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800367c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800367e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003680:	e841 2300 	strex	r3, r2, [r1]
 8003684:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003688:	2b00      	cmp	r3, #0
 800368a:	d1e5      	bne.n	8003658 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	3314      	adds	r3, #20
 8003692:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	e853 3f00 	ldrex	r3, [r3]
 800369a:	613b      	str	r3, [r7, #16]
   return(result);
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	f023 0301 	bic.w	r3, r3, #1
 80036a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	3314      	adds	r3, #20
 80036aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80036ac:	623a      	str	r2, [r7, #32]
 80036ae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036b0:	69f9      	ldr	r1, [r7, #28]
 80036b2:	6a3a      	ldr	r2, [r7, #32]
 80036b4:	e841 2300 	strex	r3, r2, [r1]
 80036b8:	61bb      	str	r3, [r7, #24]
   return(result);
 80036ba:	69bb      	ldr	r3, [r7, #24]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d1e5      	bne.n	800368c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2220      	movs	r2, #32
 80036c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2220      	movs	r2, #32
 80036cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2200      	movs	r2, #0
 80036d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80036d8:	2303      	movs	r3, #3
 80036da:	e00f      	b.n	80036fc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	4013      	ands	r3, r2
 80036e6:	68ba      	ldr	r2, [r7, #8]
 80036e8:	429a      	cmp	r2, r3
 80036ea:	bf0c      	ite	eq
 80036ec:	2301      	moveq	r3, #1
 80036ee:	2300      	movne	r3, #0
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	461a      	mov	r2, r3
 80036f4:	79fb      	ldrb	r3, [r7, #7]
 80036f6:	429a      	cmp	r2, r3
 80036f8:	d09f      	beq.n	800363a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80036fa:	2300      	movs	r3, #0
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3740      	adds	r7, #64	; 0x40
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}

08003704 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003704:	b480      	push	{r7}
 8003706:	b095      	sub	sp, #84	; 0x54
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	330c      	adds	r3, #12
 8003712:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003714:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003716:	e853 3f00 	ldrex	r3, [r3]
 800371a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800371c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800371e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003722:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	330c      	adds	r3, #12
 800372a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800372c:	643a      	str	r2, [r7, #64]	; 0x40
 800372e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003730:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003732:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003734:	e841 2300 	strex	r3, r2, [r1]
 8003738:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800373a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800373c:	2b00      	cmp	r3, #0
 800373e:	d1e5      	bne.n	800370c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	3314      	adds	r3, #20
 8003746:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003748:	6a3b      	ldr	r3, [r7, #32]
 800374a:	e853 3f00 	ldrex	r3, [r3]
 800374e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003750:	69fb      	ldr	r3, [r7, #28]
 8003752:	f023 0301 	bic.w	r3, r3, #1
 8003756:	64bb      	str	r3, [r7, #72]	; 0x48
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	3314      	adds	r3, #20
 800375e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003760:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003762:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003764:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003766:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003768:	e841 2300 	strex	r3, r2, [r1]
 800376c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800376e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003770:	2b00      	cmp	r3, #0
 8003772:	d1e5      	bne.n	8003740 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003778:	2b01      	cmp	r3, #1
 800377a:	d119      	bne.n	80037b0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	330c      	adds	r3, #12
 8003782:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	e853 3f00 	ldrex	r3, [r3]
 800378a:	60bb      	str	r3, [r7, #8]
   return(result);
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	f023 0310 	bic.w	r3, r3, #16
 8003792:	647b      	str	r3, [r7, #68]	; 0x44
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	330c      	adds	r3, #12
 800379a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800379c:	61ba      	str	r2, [r7, #24]
 800379e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037a0:	6979      	ldr	r1, [r7, #20]
 80037a2:	69ba      	ldr	r2, [r7, #24]
 80037a4:	e841 2300 	strex	r3, r2, [r1]
 80037a8:	613b      	str	r3, [r7, #16]
   return(result);
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d1e5      	bne.n	800377c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2220      	movs	r2, #32
 80037b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2200      	movs	r2, #0
 80037bc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80037be:	bf00      	nop
 80037c0:	3754      	adds	r7, #84	; 0x54
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr

080037ca <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80037ca:	b580      	push	{r7, lr}
 80037cc:	b084      	sub	sp, #16
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037d6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2200      	movs	r2, #0
 80037dc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2200      	movs	r2, #0
 80037e2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80037e4:	68f8      	ldr	r0, [r7, #12]
 80037e6:	f7ff ff09 	bl	80035fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80037ea:	bf00      	nop
 80037ec:	3710      	adds	r7, #16
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}

080037f2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80037f2:	b480      	push	{r7}
 80037f4:	b085      	sub	sp, #20
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003800:	b2db      	uxtb	r3, r3
 8003802:	2b21      	cmp	r3, #33	; 0x21
 8003804:	d13e      	bne.n	8003884 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800380e:	d114      	bne.n	800383a <UART_Transmit_IT+0x48>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	691b      	ldr	r3, [r3, #16]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d110      	bne.n	800383a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6a1b      	ldr	r3, [r3, #32]
 800381c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	881b      	ldrh	r3, [r3, #0]
 8003822:	461a      	mov	r2, r3
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800382c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6a1b      	ldr	r3, [r3, #32]
 8003832:	1c9a      	adds	r2, r3, #2
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	621a      	str	r2, [r3, #32]
 8003838:	e008      	b.n	800384c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6a1b      	ldr	r3, [r3, #32]
 800383e:	1c59      	adds	r1, r3, #1
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	6211      	str	r1, [r2, #32]
 8003844:	781a      	ldrb	r2, [r3, #0]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003850:	b29b      	uxth	r3, r3
 8003852:	3b01      	subs	r3, #1
 8003854:	b29b      	uxth	r3, r3
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	4619      	mov	r1, r3
 800385a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800385c:	2b00      	cmp	r3, #0
 800385e:	d10f      	bne.n	8003880 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	68da      	ldr	r2, [r3, #12]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800386e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	68da      	ldr	r2, [r3, #12]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800387e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003880:	2300      	movs	r3, #0
 8003882:	e000      	b.n	8003886 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003884:	2302      	movs	r3, #2
  }
}
 8003886:	4618      	mov	r0, r3
 8003888:	3714      	adds	r7, #20
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr

08003892 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003892:	b580      	push	{r7, lr}
 8003894:	b082      	sub	sp, #8
 8003896:	af00      	add	r7, sp, #0
 8003898:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	68da      	ldr	r2, [r3, #12]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038a8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2220      	movs	r2, #32
 80038ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f7ff fe8e 	bl	80035d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80038b8:	2300      	movs	r3, #0
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3708      	adds	r7, #8
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}

080038c2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80038c2:	b580      	push	{r7, lr}
 80038c4:	b08c      	sub	sp, #48	; 0x30
 80038c6:	af00      	add	r7, sp, #0
 80038c8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	2b22      	cmp	r3, #34	; 0x22
 80038d4:	f040 80ab 	bne.w	8003a2e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038e0:	d117      	bne.n	8003912 <UART_Receive_IT+0x50>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	691b      	ldr	r3, [r3, #16]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d113      	bne.n	8003912 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80038ea:	2300      	movs	r3, #0
 80038ec:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038f2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	b29b      	uxth	r3, r3
 80038fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003900:	b29a      	uxth	r2, r3
 8003902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003904:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800390a:	1c9a      	adds	r2, r3, #2
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	629a      	str	r2, [r3, #40]	; 0x28
 8003910:	e026      	b.n	8003960 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003916:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003918:	2300      	movs	r3, #0
 800391a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003924:	d007      	beq.n	8003936 <UART_Receive_IT+0x74>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d10a      	bne.n	8003944 <UART_Receive_IT+0x82>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	691b      	ldr	r3, [r3, #16]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d106      	bne.n	8003944 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	b2da      	uxtb	r2, r3
 800393e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003940:	701a      	strb	r2, [r3, #0]
 8003942:	e008      	b.n	8003956 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	b2db      	uxtb	r3, r3
 800394c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003950:	b2da      	uxtb	r2, r3
 8003952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003954:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800395a:	1c5a      	adds	r2, r3, #1
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003964:	b29b      	uxth	r3, r3
 8003966:	3b01      	subs	r3, #1
 8003968:	b29b      	uxth	r3, r3
 800396a:	687a      	ldr	r2, [r7, #4]
 800396c:	4619      	mov	r1, r3
 800396e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003970:	2b00      	cmp	r3, #0
 8003972:	d15a      	bne.n	8003a2a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	68da      	ldr	r2, [r3, #12]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f022 0220 	bic.w	r2, r2, #32
 8003982:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	68da      	ldr	r2, [r3, #12]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003992:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	695a      	ldr	r2, [r3, #20]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f022 0201 	bic.w	r2, r2, #1
 80039a2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2220      	movs	r2, #32
 80039a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d135      	bne.n	8003a20 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2200      	movs	r2, #0
 80039b8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	330c      	adds	r3, #12
 80039c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	e853 3f00 	ldrex	r3, [r3]
 80039c8:	613b      	str	r3, [r7, #16]
   return(result);
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	f023 0310 	bic.w	r3, r3, #16
 80039d0:	627b      	str	r3, [r7, #36]	; 0x24
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	330c      	adds	r3, #12
 80039d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039da:	623a      	str	r2, [r7, #32]
 80039dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039de:	69f9      	ldr	r1, [r7, #28]
 80039e0:	6a3a      	ldr	r2, [r7, #32]
 80039e2:	e841 2300 	strex	r3, r2, [r1]
 80039e6:	61bb      	str	r3, [r7, #24]
   return(result);
 80039e8:	69bb      	ldr	r3, [r7, #24]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d1e5      	bne.n	80039ba <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 0310 	and.w	r3, r3, #16
 80039f8:	2b10      	cmp	r3, #16
 80039fa:	d10a      	bne.n	8003a12 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80039fc:	2300      	movs	r3, #0
 80039fe:	60fb      	str	r3, [r7, #12]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	60fb      	str	r3, [r7, #12]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	60fb      	str	r3, [r7, #12]
 8003a10:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003a16:	4619      	mov	r1, r3
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	f7ff fdf9 	bl	8003610 <HAL_UARTEx_RxEventCallback>
 8003a1e:	e002      	b.n	8003a26 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	f7ff fde1 	bl	80035e8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003a26:	2300      	movs	r3, #0
 8003a28:	e002      	b.n	8003a30 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	e000      	b.n	8003a30 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003a2e:	2302      	movs	r3, #2
  }
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	3730      	adds	r7, #48	; 0x30
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}

08003a38 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a3c:	b0c0      	sub	sp, #256	; 0x100
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	691b      	ldr	r3, [r3, #16]
 8003a4c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003a50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a54:	68d9      	ldr	r1, [r3, #12]
 8003a56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	ea40 0301 	orr.w	r3, r0, r1
 8003a60:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003a62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a66:	689a      	ldr	r2, [r3, #8]
 8003a68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a6c:	691b      	ldr	r3, [r3, #16]
 8003a6e:	431a      	orrs	r2, r3
 8003a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a74:	695b      	ldr	r3, [r3, #20]
 8003a76:	431a      	orrs	r2, r3
 8003a78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a7c:	69db      	ldr	r3, [r3, #28]
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003a90:	f021 010c 	bic.w	r1, r1, #12
 8003a94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003a9e:	430b      	orrs	r3, r1
 8003aa0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003aa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	695b      	ldr	r3, [r3, #20]
 8003aaa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003aae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ab2:	6999      	ldr	r1, [r3, #24]
 8003ab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	ea40 0301 	orr.w	r3, r0, r1
 8003abe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	4b8f      	ldr	r3, [pc, #572]	; (8003d04 <UART_SetConfig+0x2cc>)
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d005      	beq.n	8003ad8 <UART_SetConfig+0xa0>
 8003acc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	4b8d      	ldr	r3, [pc, #564]	; (8003d08 <UART_SetConfig+0x2d0>)
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d104      	bne.n	8003ae2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003ad8:	f7fe fc8a 	bl	80023f0 <HAL_RCC_GetPCLK2Freq>
 8003adc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003ae0:	e003      	b.n	8003aea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003ae2:	f7fe fc71 	bl	80023c8 <HAL_RCC_GetPCLK1Freq>
 8003ae6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003aea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003aee:	69db      	ldr	r3, [r3, #28]
 8003af0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003af4:	f040 810c 	bne.w	8003d10 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003af8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003afc:	2200      	movs	r2, #0
 8003afe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003b02:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003b06:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003b0a:	4622      	mov	r2, r4
 8003b0c:	462b      	mov	r3, r5
 8003b0e:	1891      	adds	r1, r2, r2
 8003b10:	65b9      	str	r1, [r7, #88]	; 0x58
 8003b12:	415b      	adcs	r3, r3
 8003b14:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b16:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003b1a:	4621      	mov	r1, r4
 8003b1c:	eb12 0801 	adds.w	r8, r2, r1
 8003b20:	4629      	mov	r1, r5
 8003b22:	eb43 0901 	adc.w	r9, r3, r1
 8003b26:	f04f 0200 	mov.w	r2, #0
 8003b2a:	f04f 0300 	mov.w	r3, #0
 8003b2e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b32:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b36:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b3a:	4690      	mov	r8, r2
 8003b3c:	4699      	mov	r9, r3
 8003b3e:	4623      	mov	r3, r4
 8003b40:	eb18 0303 	adds.w	r3, r8, r3
 8003b44:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003b48:	462b      	mov	r3, r5
 8003b4a:	eb49 0303 	adc.w	r3, r9, r3
 8003b4e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003b52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003b5e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003b62:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003b66:	460b      	mov	r3, r1
 8003b68:	18db      	adds	r3, r3, r3
 8003b6a:	653b      	str	r3, [r7, #80]	; 0x50
 8003b6c:	4613      	mov	r3, r2
 8003b6e:	eb42 0303 	adc.w	r3, r2, r3
 8003b72:	657b      	str	r3, [r7, #84]	; 0x54
 8003b74:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003b78:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003b7c:	f7fd f8a4 	bl	8000cc8 <__aeabi_uldivmod>
 8003b80:	4602      	mov	r2, r0
 8003b82:	460b      	mov	r3, r1
 8003b84:	4b61      	ldr	r3, [pc, #388]	; (8003d0c <UART_SetConfig+0x2d4>)
 8003b86:	fba3 2302 	umull	r2, r3, r3, r2
 8003b8a:	095b      	lsrs	r3, r3, #5
 8003b8c:	011c      	lsls	r4, r3, #4
 8003b8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b92:	2200      	movs	r2, #0
 8003b94:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003b98:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003b9c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003ba0:	4642      	mov	r2, r8
 8003ba2:	464b      	mov	r3, r9
 8003ba4:	1891      	adds	r1, r2, r2
 8003ba6:	64b9      	str	r1, [r7, #72]	; 0x48
 8003ba8:	415b      	adcs	r3, r3
 8003baa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003bb0:	4641      	mov	r1, r8
 8003bb2:	eb12 0a01 	adds.w	sl, r2, r1
 8003bb6:	4649      	mov	r1, r9
 8003bb8:	eb43 0b01 	adc.w	fp, r3, r1
 8003bbc:	f04f 0200 	mov.w	r2, #0
 8003bc0:	f04f 0300 	mov.w	r3, #0
 8003bc4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003bc8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003bcc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003bd0:	4692      	mov	sl, r2
 8003bd2:	469b      	mov	fp, r3
 8003bd4:	4643      	mov	r3, r8
 8003bd6:	eb1a 0303 	adds.w	r3, sl, r3
 8003bda:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003bde:	464b      	mov	r3, r9
 8003be0:	eb4b 0303 	adc.w	r3, fp, r3
 8003be4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003bf4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003bf8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003bfc:	460b      	mov	r3, r1
 8003bfe:	18db      	adds	r3, r3, r3
 8003c00:	643b      	str	r3, [r7, #64]	; 0x40
 8003c02:	4613      	mov	r3, r2
 8003c04:	eb42 0303 	adc.w	r3, r2, r3
 8003c08:	647b      	str	r3, [r7, #68]	; 0x44
 8003c0a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003c0e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003c12:	f7fd f859 	bl	8000cc8 <__aeabi_uldivmod>
 8003c16:	4602      	mov	r2, r0
 8003c18:	460b      	mov	r3, r1
 8003c1a:	4611      	mov	r1, r2
 8003c1c:	4b3b      	ldr	r3, [pc, #236]	; (8003d0c <UART_SetConfig+0x2d4>)
 8003c1e:	fba3 2301 	umull	r2, r3, r3, r1
 8003c22:	095b      	lsrs	r3, r3, #5
 8003c24:	2264      	movs	r2, #100	; 0x64
 8003c26:	fb02 f303 	mul.w	r3, r2, r3
 8003c2a:	1acb      	subs	r3, r1, r3
 8003c2c:	00db      	lsls	r3, r3, #3
 8003c2e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003c32:	4b36      	ldr	r3, [pc, #216]	; (8003d0c <UART_SetConfig+0x2d4>)
 8003c34:	fba3 2302 	umull	r2, r3, r3, r2
 8003c38:	095b      	lsrs	r3, r3, #5
 8003c3a:	005b      	lsls	r3, r3, #1
 8003c3c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003c40:	441c      	add	r4, r3
 8003c42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c46:	2200      	movs	r2, #0
 8003c48:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003c4c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003c50:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003c54:	4642      	mov	r2, r8
 8003c56:	464b      	mov	r3, r9
 8003c58:	1891      	adds	r1, r2, r2
 8003c5a:	63b9      	str	r1, [r7, #56]	; 0x38
 8003c5c:	415b      	adcs	r3, r3
 8003c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c60:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003c64:	4641      	mov	r1, r8
 8003c66:	1851      	adds	r1, r2, r1
 8003c68:	6339      	str	r1, [r7, #48]	; 0x30
 8003c6a:	4649      	mov	r1, r9
 8003c6c:	414b      	adcs	r3, r1
 8003c6e:	637b      	str	r3, [r7, #52]	; 0x34
 8003c70:	f04f 0200 	mov.w	r2, #0
 8003c74:	f04f 0300 	mov.w	r3, #0
 8003c78:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003c7c:	4659      	mov	r1, fp
 8003c7e:	00cb      	lsls	r3, r1, #3
 8003c80:	4651      	mov	r1, sl
 8003c82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c86:	4651      	mov	r1, sl
 8003c88:	00ca      	lsls	r2, r1, #3
 8003c8a:	4610      	mov	r0, r2
 8003c8c:	4619      	mov	r1, r3
 8003c8e:	4603      	mov	r3, r0
 8003c90:	4642      	mov	r2, r8
 8003c92:	189b      	adds	r3, r3, r2
 8003c94:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003c98:	464b      	mov	r3, r9
 8003c9a:	460a      	mov	r2, r1
 8003c9c:	eb42 0303 	adc.w	r3, r2, r3
 8003ca0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003ca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	2200      	movs	r2, #0
 8003cac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003cb0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003cb4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003cb8:	460b      	mov	r3, r1
 8003cba:	18db      	adds	r3, r3, r3
 8003cbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8003cbe:	4613      	mov	r3, r2
 8003cc0:	eb42 0303 	adc.w	r3, r2, r3
 8003cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cc6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003cca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003cce:	f7fc fffb 	bl	8000cc8 <__aeabi_uldivmod>
 8003cd2:	4602      	mov	r2, r0
 8003cd4:	460b      	mov	r3, r1
 8003cd6:	4b0d      	ldr	r3, [pc, #52]	; (8003d0c <UART_SetConfig+0x2d4>)
 8003cd8:	fba3 1302 	umull	r1, r3, r3, r2
 8003cdc:	095b      	lsrs	r3, r3, #5
 8003cde:	2164      	movs	r1, #100	; 0x64
 8003ce0:	fb01 f303 	mul.w	r3, r1, r3
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	00db      	lsls	r3, r3, #3
 8003ce8:	3332      	adds	r3, #50	; 0x32
 8003cea:	4a08      	ldr	r2, [pc, #32]	; (8003d0c <UART_SetConfig+0x2d4>)
 8003cec:	fba2 2303 	umull	r2, r3, r2, r3
 8003cf0:	095b      	lsrs	r3, r3, #5
 8003cf2:	f003 0207 	and.w	r2, r3, #7
 8003cf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4422      	add	r2, r4
 8003cfe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003d00:	e105      	b.n	8003f0e <UART_SetConfig+0x4d6>
 8003d02:	bf00      	nop
 8003d04:	40011000 	.word	0x40011000
 8003d08:	40011400 	.word	0x40011400
 8003d0c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d14:	2200      	movs	r2, #0
 8003d16:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003d1a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003d1e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003d22:	4642      	mov	r2, r8
 8003d24:	464b      	mov	r3, r9
 8003d26:	1891      	adds	r1, r2, r2
 8003d28:	6239      	str	r1, [r7, #32]
 8003d2a:	415b      	adcs	r3, r3
 8003d2c:	627b      	str	r3, [r7, #36]	; 0x24
 8003d2e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003d32:	4641      	mov	r1, r8
 8003d34:	1854      	adds	r4, r2, r1
 8003d36:	4649      	mov	r1, r9
 8003d38:	eb43 0501 	adc.w	r5, r3, r1
 8003d3c:	f04f 0200 	mov.w	r2, #0
 8003d40:	f04f 0300 	mov.w	r3, #0
 8003d44:	00eb      	lsls	r3, r5, #3
 8003d46:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d4a:	00e2      	lsls	r2, r4, #3
 8003d4c:	4614      	mov	r4, r2
 8003d4e:	461d      	mov	r5, r3
 8003d50:	4643      	mov	r3, r8
 8003d52:	18e3      	adds	r3, r4, r3
 8003d54:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003d58:	464b      	mov	r3, r9
 8003d5a:	eb45 0303 	adc.w	r3, r5, r3
 8003d5e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003d62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003d6e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003d72:	f04f 0200 	mov.w	r2, #0
 8003d76:	f04f 0300 	mov.w	r3, #0
 8003d7a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003d7e:	4629      	mov	r1, r5
 8003d80:	008b      	lsls	r3, r1, #2
 8003d82:	4621      	mov	r1, r4
 8003d84:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d88:	4621      	mov	r1, r4
 8003d8a:	008a      	lsls	r2, r1, #2
 8003d8c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003d90:	f7fc ff9a 	bl	8000cc8 <__aeabi_uldivmod>
 8003d94:	4602      	mov	r2, r0
 8003d96:	460b      	mov	r3, r1
 8003d98:	4b60      	ldr	r3, [pc, #384]	; (8003f1c <UART_SetConfig+0x4e4>)
 8003d9a:	fba3 2302 	umull	r2, r3, r3, r2
 8003d9e:	095b      	lsrs	r3, r3, #5
 8003da0:	011c      	lsls	r4, r3, #4
 8003da2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003da6:	2200      	movs	r2, #0
 8003da8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003dac:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003db0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003db4:	4642      	mov	r2, r8
 8003db6:	464b      	mov	r3, r9
 8003db8:	1891      	adds	r1, r2, r2
 8003dba:	61b9      	str	r1, [r7, #24]
 8003dbc:	415b      	adcs	r3, r3
 8003dbe:	61fb      	str	r3, [r7, #28]
 8003dc0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003dc4:	4641      	mov	r1, r8
 8003dc6:	1851      	adds	r1, r2, r1
 8003dc8:	6139      	str	r1, [r7, #16]
 8003dca:	4649      	mov	r1, r9
 8003dcc:	414b      	adcs	r3, r1
 8003dce:	617b      	str	r3, [r7, #20]
 8003dd0:	f04f 0200 	mov.w	r2, #0
 8003dd4:	f04f 0300 	mov.w	r3, #0
 8003dd8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ddc:	4659      	mov	r1, fp
 8003dde:	00cb      	lsls	r3, r1, #3
 8003de0:	4651      	mov	r1, sl
 8003de2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003de6:	4651      	mov	r1, sl
 8003de8:	00ca      	lsls	r2, r1, #3
 8003dea:	4610      	mov	r0, r2
 8003dec:	4619      	mov	r1, r3
 8003dee:	4603      	mov	r3, r0
 8003df0:	4642      	mov	r2, r8
 8003df2:	189b      	adds	r3, r3, r2
 8003df4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003df8:	464b      	mov	r3, r9
 8003dfa:	460a      	mov	r2, r1
 8003dfc:	eb42 0303 	adc.w	r3, r2, r3
 8003e00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003e04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	67bb      	str	r3, [r7, #120]	; 0x78
 8003e0e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003e10:	f04f 0200 	mov.w	r2, #0
 8003e14:	f04f 0300 	mov.w	r3, #0
 8003e18:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003e1c:	4649      	mov	r1, r9
 8003e1e:	008b      	lsls	r3, r1, #2
 8003e20:	4641      	mov	r1, r8
 8003e22:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e26:	4641      	mov	r1, r8
 8003e28:	008a      	lsls	r2, r1, #2
 8003e2a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003e2e:	f7fc ff4b 	bl	8000cc8 <__aeabi_uldivmod>
 8003e32:	4602      	mov	r2, r0
 8003e34:	460b      	mov	r3, r1
 8003e36:	4b39      	ldr	r3, [pc, #228]	; (8003f1c <UART_SetConfig+0x4e4>)
 8003e38:	fba3 1302 	umull	r1, r3, r3, r2
 8003e3c:	095b      	lsrs	r3, r3, #5
 8003e3e:	2164      	movs	r1, #100	; 0x64
 8003e40:	fb01 f303 	mul.w	r3, r1, r3
 8003e44:	1ad3      	subs	r3, r2, r3
 8003e46:	011b      	lsls	r3, r3, #4
 8003e48:	3332      	adds	r3, #50	; 0x32
 8003e4a:	4a34      	ldr	r2, [pc, #208]	; (8003f1c <UART_SetConfig+0x4e4>)
 8003e4c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e50:	095b      	lsrs	r3, r3, #5
 8003e52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e56:	441c      	add	r4, r3
 8003e58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	673b      	str	r3, [r7, #112]	; 0x70
 8003e60:	677a      	str	r2, [r7, #116]	; 0x74
 8003e62:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003e66:	4642      	mov	r2, r8
 8003e68:	464b      	mov	r3, r9
 8003e6a:	1891      	adds	r1, r2, r2
 8003e6c:	60b9      	str	r1, [r7, #8]
 8003e6e:	415b      	adcs	r3, r3
 8003e70:	60fb      	str	r3, [r7, #12]
 8003e72:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e76:	4641      	mov	r1, r8
 8003e78:	1851      	adds	r1, r2, r1
 8003e7a:	6039      	str	r1, [r7, #0]
 8003e7c:	4649      	mov	r1, r9
 8003e7e:	414b      	adcs	r3, r1
 8003e80:	607b      	str	r3, [r7, #4]
 8003e82:	f04f 0200 	mov.w	r2, #0
 8003e86:	f04f 0300 	mov.w	r3, #0
 8003e8a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003e8e:	4659      	mov	r1, fp
 8003e90:	00cb      	lsls	r3, r1, #3
 8003e92:	4651      	mov	r1, sl
 8003e94:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e98:	4651      	mov	r1, sl
 8003e9a:	00ca      	lsls	r2, r1, #3
 8003e9c:	4610      	mov	r0, r2
 8003e9e:	4619      	mov	r1, r3
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	4642      	mov	r2, r8
 8003ea4:	189b      	adds	r3, r3, r2
 8003ea6:	66bb      	str	r3, [r7, #104]	; 0x68
 8003ea8:	464b      	mov	r3, r9
 8003eaa:	460a      	mov	r2, r1
 8003eac:	eb42 0303 	adc.w	r3, r2, r3
 8003eb0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003eb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	663b      	str	r3, [r7, #96]	; 0x60
 8003ebc:	667a      	str	r2, [r7, #100]	; 0x64
 8003ebe:	f04f 0200 	mov.w	r2, #0
 8003ec2:	f04f 0300 	mov.w	r3, #0
 8003ec6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003eca:	4649      	mov	r1, r9
 8003ecc:	008b      	lsls	r3, r1, #2
 8003ece:	4641      	mov	r1, r8
 8003ed0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ed4:	4641      	mov	r1, r8
 8003ed6:	008a      	lsls	r2, r1, #2
 8003ed8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003edc:	f7fc fef4 	bl	8000cc8 <__aeabi_uldivmod>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	460b      	mov	r3, r1
 8003ee4:	4b0d      	ldr	r3, [pc, #52]	; (8003f1c <UART_SetConfig+0x4e4>)
 8003ee6:	fba3 1302 	umull	r1, r3, r3, r2
 8003eea:	095b      	lsrs	r3, r3, #5
 8003eec:	2164      	movs	r1, #100	; 0x64
 8003eee:	fb01 f303 	mul.w	r3, r1, r3
 8003ef2:	1ad3      	subs	r3, r2, r3
 8003ef4:	011b      	lsls	r3, r3, #4
 8003ef6:	3332      	adds	r3, #50	; 0x32
 8003ef8:	4a08      	ldr	r2, [pc, #32]	; (8003f1c <UART_SetConfig+0x4e4>)
 8003efa:	fba2 2303 	umull	r2, r3, r2, r3
 8003efe:	095b      	lsrs	r3, r3, #5
 8003f00:	f003 020f 	and.w	r2, r3, #15
 8003f04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4422      	add	r2, r4
 8003f0c:	609a      	str	r2, [r3, #8]
}
 8003f0e:	bf00      	nop
 8003f10:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003f14:	46bd      	mov	sp, r7
 8003f16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f1a:	bf00      	nop
 8003f1c:	51eb851f 	.word	0x51eb851f

08003f20 <__errno>:
 8003f20:	4b01      	ldr	r3, [pc, #4]	; (8003f28 <__errno+0x8>)
 8003f22:	6818      	ldr	r0, [r3, #0]
 8003f24:	4770      	bx	lr
 8003f26:	bf00      	nop
 8003f28:	2000000c 	.word	0x2000000c

08003f2c <__libc_init_array>:
 8003f2c:	b570      	push	{r4, r5, r6, lr}
 8003f2e:	4d0d      	ldr	r5, [pc, #52]	; (8003f64 <__libc_init_array+0x38>)
 8003f30:	4c0d      	ldr	r4, [pc, #52]	; (8003f68 <__libc_init_array+0x3c>)
 8003f32:	1b64      	subs	r4, r4, r5
 8003f34:	10a4      	asrs	r4, r4, #2
 8003f36:	2600      	movs	r6, #0
 8003f38:	42a6      	cmp	r6, r4
 8003f3a:	d109      	bne.n	8003f50 <__libc_init_array+0x24>
 8003f3c:	4d0b      	ldr	r5, [pc, #44]	; (8003f6c <__libc_init_array+0x40>)
 8003f3e:	4c0c      	ldr	r4, [pc, #48]	; (8003f70 <__libc_init_array+0x44>)
 8003f40:	f004 fd1c 	bl	800897c <_init>
 8003f44:	1b64      	subs	r4, r4, r5
 8003f46:	10a4      	asrs	r4, r4, #2
 8003f48:	2600      	movs	r6, #0
 8003f4a:	42a6      	cmp	r6, r4
 8003f4c:	d105      	bne.n	8003f5a <__libc_init_array+0x2e>
 8003f4e:	bd70      	pop	{r4, r5, r6, pc}
 8003f50:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f54:	4798      	blx	r3
 8003f56:	3601      	adds	r6, #1
 8003f58:	e7ee      	b.n	8003f38 <__libc_init_array+0xc>
 8003f5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f5e:	4798      	blx	r3
 8003f60:	3601      	adds	r6, #1
 8003f62:	e7f2      	b.n	8003f4a <__libc_init_array+0x1e>
 8003f64:	0800912c 	.word	0x0800912c
 8003f68:	0800912c 	.word	0x0800912c
 8003f6c:	0800912c 	.word	0x0800912c
 8003f70:	08009130 	.word	0x08009130

08003f74 <memset>:
 8003f74:	4402      	add	r2, r0
 8003f76:	4603      	mov	r3, r0
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d100      	bne.n	8003f7e <memset+0xa>
 8003f7c:	4770      	bx	lr
 8003f7e:	f803 1b01 	strb.w	r1, [r3], #1
 8003f82:	e7f9      	b.n	8003f78 <memset+0x4>

08003f84 <__cvt>:
 8003f84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003f88:	ec55 4b10 	vmov	r4, r5, d0
 8003f8c:	2d00      	cmp	r5, #0
 8003f8e:	460e      	mov	r6, r1
 8003f90:	4619      	mov	r1, r3
 8003f92:	462b      	mov	r3, r5
 8003f94:	bfbb      	ittet	lt
 8003f96:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003f9a:	461d      	movlt	r5, r3
 8003f9c:	2300      	movge	r3, #0
 8003f9e:	232d      	movlt	r3, #45	; 0x2d
 8003fa0:	700b      	strb	r3, [r1, #0]
 8003fa2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003fa4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003fa8:	4691      	mov	r9, r2
 8003faa:	f023 0820 	bic.w	r8, r3, #32
 8003fae:	bfbc      	itt	lt
 8003fb0:	4622      	movlt	r2, r4
 8003fb2:	4614      	movlt	r4, r2
 8003fb4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003fb8:	d005      	beq.n	8003fc6 <__cvt+0x42>
 8003fba:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003fbe:	d100      	bne.n	8003fc2 <__cvt+0x3e>
 8003fc0:	3601      	adds	r6, #1
 8003fc2:	2102      	movs	r1, #2
 8003fc4:	e000      	b.n	8003fc8 <__cvt+0x44>
 8003fc6:	2103      	movs	r1, #3
 8003fc8:	ab03      	add	r3, sp, #12
 8003fca:	9301      	str	r3, [sp, #4]
 8003fcc:	ab02      	add	r3, sp, #8
 8003fce:	9300      	str	r3, [sp, #0]
 8003fd0:	ec45 4b10 	vmov	d0, r4, r5
 8003fd4:	4653      	mov	r3, sl
 8003fd6:	4632      	mov	r2, r6
 8003fd8:	f001 fefa 	bl	8005dd0 <_dtoa_r>
 8003fdc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003fe0:	4607      	mov	r7, r0
 8003fe2:	d102      	bne.n	8003fea <__cvt+0x66>
 8003fe4:	f019 0f01 	tst.w	r9, #1
 8003fe8:	d022      	beq.n	8004030 <__cvt+0xac>
 8003fea:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003fee:	eb07 0906 	add.w	r9, r7, r6
 8003ff2:	d110      	bne.n	8004016 <__cvt+0x92>
 8003ff4:	783b      	ldrb	r3, [r7, #0]
 8003ff6:	2b30      	cmp	r3, #48	; 0x30
 8003ff8:	d10a      	bne.n	8004010 <__cvt+0x8c>
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	4620      	mov	r0, r4
 8004000:	4629      	mov	r1, r5
 8004002:	f7fc fd81 	bl	8000b08 <__aeabi_dcmpeq>
 8004006:	b918      	cbnz	r0, 8004010 <__cvt+0x8c>
 8004008:	f1c6 0601 	rsb	r6, r6, #1
 800400c:	f8ca 6000 	str.w	r6, [sl]
 8004010:	f8da 3000 	ldr.w	r3, [sl]
 8004014:	4499      	add	r9, r3
 8004016:	2200      	movs	r2, #0
 8004018:	2300      	movs	r3, #0
 800401a:	4620      	mov	r0, r4
 800401c:	4629      	mov	r1, r5
 800401e:	f7fc fd73 	bl	8000b08 <__aeabi_dcmpeq>
 8004022:	b108      	cbz	r0, 8004028 <__cvt+0xa4>
 8004024:	f8cd 900c 	str.w	r9, [sp, #12]
 8004028:	2230      	movs	r2, #48	; 0x30
 800402a:	9b03      	ldr	r3, [sp, #12]
 800402c:	454b      	cmp	r3, r9
 800402e:	d307      	bcc.n	8004040 <__cvt+0xbc>
 8004030:	9b03      	ldr	r3, [sp, #12]
 8004032:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004034:	1bdb      	subs	r3, r3, r7
 8004036:	4638      	mov	r0, r7
 8004038:	6013      	str	r3, [r2, #0]
 800403a:	b004      	add	sp, #16
 800403c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004040:	1c59      	adds	r1, r3, #1
 8004042:	9103      	str	r1, [sp, #12]
 8004044:	701a      	strb	r2, [r3, #0]
 8004046:	e7f0      	b.n	800402a <__cvt+0xa6>

08004048 <__exponent>:
 8004048:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800404a:	4603      	mov	r3, r0
 800404c:	2900      	cmp	r1, #0
 800404e:	bfb8      	it	lt
 8004050:	4249      	neglt	r1, r1
 8004052:	f803 2b02 	strb.w	r2, [r3], #2
 8004056:	bfb4      	ite	lt
 8004058:	222d      	movlt	r2, #45	; 0x2d
 800405a:	222b      	movge	r2, #43	; 0x2b
 800405c:	2909      	cmp	r1, #9
 800405e:	7042      	strb	r2, [r0, #1]
 8004060:	dd2a      	ble.n	80040b8 <__exponent+0x70>
 8004062:	f10d 0407 	add.w	r4, sp, #7
 8004066:	46a4      	mov	ip, r4
 8004068:	270a      	movs	r7, #10
 800406a:	46a6      	mov	lr, r4
 800406c:	460a      	mov	r2, r1
 800406e:	fb91 f6f7 	sdiv	r6, r1, r7
 8004072:	fb07 1516 	mls	r5, r7, r6, r1
 8004076:	3530      	adds	r5, #48	; 0x30
 8004078:	2a63      	cmp	r2, #99	; 0x63
 800407a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800407e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004082:	4631      	mov	r1, r6
 8004084:	dcf1      	bgt.n	800406a <__exponent+0x22>
 8004086:	3130      	adds	r1, #48	; 0x30
 8004088:	f1ae 0502 	sub.w	r5, lr, #2
 800408c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004090:	1c44      	adds	r4, r0, #1
 8004092:	4629      	mov	r1, r5
 8004094:	4561      	cmp	r1, ip
 8004096:	d30a      	bcc.n	80040ae <__exponent+0x66>
 8004098:	f10d 0209 	add.w	r2, sp, #9
 800409c:	eba2 020e 	sub.w	r2, r2, lr
 80040a0:	4565      	cmp	r5, ip
 80040a2:	bf88      	it	hi
 80040a4:	2200      	movhi	r2, #0
 80040a6:	4413      	add	r3, r2
 80040a8:	1a18      	subs	r0, r3, r0
 80040aa:	b003      	add	sp, #12
 80040ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80040b2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80040b6:	e7ed      	b.n	8004094 <__exponent+0x4c>
 80040b8:	2330      	movs	r3, #48	; 0x30
 80040ba:	3130      	adds	r1, #48	; 0x30
 80040bc:	7083      	strb	r3, [r0, #2]
 80040be:	70c1      	strb	r1, [r0, #3]
 80040c0:	1d03      	adds	r3, r0, #4
 80040c2:	e7f1      	b.n	80040a8 <__exponent+0x60>

080040c4 <_printf_float>:
 80040c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040c8:	ed2d 8b02 	vpush	{d8}
 80040cc:	b08d      	sub	sp, #52	; 0x34
 80040ce:	460c      	mov	r4, r1
 80040d0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80040d4:	4616      	mov	r6, r2
 80040d6:	461f      	mov	r7, r3
 80040d8:	4605      	mov	r5, r0
 80040da:	f003 f98d 	bl	80073f8 <_localeconv_r>
 80040de:	f8d0 a000 	ldr.w	sl, [r0]
 80040e2:	4650      	mov	r0, sl
 80040e4:	f7fc f894 	bl	8000210 <strlen>
 80040e8:	2300      	movs	r3, #0
 80040ea:	930a      	str	r3, [sp, #40]	; 0x28
 80040ec:	6823      	ldr	r3, [r4, #0]
 80040ee:	9305      	str	r3, [sp, #20]
 80040f0:	f8d8 3000 	ldr.w	r3, [r8]
 80040f4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80040f8:	3307      	adds	r3, #7
 80040fa:	f023 0307 	bic.w	r3, r3, #7
 80040fe:	f103 0208 	add.w	r2, r3, #8
 8004102:	f8c8 2000 	str.w	r2, [r8]
 8004106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800410a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800410e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004112:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004116:	9307      	str	r3, [sp, #28]
 8004118:	f8cd 8018 	str.w	r8, [sp, #24]
 800411c:	ee08 0a10 	vmov	s16, r0
 8004120:	4b9f      	ldr	r3, [pc, #636]	; (80043a0 <_printf_float+0x2dc>)
 8004122:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004126:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800412a:	f7fc fd1f 	bl	8000b6c <__aeabi_dcmpun>
 800412e:	bb88      	cbnz	r0, 8004194 <_printf_float+0xd0>
 8004130:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004134:	4b9a      	ldr	r3, [pc, #616]	; (80043a0 <_printf_float+0x2dc>)
 8004136:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800413a:	f7fc fcf9 	bl	8000b30 <__aeabi_dcmple>
 800413e:	bb48      	cbnz	r0, 8004194 <_printf_float+0xd0>
 8004140:	2200      	movs	r2, #0
 8004142:	2300      	movs	r3, #0
 8004144:	4640      	mov	r0, r8
 8004146:	4649      	mov	r1, r9
 8004148:	f7fc fce8 	bl	8000b1c <__aeabi_dcmplt>
 800414c:	b110      	cbz	r0, 8004154 <_printf_float+0x90>
 800414e:	232d      	movs	r3, #45	; 0x2d
 8004150:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004154:	4b93      	ldr	r3, [pc, #588]	; (80043a4 <_printf_float+0x2e0>)
 8004156:	4894      	ldr	r0, [pc, #592]	; (80043a8 <_printf_float+0x2e4>)
 8004158:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800415c:	bf94      	ite	ls
 800415e:	4698      	movls	r8, r3
 8004160:	4680      	movhi	r8, r0
 8004162:	2303      	movs	r3, #3
 8004164:	6123      	str	r3, [r4, #16]
 8004166:	9b05      	ldr	r3, [sp, #20]
 8004168:	f023 0204 	bic.w	r2, r3, #4
 800416c:	6022      	str	r2, [r4, #0]
 800416e:	f04f 0900 	mov.w	r9, #0
 8004172:	9700      	str	r7, [sp, #0]
 8004174:	4633      	mov	r3, r6
 8004176:	aa0b      	add	r2, sp, #44	; 0x2c
 8004178:	4621      	mov	r1, r4
 800417a:	4628      	mov	r0, r5
 800417c:	f000 f9d8 	bl	8004530 <_printf_common>
 8004180:	3001      	adds	r0, #1
 8004182:	f040 8090 	bne.w	80042a6 <_printf_float+0x1e2>
 8004186:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800418a:	b00d      	add	sp, #52	; 0x34
 800418c:	ecbd 8b02 	vpop	{d8}
 8004190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004194:	4642      	mov	r2, r8
 8004196:	464b      	mov	r3, r9
 8004198:	4640      	mov	r0, r8
 800419a:	4649      	mov	r1, r9
 800419c:	f7fc fce6 	bl	8000b6c <__aeabi_dcmpun>
 80041a0:	b140      	cbz	r0, 80041b4 <_printf_float+0xf0>
 80041a2:	464b      	mov	r3, r9
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	bfbc      	itt	lt
 80041a8:	232d      	movlt	r3, #45	; 0x2d
 80041aa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80041ae:	487f      	ldr	r0, [pc, #508]	; (80043ac <_printf_float+0x2e8>)
 80041b0:	4b7f      	ldr	r3, [pc, #508]	; (80043b0 <_printf_float+0x2ec>)
 80041b2:	e7d1      	b.n	8004158 <_printf_float+0x94>
 80041b4:	6863      	ldr	r3, [r4, #4]
 80041b6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80041ba:	9206      	str	r2, [sp, #24]
 80041bc:	1c5a      	adds	r2, r3, #1
 80041be:	d13f      	bne.n	8004240 <_printf_float+0x17c>
 80041c0:	2306      	movs	r3, #6
 80041c2:	6063      	str	r3, [r4, #4]
 80041c4:	9b05      	ldr	r3, [sp, #20]
 80041c6:	6861      	ldr	r1, [r4, #4]
 80041c8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80041cc:	2300      	movs	r3, #0
 80041ce:	9303      	str	r3, [sp, #12]
 80041d0:	ab0a      	add	r3, sp, #40	; 0x28
 80041d2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80041d6:	ab09      	add	r3, sp, #36	; 0x24
 80041d8:	ec49 8b10 	vmov	d0, r8, r9
 80041dc:	9300      	str	r3, [sp, #0]
 80041de:	6022      	str	r2, [r4, #0]
 80041e0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80041e4:	4628      	mov	r0, r5
 80041e6:	f7ff fecd 	bl	8003f84 <__cvt>
 80041ea:	9b06      	ldr	r3, [sp, #24]
 80041ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 80041ee:	2b47      	cmp	r3, #71	; 0x47
 80041f0:	4680      	mov	r8, r0
 80041f2:	d108      	bne.n	8004206 <_printf_float+0x142>
 80041f4:	1cc8      	adds	r0, r1, #3
 80041f6:	db02      	blt.n	80041fe <_printf_float+0x13a>
 80041f8:	6863      	ldr	r3, [r4, #4]
 80041fa:	4299      	cmp	r1, r3
 80041fc:	dd41      	ble.n	8004282 <_printf_float+0x1be>
 80041fe:	f1ab 0b02 	sub.w	fp, fp, #2
 8004202:	fa5f fb8b 	uxtb.w	fp, fp
 8004206:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800420a:	d820      	bhi.n	800424e <_printf_float+0x18a>
 800420c:	3901      	subs	r1, #1
 800420e:	465a      	mov	r2, fp
 8004210:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004214:	9109      	str	r1, [sp, #36]	; 0x24
 8004216:	f7ff ff17 	bl	8004048 <__exponent>
 800421a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800421c:	1813      	adds	r3, r2, r0
 800421e:	2a01      	cmp	r2, #1
 8004220:	4681      	mov	r9, r0
 8004222:	6123      	str	r3, [r4, #16]
 8004224:	dc02      	bgt.n	800422c <_printf_float+0x168>
 8004226:	6822      	ldr	r2, [r4, #0]
 8004228:	07d2      	lsls	r2, r2, #31
 800422a:	d501      	bpl.n	8004230 <_printf_float+0x16c>
 800422c:	3301      	adds	r3, #1
 800422e:	6123      	str	r3, [r4, #16]
 8004230:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004234:	2b00      	cmp	r3, #0
 8004236:	d09c      	beq.n	8004172 <_printf_float+0xae>
 8004238:	232d      	movs	r3, #45	; 0x2d
 800423a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800423e:	e798      	b.n	8004172 <_printf_float+0xae>
 8004240:	9a06      	ldr	r2, [sp, #24]
 8004242:	2a47      	cmp	r2, #71	; 0x47
 8004244:	d1be      	bne.n	80041c4 <_printf_float+0x100>
 8004246:	2b00      	cmp	r3, #0
 8004248:	d1bc      	bne.n	80041c4 <_printf_float+0x100>
 800424a:	2301      	movs	r3, #1
 800424c:	e7b9      	b.n	80041c2 <_printf_float+0xfe>
 800424e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004252:	d118      	bne.n	8004286 <_printf_float+0x1c2>
 8004254:	2900      	cmp	r1, #0
 8004256:	6863      	ldr	r3, [r4, #4]
 8004258:	dd0b      	ble.n	8004272 <_printf_float+0x1ae>
 800425a:	6121      	str	r1, [r4, #16]
 800425c:	b913      	cbnz	r3, 8004264 <_printf_float+0x1a0>
 800425e:	6822      	ldr	r2, [r4, #0]
 8004260:	07d0      	lsls	r0, r2, #31
 8004262:	d502      	bpl.n	800426a <_printf_float+0x1a6>
 8004264:	3301      	adds	r3, #1
 8004266:	440b      	add	r3, r1
 8004268:	6123      	str	r3, [r4, #16]
 800426a:	65a1      	str	r1, [r4, #88]	; 0x58
 800426c:	f04f 0900 	mov.w	r9, #0
 8004270:	e7de      	b.n	8004230 <_printf_float+0x16c>
 8004272:	b913      	cbnz	r3, 800427a <_printf_float+0x1b6>
 8004274:	6822      	ldr	r2, [r4, #0]
 8004276:	07d2      	lsls	r2, r2, #31
 8004278:	d501      	bpl.n	800427e <_printf_float+0x1ba>
 800427a:	3302      	adds	r3, #2
 800427c:	e7f4      	b.n	8004268 <_printf_float+0x1a4>
 800427e:	2301      	movs	r3, #1
 8004280:	e7f2      	b.n	8004268 <_printf_float+0x1a4>
 8004282:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004286:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004288:	4299      	cmp	r1, r3
 800428a:	db05      	blt.n	8004298 <_printf_float+0x1d4>
 800428c:	6823      	ldr	r3, [r4, #0]
 800428e:	6121      	str	r1, [r4, #16]
 8004290:	07d8      	lsls	r0, r3, #31
 8004292:	d5ea      	bpl.n	800426a <_printf_float+0x1a6>
 8004294:	1c4b      	adds	r3, r1, #1
 8004296:	e7e7      	b.n	8004268 <_printf_float+0x1a4>
 8004298:	2900      	cmp	r1, #0
 800429a:	bfd4      	ite	le
 800429c:	f1c1 0202 	rsble	r2, r1, #2
 80042a0:	2201      	movgt	r2, #1
 80042a2:	4413      	add	r3, r2
 80042a4:	e7e0      	b.n	8004268 <_printf_float+0x1a4>
 80042a6:	6823      	ldr	r3, [r4, #0]
 80042a8:	055a      	lsls	r2, r3, #21
 80042aa:	d407      	bmi.n	80042bc <_printf_float+0x1f8>
 80042ac:	6923      	ldr	r3, [r4, #16]
 80042ae:	4642      	mov	r2, r8
 80042b0:	4631      	mov	r1, r6
 80042b2:	4628      	mov	r0, r5
 80042b4:	47b8      	blx	r7
 80042b6:	3001      	adds	r0, #1
 80042b8:	d12c      	bne.n	8004314 <_printf_float+0x250>
 80042ba:	e764      	b.n	8004186 <_printf_float+0xc2>
 80042bc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80042c0:	f240 80e0 	bls.w	8004484 <_printf_float+0x3c0>
 80042c4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80042c8:	2200      	movs	r2, #0
 80042ca:	2300      	movs	r3, #0
 80042cc:	f7fc fc1c 	bl	8000b08 <__aeabi_dcmpeq>
 80042d0:	2800      	cmp	r0, #0
 80042d2:	d034      	beq.n	800433e <_printf_float+0x27a>
 80042d4:	4a37      	ldr	r2, [pc, #220]	; (80043b4 <_printf_float+0x2f0>)
 80042d6:	2301      	movs	r3, #1
 80042d8:	4631      	mov	r1, r6
 80042da:	4628      	mov	r0, r5
 80042dc:	47b8      	blx	r7
 80042de:	3001      	adds	r0, #1
 80042e0:	f43f af51 	beq.w	8004186 <_printf_float+0xc2>
 80042e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80042e8:	429a      	cmp	r2, r3
 80042ea:	db02      	blt.n	80042f2 <_printf_float+0x22e>
 80042ec:	6823      	ldr	r3, [r4, #0]
 80042ee:	07d8      	lsls	r0, r3, #31
 80042f0:	d510      	bpl.n	8004314 <_printf_float+0x250>
 80042f2:	ee18 3a10 	vmov	r3, s16
 80042f6:	4652      	mov	r2, sl
 80042f8:	4631      	mov	r1, r6
 80042fa:	4628      	mov	r0, r5
 80042fc:	47b8      	blx	r7
 80042fe:	3001      	adds	r0, #1
 8004300:	f43f af41 	beq.w	8004186 <_printf_float+0xc2>
 8004304:	f04f 0800 	mov.w	r8, #0
 8004308:	f104 091a 	add.w	r9, r4, #26
 800430c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800430e:	3b01      	subs	r3, #1
 8004310:	4543      	cmp	r3, r8
 8004312:	dc09      	bgt.n	8004328 <_printf_float+0x264>
 8004314:	6823      	ldr	r3, [r4, #0]
 8004316:	079b      	lsls	r3, r3, #30
 8004318:	f100 8105 	bmi.w	8004526 <_printf_float+0x462>
 800431c:	68e0      	ldr	r0, [r4, #12]
 800431e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004320:	4298      	cmp	r0, r3
 8004322:	bfb8      	it	lt
 8004324:	4618      	movlt	r0, r3
 8004326:	e730      	b.n	800418a <_printf_float+0xc6>
 8004328:	2301      	movs	r3, #1
 800432a:	464a      	mov	r2, r9
 800432c:	4631      	mov	r1, r6
 800432e:	4628      	mov	r0, r5
 8004330:	47b8      	blx	r7
 8004332:	3001      	adds	r0, #1
 8004334:	f43f af27 	beq.w	8004186 <_printf_float+0xc2>
 8004338:	f108 0801 	add.w	r8, r8, #1
 800433c:	e7e6      	b.n	800430c <_printf_float+0x248>
 800433e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004340:	2b00      	cmp	r3, #0
 8004342:	dc39      	bgt.n	80043b8 <_printf_float+0x2f4>
 8004344:	4a1b      	ldr	r2, [pc, #108]	; (80043b4 <_printf_float+0x2f0>)
 8004346:	2301      	movs	r3, #1
 8004348:	4631      	mov	r1, r6
 800434a:	4628      	mov	r0, r5
 800434c:	47b8      	blx	r7
 800434e:	3001      	adds	r0, #1
 8004350:	f43f af19 	beq.w	8004186 <_printf_float+0xc2>
 8004354:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004358:	4313      	orrs	r3, r2
 800435a:	d102      	bne.n	8004362 <_printf_float+0x29e>
 800435c:	6823      	ldr	r3, [r4, #0]
 800435e:	07d9      	lsls	r1, r3, #31
 8004360:	d5d8      	bpl.n	8004314 <_printf_float+0x250>
 8004362:	ee18 3a10 	vmov	r3, s16
 8004366:	4652      	mov	r2, sl
 8004368:	4631      	mov	r1, r6
 800436a:	4628      	mov	r0, r5
 800436c:	47b8      	blx	r7
 800436e:	3001      	adds	r0, #1
 8004370:	f43f af09 	beq.w	8004186 <_printf_float+0xc2>
 8004374:	f04f 0900 	mov.w	r9, #0
 8004378:	f104 0a1a 	add.w	sl, r4, #26
 800437c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800437e:	425b      	negs	r3, r3
 8004380:	454b      	cmp	r3, r9
 8004382:	dc01      	bgt.n	8004388 <_printf_float+0x2c4>
 8004384:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004386:	e792      	b.n	80042ae <_printf_float+0x1ea>
 8004388:	2301      	movs	r3, #1
 800438a:	4652      	mov	r2, sl
 800438c:	4631      	mov	r1, r6
 800438e:	4628      	mov	r0, r5
 8004390:	47b8      	blx	r7
 8004392:	3001      	adds	r0, #1
 8004394:	f43f aef7 	beq.w	8004186 <_printf_float+0xc2>
 8004398:	f109 0901 	add.w	r9, r9, #1
 800439c:	e7ee      	b.n	800437c <_printf_float+0x2b8>
 800439e:	bf00      	nop
 80043a0:	7fefffff 	.word	0x7fefffff
 80043a4:	08008c7c 	.word	0x08008c7c
 80043a8:	08008c80 	.word	0x08008c80
 80043ac:	08008c88 	.word	0x08008c88
 80043b0:	08008c84 	.word	0x08008c84
 80043b4:	08008c8c 	.word	0x08008c8c
 80043b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80043ba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80043bc:	429a      	cmp	r2, r3
 80043be:	bfa8      	it	ge
 80043c0:	461a      	movge	r2, r3
 80043c2:	2a00      	cmp	r2, #0
 80043c4:	4691      	mov	r9, r2
 80043c6:	dc37      	bgt.n	8004438 <_printf_float+0x374>
 80043c8:	f04f 0b00 	mov.w	fp, #0
 80043cc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80043d0:	f104 021a 	add.w	r2, r4, #26
 80043d4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80043d6:	9305      	str	r3, [sp, #20]
 80043d8:	eba3 0309 	sub.w	r3, r3, r9
 80043dc:	455b      	cmp	r3, fp
 80043de:	dc33      	bgt.n	8004448 <_printf_float+0x384>
 80043e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80043e4:	429a      	cmp	r2, r3
 80043e6:	db3b      	blt.n	8004460 <_printf_float+0x39c>
 80043e8:	6823      	ldr	r3, [r4, #0]
 80043ea:	07da      	lsls	r2, r3, #31
 80043ec:	d438      	bmi.n	8004460 <_printf_float+0x39c>
 80043ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80043f0:	9a05      	ldr	r2, [sp, #20]
 80043f2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80043f4:	1a9a      	subs	r2, r3, r2
 80043f6:	eba3 0901 	sub.w	r9, r3, r1
 80043fa:	4591      	cmp	r9, r2
 80043fc:	bfa8      	it	ge
 80043fe:	4691      	movge	r9, r2
 8004400:	f1b9 0f00 	cmp.w	r9, #0
 8004404:	dc35      	bgt.n	8004472 <_printf_float+0x3ae>
 8004406:	f04f 0800 	mov.w	r8, #0
 800440a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800440e:	f104 0a1a 	add.w	sl, r4, #26
 8004412:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004416:	1a9b      	subs	r3, r3, r2
 8004418:	eba3 0309 	sub.w	r3, r3, r9
 800441c:	4543      	cmp	r3, r8
 800441e:	f77f af79 	ble.w	8004314 <_printf_float+0x250>
 8004422:	2301      	movs	r3, #1
 8004424:	4652      	mov	r2, sl
 8004426:	4631      	mov	r1, r6
 8004428:	4628      	mov	r0, r5
 800442a:	47b8      	blx	r7
 800442c:	3001      	adds	r0, #1
 800442e:	f43f aeaa 	beq.w	8004186 <_printf_float+0xc2>
 8004432:	f108 0801 	add.w	r8, r8, #1
 8004436:	e7ec      	b.n	8004412 <_printf_float+0x34e>
 8004438:	4613      	mov	r3, r2
 800443a:	4631      	mov	r1, r6
 800443c:	4642      	mov	r2, r8
 800443e:	4628      	mov	r0, r5
 8004440:	47b8      	blx	r7
 8004442:	3001      	adds	r0, #1
 8004444:	d1c0      	bne.n	80043c8 <_printf_float+0x304>
 8004446:	e69e      	b.n	8004186 <_printf_float+0xc2>
 8004448:	2301      	movs	r3, #1
 800444a:	4631      	mov	r1, r6
 800444c:	4628      	mov	r0, r5
 800444e:	9205      	str	r2, [sp, #20]
 8004450:	47b8      	blx	r7
 8004452:	3001      	adds	r0, #1
 8004454:	f43f ae97 	beq.w	8004186 <_printf_float+0xc2>
 8004458:	9a05      	ldr	r2, [sp, #20]
 800445a:	f10b 0b01 	add.w	fp, fp, #1
 800445e:	e7b9      	b.n	80043d4 <_printf_float+0x310>
 8004460:	ee18 3a10 	vmov	r3, s16
 8004464:	4652      	mov	r2, sl
 8004466:	4631      	mov	r1, r6
 8004468:	4628      	mov	r0, r5
 800446a:	47b8      	blx	r7
 800446c:	3001      	adds	r0, #1
 800446e:	d1be      	bne.n	80043ee <_printf_float+0x32a>
 8004470:	e689      	b.n	8004186 <_printf_float+0xc2>
 8004472:	9a05      	ldr	r2, [sp, #20]
 8004474:	464b      	mov	r3, r9
 8004476:	4442      	add	r2, r8
 8004478:	4631      	mov	r1, r6
 800447a:	4628      	mov	r0, r5
 800447c:	47b8      	blx	r7
 800447e:	3001      	adds	r0, #1
 8004480:	d1c1      	bne.n	8004406 <_printf_float+0x342>
 8004482:	e680      	b.n	8004186 <_printf_float+0xc2>
 8004484:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004486:	2a01      	cmp	r2, #1
 8004488:	dc01      	bgt.n	800448e <_printf_float+0x3ca>
 800448a:	07db      	lsls	r3, r3, #31
 800448c:	d538      	bpl.n	8004500 <_printf_float+0x43c>
 800448e:	2301      	movs	r3, #1
 8004490:	4642      	mov	r2, r8
 8004492:	4631      	mov	r1, r6
 8004494:	4628      	mov	r0, r5
 8004496:	47b8      	blx	r7
 8004498:	3001      	adds	r0, #1
 800449a:	f43f ae74 	beq.w	8004186 <_printf_float+0xc2>
 800449e:	ee18 3a10 	vmov	r3, s16
 80044a2:	4652      	mov	r2, sl
 80044a4:	4631      	mov	r1, r6
 80044a6:	4628      	mov	r0, r5
 80044a8:	47b8      	blx	r7
 80044aa:	3001      	adds	r0, #1
 80044ac:	f43f ae6b 	beq.w	8004186 <_printf_float+0xc2>
 80044b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80044b4:	2200      	movs	r2, #0
 80044b6:	2300      	movs	r3, #0
 80044b8:	f7fc fb26 	bl	8000b08 <__aeabi_dcmpeq>
 80044bc:	b9d8      	cbnz	r0, 80044f6 <_printf_float+0x432>
 80044be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80044c0:	f108 0201 	add.w	r2, r8, #1
 80044c4:	3b01      	subs	r3, #1
 80044c6:	4631      	mov	r1, r6
 80044c8:	4628      	mov	r0, r5
 80044ca:	47b8      	blx	r7
 80044cc:	3001      	adds	r0, #1
 80044ce:	d10e      	bne.n	80044ee <_printf_float+0x42a>
 80044d0:	e659      	b.n	8004186 <_printf_float+0xc2>
 80044d2:	2301      	movs	r3, #1
 80044d4:	4652      	mov	r2, sl
 80044d6:	4631      	mov	r1, r6
 80044d8:	4628      	mov	r0, r5
 80044da:	47b8      	blx	r7
 80044dc:	3001      	adds	r0, #1
 80044de:	f43f ae52 	beq.w	8004186 <_printf_float+0xc2>
 80044e2:	f108 0801 	add.w	r8, r8, #1
 80044e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80044e8:	3b01      	subs	r3, #1
 80044ea:	4543      	cmp	r3, r8
 80044ec:	dcf1      	bgt.n	80044d2 <_printf_float+0x40e>
 80044ee:	464b      	mov	r3, r9
 80044f0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80044f4:	e6dc      	b.n	80042b0 <_printf_float+0x1ec>
 80044f6:	f04f 0800 	mov.w	r8, #0
 80044fa:	f104 0a1a 	add.w	sl, r4, #26
 80044fe:	e7f2      	b.n	80044e6 <_printf_float+0x422>
 8004500:	2301      	movs	r3, #1
 8004502:	4642      	mov	r2, r8
 8004504:	e7df      	b.n	80044c6 <_printf_float+0x402>
 8004506:	2301      	movs	r3, #1
 8004508:	464a      	mov	r2, r9
 800450a:	4631      	mov	r1, r6
 800450c:	4628      	mov	r0, r5
 800450e:	47b8      	blx	r7
 8004510:	3001      	adds	r0, #1
 8004512:	f43f ae38 	beq.w	8004186 <_printf_float+0xc2>
 8004516:	f108 0801 	add.w	r8, r8, #1
 800451a:	68e3      	ldr	r3, [r4, #12]
 800451c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800451e:	1a5b      	subs	r3, r3, r1
 8004520:	4543      	cmp	r3, r8
 8004522:	dcf0      	bgt.n	8004506 <_printf_float+0x442>
 8004524:	e6fa      	b.n	800431c <_printf_float+0x258>
 8004526:	f04f 0800 	mov.w	r8, #0
 800452a:	f104 0919 	add.w	r9, r4, #25
 800452e:	e7f4      	b.n	800451a <_printf_float+0x456>

08004530 <_printf_common>:
 8004530:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004534:	4616      	mov	r6, r2
 8004536:	4699      	mov	r9, r3
 8004538:	688a      	ldr	r2, [r1, #8]
 800453a:	690b      	ldr	r3, [r1, #16]
 800453c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004540:	4293      	cmp	r3, r2
 8004542:	bfb8      	it	lt
 8004544:	4613      	movlt	r3, r2
 8004546:	6033      	str	r3, [r6, #0]
 8004548:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800454c:	4607      	mov	r7, r0
 800454e:	460c      	mov	r4, r1
 8004550:	b10a      	cbz	r2, 8004556 <_printf_common+0x26>
 8004552:	3301      	adds	r3, #1
 8004554:	6033      	str	r3, [r6, #0]
 8004556:	6823      	ldr	r3, [r4, #0]
 8004558:	0699      	lsls	r1, r3, #26
 800455a:	bf42      	ittt	mi
 800455c:	6833      	ldrmi	r3, [r6, #0]
 800455e:	3302      	addmi	r3, #2
 8004560:	6033      	strmi	r3, [r6, #0]
 8004562:	6825      	ldr	r5, [r4, #0]
 8004564:	f015 0506 	ands.w	r5, r5, #6
 8004568:	d106      	bne.n	8004578 <_printf_common+0x48>
 800456a:	f104 0a19 	add.w	sl, r4, #25
 800456e:	68e3      	ldr	r3, [r4, #12]
 8004570:	6832      	ldr	r2, [r6, #0]
 8004572:	1a9b      	subs	r3, r3, r2
 8004574:	42ab      	cmp	r3, r5
 8004576:	dc26      	bgt.n	80045c6 <_printf_common+0x96>
 8004578:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800457c:	1e13      	subs	r3, r2, #0
 800457e:	6822      	ldr	r2, [r4, #0]
 8004580:	bf18      	it	ne
 8004582:	2301      	movne	r3, #1
 8004584:	0692      	lsls	r2, r2, #26
 8004586:	d42b      	bmi.n	80045e0 <_printf_common+0xb0>
 8004588:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800458c:	4649      	mov	r1, r9
 800458e:	4638      	mov	r0, r7
 8004590:	47c0      	blx	r8
 8004592:	3001      	adds	r0, #1
 8004594:	d01e      	beq.n	80045d4 <_printf_common+0xa4>
 8004596:	6823      	ldr	r3, [r4, #0]
 8004598:	68e5      	ldr	r5, [r4, #12]
 800459a:	6832      	ldr	r2, [r6, #0]
 800459c:	f003 0306 	and.w	r3, r3, #6
 80045a0:	2b04      	cmp	r3, #4
 80045a2:	bf08      	it	eq
 80045a4:	1aad      	subeq	r5, r5, r2
 80045a6:	68a3      	ldr	r3, [r4, #8]
 80045a8:	6922      	ldr	r2, [r4, #16]
 80045aa:	bf0c      	ite	eq
 80045ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80045b0:	2500      	movne	r5, #0
 80045b2:	4293      	cmp	r3, r2
 80045b4:	bfc4      	itt	gt
 80045b6:	1a9b      	subgt	r3, r3, r2
 80045b8:	18ed      	addgt	r5, r5, r3
 80045ba:	2600      	movs	r6, #0
 80045bc:	341a      	adds	r4, #26
 80045be:	42b5      	cmp	r5, r6
 80045c0:	d11a      	bne.n	80045f8 <_printf_common+0xc8>
 80045c2:	2000      	movs	r0, #0
 80045c4:	e008      	b.n	80045d8 <_printf_common+0xa8>
 80045c6:	2301      	movs	r3, #1
 80045c8:	4652      	mov	r2, sl
 80045ca:	4649      	mov	r1, r9
 80045cc:	4638      	mov	r0, r7
 80045ce:	47c0      	blx	r8
 80045d0:	3001      	adds	r0, #1
 80045d2:	d103      	bne.n	80045dc <_printf_common+0xac>
 80045d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80045d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045dc:	3501      	adds	r5, #1
 80045de:	e7c6      	b.n	800456e <_printf_common+0x3e>
 80045e0:	18e1      	adds	r1, r4, r3
 80045e2:	1c5a      	adds	r2, r3, #1
 80045e4:	2030      	movs	r0, #48	; 0x30
 80045e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80045ea:	4422      	add	r2, r4
 80045ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80045f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80045f4:	3302      	adds	r3, #2
 80045f6:	e7c7      	b.n	8004588 <_printf_common+0x58>
 80045f8:	2301      	movs	r3, #1
 80045fa:	4622      	mov	r2, r4
 80045fc:	4649      	mov	r1, r9
 80045fe:	4638      	mov	r0, r7
 8004600:	47c0      	blx	r8
 8004602:	3001      	adds	r0, #1
 8004604:	d0e6      	beq.n	80045d4 <_printf_common+0xa4>
 8004606:	3601      	adds	r6, #1
 8004608:	e7d9      	b.n	80045be <_printf_common+0x8e>
	...

0800460c <_printf_i>:
 800460c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004610:	7e0f      	ldrb	r7, [r1, #24]
 8004612:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004614:	2f78      	cmp	r7, #120	; 0x78
 8004616:	4691      	mov	r9, r2
 8004618:	4680      	mov	r8, r0
 800461a:	460c      	mov	r4, r1
 800461c:	469a      	mov	sl, r3
 800461e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004622:	d807      	bhi.n	8004634 <_printf_i+0x28>
 8004624:	2f62      	cmp	r7, #98	; 0x62
 8004626:	d80a      	bhi.n	800463e <_printf_i+0x32>
 8004628:	2f00      	cmp	r7, #0
 800462a:	f000 80d8 	beq.w	80047de <_printf_i+0x1d2>
 800462e:	2f58      	cmp	r7, #88	; 0x58
 8004630:	f000 80a3 	beq.w	800477a <_printf_i+0x16e>
 8004634:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004638:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800463c:	e03a      	b.n	80046b4 <_printf_i+0xa8>
 800463e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004642:	2b15      	cmp	r3, #21
 8004644:	d8f6      	bhi.n	8004634 <_printf_i+0x28>
 8004646:	a101      	add	r1, pc, #4	; (adr r1, 800464c <_printf_i+0x40>)
 8004648:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800464c:	080046a5 	.word	0x080046a5
 8004650:	080046b9 	.word	0x080046b9
 8004654:	08004635 	.word	0x08004635
 8004658:	08004635 	.word	0x08004635
 800465c:	08004635 	.word	0x08004635
 8004660:	08004635 	.word	0x08004635
 8004664:	080046b9 	.word	0x080046b9
 8004668:	08004635 	.word	0x08004635
 800466c:	08004635 	.word	0x08004635
 8004670:	08004635 	.word	0x08004635
 8004674:	08004635 	.word	0x08004635
 8004678:	080047c5 	.word	0x080047c5
 800467c:	080046e9 	.word	0x080046e9
 8004680:	080047a7 	.word	0x080047a7
 8004684:	08004635 	.word	0x08004635
 8004688:	08004635 	.word	0x08004635
 800468c:	080047e7 	.word	0x080047e7
 8004690:	08004635 	.word	0x08004635
 8004694:	080046e9 	.word	0x080046e9
 8004698:	08004635 	.word	0x08004635
 800469c:	08004635 	.word	0x08004635
 80046a0:	080047af 	.word	0x080047af
 80046a4:	682b      	ldr	r3, [r5, #0]
 80046a6:	1d1a      	adds	r2, r3, #4
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	602a      	str	r2, [r5, #0]
 80046ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80046b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80046b4:	2301      	movs	r3, #1
 80046b6:	e0a3      	b.n	8004800 <_printf_i+0x1f4>
 80046b8:	6820      	ldr	r0, [r4, #0]
 80046ba:	6829      	ldr	r1, [r5, #0]
 80046bc:	0606      	lsls	r6, r0, #24
 80046be:	f101 0304 	add.w	r3, r1, #4
 80046c2:	d50a      	bpl.n	80046da <_printf_i+0xce>
 80046c4:	680e      	ldr	r6, [r1, #0]
 80046c6:	602b      	str	r3, [r5, #0]
 80046c8:	2e00      	cmp	r6, #0
 80046ca:	da03      	bge.n	80046d4 <_printf_i+0xc8>
 80046cc:	232d      	movs	r3, #45	; 0x2d
 80046ce:	4276      	negs	r6, r6
 80046d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80046d4:	485e      	ldr	r0, [pc, #376]	; (8004850 <_printf_i+0x244>)
 80046d6:	230a      	movs	r3, #10
 80046d8:	e019      	b.n	800470e <_printf_i+0x102>
 80046da:	680e      	ldr	r6, [r1, #0]
 80046dc:	602b      	str	r3, [r5, #0]
 80046de:	f010 0f40 	tst.w	r0, #64	; 0x40
 80046e2:	bf18      	it	ne
 80046e4:	b236      	sxthne	r6, r6
 80046e6:	e7ef      	b.n	80046c8 <_printf_i+0xbc>
 80046e8:	682b      	ldr	r3, [r5, #0]
 80046ea:	6820      	ldr	r0, [r4, #0]
 80046ec:	1d19      	adds	r1, r3, #4
 80046ee:	6029      	str	r1, [r5, #0]
 80046f0:	0601      	lsls	r1, r0, #24
 80046f2:	d501      	bpl.n	80046f8 <_printf_i+0xec>
 80046f4:	681e      	ldr	r6, [r3, #0]
 80046f6:	e002      	b.n	80046fe <_printf_i+0xf2>
 80046f8:	0646      	lsls	r6, r0, #25
 80046fa:	d5fb      	bpl.n	80046f4 <_printf_i+0xe8>
 80046fc:	881e      	ldrh	r6, [r3, #0]
 80046fe:	4854      	ldr	r0, [pc, #336]	; (8004850 <_printf_i+0x244>)
 8004700:	2f6f      	cmp	r7, #111	; 0x6f
 8004702:	bf0c      	ite	eq
 8004704:	2308      	moveq	r3, #8
 8004706:	230a      	movne	r3, #10
 8004708:	2100      	movs	r1, #0
 800470a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800470e:	6865      	ldr	r5, [r4, #4]
 8004710:	60a5      	str	r5, [r4, #8]
 8004712:	2d00      	cmp	r5, #0
 8004714:	bfa2      	ittt	ge
 8004716:	6821      	ldrge	r1, [r4, #0]
 8004718:	f021 0104 	bicge.w	r1, r1, #4
 800471c:	6021      	strge	r1, [r4, #0]
 800471e:	b90e      	cbnz	r6, 8004724 <_printf_i+0x118>
 8004720:	2d00      	cmp	r5, #0
 8004722:	d04d      	beq.n	80047c0 <_printf_i+0x1b4>
 8004724:	4615      	mov	r5, r2
 8004726:	fbb6 f1f3 	udiv	r1, r6, r3
 800472a:	fb03 6711 	mls	r7, r3, r1, r6
 800472e:	5dc7      	ldrb	r7, [r0, r7]
 8004730:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004734:	4637      	mov	r7, r6
 8004736:	42bb      	cmp	r3, r7
 8004738:	460e      	mov	r6, r1
 800473a:	d9f4      	bls.n	8004726 <_printf_i+0x11a>
 800473c:	2b08      	cmp	r3, #8
 800473e:	d10b      	bne.n	8004758 <_printf_i+0x14c>
 8004740:	6823      	ldr	r3, [r4, #0]
 8004742:	07de      	lsls	r6, r3, #31
 8004744:	d508      	bpl.n	8004758 <_printf_i+0x14c>
 8004746:	6923      	ldr	r3, [r4, #16]
 8004748:	6861      	ldr	r1, [r4, #4]
 800474a:	4299      	cmp	r1, r3
 800474c:	bfde      	ittt	le
 800474e:	2330      	movle	r3, #48	; 0x30
 8004750:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004754:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004758:	1b52      	subs	r2, r2, r5
 800475a:	6122      	str	r2, [r4, #16]
 800475c:	f8cd a000 	str.w	sl, [sp]
 8004760:	464b      	mov	r3, r9
 8004762:	aa03      	add	r2, sp, #12
 8004764:	4621      	mov	r1, r4
 8004766:	4640      	mov	r0, r8
 8004768:	f7ff fee2 	bl	8004530 <_printf_common>
 800476c:	3001      	adds	r0, #1
 800476e:	d14c      	bne.n	800480a <_printf_i+0x1fe>
 8004770:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004774:	b004      	add	sp, #16
 8004776:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800477a:	4835      	ldr	r0, [pc, #212]	; (8004850 <_printf_i+0x244>)
 800477c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004780:	6829      	ldr	r1, [r5, #0]
 8004782:	6823      	ldr	r3, [r4, #0]
 8004784:	f851 6b04 	ldr.w	r6, [r1], #4
 8004788:	6029      	str	r1, [r5, #0]
 800478a:	061d      	lsls	r5, r3, #24
 800478c:	d514      	bpl.n	80047b8 <_printf_i+0x1ac>
 800478e:	07df      	lsls	r7, r3, #31
 8004790:	bf44      	itt	mi
 8004792:	f043 0320 	orrmi.w	r3, r3, #32
 8004796:	6023      	strmi	r3, [r4, #0]
 8004798:	b91e      	cbnz	r6, 80047a2 <_printf_i+0x196>
 800479a:	6823      	ldr	r3, [r4, #0]
 800479c:	f023 0320 	bic.w	r3, r3, #32
 80047a0:	6023      	str	r3, [r4, #0]
 80047a2:	2310      	movs	r3, #16
 80047a4:	e7b0      	b.n	8004708 <_printf_i+0xfc>
 80047a6:	6823      	ldr	r3, [r4, #0]
 80047a8:	f043 0320 	orr.w	r3, r3, #32
 80047ac:	6023      	str	r3, [r4, #0]
 80047ae:	2378      	movs	r3, #120	; 0x78
 80047b0:	4828      	ldr	r0, [pc, #160]	; (8004854 <_printf_i+0x248>)
 80047b2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80047b6:	e7e3      	b.n	8004780 <_printf_i+0x174>
 80047b8:	0659      	lsls	r1, r3, #25
 80047ba:	bf48      	it	mi
 80047bc:	b2b6      	uxthmi	r6, r6
 80047be:	e7e6      	b.n	800478e <_printf_i+0x182>
 80047c0:	4615      	mov	r5, r2
 80047c2:	e7bb      	b.n	800473c <_printf_i+0x130>
 80047c4:	682b      	ldr	r3, [r5, #0]
 80047c6:	6826      	ldr	r6, [r4, #0]
 80047c8:	6961      	ldr	r1, [r4, #20]
 80047ca:	1d18      	adds	r0, r3, #4
 80047cc:	6028      	str	r0, [r5, #0]
 80047ce:	0635      	lsls	r5, r6, #24
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	d501      	bpl.n	80047d8 <_printf_i+0x1cc>
 80047d4:	6019      	str	r1, [r3, #0]
 80047d6:	e002      	b.n	80047de <_printf_i+0x1d2>
 80047d8:	0670      	lsls	r0, r6, #25
 80047da:	d5fb      	bpl.n	80047d4 <_printf_i+0x1c8>
 80047dc:	8019      	strh	r1, [r3, #0]
 80047de:	2300      	movs	r3, #0
 80047e0:	6123      	str	r3, [r4, #16]
 80047e2:	4615      	mov	r5, r2
 80047e4:	e7ba      	b.n	800475c <_printf_i+0x150>
 80047e6:	682b      	ldr	r3, [r5, #0]
 80047e8:	1d1a      	adds	r2, r3, #4
 80047ea:	602a      	str	r2, [r5, #0]
 80047ec:	681d      	ldr	r5, [r3, #0]
 80047ee:	6862      	ldr	r2, [r4, #4]
 80047f0:	2100      	movs	r1, #0
 80047f2:	4628      	mov	r0, r5
 80047f4:	f7fb fd14 	bl	8000220 <memchr>
 80047f8:	b108      	cbz	r0, 80047fe <_printf_i+0x1f2>
 80047fa:	1b40      	subs	r0, r0, r5
 80047fc:	6060      	str	r0, [r4, #4]
 80047fe:	6863      	ldr	r3, [r4, #4]
 8004800:	6123      	str	r3, [r4, #16]
 8004802:	2300      	movs	r3, #0
 8004804:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004808:	e7a8      	b.n	800475c <_printf_i+0x150>
 800480a:	6923      	ldr	r3, [r4, #16]
 800480c:	462a      	mov	r2, r5
 800480e:	4649      	mov	r1, r9
 8004810:	4640      	mov	r0, r8
 8004812:	47d0      	blx	sl
 8004814:	3001      	adds	r0, #1
 8004816:	d0ab      	beq.n	8004770 <_printf_i+0x164>
 8004818:	6823      	ldr	r3, [r4, #0]
 800481a:	079b      	lsls	r3, r3, #30
 800481c:	d413      	bmi.n	8004846 <_printf_i+0x23a>
 800481e:	68e0      	ldr	r0, [r4, #12]
 8004820:	9b03      	ldr	r3, [sp, #12]
 8004822:	4298      	cmp	r0, r3
 8004824:	bfb8      	it	lt
 8004826:	4618      	movlt	r0, r3
 8004828:	e7a4      	b.n	8004774 <_printf_i+0x168>
 800482a:	2301      	movs	r3, #1
 800482c:	4632      	mov	r2, r6
 800482e:	4649      	mov	r1, r9
 8004830:	4640      	mov	r0, r8
 8004832:	47d0      	blx	sl
 8004834:	3001      	adds	r0, #1
 8004836:	d09b      	beq.n	8004770 <_printf_i+0x164>
 8004838:	3501      	adds	r5, #1
 800483a:	68e3      	ldr	r3, [r4, #12]
 800483c:	9903      	ldr	r1, [sp, #12]
 800483e:	1a5b      	subs	r3, r3, r1
 8004840:	42ab      	cmp	r3, r5
 8004842:	dcf2      	bgt.n	800482a <_printf_i+0x21e>
 8004844:	e7eb      	b.n	800481e <_printf_i+0x212>
 8004846:	2500      	movs	r5, #0
 8004848:	f104 0619 	add.w	r6, r4, #25
 800484c:	e7f5      	b.n	800483a <_printf_i+0x22e>
 800484e:	bf00      	nop
 8004850:	08008c8e 	.word	0x08008c8e
 8004854:	08008c9f 	.word	0x08008c9f

08004858 <_scanf_float>:
 8004858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800485c:	b087      	sub	sp, #28
 800485e:	4617      	mov	r7, r2
 8004860:	9303      	str	r3, [sp, #12]
 8004862:	688b      	ldr	r3, [r1, #8]
 8004864:	1e5a      	subs	r2, r3, #1
 8004866:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800486a:	bf83      	ittte	hi
 800486c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8004870:	195b      	addhi	r3, r3, r5
 8004872:	9302      	strhi	r3, [sp, #8]
 8004874:	2300      	movls	r3, #0
 8004876:	bf86      	itte	hi
 8004878:	f240 135d 	movwhi	r3, #349	; 0x15d
 800487c:	608b      	strhi	r3, [r1, #8]
 800487e:	9302      	strls	r3, [sp, #8]
 8004880:	680b      	ldr	r3, [r1, #0]
 8004882:	468b      	mov	fp, r1
 8004884:	2500      	movs	r5, #0
 8004886:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800488a:	f84b 3b1c 	str.w	r3, [fp], #28
 800488e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8004892:	4680      	mov	r8, r0
 8004894:	460c      	mov	r4, r1
 8004896:	465e      	mov	r6, fp
 8004898:	46aa      	mov	sl, r5
 800489a:	46a9      	mov	r9, r5
 800489c:	9501      	str	r5, [sp, #4]
 800489e:	68a2      	ldr	r2, [r4, #8]
 80048a0:	b152      	cbz	r2, 80048b8 <_scanf_float+0x60>
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	781b      	ldrb	r3, [r3, #0]
 80048a6:	2b4e      	cmp	r3, #78	; 0x4e
 80048a8:	d864      	bhi.n	8004974 <_scanf_float+0x11c>
 80048aa:	2b40      	cmp	r3, #64	; 0x40
 80048ac:	d83c      	bhi.n	8004928 <_scanf_float+0xd0>
 80048ae:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80048b2:	b2c8      	uxtb	r0, r1
 80048b4:	280e      	cmp	r0, #14
 80048b6:	d93a      	bls.n	800492e <_scanf_float+0xd6>
 80048b8:	f1b9 0f00 	cmp.w	r9, #0
 80048bc:	d003      	beq.n	80048c6 <_scanf_float+0x6e>
 80048be:	6823      	ldr	r3, [r4, #0]
 80048c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80048c4:	6023      	str	r3, [r4, #0]
 80048c6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80048ca:	f1ba 0f01 	cmp.w	sl, #1
 80048ce:	f200 8113 	bhi.w	8004af8 <_scanf_float+0x2a0>
 80048d2:	455e      	cmp	r6, fp
 80048d4:	f200 8105 	bhi.w	8004ae2 <_scanf_float+0x28a>
 80048d8:	2501      	movs	r5, #1
 80048da:	4628      	mov	r0, r5
 80048dc:	b007      	add	sp, #28
 80048de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048e2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80048e6:	2a0d      	cmp	r2, #13
 80048e8:	d8e6      	bhi.n	80048b8 <_scanf_float+0x60>
 80048ea:	a101      	add	r1, pc, #4	; (adr r1, 80048f0 <_scanf_float+0x98>)
 80048ec:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80048f0:	08004a2f 	.word	0x08004a2f
 80048f4:	080048b9 	.word	0x080048b9
 80048f8:	080048b9 	.word	0x080048b9
 80048fc:	080048b9 	.word	0x080048b9
 8004900:	08004a8f 	.word	0x08004a8f
 8004904:	08004a67 	.word	0x08004a67
 8004908:	080048b9 	.word	0x080048b9
 800490c:	080048b9 	.word	0x080048b9
 8004910:	08004a3d 	.word	0x08004a3d
 8004914:	080048b9 	.word	0x080048b9
 8004918:	080048b9 	.word	0x080048b9
 800491c:	080048b9 	.word	0x080048b9
 8004920:	080048b9 	.word	0x080048b9
 8004924:	080049f5 	.word	0x080049f5
 8004928:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800492c:	e7db      	b.n	80048e6 <_scanf_float+0x8e>
 800492e:	290e      	cmp	r1, #14
 8004930:	d8c2      	bhi.n	80048b8 <_scanf_float+0x60>
 8004932:	a001      	add	r0, pc, #4	; (adr r0, 8004938 <_scanf_float+0xe0>)
 8004934:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004938:	080049e7 	.word	0x080049e7
 800493c:	080048b9 	.word	0x080048b9
 8004940:	080049e7 	.word	0x080049e7
 8004944:	08004a7b 	.word	0x08004a7b
 8004948:	080048b9 	.word	0x080048b9
 800494c:	08004995 	.word	0x08004995
 8004950:	080049d1 	.word	0x080049d1
 8004954:	080049d1 	.word	0x080049d1
 8004958:	080049d1 	.word	0x080049d1
 800495c:	080049d1 	.word	0x080049d1
 8004960:	080049d1 	.word	0x080049d1
 8004964:	080049d1 	.word	0x080049d1
 8004968:	080049d1 	.word	0x080049d1
 800496c:	080049d1 	.word	0x080049d1
 8004970:	080049d1 	.word	0x080049d1
 8004974:	2b6e      	cmp	r3, #110	; 0x6e
 8004976:	d809      	bhi.n	800498c <_scanf_float+0x134>
 8004978:	2b60      	cmp	r3, #96	; 0x60
 800497a:	d8b2      	bhi.n	80048e2 <_scanf_float+0x8a>
 800497c:	2b54      	cmp	r3, #84	; 0x54
 800497e:	d077      	beq.n	8004a70 <_scanf_float+0x218>
 8004980:	2b59      	cmp	r3, #89	; 0x59
 8004982:	d199      	bne.n	80048b8 <_scanf_float+0x60>
 8004984:	2d07      	cmp	r5, #7
 8004986:	d197      	bne.n	80048b8 <_scanf_float+0x60>
 8004988:	2508      	movs	r5, #8
 800498a:	e029      	b.n	80049e0 <_scanf_float+0x188>
 800498c:	2b74      	cmp	r3, #116	; 0x74
 800498e:	d06f      	beq.n	8004a70 <_scanf_float+0x218>
 8004990:	2b79      	cmp	r3, #121	; 0x79
 8004992:	e7f6      	b.n	8004982 <_scanf_float+0x12a>
 8004994:	6821      	ldr	r1, [r4, #0]
 8004996:	05c8      	lsls	r0, r1, #23
 8004998:	d51a      	bpl.n	80049d0 <_scanf_float+0x178>
 800499a:	9b02      	ldr	r3, [sp, #8]
 800499c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80049a0:	6021      	str	r1, [r4, #0]
 80049a2:	f109 0901 	add.w	r9, r9, #1
 80049a6:	b11b      	cbz	r3, 80049b0 <_scanf_float+0x158>
 80049a8:	3b01      	subs	r3, #1
 80049aa:	3201      	adds	r2, #1
 80049ac:	9302      	str	r3, [sp, #8]
 80049ae:	60a2      	str	r2, [r4, #8]
 80049b0:	68a3      	ldr	r3, [r4, #8]
 80049b2:	3b01      	subs	r3, #1
 80049b4:	60a3      	str	r3, [r4, #8]
 80049b6:	6923      	ldr	r3, [r4, #16]
 80049b8:	3301      	adds	r3, #1
 80049ba:	6123      	str	r3, [r4, #16]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	3b01      	subs	r3, #1
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	607b      	str	r3, [r7, #4]
 80049c4:	f340 8084 	ble.w	8004ad0 <_scanf_float+0x278>
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	3301      	adds	r3, #1
 80049cc:	603b      	str	r3, [r7, #0]
 80049ce:	e766      	b.n	800489e <_scanf_float+0x46>
 80049d0:	eb1a 0f05 	cmn.w	sl, r5
 80049d4:	f47f af70 	bne.w	80048b8 <_scanf_float+0x60>
 80049d8:	6822      	ldr	r2, [r4, #0]
 80049da:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80049de:	6022      	str	r2, [r4, #0]
 80049e0:	f806 3b01 	strb.w	r3, [r6], #1
 80049e4:	e7e4      	b.n	80049b0 <_scanf_float+0x158>
 80049e6:	6822      	ldr	r2, [r4, #0]
 80049e8:	0610      	lsls	r0, r2, #24
 80049ea:	f57f af65 	bpl.w	80048b8 <_scanf_float+0x60>
 80049ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80049f2:	e7f4      	b.n	80049de <_scanf_float+0x186>
 80049f4:	f1ba 0f00 	cmp.w	sl, #0
 80049f8:	d10e      	bne.n	8004a18 <_scanf_float+0x1c0>
 80049fa:	f1b9 0f00 	cmp.w	r9, #0
 80049fe:	d10e      	bne.n	8004a1e <_scanf_float+0x1c6>
 8004a00:	6822      	ldr	r2, [r4, #0]
 8004a02:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004a06:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004a0a:	d108      	bne.n	8004a1e <_scanf_float+0x1c6>
 8004a0c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004a10:	6022      	str	r2, [r4, #0]
 8004a12:	f04f 0a01 	mov.w	sl, #1
 8004a16:	e7e3      	b.n	80049e0 <_scanf_float+0x188>
 8004a18:	f1ba 0f02 	cmp.w	sl, #2
 8004a1c:	d055      	beq.n	8004aca <_scanf_float+0x272>
 8004a1e:	2d01      	cmp	r5, #1
 8004a20:	d002      	beq.n	8004a28 <_scanf_float+0x1d0>
 8004a22:	2d04      	cmp	r5, #4
 8004a24:	f47f af48 	bne.w	80048b8 <_scanf_float+0x60>
 8004a28:	3501      	adds	r5, #1
 8004a2a:	b2ed      	uxtb	r5, r5
 8004a2c:	e7d8      	b.n	80049e0 <_scanf_float+0x188>
 8004a2e:	f1ba 0f01 	cmp.w	sl, #1
 8004a32:	f47f af41 	bne.w	80048b8 <_scanf_float+0x60>
 8004a36:	f04f 0a02 	mov.w	sl, #2
 8004a3a:	e7d1      	b.n	80049e0 <_scanf_float+0x188>
 8004a3c:	b97d      	cbnz	r5, 8004a5e <_scanf_float+0x206>
 8004a3e:	f1b9 0f00 	cmp.w	r9, #0
 8004a42:	f47f af3c 	bne.w	80048be <_scanf_float+0x66>
 8004a46:	6822      	ldr	r2, [r4, #0]
 8004a48:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004a4c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004a50:	f47f af39 	bne.w	80048c6 <_scanf_float+0x6e>
 8004a54:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004a58:	6022      	str	r2, [r4, #0]
 8004a5a:	2501      	movs	r5, #1
 8004a5c:	e7c0      	b.n	80049e0 <_scanf_float+0x188>
 8004a5e:	2d03      	cmp	r5, #3
 8004a60:	d0e2      	beq.n	8004a28 <_scanf_float+0x1d0>
 8004a62:	2d05      	cmp	r5, #5
 8004a64:	e7de      	b.n	8004a24 <_scanf_float+0x1cc>
 8004a66:	2d02      	cmp	r5, #2
 8004a68:	f47f af26 	bne.w	80048b8 <_scanf_float+0x60>
 8004a6c:	2503      	movs	r5, #3
 8004a6e:	e7b7      	b.n	80049e0 <_scanf_float+0x188>
 8004a70:	2d06      	cmp	r5, #6
 8004a72:	f47f af21 	bne.w	80048b8 <_scanf_float+0x60>
 8004a76:	2507      	movs	r5, #7
 8004a78:	e7b2      	b.n	80049e0 <_scanf_float+0x188>
 8004a7a:	6822      	ldr	r2, [r4, #0]
 8004a7c:	0591      	lsls	r1, r2, #22
 8004a7e:	f57f af1b 	bpl.w	80048b8 <_scanf_float+0x60>
 8004a82:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8004a86:	6022      	str	r2, [r4, #0]
 8004a88:	f8cd 9004 	str.w	r9, [sp, #4]
 8004a8c:	e7a8      	b.n	80049e0 <_scanf_float+0x188>
 8004a8e:	6822      	ldr	r2, [r4, #0]
 8004a90:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8004a94:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8004a98:	d006      	beq.n	8004aa8 <_scanf_float+0x250>
 8004a9a:	0550      	lsls	r0, r2, #21
 8004a9c:	f57f af0c 	bpl.w	80048b8 <_scanf_float+0x60>
 8004aa0:	f1b9 0f00 	cmp.w	r9, #0
 8004aa4:	f43f af0f 	beq.w	80048c6 <_scanf_float+0x6e>
 8004aa8:	0591      	lsls	r1, r2, #22
 8004aaa:	bf58      	it	pl
 8004aac:	9901      	ldrpl	r1, [sp, #4]
 8004aae:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004ab2:	bf58      	it	pl
 8004ab4:	eba9 0101 	subpl.w	r1, r9, r1
 8004ab8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8004abc:	bf58      	it	pl
 8004abe:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8004ac2:	6022      	str	r2, [r4, #0]
 8004ac4:	f04f 0900 	mov.w	r9, #0
 8004ac8:	e78a      	b.n	80049e0 <_scanf_float+0x188>
 8004aca:	f04f 0a03 	mov.w	sl, #3
 8004ace:	e787      	b.n	80049e0 <_scanf_float+0x188>
 8004ad0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004ad4:	4639      	mov	r1, r7
 8004ad6:	4640      	mov	r0, r8
 8004ad8:	4798      	blx	r3
 8004ada:	2800      	cmp	r0, #0
 8004adc:	f43f aedf 	beq.w	800489e <_scanf_float+0x46>
 8004ae0:	e6ea      	b.n	80048b8 <_scanf_float+0x60>
 8004ae2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004ae6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004aea:	463a      	mov	r2, r7
 8004aec:	4640      	mov	r0, r8
 8004aee:	4798      	blx	r3
 8004af0:	6923      	ldr	r3, [r4, #16]
 8004af2:	3b01      	subs	r3, #1
 8004af4:	6123      	str	r3, [r4, #16]
 8004af6:	e6ec      	b.n	80048d2 <_scanf_float+0x7a>
 8004af8:	1e6b      	subs	r3, r5, #1
 8004afa:	2b06      	cmp	r3, #6
 8004afc:	d825      	bhi.n	8004b4a <_scanf_float+0x2f2>
 8004afe:	2d02      	cmp	r5, #2
 8004b00:	d836      	bhi.n	8004b70 <_scanf_float+0x318>
 8004b02:	455e      	cmp	r6, fp
 8004b04:	f67f aee8 	bls.w	80048d8 <_scanf_float+0x80>
 8004b08:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004b0c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004b10:	463a      	mov	r2, r7
 8004b12:	4640      	mov	r0, r8
 8004b14:	4798      	blx	r3
 8004b16:	6923      	ldr	r3, [r4, #16]
 8004b18:	3b01      	subs	r3, #1
 8004b1a:	6123      	str	r3, [r4, #16]
 8004b1c:	e7f1      	b.n	8004b02 <_scanf_float+0x2aa>
 8004b1e:	9802      	ldr	r0, [sp, #8]
 8004b20:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004b24:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8004b28:	9002      	str	r0, [sp, #8]
 8004b2a:	463a      	mov	r2, r7
 8004b2c:	4640      	mov	r0, r8
 8004b2e:	4798      	blx	r3
 8004b30:	6923      	ldr	r3, [r4, #16]
 8004b32:	3b01      	subs	r3, #1
 8004b34:	6123      	str	r3, [r4, #16]
 8004b36:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004b3a:	fa5f fa8a 	uxtb.w	sl, sl
 8004b3e:	f1ba 0f02 	cmp.w	sl, #2
 8004b42:	d1ec      	bne.n	8004b1e <_scanf_float+0x2c6>
 8004b44:	3d03      	subs	r5, #3
 8004b46:	b2ed      	uxtb	r5, r5
 8004b48:	1b76      	subs	r6, r6, r5
 8004b4a:	6823      	ldr	r3, [r4, #0]
 8004b4c:	05da      	lsls	r2, r3, #23
 8004b4e:	d52f      	bpl.n	8004bb0 <_scanf_float+0x358>
 8004b50:	055b      	lsls	r3, r3, #21
 8004b52:	d510      	bpl.n	8004b76 <_scanf_float+0x31e>
 8004b54:	455e      	cmp	r6, fp
 8004b56:	f67f aebf 	bls.w	80048d8 <_scanf_float+0x80>
 8004b5a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004b5e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004b62:	463a      	mov	r2, r7
 8004b64:	4640      	mov	r0, r8
 8004b66:	4798      	blx	r3
 8004b68:	6923      	ldr	r3, [r4, #16]
 8004b6a:	3b01      	subs	r3, #1
 8004b6c:	6123      	str	r3, [r4, #16]
 8004b6e:	e7f1      	b.n	8004b54 <_scanf_float+0x2fc>
 8004b70:	46aa      	mov	sl, r5
 8004b72:	9602      	str	r6, [sp, #8]
 8004b74:	e7df      	b.n	8004b36 <_scanf_float+0x2de>
 8004b76:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8004b7a:	6923      	ldr	r3, [r4, #16]
 8004b7c:	2965      	cmp	r1, #101	; 0x65
 8004b7e:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8004b82:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8004b86:	6123      	str	r3, [r4, #16]
 8004b88:	d00c      	beq.n	8004ba4 <_scanf_float+0x34c>
 8004b8a:	2945      	cmp	r1, #69	; 0x45
 8004b8c:	d00a      	beq.n	8004ba4 <_scanf_float+0x34c>
 8004b8e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004b92:	463a      	mov	r2, r7
 8004b94:	4640      	mov	r0, r8
 8004b96:	4798      	blx	r3
 8004b98:	6923      	ldr	r3, [r4, #16]
 8004b9a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8004b9e:	3b01      	subs	r3, #1
 8004ba0:	1eb5      	subs	r5, r6, #2
 8004ba2:	6123      	str	r3, [r4, #16]
 8004ba4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004ba8:	463a      	mov	r2, r7
 8004baa:	4640      	mov	r0, r8
 8004bac:	4798      	blx	r3
 8004bae:	462e      	mov	r6, r5
 8004bb0:	6825      	ldr	r5, [r4, #0]
 8004bb2:	f015 0510 	ands.w	r5, r5, #16
 8004bb6:	d159      	bne.n	8004c6c <_scanf_float+0x414>
 8004bb8:	7035      	strb	r5, [r6, #0]
 8004bba:	6823      	ldr	r3, [r4, #0]
 8004bbc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004bc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bc4:	d11b      	bne.n	8004bfe <_scanf_float+0x3a6>
 8004bc6:	9b01      	ldr	r3, [sp, #4]
 8004bc8:	454b      	cmp	r3, r9
 8004bca:	eba3 0209 	sub.w	r2, r3, r9
 8004bce:	d123      	bne.n	8004c18 <_scanf_float+0x3c0>
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	4659      	mov	r1, fp
 8004bd4:	4640      	mov	r0, r8
 8004bd6:	f000 ff25 	bl	8005a24 <_strtod_r>
 8004bda:	6822      	ldr	r2, [r4, #0]
 8004bdc:	9b03      	ldr	r3, [sp, #12]
 8004bde:	f012 0f02 	tst.w	r2, #2
 8004be2:	ec57 6b10 	vmov	r6, r7, d0
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	d021      	beq.n	8004c2e <_scanf_float+0x3d6>
 8004bea:	9903      	ldr	r1, [sp, #12]
 8004bec:	1d1a      	adds	r2, r3, #4
 8004bee:	600a      	str	r2, [r1, #0]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	e9c3 6700 	strd	r6, r7, [r3]
 8004bf6:	68e3      	ldr	r3, [r4, #12]
 8004bf8:	3301      	adds	r3, #1
 8004bfa:	60e3      	str	r3, [r4, #12]
 8004bfc:	e66d      	b.n	80048da <_scanf_float+0x82>
 8004bfe:	9b04      	ldr	r3, [sp, #16]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d0e5      	beq.n	8004bd0 <_scanf_float+0x378>
 8004c04:	9905      	ldr	r1, [sp, #20]
 8004c06:	230a      	movs	r3, #10
 8004c08:	462a      	mov	r2, r5
 8004c0a:	3101      	adds	r1, #1
 8004c0c:	4640      	mov	r0, r8
 8004c0e:	f000 ff91 	bl	8005b34 <_strtol_r>
 8004c12:	9b04      	ldr	r3, [sp, #16]
 8004c14:	9e05      	ldr	r6, [sp, #20]
 8004c16:	1ac2      	subs	r2, r0, r3
 8004c18:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8004c1c:	429e      	cmp	r6, r3
 8004c1e:	bf28      	it	cs
 8004c20:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8004c24:	4912      	ldr	r1, [pc, #72]	; (8004c70 <_scanf_float+0x418>)
 8004c26:	4630      	mov	r0, r6
 8004c28:	f000 f8ba 	bl	8004da0 <siprintf>
 8004c2c:	e7d0      	b.n	8004bd0 <_scanf_float+0x378>
 8004c2e:	9903      	ldr	r1, [sp, #12]
 8004c30:	f012 0f04 	tst.w	r2, #4
 8004c34:	f103 0204 	add.w	r2, r3, #4
 8004c38:	600a      	str	r2, [r1, #0]
 8004c3a:	d1d9      	bne.n	8004bf0 <_scanf_float+0x398>
 8004c3c:	f8d3 8000 	ldr.w	r8, [r3]
 8004c40:	ee10 2a10 	vmov	r2, s0
 8004c44:	ee10 0a10 	vmov	r0, s0
 8004c48:	463b      	mov	r3, r7
 8004c4a:	4639      	mov	r1, r7
 8004c4c:	f7fb ff8e 	bl	8000b6c <__aeabi_dcmpun>
 8004c50:	b128      	cbz	r0, 8004c5e <_scanf_float+0x406>
 8004c52:	4808      	ldr	r0, [pc, #32]	; (8004c74 <_scanf_float+0x41c>)
 8004c54:	f000 f89e 	bl	8004d94 <nanf>
 8004c58:	ed88 0a00 	vstr	s0, [r8]
 8004c5c:	e7cb      	b.n	8004bf6 <_scanf_float+0x39e>
 8004c5e:	4630      	mov	r0, r6
 8004c60:	4639      	mov	r1, r7
 8004c62:	f7fb ffe1 	bl	8000c28 <__aeabi_d2f>
 8004c66:	f8c8 0000 	str.w	r0, [r8]
 8004c6a:	e7c4      	b.n	8004bf6 <_scanf_float+0x39e>
 8004c6c:	2500      	movs	r5, #0
 8004c6e:	e634      	b.n	80048da <_scanf_float+0x82>
 8004c70:	08008cb0 	.word	0x08008cb0
 8004c74:	08009120 	.word	0x08009120

08004c78 <iprintf>:
 8004c78:	b40f      	push	{r0, r1, r2, r3}
 8004c7a:	4b0a      	ldr	r3, [pc, #40]	; (8004ca4 <iprintf+0x2c>)
 8004c7c:	b513      	push	{r0, r1, r4, lr}
 8004c7e:	681c      	ldr	r4, [r3, #0]
 8004c80:	b124      	cbz	r4, 8004c8c <iprintf+0x14>
 8004c82:	69a3      	ldr	r3, [r4, #24]
 8004c84:	b913      	cbnz	r3, 8004c8c <iprintf+0x14>
 8004c86:	4620      	mov	r0, r4
 8004c88:	f001 ffaa 	bl	8006be0 <__sinit>
 8004c8c:	ab05      	add	r3, sp, #20
 8004c8e:	9a04      	ldr	r2, [sp, #16]
 8004c90:	68a1      	ldr	r1, [r4, #8]
 8004c92:	9301      	str	r3, [sp, #4]
 8004c94:	4620      	mov	r0, r4
 8004c96:	f003 fb81 	bl	800839c <_vfiprintf_r>
 8004c9a:	b002      	add	sp, #8
 8004c9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ca0:	b004      	add	sp, #16
 8004ca2:	4770      	bx	lr
 8004ca4:	2000000c 	.word	0x2000000c

08004ca8 <_puts_r>:
 8004ca8:	b570      	push	{r4, r5, r6, lr}
 8004caa:	460e      	mov	r6, r1
 8004cac:	4605      	mov	r5, r0
 8004cae:	b118      	cbz	r0, 8004cb8 <_puts_r+0x10>
 8004cb0:	6983      	ldr	r3, [r0, #24]
 8004cb2:	b90b      	cbnz	r3, 8004cb8 <_puts_r+0x10>
 8004cb4:	f001 ff94 	bl	8006be0 <__sinit>
 8004cb8:	69ab      	ldr	r3, [r5, #24]
 8004cba:	68ac      	ldr	r4, [r5, #8]
 8004cbc:	b913      	cbnz	r3, 8004cc4 <_puts_r+0x1c>
 8004cbe:	4628      	mov	r0, r5
 8004cc0:	f001 ff8e 	bl	8006be0 <__sinit>
 8004cc4:	4b2c      	ldr	r3, [pc, #176]	; (8004d78 <_puts_r+0xd0>)
 8004cc6:	429c      	cmp	r4, r3
 8004cc8:	d120      	bne.n	8004d0c <_puts_r+0x64>
 8004cca:	686c      	ldr	r4, [r5, #4]
 8004ccc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004cce:	07db      	lsls	r3, r3, #31
 8004cd0:	d405      	bmi.n	8004cde <_puts_r+0x36>
 8004cd2:	89a3      	ldrh	r3, [r4, #12]
 8004cd4:	0598      	lsls	r0, r3, #22
 8004cd6:	d402      	bmi.n	8004cde <_puts_r+0x36>
 8004cd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004cda:	f002 fb92 	bl	8007402 <__retarget_lock_acquire_recursive>
 8004cde:	89a3      	ldrh	r3, [r4, #12]
 8004ce0:	0719      	lsls	r1, r3, #28
 8004ce2:	d51d      	bpl.n	8004d20 <_puts_r+0x78>
 8004ce4:	6923      	ldr	r3, [r4, #16]
 8004ce6:	b1db      	cbz	r3, 8004d20 <_puts_r+0x78>
 8004ce8:	3e01      	subs	r6, #1
 8004cea:	68a3      	ldr	r3, [r4, #8]
 8004cec:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004cf0:	3b01      	subs	r3, #1
 8004cf2:	60a3      	str	r3, [r4, #8]
 8004cf4:	bb39      	cbnz	r1, 8004d46 <_puts_r+0x9e>
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	da38      	bge.n	8004d6c <_puts_r+0xc4>
 8004cfa:	4622      	mov	r2, r4
 8004cfc:	210a      	movs	r1, #10
 8004cfe:	4628      	mov	r0, r5
 8004d00:	f000 ff1a 	bl	8005b38 <__swbuf_r>
 8004d04:	3001      	adds	r0, #1
 8004d06:	d011      	beq.n	8004d2c <_puts_r+0x84>
 8004d08:	250a      	movs	r5, #10
 8004d0a:	e011      	b.n	8004d30 <_puts_r+0x88>
 8004d0c:	4b1b      	ldr	r3, [pc, #108]	; (8004d7c <_puts_r+0xd4>)
 8004d0e:	429c      	cmp	r4, r3
 8004d10:	d101      	bne.n	8004d16 <_puts_r+0x6e>
 8004d12:	68ac      	ldr	r4, [r5, #8]
 8004d14:	e7da      	b.n	8004ccc <_puts_r+0x24>
 8004d16:	4b1a      	ldr	r3, [pc, #104]	; (8004d80 <_puts_r+0xd8>)
 8004d18:	429c      	cmp	r4, r3
 8004d1a:	bf08      	it	eq
 8004d1c:	68ec      	ldreq	r4, [r5, #12]
 8004d1e:	e7d5      	b.n	8004ccc <_puts_r+0x24>
 8004d20:	4621      	mov	r1, r4
 8004d22:	4628      	mov	r0, r5
 8004d24:	f000 ff5a 	bl	8005bdc <__swsetup_r>
 8004d28:	2800      	cmp	r0, #0
 8004d2a:	d0dd      	beq.n	8004ce8 <_puts_r+0x40>
 8004d2c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004d30:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004d32:	07da      	lsls	r2, r3, #31
 8004d34:	d405      	bmi.n	8004d42 <_puts_r+0x9a>
 8004d36:	89a3      	ldrh	r3, [r4, #12]
 8004d38:	059b      	lsls	r3, r3, #22
 8004d3a:	d402      	bmi.n	8004d42 <_puts_r+0x9a>
 8004d3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004d3e:	f002 fb61 	bl	8007404 <__retarget_lock_release_recursive>
 8004d42:	4628      	mov	r0, r5
 8004d44:	bd70      	pop	{r4, r5, r6, pc}
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	da04      	bge.n	8004d54 <_puts_r+0xac>
 8004d4a:	69a2      	ldr	r2, [r4, #24]
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	dc06      	bgt.n	8004d5e <_puts_r+0xb6>
 8004d50:	290a      	cmp	r1, #10
 8004d52:	d004      	beq.n	8004d5e <_puts_r+0xb6>
 8004d54:	6823      	ldr	r3, [r4, #0]
 8004d56:	1c5a      	adds	r2, r3, #1
 8004d58:	6022      	str	r2, [r4, #0]
 8004d5a:	7019      	strb	r1, [r3, #0]
 8004d5c:	e7c5      	b.n	8004cea <_puts_r+0x42>
 8004d5e:	4622      	mov	r2, r4
 8004d60:	4628      	mov	r0, r5
 8004d62:	f000 fee9 	bl	8005b38 <__swbuf_r>
 8004d66:	3001      	adds	r0, #1
 8004d68:	d1bf      	bne.n	8004cea <_puts_r+0x42>
 8004d6a:	e7df      	b.n	8004d2c <_puts_r+0x84>
 8004d6c:	6823      	ldr	r3, [r4, #0]
 8004d6e:	250a      	movs	r5, #10
 8004d70:	1c5a      	adds	r2, r3, #1
 8004d72:	6022      	str	r2, [r4, #0]
 8004d74:	701d      	strb	r5, [r3, #0]
 8004d76:	e7db      	b.n	8004d30 <_puts_r+0x88>
 8004d78:	08008ebc 	.word	0x08008ebc
 8004d7c:	08008edc 	.word	0x08008edc
 8004d80:	08008e9c 	.word	0x08008e9c

08004d84 <puts>:
 8004d84:	4b02      	ldr	r3, [pc, #8]	; (8004d90 <puts+0xc>)
 8004d86:	4601      	mov	r1, r0
 8004d88:	6818      	ldr	r0, [r3, #0]
 8004d8a:	f7ff bf8d 	b.w	8004ca8 <_puts_r>
 8004d8e:	bf00      	nop
 8004d90:	2000000c 	.word	0x2000000c

08004d94 <nanf>:
 8004d94:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8004d9c <nanf+0x8>
 8004d98:	4770      	bx	lr
 8004d9a:	bf00      	nop
 8004d9c:	7fc00000 	.word	0x7fc00000

08004da0 <siprintf>:
 8004da0:	b40e      	push	{r1, r2, r3}
 8004da2:	b500      	push	{lr}
 8004da4:	b09c      	sub	sp, #112	; 0x70
 8004da6:	ab1d      	add	r3, sp, #116	; 0x74
 8004da8:	9002      	str	r0, [sp, #8]
 8004daa:	9006      	str	r0, [sp, #24]
 8004dac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004db0:	4809      	ldr	r0, [pc, #36]	; (8004dd8 <siprintf+0x38>)
 8004db2:	9107      	str	r1, [sp, #28]
 8004db4:	9104      	str	r1, [sp, #16]
 8004db6:	4909      	ldr	r1, [pc, #36]	; (8004ddc <siprintf+0x3c>)
 8004db8:	f853 2b04 	ldr.w	r2, [r3], #4
 8004dbc:	9105      	str	r1, [sp, #20]
 8004dbe:	6800      	ldr	r0, [r0, #0]
 8004dc0:	9301      	str	r3, [sp, #4]
 8004dc2:	a902      	add	r1, sp, #8
 8004dc4:	f003 f9c0 	bl	8008148 <_svfiprintf_r>
 8004dc8:	9b02      	ldr	r3, [sp, #8]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	701a      	strb	r2, [r3, #0]
 8004dce:	b01c      	add	sp, #112	; 0x70
 8004dd0:	f85d eb04 	ldr.w	lr, [sp], #4
 8004dd4:	b003      	add	sp, #12
 8004dd6:	4770      	bx	lr
 8004dd8:	2000000c 	.word	0x2000000c
 8004ddc:	ffff0208 	.word	0xffff0208

08004de0 <sulp>:
 8004de0:	b570      	push	{r4, r5, r6, lr}
 8004de2:	4604      	mov	r4, r0
 8004de4:	460d      	mov	r5, r1
 8004de6:	ec45 4b10 	vmov	d0, r4, r5
 8004dea:	4616      	mov	r6, r2
 8004dec:	f002 ff0a 	bl	8007c04 <__ulp>
 8004df0:	ec51 0b10 	vmov	r0, r1, d0
 8004df4:	b17e      	cbz	r6, 8004e16 <sulp+0x36>
 8004df6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8004dfa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	dd09      	ble.n	8004e16 <sulp+0x36>
 8004e02:	051b      	lsls	r3, r3, #20
 8004e04:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8004e08:	2400      	movs	r4, #0
 8004e0a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8004e0e:	4622      	mov	r2, r4
 8004e10:	462b      	mov	r3, r5
 8004e12:	f7fb fc11 	bl	8000638 <__aeabi_dmul>
 8004e16:	bd70      	pop	{r4, r5, r6, pc}

08004e18 <_strtod_l>:
 8004e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e1c:	ed2d 8b02 	vpush	{d8}
 8004e20:	b09d      	sub	sp, #116	; 0x74
 8004e22:	461f      	mov	r7, r3
 8004e24:	2300      	movs	r3, #0
 8004e26:	9318      	str	r3, [sp, #96]	; 0x60
 8004e28:	4ba2      	ldr	r3, [pc, #648]	; (80050b4 <_strtod_l+0x29c>)
 8004e2a:	9213      	str	r2, [sp, #76]	; 0x4c
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	9305      	str	r3, [sp, #20]
 8004e30:	4604      	mov	r4, r0
 8004e32:	4618      	mov	r0, r3
 8004e34:	4688      	mov	r8, r1
 8004e36:	f7fb f9eb 	bl	8000210 <strlen>
 8004e3a:	f04f 0a00 	mov.w	sl, #0
 8004e3e:	4605      	mov	r5, r0
 8004e40:	f04f 0b00 	mov.w	fp, #0
 8004e44:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8004e48:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004e4a:	781a      	ldrb	r2, [r3, #0]
 8004e4c:	2a2b      	cmp	r2, #43	; 0x2b
 8004e4e:	d04e      	beq.n	8004eee <_strtod_l+0xd6>
 8004e50:	d83b      	bhi.n	8004eca <_strtod_l+0xb2>
 8004e52:	2a0d      	cmp	r2, #13
 8004e54:	d834      	bhi.n	8004ec0 <_strtod_l+0xa8>
 8004e56:	2a08      	cmp	r2, #8
 8004e58:	d834      	bhi.n	8004ec4 <_strtod_l+0xac>
 8004e5a:	2a00      	cmp	r2, #0
 8004e5c:	d03e      	beq.n	8004edc <_strtod_l+0xc4>
 8004e5e:	2300      	movs	r3, #0
 8004e60:	930a      	str	r3, [sp, #40]	; 0x28
 8004e62:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8004e64:	7833      	ldrb	r3, [r6, #0]
 8004e66:	2b30      	cmp	r3, #48	; 0x30
 8004e68:	f040 80b0 	bne.w	8004fcc <_strtod_l+0x1b4>
 8004e6c:	7873      	ldrb	r3, [r6, #1]
 8004e6e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8004e72:	2b58      	cmp	r3, #88	; 0x58
 8004e74:	d168      	bne.n	8004f48 <_strtod_l+0x130>
 8004e76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e78:	9301      	str	r3, [sp, #4]
 8004e7a:	ab18      	add	r3, sp, #96	; 0x60
 8004e7c:	9702      	str	r7, [sp, #8]
 8004e7e:	9300      	str	r3, [sp, #0]
 8004e80:	4a8d      	ldr	r2, [pc, #564]	; (80050b8 <_strtod_l+0x2a0>)
 8004e82:	ab19      	add	r3, sp, #100	; 0x64
 8004e84:	a917      	add	r1, sp, #92	; 0x5c
 8004e86:	4620      	mov	r0, r4
 8004e88:	f001 ffae 	bl	8006de8 <__gethex>
 8004e8c:	f010 0707 	ands.w	r7, r0, #7
 8004e90:	4605      	mov	r5, r0
 8004e92:	d005      	beq.n	8004ea0 <_strtod_l+0x88>
 8004e94:	2f06      	cmp	r7, #6
 8004e96:	d12c      	bne.n	8004ef2 <_strtod_l+0xda>
 8004e98:	3601      	adds	r6, #1
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	9617      	str	r6, [sp, #92]	; 0x5c
 8004e9e:	930a      	str	r3, [sp, #40]	; 0x28
 8004ea0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	f040 8590 	bne.w	80059c8 <_strtod_l+0xbb0>
 8004ea8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004eaa:	b1eb      	cbz	r3, 8004ee8 <_strtod_l+0xd0>
 8004eac:	4652      	mov	r2, sl
 8004eae:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8004eb2:	ec43 2b10 	vmov	d0, r2, r3
 8004eb6:	b01d      	add	sp, #116	; 0x74
 8004eb8:	ecbd 8b02 	vpop	{d8}
 8004ebc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ec0:	2a20      	cmp	r2, #32
 8004ec2:	d1cc      	bne.n	8004e5e <_strtod_l+0x46>
 8004ec4:	3301      	adds	r3, #1
 8004ec6:	9317      	str	r3, [sp, #92]	; 0x5c
 8004ec8:	e7be      	b.n	8004e48 <_strtod_l+0x30>
 8004eca:	2a2d      	cmp	r2, #45	; 0x2d
 8004ecc:	d1c7      	bne.n	8004e5e <_strtod_l+0x46>
 8004ece:	2201      	movs	r2, #1
 8004ed0:	920a      	str	r2, [sp, #40]	; 0x28
 8004ed2:	1c5a      	adds	r2, r3, #1
 8004ed4:	9217      	str	r2, [sp, #92]	; 0x5c
 8004ed6:	785b      	ldrb	r3, [r3, #1]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d1c2      	bne.n	8004e62 <_strtod_l+0x4a>
 8004edc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004ede:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	f040 856e 	bne.w	80059c4 <_strtod_l+0xbac>
 8004ee8:	4652      	mov	r2, sl
 8004eea:	465b      	mov	r3, fp
 8004eec:	e7e1      	b.n	8004eb2 <_strtod_l+0x9a>
 8004eee:	2200      	movs	r2, #0
 8004ef0:	e7ee      	b.n	8004ed0 <_strtod_l+0xb8>
 8004ef2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8004ef4:	b13a      	cbz	r2, 8004f06 <_strtod_l+0xee>
 8004ef6:	2135      	movs	r1, #53	; 0x35
 8004ef8:	a81a      	add	r0, sp, #104	; 0x68
 8004efa:	f002 ff8e 	bl	8007e1a <__copybits>
 8004efe:	9918      	ldr	r1, [sp, #96]	; 0x60
 8004f00:	4620      	mov	r0, r4
 8004f02:	f002 fb4d 	bl	80075a0 <_Bfree>
 8004f06:	3f01      	subs	r7, #1
 8004f08:	2f04      	cmp	r7, #4
 8004f0a:	d806      	bhi.n	8004f1a <_strtod_l+0x102>
 8004f0c:	e8df f007 	tbb	[pc, r7]
 8004f10:	1714030a 	.word	0x1714030a
 8004f14:	0a          	.byte	0x0a
 8004f15:	00          	.byte	0x00
 8004f16:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8004f1a:	0728      	lsls	r0, r5, #28
 8004f1c:	d5c0      	bpl.n	8004ea0 <_strtod_l+0x88>
 8004f1e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8004f22:	e7bd      	b.n	8004ea0 <_strtod_l+0x88>
 8004f24:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8004f28:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8004f2a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004f2e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8004f32:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8004f36:	e7f0      	b.n	8004f1a <_strtod_l+0x102>
 8004f38:	f8df b180 	ldr.w	fp, [pc, #384]	; 80050bc <_strtod_l+0x2a4>
 8004f3c:	e7ed      	b.n	8004f1a <_strtod_l+0x102>
 8004f3e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8004f42:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8004f46:	e7e8      	b.n	8004f1a <_strtod_l+0x102>
 8004f48:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004f4a:	1c5a      	adds	r2, r3, #1
 8004f4c:	9217      	str	r2, [sp, #92]	; 0x5c
 8004f4e:	785b      	ldrb	r3, [r3, #1]
 8004f50:	2b30      	cmp	r3, #48	; 0x30
 8004f52:	d0f9      	beq.n	8004f48 <_strtod_l+0x130>
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d0a3      	beq.n	8004ea0 <_strtod_l+0x88>
 8004f58:	2301      	movs	r3, #1
 8004f5a:	f04f 0900 	mov.w	r9, #0
 8004f5e:	9304      	str	r3, [sp, #16]
 8004f60:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004f62:	9308      	str	r3, [sp, #32]
 8004f64:	f8cd 901c 	str.w	r9, [sp, #28]
 8004f68:	464f      	mov	r7, r9
 8004f6a:	220a      	movs	r2, #10
 8004f6c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8004f6e:	7806      	ldrb	r6, [r0, #0]
 8004f70:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8004f74:	b2d9      	uxtb	r1, r3
 8004f76:	2909      	cmp	r1, #9
 8004f78:	d92a      	bls.n	8004fd0 <_strtod_l+0x1b8>
 8004f7a:	9905      	ldr	r1, [sp, #20]
 8004f7c:	462a      	mov	r2, r5
 8004f7e:	f003 fb9a 	bl	80086b6 <strncmp>
 8004f82:	b398      	cbz	r0, 8004fec <_strtod_l+0x1d4>
 8004f84:	2000      	movs	r0, #0
 8004f86:	4632      	mov	r2, r6
 8004f88:	463d      	mov	r5, r7
 8004f8a:	9005      	str	r0, [sp, #20]
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	2a65      	cmp	r2, #101	; 0x65
 8004f90:	d001      	beq.n	8004f96 <_strtod_l+0x17e>
 8004f92:	2a45      	cmp	r2, #69	; 0x45
 8004f94:	d118      	bne.n	8004fc8 <_strtod_l+0x1b0>
 8004f96:	b91d      	cbnz	r5, 8004fa0 <_strtod_l+0x188>
 8004f98:	9a04      	ldr	r2, [sp, #16]
 8004f9a:	4302      	orrs	r2, r0
 8004f9c:	d09e      	beq.n	8004edc <_strtod_l+0xc4>
 8004f9e:	2500      	movs	r5, #0
 8004fa0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8004fa4:	f108 0201 	add.w	r2, r8, #1
 8004fa8:	9217      	str	r2, [sp, #92]	; 0x5c
 8004faa:	f898 2001 	ldrb.w	r2, [r8, #1]
 8004fae:	2a2b      	cmp	r2, #43	; 0x2b
 8004fb0:	d075      	beq.n	800509e <_strtod_l+0x286>
 8004fb2:	2a2d      	cmp	r2, #45	; 0x2d
 8004fb4:	d07b      	beq.n	80050ae <_strtod_l+0x296>
 8004fb6:	f04f 0c00 	mov.w	ip, #0
 8004fba:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8004fbe:	2909      	cmp	r1, #9
 8004fc0:	f240 8082 	bls.w	80050c8 <_strtod_l+0x2b0>
 8004fc4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8004fc8:	2600      	movs	r6, #0
 8004fca:	e09d      	b.n	8005108 <_strtod_l+0x2f0>
 8004fcc:	2300      	movs	r3, #0
 8004fce:	e7c4      	b.n	8004f5a <_strtod_l+0x142>
 8004fd0:	2f08      	cmp	r7, #8
 8004fd2:	bfd8      	it	le
 8004fd4:	9907      	ldrle	r1, [sp, #28]
 8004fd6:	f100 0001 	add.w	r0, r0, #1
 8004fda:	bfda      	itte	le
 8004fdc:	fb02 3301 	mlale	r3, r2, r1, r3
 8004fe0:	9307      	strle	r3, [sp, #28]
 8004fe2:	fb02 3909 	mlagt	r9, r2, r9, r3
 8004fe6:	3701      	adds	r7, #1
 8004fe8:	9017      	str	r0, [sp, #92]	; 0x5c
 8004fea:	e7bf      	b.n	8004f6c <_strtod_l+0x154>
 8004fec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004fee:	195a      	adds	r2, r3, r5
 8004ff0:	9217      	str	r2, [sp, #92]	; 0x5c
 8004ff2:	5d5a      	ldrb	r2, [r3, r5]
 8004ff4:	2f00      	cmp	r7, #0
 8004ff6:	d037      	beq.n	8005068 <_strtod_l+0x250>
 8004ff8:	9005      	str	r0, [sp, #20]
 8004ffa:	463d      	mov	r5, r7
 8004ffc:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8005000:	2b09      	cmp	r3, #9
 8005002:	d912      	bls.n	800502a <_strtod_l+0x212>
 8005004:	2301      	movs	r3, #1
 8005006:	e7c2      	b.n	8004f8e <_strtod_l+0x176>
 8005008:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800500a:	1c5a      	adds	r2, r3, #1
 800500c:	9217      	str	r2, [sp, #92]	; 0x5c
 800500e:	785a      	ldrb	r2, [r3, #1]
 8005010:	3001      	adds	r0, #1
 8005012:	2a30      	cmp	r2, #48	; 0x30
 8005014:	d0f8      	beq.n	8005008 <_strtod_l+0x1f0>
 8005016:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800501a:	2b08      	cmp	r3, #8
 800501c:	f200 84d9 	bhi.w	80059d2 <_strtod_l+0xbba>
 8005020:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005022:	9005      	str	r0, [sp, #20]
 8005024:	2000      	movs	r0, #0
 8005026:	9308      	str	r3, [sp, #32]
 8005028:	4605      	mov	r5, r0
 800502a:	3a30      	subs	r2, #48	; 0x30
 800502c:	f100 0301 	add.w	r3, r0, #1
 8005030:	d014      	beq.n	800505c <_strtod_l+0x244>
 8005032:	9905      	ldr	r1, [sp, #20]
 8005034:	4419      	add	r1, r3
 8005036:	9105      	str	r1, [sp, #20]
 8005038:	462b      	mov	r3, r5
 800503a:	eb00 0e05 	add.w	lr, r0, r5
 800503e:	210a      	movs	r1, #10
 8005040:	4573      	cmp	r3, lr
 8005042:	d113      	bne.n	800506c <_strtod_l+0x254>
 8005044:	182b      	adds	r3, r5, r0
 8005046:	2b08      	cmp	r3, #8
 8005048:	f105 0501 	add.w	r5, r5, #1
 800504c:	4405      	add	r5, r0
 800504e:	dc1c      	bgt.n	800508a <_strtod_l+0x272>
 8005050:	9907      	ldr	r1, [sp, #28]
 8005052:	230a      	movs	r3, #10
 8005054:	fb03 2301 	mla	r3, r3, r1, r2
 8005058:	9307      	str	r3, [sp, #28]
 800505a:	2300      	movs	r3, #0
 800505c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800505e:	1c51      	adds	r1, r2, #1
 8005060:	9117      	str	r1, [sp, #92]	; 0x5c
 8005062:	7852      	ldrb	r2, [r2, #1]
 8005064:	4618      	mov	r0, r3
 8005066:	e7c9      	b.n	8004ffc <_strtod_l+0x1e4>
 8005068:	4638      	mov	r0, r7
 800506a:	e7d2      	b.n	8005012 <_strtod_l+0x1fa>
 800506c:	2b08      	cmp	r3, #8
 800506e:	dc04      	bgt.n	800507a <_strtod_l+0x262>
 8005070:	9e07      	ldr	r6, [sp, #28]
 8005072:	434e      	muls	r6, r1
 8005074:	9607      	str	r6, [sp, #28]
 8005076:	3301      	adds	r3, #1
 8005078:	e7e2      	b.n	8005040 <_strtod_l+0x228>
 800507a:	f103 0c01 	add.w	ip, r3, #1
 800507e:	f1bc 0f10 	cmp.w	ip, #16
 8005082:	bfd8      	it	le
 8005084:	fb01 f909 	mulle.w	r9, r1, r9
 8005088:	e7f5      	b.n	8005076 <_strtod_l+0x25e>
 800508a:	2d10      	cmp	r5, #16
 800508c:	bfdc      	itt	le
 800508e:	230a      	movle	r3, #10
 8005090:	fb03 2909 	mlale	r9, r3, r9, r2
 8005094:	e7e1      	b.n	800505a <_strtod_l+0x242>
 8005096:	2300      	movs	r3, #0
 8005098:	9305      	str	r3, [sp, #20]
 800509a:	2301      	movs	r3, #1
 800509c:	e77c      	b.n	8004f98 <_strtod_l+0x180>
 800509e:	f04f 0c00 	mov.w	ip, #0
 80050a2:	f108 0202 	add.w	r2, r8, #2
 80050a6:	9217      	str	r2, [sp, #92]	; 0x5c
 80050a8:	f898 2002 	ldrb.w	r2, [r8, #2]
 80050ac:	e785      	b.n	8004fba <_strtod_l+0x1a2>
 80050ae:	f04f 0c01 	mov.w	ip, #1
 80050b2:	e7f6      	b.n	80050a2 <_strtod_l+0x28a>
 80050b4:	08008f64 	.word	0x08008f64
 80050b8:	08008cb8 	.word	0x08008cb8
 80050bc:	7ff00000 	.word	0x7ff00000
 80050c0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80050c2:	1c51      	adds	r1, r2, #1
 80050c4:	9117      	str	r1, [sp, #92]	; 0x5c
 80050c6:	7852      	ldrb	r2, [r2, #1]
 80050c8:	2a30      	cmp	r2, #48	; 0x30
 80050ca:	d0f9      	beq.n	80050c0 <_strtod_l+0x2a8>
 80050cc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80050d0:	2908      	cmp	r1, #8
 80050d2:	f63f af79 	bhi.w	8004fc8 <_strtod_l+0x1b0>
 80050d6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80050da:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80050dc:	9206      	str	r2, [sp, #24]
 80050de:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80050e0:	1c51      	adds	r1, r2, #1
 80050e2:	9117      	str	r1, [sp, #92]	; 0x5c
 80050e4:	7852      	ldrb	r2, [r2, #1]
 80050e6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80050ea:	2e09      	cmp	r6, #9
 80050ec:	d937      	bls.n	800515e <_strtod_l+0x346>
 80050ee:	9e06      	ldr	r6, [sp, #24]
 80050f0:	1b89      	subs	r1, r1, r6
 80050f2:	2908      	cmp	r1, #8
 80050f4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80050f8:	dc02      	bgt.n	8005100 <_strtod_l+0x2e8>
 80050fa:	4576      	cmp	r6, lr
 80050fc:	bfa8      	it	ge
 80050fe:	4676      	movge	r6, lr
 8005100:	f1bc 0f00 	cmp.w	ip, #0
 8005104:	d000      	beq.n	8005108 <_strtod_l+0x2f0>
 8005106:	4276      	negs	r6, r6
 8005108:	2d00      	cmp	r5, #0
 800510a:	d14d      	bne.n	80051a8 <_strtod_l+0x390>
 800510c:	9904      	ldr	r1, [sp, #16]
 800510e:	4301      	orrs	r1, r0
 8005110:	f47f aec6 	bne.w	8004ea0 <_strtod_l+0x88>
 8005114:	2b00      	cmp	r3, #0
 8005116:	f47f aee1 	bne.w	8004edc <_strtod_l+0xc4>
 800511a:	2a69      	cmp	r2, #105	; 0x69
 800511c:	d027      	beq.n	800516e <_strtod_l+0x356>
 800511e:	dc24      	bgt.n	800516a <_strtod_l+0x352>
 8005120:	2a49      	cmp	r2, #73	; 0x49
 8005122:	d024      	beq.n	800516e <_strtod_l+0x356>
 8005124:	2a4e      	cmp	r2, #78	; 0x4e
 8005126:	f47f aed9 	bne.w	8004edc <_strtod_l+0xc4>
 800512a:	499f      	ldr	r1, [pc, #636]	; (80053a8 <_strtod_l+0x590>)
 800512c:	a817      	add	r0, sp, #92	; 0x5c
 800512e:	f002 f8b3 	bl	8007298 <__match>
 8005132:	2800      	cmp	r0, #0
 8005134:	f43f aed2 	beq.w	8004edc <_strtod_l+0xc4>
 8005138:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800513a:	781b      	ldrb	r3, [r3, #0]
 800513c:	2b28      	cmp	r3, #40	; 0x28
 800513e:	d12d      	bne.n	800519c <_strtod_l+0x384>
 8005140:	499a      	ldr	r1, [pc, #616]	; (80053ac <_strtod_l+0x594>)
 8005142:	aa1a      	add	r2, sp, #104	; 0x68
 8005144:	a817      	add	r0, sp, #92	; 0x5c
 8005146:	f002 f8bb 	bl	80072c0 <__hexnan>
 800514a:	2805      	cmp	r0, #5
 800514c:	d126      	bne.n	800519c <_strtod_l+0x384>
 800514e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005150:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8005154:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8005158:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800515c:	e6a0      	b.n	8004ea0 <_strtod_l+0x88>
 800515e:	210a      	movs	r1, #10
 8005160:	fb01 2e0e 	mla	lr, r1, lr, r2
 8005164:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8005168:	e7b9      	b.n	80050de <_strtod_l+0x2c6>
 800516a:	2a6e      	cmp	r2, #110	; 0x6e
 800516c:	e7db      	b.n	8005126 <_strtod_l+0x30e>
 800516e:	4990      	ldr	r1, [pc, #576]	; (80053b0 <_strtod_l+0x598>)
 8005170:	a817      	add	r0, sp, #92	; 0x5c
 8005172:	f002 f891 	bl	8007298 <__match>
 8005176:	2800      	cmp	r0, #0
 8005178:	f43f aeb0 	beq.w	8004edc <_strtod_l+0xc4>
 800517c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800517e:	498d      	ldr	r1, [pc, #564]	; (80053b4 <_strtod_l+0x59c>)
 8005180:	3b01      	subs	r3, #1
 8005182:	a817      	add	r0, sp, #92	; 0x5c
 8005184:	9317      	str	r3, [sp, #92]	; 0x5c
 8005186:	f002 f887 	bl	8007298 <__match>
 800518a:	b910      	cbnz	r0, 8005192 <_strtod_l+0x37a>
 800518c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800518e:	3301      	adds	r3, #1
 8005190:	9317      	str	r3, [sp, #92]	; 0x5c
 8005192:	f8df b230 	ldr.w	fp, [pc, #560]	; 80053c4 <_strtod_l+0x5ac>
 8005196:	f04f 0a00 	mov.w	sl, #0
 800519a:	e681      	b.n	8004ea0 <_strtod_l+0x88>
 800519c:	4886      	ldr	r0, [pc, #536]	; (80053b8 <_strtod_l+0x5a0>)
 800519e:	f003 fa2f 	bl	8008600 <nan>
 80051a2:	ec5b ab10 	vmov	sl, fp, d0
 80051a6:	e67b      	b.n	8004ea0 <_strtod_l+0x88>
 80051a8:	9b05      	ldr	r3, [sp, #20]
 80051aa:	9807      	ldr	r0, [sp, #28]
 80051ac:	1af3      	subs	r3, r6, r3
 80051ae:	2f00      	cmp	r7, #0
 80051b0:	bf08      	it	eq
 80051b2:	462f      	moveq	r7, r5
 80051b4:	2d10      	cmp	r5, #16
 80051b6:	9306      	str	r3, [sp, #24]
 80051b8:	46a8      	mov	r8, r5
 80051ba:	bfa8      	it	ge
 80051bc:	f04f 0810 	movge.w	r8, #16
 80051c0:	f7fb f9c0 	bl	8000544 <__aeabi_ui2d>
 80051c4:	2d09      	cmp	r5, #9
 80051c6:	4682      	mov	sl, r0
 80051c8:	468b      	mov	fp, r1
 80051ca:	dd13      	ble.n	80051f4 <_strtod_l+0x3dc>
 80051cc:	4b7b      	ldr	r3, [pc, #492]	; (80053bc <_strtod_l+0x5a4>)
 80051ce:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80051d2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80051d6:	f7fb fa2f 	bl	8000638 <__aeabi_dmul>
 80051da:	4682      	mov	sl, r0
 80051dc:	4648      	mov	r0, r9
 80051de:	468b      	mov	fp, r1
 80051e0:	f7fb f9b0 	bl	8000544 <__aeabi_ui2d>
 80051e4:	4602      	mov	r2, r0
 80051e6:	460b      	mov	r3, r1
 80051e8:	4650      	mov	r0, sl
 80051ea:	4659      	mov	r1, fp
 80051ec:	f7fb f86e 	bl	80002cc <__adddf3>
 80051f0:	4682      	mov	sl, r0
 80051f2:	468b      	mov	fp, r1
 80051f4:	2d0f      	cmp	r5, #15
 80051f6:	dc38      	bgt.n	800526a <_strtod_l+0x452>
 80051f8:	9b06      	ldr	r3, [sp, #24]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	f43f ae50 	beq.w	8004ea0 <_strtod_l+0x88>
 8005200:	dd24      	ble.n	800524c <_strtod_l+0x434>
 8005202:	2b16      	cmp	r3, #22
 8005204:	dc0b      	bgt.n	800521e <_strtod_l+0x406>
 8005206:	496d      	ldr	r1, [pc, #436]	; (80053bc <_strtod_l+0x5a4>)
 8005208:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800520c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005210:	4652      	mov	r2, sl
 8005212:	465b      	mov	r3, fp
 8005214:	f7fb fa10 	bl	8000638 <__aeabi_dmul>
 8005218:	4682      	mov	sl, r0
 800521a:	468b      	mov	fp, r1
 800521c:	e640      	b.n	8004ea0 <_strtod_l+0x88>
 800521e:	9a06      	ldr	r2, [sp, #24]
 8005220:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8005224:	4293      	cmp	r3, r2
 8005226:	db20      	blt.n	800526a <_strtod_l+0x452>
 8005228:	4c64      	ldr	r4, [pc, #400]	; (80053bc <_strtod_l+0x5a4>)
 800522a:	f1c5 050f 	rsb	r5, r5, #15
 800522e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8005232:	4652      	mov	r2, sl
 8005234:	465b      	mov	r3, fp
 8005236:	e9d1 0100 	ldrd	r0, r1, [r1]
 800523a:	f7fb f9fd 	bl	8000638 <__aeabi_dmul>
 800523e:	9b06      	ldr	r3, [sp, #24]
 8005240:	1b5d      	subs	r5, r3, r5
 8005242:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8005246:	e9d4 2300 	ldrd	r2, r3, [r4]
 800524a:	e7e3      	b.n	8005214 <_strtod_l+0x3fc>
 800524c:	9b06      	ldr	r3, [sp, #24]
 800524e:	3316      	adds	r3, #22
 8005250:	db0b      	blt.n	800526a <_strtod_l+0x452>
 8005252:	9b05      	ldr	r3, [sp, #20]
 8005254:	1b9e      	subs	r6, r3, r6
 8005256:	4b59      	ldr	r3, [pc, #356]	; (80053bc <_strtod_l+0x5a4>)
 8005258:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800525c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005260:	4650      	mov	r0, sl
 8005262:	4659      	mov	r1, fp
 8005264:	f7fb fb12 	bl	800088c <__aeabi_ddiv>
 8005268:	e7d6      	b.n	8005218 <_strtod_l+0x400>
 800526a:	9b06      	ldr	r3, [sp, #24]
 800526c:	eba5 0808 	sub.w	r8, r5, r8
 8005270:	4498      	add	r8, r3
 8005272:	f1b8 0f00 	cmp.w	r8, #0
 8005276:	dd74      	ble.n	8005362 <_strtod_l+0x54a>
 8005278:	f018 030f 	ands.w	r3, r8, #15
 800527c:	d00a      	beq.n	8005294 <_strtod_l+0x47c>
 800527e:	494f      	ldr	r1, [pc, #316]	; (80053bc <_strtod_l+0x5a4>)
 8005280:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005284:	4652      	mov	r2, sl
 8005286:	465b      	mov	r3, fp
 8005288:	e9d1 0100 	ldrd	r0, r1, [r1]
 800528c:	f7fb f9d4 	bl	8000638 <__aeabi_dmul>
 8005290:	4682      	mov	sl, r0
 8005292:	468b      	mov	fp, r1
 8005294:	f038 080f 	bics.w	r8, r8, #15
 8005298:	d04f      	beq.n	800533a <_strtod_l+0x522>
 800529a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800529e:	dd22      	ble.n	80052e6 <_strtod_l+0x4ce>
 80052a0:	2500      	movs	r5, #0
 80052a2:	462e      	mov	r6, r5
 80052a4:	9507      	str	r5, [sp, #28]
 80052a6:	9505      	str	r5, [sp, #20]
 80052a8:	2322      	movs	r3, #34	; 0x22
 80052aa:	f8df b118 	ldr.w	fp, [pc, #280]	; 80053c4 <_strtod_l+0x5ac>
 80052ae:	6023      	str	r3, [r4, #0]
 80052b0:	f04f 0a00 	mov.w	sl, #0
 80052b4:	9b07      	ldr	r3, [sp, #28]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	f43f adf2 	beq.w	8004ea0 <_strtod_l+0x88>
 80052bc:	9918      	ldr	r1, [sp, #96]	; 0x60
 80052be:	4620      	mov	r0, r4
 80052c0:	f002 f96e 	bl	80075a0 <_Bfree>
 80052c4:	9905      	ldr	r1, [sp, #20]
 80052c6:	4620      	mov	r0, r4
 80052c8:	f002 f96a 	bl	80075a0 <_Bfree>
 80052cc:	4631      	mov	r1, r6
 80052ce:	4620      	mov	r0, r4
 80052d0:	f002 f966 	bl	80075a0 <_Bfree>
 80052d4:	9907      	ldr	r1, [sp, #28]
 80052d6:	4620      	mov	r0, r4
 80052d8:	f002 f962 	bl	80075a0 <_Bfree>
 80052dc:	4629      	mov	r1, r5
 80052de:	4620      	mov	r0, r4
 80052e0:	f002 f95e 	bl	80075a0 <_Bfree>
 80052e4:	e5dc      	b.n	8004ea0 <_strtod_l+0x88>
 80052e6:	4b36      	ldr	r3, [pc, #216]	; (80053c0 <_strtod_l+0x5a8>)
 80052e8:	9304      	str	r3, [sp, #16]
 80052ea:	2300      	movs	r3, #0
 80052ec:	ea4f 1828 	mov.w	r8, r8, asr #4
 80052f0:	4650      	mov	r0, sl
 80052f2:	4659      	mov	r1, fp
 80052f4:	4699      	mov	r9, r3
 80052f6:	f1b8 0f01 	cmp.w	r8, #1
 80052fa:	dc21      	bgt.n	8005340 <_strtod_l+0x528>
 80052fc:	b10b      	cbz	r3, 8005302 <_strtod_l+0x4ea>
 80052fe:	4682      	mov	sl, r0
 8005300:	468b      	mov	fp, r1
 8005302:	4b2f      	ldr	r3, [pc, #188]	; (80053c0 <_strtod_l+0x5a8>)
 8005304:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8005308:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800530c:	4652      	mov	r2, sl
 800530e:	465b      	mov	r3, fp
 8005310:	e9d9 0100 	ldrd	r0, r1, [r9]
 8005314:	f7fb f990 	bl	8000638 <__aeabi_dmul>
 8005318:	4b2a      	ldr	r3, [pc, #168]	; (80053c4 <_strtod_l+0x5ac>)
 800531a:	460a      	mov	r2, r1
 800531c:	400b      	ands	r3, r1
 800531e:	492a      	ldr	r1, [pc, #168]	; (80053c8 <_strtod_l+0x5b0>)
 8005320:	428b      	cmp	r3, r1
 8005322:	4682      	mov	sl, r0
 8005324:	d8bc      	bhi.n	80052a0 <_strtod_l+0x488>
 8005326:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800532a:	428b      	cmp	r3, r1
 800532c:	bf86      	itte	hi
 800532e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 80053cc <_strtod_l+0x5b4>
 8005332:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 8005336:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800533a:	2300      	movs	r3, #0
 800533c:	9304      	str	r3, [sp, #16]
 800533e:	e084      	b.n	800544a <_strtod_l+0x632>
 8005340:	f018 0f01 	tst.w	r8, #1
 8005344:	d005      	beq.n	8005352 <_strtod_l+0x53a>
 8005346:	9b04      	ldr	r3, [sp, #16]
 8005348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800534c:	f7fb f974 	bl	8000638 <__aeabi_dmul>
 8005350:	2301      	movs	r3, #1
 8005352:	9a04      	ldr	r2, [sp, #16]
 8005354:	3208      	adds	r2, #8
 8005356:	f109 0901 	add.w	r9, r9, #1
 800535a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800535e:	9204      	str	r2, [sp, #16]
 8005360:	e7c9      	b.n	80052f6 <_strtod_l+0x4de>
 8005362:	d0ea      	beq.n	800533a <_strtod_l+0x522>
 8005364:	f1c8 0800 	rsb	r8, r8, #0
 8005368:	f018 020f 	ands.w	r2, r8, #15
 800536c:	d00a      	beq.n	8005384 <_strtod_l+0x56c>
 800536e:	4b13      	ldr	r3, [pc, #76]	; (80053bc <_strtod_l+0x5a4>)
 8005370:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005374:	4650      	mov	r0, sl
 8005376:	4659      	mov	r1, fp
 8005378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800537c:	f7fb fa86 	bl	800088c <__aeabi_ddiv>
 8005380:	4682      	mov	sl, r0
 8005382:	468b      	mov	fp, r1
 8005384:	ea5f 1828 	movs.w	r8, r8, asr #4
 8005388:	d0d7      	beq.n	800533a <_strtod_l+0x522>
 800538a:	f1b8 0f1f 	cmp.w	r8, #31
 800538e:	dd1f      	ble.n	80053d0 <_strtod_l+0x5b8>
 8005390:	2500      	movs	r5, #0
 8005392:	462e      	mov	r6, r5
 8005394:	9507      	str	r5, [sp, #28]
 8005396:	9505      	str	r5, [sp, #20]
 8005398:	2322      	movs	r3, #34	; 0x22
 800539a:	f04f 0a00 	mov.w	sl, #0
 800539e:	f04f 0b00 	mov.w	fp, #0
 80053a2:	6023      	str	r3, [r4, #0]
 80053a4:	e786      	b.n	80052b4 <_strtod_l+0x49c>
 80053a6:	bf00      	nop
 80053a8:	08008c89 	.word	0x08008c89
 80053ac:	08008ccc 	.word	0x08008ccc
 80053b0:	08008c81 	.word	0x08008c81
 80053b4:	08008e0c 	.word	0x08008e0c
 80053b8:	08009120 	.word	0x08009120
 80053bc:	08009000 	.word	0x08009000
 80053c0:	08008fd8 	.word	0x08008fd8
 80053c4:	7ff00000 	.word	0x7ff00000
 80053c8:	7ca00000 	.word	0x7ca00000
 80053cc:	7fefffff 	.word	0x7fefffff
 80053d0:	f018 0310 	ands.w	r3, r8, #16
 80053d4:	bf18      	it	ne
 80053d6:	236a      	movne	r3, #106	; 0x6a
 80053d8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8005788 <_strtod_l+0x970>
 80053dc:	9304      	str	r3, [sp, #16]
 80053de:	4650      	mov	r0, sl
 80053e0:	4659      	mov	r1, fp
 80053e2:	2300      	movs	r3, #0
 80053e4:	f018 0f01 	tst.w	r8, #1
 80053e8:	d004      	beq.n	80053f4 <_strtod_l+0x5dc>
 80053ea:	e9d9 2300 	ldrd	r2, r3, [r9]
 80053ee:	f7fb f923 	bl	8000638 <__aeabi_dmul>
 80053f2:	2301      	movs	r3, #1
 80053f4:	ea5f 0868 	movs.w	r8, r8, asr #1
 80053f8:	f109 0908 	add.w	r9, r9, #8
 80053fc:	d1f2      	bne.n	80053e4 <_strtod_l+0x5cc>
 80053fe:	b10b      	cbz	r3, 8005404 <_strtod_l+0x5ec>
 8005400:	4682      	mov	sl, r0
 8005402:	468b      	mov	fp, r1
 8005404:	9b04      	ldr	r3, [sp, #16]
 8005406:	b1c3      	cbz	r3, 800543a <_strtod_l+0x622>
 8005408:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800540c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8005410:	2b00      	cmp	r3, #0
 8005412:	4659      	mov	r1, fp
 8005414:	dd11      	ble.n	800543a <_strtod_l+0x622>
 8005416:	2b1f      	cmp	r3, #31
 8005418:	f340 8124 	ble.w	8005664 <_strtod_l+0x84c>
 800541c:	2b34      	cmp	r3, #52	; 0x34
 800541e:	bfde      	ittt	le
 8005420:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8005424:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 8005428:	fa03 f202 	lslle.w	r2, r3, r2
 800542c:	f04f 0a00 	mov.w	sl, #0
 8005430:	bfcc      	ite	gt
 8005432:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8005436:	ea02 0b01 	andle.w	fp, r2, r1
 800543a:	2200      	movs	r2, #0
 800543c:	2300      	movs	r3, #0
 800543e:	4650      	mov	r0, sl
 8005440:	4659      	mov	r1, fp
 8005442:	f7fb fb61 	bl	8000b08 <__aeabi_dcmpeq>
 8005446:	2800      	cmp	r0, #0
 8005448:	d1a2      	bne.n	8005390 <_strtod_l+0x578>
 800544a:	9b07      	ldr	r3, [sp, #28]
 800544c:	9300      	str	r3, [sp, #0]
 800544e:	9908      	ldr	r1, [sp, #32]
 8005450:	462b      	mov	r3, r5
 8005452:	463a      	mov	r2, r7
 8005454:	4620      	mov	r0, r4
 8005456:	f002 f90b 	bl	8007670 <__s2b>
 800545a:	9007      	str	r0, [sp, #28]
 800545c:	2800      	cmp	r0, #0
 800545e:	f43f af1f 	beq.w	80052a0 <_strtod_l+0x488>
 8005462:	9b05      	ldr	r3, [sp, #20]
 8005464:	1b9e      	subs	r6, r3, r6
 8005466:	9b06      	ldr	r3, [sp, #24]
 8005468:	2b00      	cmp	r3, #0
 800546a:	bfb4      	ite	lt
 800546c:	4633      	movlt	r3, r6
 800546e:	2300      	movge	r3, #0
 8005470:	930c      	str	r3, [sp, #48]	; 0x30
 8005472:	9b06      	ldr	r3, [sp, #24]
 8005474:	2500      	movs	r5, #0
 8005476:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800547a:	9312      	str	r3, [sp, #72]	; 0x48
 800547c:	462e      	mov	r6, r5
 800547e:	9b07      	ldr	r3, [sp, #28]
 8005480:	4620      	mov	r0, r4
 8005482:	6859      	ldr	r1, [r3, #4]
 8005484:	f002 f84c 	bl	8007520 <_Balloc>
 8005488:	9005      	str	r0, [sp, #20]
 800548a:	2800      	cmp	r0, #0
 800548c:	f43f af0c 	beq.w	80052a8 <_strtod_l+0x490>
 8005490:	9b07      	ldr	r3, [sp, #28]
 8005492:	691a      	ldr	r2, [r3, #16]
 8005494:	3202      	adds	r2, #2
 8005496:	f103 010c 	add.w	r1, r3, #12
 800549a:	0092      	lsls	r2, r2, #2
 800549c:	300c      	adds	r0, #12
 800549e:	f002 f831 	bl	8007504 <memcpy>
 80054a2:	ec4b ab10 	vmov	d0, sl, fp
 80054a6:	aa1a      	add	r2, sp, #104	; 0x68
 80054a8:	a919      	add	r1, sp, #100	; 0x64
 80054aa:	4620      	mov	r0, r4
 80054ac:	f002 fc26 	bl	8007cfc <__d2b>
 80054b0:	ec4b ab18 	vmov	d8, sl, fp
 80054b4:	9018      	str	r0, [sp, #96]	; 0x60
 80054b6:	2800      	cmp	r0, #0
 80054b8:	f43f aef6 	beq.w	80052a8 <_strtod_l+0x490>
 80054bc:	2101      	movs	r1, #1
 80054be:	4620      	mov	r0, r4
 80054c0:	f002 f970 	bl	80077a4 <__i2b>
 80054c4:	4606      	mov	r6, r0
 80054c6:	2800      	cmp	r0, #0
 80054c8:	f43f aeee 	beq.w	80052a8 <_strtod_l+0x490>
 80054cc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80054ce:	9904      	ldr	r1, [sp, #16]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	bfab      	itete	ge
 80054d4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80054d6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80054d8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80054da:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80054de:	bfac      	ite	ge
 80054e0:	eb03 0902 	addge.w	r9, r3, r2
 80054e4:	1ad7      	sublt	r7, r2, r3
 80054e6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80054e8:	eba3 0801 	sub.w	r8, r3, r1
 80054ec:	4490      	add	r8, r2
 80054ee:	4ba1      	ldr	r3, [pc, #644]	; (8005774 <_strtod_l+0x95c>)
 80054f0:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80054f4:	4598      	cmp	r8, r3
 80054f6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80054fa:	f280 80c7 	bge.w	800568c <_strtod_l+0x874>
 80054fe:	eba3 0308 	sub.w	r3, r3, r8
 8005502:	2b1f      	cmp	r3, #31
 8005504:	eba2 0203 	sub.w	r2, r2, r3
 8005508:	f04f 0101 	mov.w	r1, #1
 800550c:	f300 80b1 	bgt.w	8005672 <_strtod_l+0x85a>
 8005510:	fa01 f303 	lsl.w	r3, r1, r3
 8005514:	930d      	str	r3, [sp, #52]	; 0x34
 8005516:	2300      	movs	r3, #0
 8005518:	9308      	str	r3, [sp, #32]
 800551a:	eb09 0802 	add.w	r8, r9, r2
 800551e:	9b04      	ldr	r3, [sp, #16]
 8005520:	45c1      	cmp	r9, r8
 8005522:	4417      	add	r7, r2
 8005524:	441f      	add	r7, r3
 8005526:	464b      	mov	r3, r9
 8005528:	bfa8      	it	ge
 800552a:	4643      	movge	r3, r8
 800552c:	42bb      	cmp	r3, r7
 800552e:	bfa8      	it	ge
 8005530:	463b      	movge	r3, r7
 8005532:	2b00      	cmp	r3, #0
 8005534:	bfc2      	ittt	gt
 8005536:	eba8 0803 	subgt.w	r8, r8, r3
 800553a:	1aff      	subgt	r7, r7, r3
 800553c:	eba9 0903 	subgt.w	r9, r9, r3
 8005540:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005542:	2b00      	cmp	r3, #0
 8005544:	dd17      	ble.n	8005576 <_strtod_l+0x75e>
 8005546:	4631      	mov	r1, r6
 8005548:	461a      	mov	r2, r3
 800554a:	4620      	mov	r0, r4
 800554c:	f002 f9ea 	bl	8007924 <__pow5mult>
 8005550:	4606      	mov	r6, r0
 8005552:	2800      	cmp	r0, #0
 8005554:	f43f aea8 	beq.w	80052a8 <_strtod_l+0x490>
 8005558:	4601      	mov	r1, r0
 800555a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800555c:	4620      	mov	r0, r4
 800555e:	f002 f937 	bl	80077d0 <__multiply>
 8005562:	900b      	str	r0, [sp, #44]	; 0x2c
 8005564:	2800      	cmp	r0, #0
 8005566:	f43f ae9f 	beq.w	80052a8 <_strtod_l+0x490>
 800556a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800556c:	4620      	mov	r0, r4
 800556e:	f002 f817 	bl	80075a0 <_Bfree>
 8005572:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005574:	9318      	str	r3, [sp, #96]	; 0x60
 8005576:	f1b8 0f00 	cmp.w	r8, #0
 800557a:	f300 808c 	bgt.w	8005696 <_strtod_l+0x87e>
 800557e:	9b06      	ldr	r3, [sp, #24]
 8005580:	2b00      	cmp	r3, #0
 8005582:	dd08      	ble.n	8005596 <_strtod_l+0x77e>
 8005584:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005586:	9905      	ldr	r1, [sp, #20]
 8005588:	4620      	mov	r0, r4
 800558a:	f002 f9cb 	bl	8007924 <__pow5mult>
 800558e:	9005      	str	r0, [sp, #20]
 8005590:	2800      	cmp	r0, #0
 8005592:	f43f ae89 	beq.w	80052a8 <_strtod_l+0x490>
 8005596:	2f00      	cmp	r7, #0
 8005598:	dd08      	ble.n	80055ac <_strtod_l+0x794>
 800559a:	9905      	ldr	r1, [sp, #20]
 800559c:	463a      	mov	r2, r7
 800559e:	4620      	mov	r0, r4
 80055a0:	f002 fa1a 	bl	80079d8 <__lshift>
 80055a4:	9005      	str	r0, [sp, #20]
 80055a6:	2800      	cmp	r0, #0
 80055a8:	f43f ae7e 	beq.w	80052a8 <_strtod_l+0x490>
 80055ac:	f1b9 0f00 	cmp.w	r9, #0
 80055b0:	dd08      	ble.n	80055c4 <_strtod_l+0x7ac>
 80055b2:	4631      	mov	r1, r6
 80055b4:	464a      	mov	r2, r9
 80055b6:	4620      	mov	r0, r4
 80055b8:	f002 fa0e 	bl	80079d8 <__lshift>
 80055bc:	4606      	mov	r6, r0
 80055be:	2800      	cmp	r0, #0
 80055c0:	f43f ae72 	beq.w	80052a8 <_strtod_l+0x490>
 80055c4:	9a05      	ldr	r2, [sp, #20]
 80055c6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80055c8:	4620      	mov	r0, r4
 80055ca:	f002 fa91 	bl	8007af0 <__mdiff>
 80055ce:	4605      	mov	r5, r0
 80055d0:	2800      	cmp	r0, #0
 80055d2:	f43f ae69 	beq.w	80052a8 <_strtod_l+0x490>
 80055d6:	68c3      	ldr	r3, [r0, #12]
 80055d8:	930b      	str	r3, [sp, #44]	; 0x2c
 80055da:	2300      	movs	r3, #0
 80055dc:	60c3      	str	r3, [r0, #12]
 80055de:	4631      	mov	r1, r6
 80055e0:	f002 fa6a 	bl	8007ab8 <__mcmp>
 80055e4:	2800      	cmp	r0, #0
 80055e6:	da60      	bge.n	80056aa <_strtod_l+0x892>
 80055e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80055ea:	ea53 030a 	orrs.w	r3, r3, sl
 80055ee:	f040 8082 	bne.w	80056f6 <_strtod_l+0x8de>
 80055f2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d17d      	bne.n	80056f6 <_strtod_l+0x8de>
 80055fa:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80055fe:	0d1b      	lsrs	r3, r3, #20
 8005600:	051b      	lsls	r3, r3, #20
 8005602:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8005606:	d976      	bls.n	80056f6 <_strtod_l+0x8de>
 8005608:	696b      	ldr	r3, [r5, #20]
 800560a:	b913      	cbnz	r3, 8005612 <_strtod_l+0x7fa>
 800560c:	692b      	ldr	r3, [r5, #16]
 800560e:	2b01      	cmp	r3, #1
 8005610:	dd71      	ble.n	80056f6 <_strtod_l+0x8de>
 8005612:	4629      	mov	r1, r5
 8005614:	2201      	movs	r2, #1
 8005616:	4620      	mov	r0, r4
 8005618:	f002 f9de 	bl	80079d8 <__lshift>
 800561c:	4631      	mov	r1, r6
 800561e:	4605      	mov	r5, r0
 8005620:	f002 fa4a 	bl	8007ab8 <__mcmp>
 8005624:	2800      	cmp	r0, #0
 8005626:	dd66      	ble.n	80056f6 <_strtod_l+0x8de>
 8005628:	9904      	ldr	r1, [sp, #16]
 800562a:	4a53      	ldr	r2, [pc, #332]	; (8005778 <_strtod_l+0x960>)
 800562c:	465b      	mov	r3, fp
 800562e:	2900      	cmp	r1, #0
 8005630:	f000 8081 	beq.w	8005736 <_strtod_l+0x91e>
 8005634:	ea02 010b 	and.w	r1, r2, fp
 8005638:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800563c:	dc7b      	bgt.n	8005736 <_strtod_l+0x91e>
 800563e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8005642:	f77f aea9 	ble.w	8005398 <_strtod_l+0x580>
 8005646:	4b4d      	ldr	r3, [pc, #308]	; (800577c <_strtod_l+0x964>)
 8005648:	4650      	mov	r0, sl
 800564a:	4659      	mov	r1, fp
 800564c:	2200      	movs	r2, #0
 800564e:	f7fa fff3 	bl	8000638 <__aeabi_dmul>
 8005652:	460b      	mov	r3, r1
 8005654:	4303      	orrs	r3, r0
 8005656:	bf08      	it	eq
 8005658:	2322      	moveq	r3, #34	; 0x22
 800565a:	4682      	mov	sl, r0
 800565c:	468b      	mov	fp, r1
 800565e:	bf08      	it	eq
 8005660:	6023      	streq	r3, [r4, #0]
 8005662:	e62b      	b.n	80052bc <_strtod_l+0x4a4>
 8005664:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005668:	fa02 f303 	lsl.w	r3, r2, r3
 800566c:	ea03 0a0a 	and.w	sl, r3, sl
 8005670:	e6e3      	b.n	800543a <_strtod_l+0x622>
 8005672:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8005676:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800567a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800567e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8005682:	fa01 f308 	lsl.w	r3, r1, r8
 8005686:	9308      	str	r3, [sp, #32]
 8005688:	910d      	str	r1, [sp, #52]	; 0x34
 800568a:	e746      	b.n	800551a <_strtod_l+0x702>
 800568c:	2300      	movs	r3, #0
 800568e:	9308      	str	r3, [sp, #32]
 8005690:	2301      	movs	r3, #1
 8005692:	930d      	str	r3, [sp, #52]	; 0x34
 8005694:	e741      	b.n	800551a <_strtod_l+0x702>
 8005696:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005698:	4642      	mov	r2, r8
 800569a:	4620      	mov	r0, r4
 800569c:	f002 f99c 	bl	80079d8 <__lshift>
 80056a0:	9018      	str	r0, [sp, #96]	; 0x60
 80056a2:	2800      	cmp	r0, #0
 80056a4:	f47f af6b 	bne.w	800557e <_strtod_l+0x766>
 80056a8:	e5fe      	b.n	80052a8 <_strtod_l+0x490>
 80056aa:	465f      	mov	r7, fp
 80056ac:	d16e      	bne.n	800578c <_strtod_l+0x974>
 80056ae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80056b0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80056b4:	b342      	cbz	r2, 8005708 <_strtod_l+0x8f0>
 80056b6:	4a32      	ldr	r2, [pc, #200]	; (8005780 <_strtod_l+0x968>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d128      	bne.n	800570e <_strtod_l+0x8f6>
 80056bc:	9b04      	ldr	r3, [sp, #16]
 80056be:	4651      	mov	r1, sl
 80056c0:	b1eb      	cbz	r3, 80056fe <_strtod_l+0x8e6>
 80056c2:	4b2d      	ldr	r3, [pc, #180]	; (8005778 <_strtod_l+0x960>)
 80056c4:	403b      	ands	r3, r7
 80056c6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80056ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80056ce:	d819      	bhi.n	8005704 <_strtod_l+0x8ec>
 80056d0:	0d1b      	lsrs	r3, r3, #20
 80056d2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80056d6:	fa02 f303 	lsl.w	r3, r2, r3
 80056da:	4299      	cmp	r1, r3
 80056dc:	d117      	bne.n	800570e <_strtod_l+0x8f6>
 80056de:	4b29      	ldr	r3, [pc, #164]	; (8005784 <_strtod_l+0x96c>)
 80056e0:	429f      	cmp	r7, r3
 80056e2:	d102      	bne.n	80056ea <_strtod_l+0x8d2>
 80056e4:	3101      	adds	r1, #1
 80056e6:	f43f addf 	beq.w	80052a8 <_strtod_l+0x490>
 80056ea:	4b23      	ldr	r3, [pc, #140]	; (8005778 <_strtod_l+0x960>)
 80056ec:	403b      	ands	r3, r7
 80056ee:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80056f2:	f04f 0a00 	mov.w	sl, #0
 80056f6:	9b04      	ldr	r3, [sp, #16]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d1a4      	bne.n	8005646 <_strtod_l+0x82e>
 80056fc:	e5de      	b.n	80052bc <_strtod_l+0x4a4>
 80056fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005702:	e7ea      	b.n	80056da <_strtod_l+0x8c2>
 8005704:	4613      	mov	r3, r2
 8005706:	e7e8      	b.n	80056da <_strtod_l+0x8c2>
 8005708:	ea53 030a 	orrs.w	r3, r3, sl
 800570c:	d08c      	beq.n	8005628 <_strtod_l+0x810>
 800570e:	9b08      	ldr	r3, [sp, #32]
 8005710:	b1db      	cbz	r3, 800574a <_strtod_l+0x932>
 8005712:	423b      	tst	r3, r7
 8005714:	d0ef      	beq.n	80056f6 <_strtod_l+0x8de>
 8005716:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005718:	9a04      	ldr	r2, [sp, #16]
 800571a:	4650      	mov	r0, sl
 800571c:	4659      	mov	r1, fp
 800571e:	b1c3      	cbz	r3, 8005752 <_strtod_l+0x93a>
 8005720:	f7ff fb5e 	bl	8004de0 <sulp>
 8005724:	4602      	mov	r2, r0
 8005726:	460b      	mov	r3, r1
 8005728:	ec51 0b18 	vmov	r0, r1, d8
 800572c:	f7fa fdce 	bl	80002cc <__adddf3>
 8005730:	4682      	mov	sl, r0
 8005732:	468b      	mov	fp, r1
 8005734:	e7df      	b.n	80056f6 <_strtod_l+0x8de>
 8005736:	4013      	ands	r3, r2
 8005738:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800573c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8005740:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8005744:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8005748:	e7d5      	b.n	80056f6 <_strtod_l+0x8de>
 800574a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800574c:	ea13 0f0a 	tst.w	r3, sl
 8005750:	e7e0      	b.n	8005714 <_strtod_l+0x8fc>
 8005752:	f7ff fb45 	bl	8004de0 <sulp>
 8005756:	4602      	mov	r2, r0
 8005758:	460b      	mov	r3, r1
 800575a:	ec51 0b18 	vmov	r0, r1, d8
 800575e:	f7fa fdb3 	bl	80002c8 <__aeabi_dsub>
 8005762:	2200      	movs	r2, #0
 8005764:	2300      	movs	r3, #0
 8005766:	4682      	mov	sl, r0
 8005768:	468b      	mov	fp, r1
 800576a:	f7fb f9cd 	bl	8000b08 <__aeabi_dcmpeq>
 800576e:	2800      	cmp	r0, #0
 8005770:	d0c1      	beq.n	80056f6 <_strtod_l+0x8de>
 8005772:	e611      	b.n	8005398 <_strtod_l+0x580>
 8005774:	fffffc02 	.word	0xfffffc02
 8005778:	7ff00000 	.word	0x7ff00000
 800577c:	39500000 	.word	0x39500000
 8005780:	000fffff 	.word	0x000fffff
 8005784:	7fefffff 	.word	0x7fefffff
 8005788:	08008ce0 	.word	0x08008ce0
 800578c:	4631      	mov	r1, r6
 800578e:	4628      	mov	r0, r5
 8005790:	f002 fb10 	bl	8007db4 <__ratio>
 8005794:	ec59 8b10 	vmov	r8, r9, d0
 8005798:	ee10 0a10 	vmov	r0, s0
 800579c:	2200      	movs	r2, #0
 800579e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80057a2:	4649      	mov	r1, r9
 80057a4:	f7fb f9c4 	bl	8000b30 <__aeabi_dcmple>
 80057a8:	2800      	cmp	r0, #0
 80057aa:	d07a      	beq.n	80058a2 <_strtod_l+0xa8a>
 80057ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d04a      	beq.n	8005848 <_strtod_l+0xa30>
 80057b2:	4b95      	ldr	r3, [pc, #596]	; (8005a08 <_strtod_l+0xbf0>)
 80057b4:	2200      	movs	r2, #0
 80057b6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80057ba:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8005a08 <_strtod_l+0xbf0>
 80057be:	f04f 0800 	mov.w	r8, #0
 80057c2:	4b92      	ldr	r3, [pc, #584]	; (8005a0c <_strtod_l+0xbf4>)
 80057c4:	403b      	ands	r3, r7
 80057c6:	930d      	str	r3, [sp, #52]	; 0x34
 80057c8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80057ca:	4b91      	ldr	r3, [pc, #580]	; (8005a10 <_strtod_l+0xbf8>)
 80057cc:	429a      	cmp	r2, r3
 80057ce:	f040 80b0 	bne.w	8005932 <_strtod_l+0xb1a>
 80057d2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80057d6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80057da:	ec4b ab10 	vmov	d0, sl, fp
 80057de:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80057e2:	f002 fa0f 	bl	8007c04 <__ulp>
 80057e6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80057ea:	ec53 2b10 	vmov	r2, r3, d0
 80057ee:	f7fa ff23 	bl	8000638 <__aeabi_dmul>
 80057f2:	4652      	mov	r2, sl
 80057f4:	465b      	mov	r3, fp
 80057f6:	f7fa fd69 	bl	80002cc <__adddf3>
 80057fa:	460b      	mov	r3, r1
 80057fc:	4983      	ldr	r1, [pc, #524]	; (8005a0c <_strtod_l+0xbf4>)
 80057fe:	4a85      	ldr	r2, [pc, #532]	; (8005a14 <_strtod_l+0xbfc>)
 8005800:	4019      	ands	r1, r3
 8005802:	4291      	cmp	r1, r2
 8005804:	4682      	mov	sl, r0
 8005806:	d960      	bls.n	80058ca <_strtod_l+0xab2>
 8005808:	ee18 3a90 	vmov	r3, s17
 800580c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8005810:	4293      	cmp	r3, r2
 8005812:	d104      	bne.n	800581e <_strtod_l+0xa06>
 8005814:	ee18 3a10 	vmov	r3, s16
 8005818:	3301      	adds	r3, #1
 800581a:	f43f ad45 	beq.w	80052a8 <_strtod_l+0x490>
 800581e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8005a20 <_strtod_l+0xc08>
 8005822:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8005826:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005828:	4620      	mov	r0, r4
 800582a:	f001 feb9 	bl	80075a0 <_Bfree>
 800582e:	9905      	ldr	r1, [sp, #20]
 8005830:	4620      	mov	r0, r4
 8005832:	f001 feb5 	bl	80075a0 <_Bfree>
 8005836:	4631      	mov	r1, r6
 8005838:	4620      	mov	r0, r4
 800583a:	f001 feb1 	bl	80075a0 <_Bfree>
 800583e:	4629      	mov	r1, r5
 8005840:	4620      	mov	r0, r4
 8005842:	f001 fead 	bl	80075a0 <_Bfree>
 8005846:	e61a      	b.n	800547e <_strtod_l+0x666>
 8005848:	f1ba 0f00 	cmp.w	sl, #0
 800584c:	d11b      	bne.n	8005886 <_strtod_l+0xa6e>
 800584e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005852:	b9f3      	cbnz	r3, 8005892 <_strtod_l+0xa7a>
 8005854:	4b6c      	ldr	r3, [pc, #432]	; (8005a08 <_strtod_l+0xbf0>)
 8005856:	2200      	movs	r2, #0
 8005858:	4640      	mov	r0, r8
 800585a:	4649      	mov	r1, r9
 800585c:	f7fb f95e 	bl	8000b1c <__aeabi_dcmplt>
 8005860:	b9d0      	cbnz	r0, 8005898 <_strtod_l+0xa80>
 8005862:	4640      	mov	r0, r8
 8005864:	4649      	mov	r1, r9
 8005866:	4b6c      	ldr	r3, [pc, #432]	; (8005a18 <_strtod_l+0xc00>)
 8005868:	2200      	movs	r2, #0
 800586a:	f7fa fee5 	bl	8000638 <__aeabi_dmul>
 800586e:	4680      	mov	r8, r0
 8005870:	4689      	mov	r9, r1
 8005872:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005876:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800587a:	9315      	str	r3, [sp, #84]	; 0x54
 800587c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8005880:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005884:	e79d      	b.n	80057c2 <_strtod_l+0x9aa>
 8005886:	f1ba 0f01 	cmp.w	sl, #1
 800588a:	d102      	bne.n	8005892 <_strtod_l+0xa7a>
 800588c:	2f00      	cmp	r7, #0
 800588e:	f43f ad83 	beq.w	8005398 <_strtod_l+0x580>
 8005892:	4b62      	ldr	r3, [pc, #392]	; (8005a1c <_strtod_l+0xc04>)
 8005894:	2200      	movs	r2, #0
 8005896:	e78e      	b.n	80057b6 <_strtod_l+0x99e>
 8005898:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8005a18 <_strtod_l+0xc00>
 800589c:	f04f 0800 	mov.w	r8, #0
 80058a0:	e7e7      	b.n	8005872 <_strtod_l+0xa5a>
 80058a2:	4b5d      	ldr	r3, [pc, #372]	; (8005a18 <_strtod_l+0xc00>)
 80058a4:	4640      	mov	r0, r8
 80058a6:	4649      	mov	r1, r9
 80058a8:	2200      	movs	r2, #0
 80058aa:	f7fa fec5 	bl	8000638 <__aeabi_dmul>
 80058ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80058b0:	4680      	mov	r8, r0
 80058b2:	4689      	mov	r9, r1
 80058b4:	b933      	cbnz	r3, 80058c4 <_strtod_l+0xaac>
 80058b6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80058ba:	900e      	str	r0, [sp, #56]	; 0x38
 80058bc:	930f      	str	r3, [sp, #60]	; 0x3c
 80058be:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80058c2:	e7dd      	b.n	8005880 <_strtod_l+0xa68>
 80058c4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80058c8:	e7f9      	b.n	80058be <_strtod_l+0xaa6>
 80058ca:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80058ce:	9b04      	ldr	r3, [sp, #16]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d1a8      	bne.n	8005826 <_strtod_l+0xa0e>
 80058d4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80058d8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80058da:	0d1b      	lsrs	r3, r3, #20
 80058dc:	051b      	lsls	r3, r3, #20
 80058de:	429a      	cmp	r2, r3
 80058e0:	d1a1      	bne.n	8005826 <_strtod_l+0xa0e>
 80058e2:	4640      	mov	r0, r8
 80058e4:	4649      	mov	r1, r9
 80058e6:	f7fb fa07 	bl	8000cf8 <__aeabi_d2lz>
 80058ea:	f7fa fe77 	bl	80005dc <__aeabi_l2d>
 80058ee:	4602      	mov	r2, r0
 80058f0:	460b      	mov	r3, r1
 80058f2:	4640      	mov	r0, r8
 80058f4:	4649      	mov	r1, r9
 80058f6:	f7fa fce7 	bl	80002c8 <__aeabi_dsub>
 80058fa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80058fc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005900:	ea43 030a 	orr.w	r3, r3, sl
 8005904:	4313      	orrs	r3, r2
 8005906:	4680      	mov	r8, r0
 8005908:	4689      	mov	r9, r1
 800590a:	d055      	beq.n	80059b8 <_strtod_l+0xba0>
 800590c:	a336      	add	r3, pc, #216	; (adr r3, 80059e8 <_strtod_l+0xbd0>)
 800590e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005912:	f7fb f903 	bl	8000b1c <__aeabi_dcmplt>
 8005916:	2800      	cmp	r0, #0
 8005918:	f47f acd0 	bne.w	80052bc <_strtod_l+0x4a4>
 800591c:	a334      	add	r3, pc, #208	; (adr r3, 80059f0 <_strtod_l+0xbd8>)
 800591e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005922:	4640      	mov	r0, r8
 8005924:	4649      	mov	r1, r9
 8005926:	f7fb f917 	bl	8000b58 <__aeabi_dcmpgt>
 800592a:	2800      	cmp	r0, #0
 800592c:	f43f af7b 	beq.w	8005826 <_strtod_l+0xa0e>
 8005930:	e4c4      	b.n	80052bc <_strtod_l+0x4a4>
 8005932:	9b04      	ldr	r3, [sp, #16]
 8005934:	b333      	cbz	r3, 8005984 <_strtod_l+0xb6c>
 8005936:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005938:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800593c:	d822      	bhi.n	8005984 <_strtod_l+0xb6c>
 800593e:	a32e      	add	r3, pc, #184	; (adr r3, 80059f8 <_strtod_l+0xbe0>)
 8005940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005944:	4640      	mov	r0, r8
 8005946:	4649      	mov	r1, r9
 8005948:	f7fb f8f2 	bl	8000b30 <__aeabi_dcmple>
 800594c:	b1a0      	cbz	r0, 8005978 <_strtod_l+0xb60>
 800594e:	4649      	mov	r1, r9
 8005950:	4640      	mov	r0, r8
 8005952:	f7fb f949 	bl	8000be8 <__aeabi_d2uiz>
 8005956:	2801      	cmp	r0, #1
 8005958:	bf38      	it	cc
 800595a:	2001      	movcc	r0, #1
 800595c:	f7fa fdf2 	bl	8000544 <__aeabi_ui2d>
 8005960:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005962:	4680      	mov	r8, r0
 8005964:	4689      	mov	r9, r1
 8005966:	bb23      	cbnz	r3, 80059b2 <_strtod_l+0xb9a>
 8005968:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800596c:	9010      	str	r0, [sp, #64]	; 0x40
 800596e:	9311      	str	r3, [sp, #68]	; 0x44
 8005970:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005974:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005978:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800597a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800597c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8005980:	1a9b      	subs	r3, r3, r2
 8005982:	9309      	str	r3, [sp, #36]	; 0x24
 8005984:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005988:	eeb0 0a48 	vmov.f32	s0, s16
 800598c:	eef0 0a68 	vmov.f32	s1, s17
 8005990:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005994:	f002 f936 	bl	8007c04 <__ulp>
 8005998:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800599c:	ec53 2b10 	vmov	r2, r3, d0
 80059a0:	f7fa fe4a 	bl	8000638 <__aeabi_dmul>
 80059a4:	ec53 2b18 	vmov	r2, r3, d8
 80059a8:	f7fa fc90 	bl	80002cc <__adddf3>
 80059ac:	4682      	mov	sl, r0
 80059ae:	468b      	mov	fp, r1
 80059b0:	e78d      	b.n	80058ce <_strtod_l+0xab6>
 80059b2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 80059b6:	e7db      	b.n	8005970 <_strtod_l+0xb58>
 80059b8:	a311      	add	r3, pc, #68	; (adr r3, 8005a00 <_strtod_l+0xbe8>)
 80059ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059be:	f7fb f8ad 	bl	8000b1c <__aeabi_dcmplt>
 80059c2:	e7b2      	b.n	800592a <_strtod_l+0xb12>
 80059c4:	2300      	movs	r3, #0
 80059c6:	930a      	str	r3, [sp, #40]	; 0x28
 80059c8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80059ca:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80059cc:	6013      	str	r3, [r2, #0]
 80059ce:	f7ff ba6b 	b.w	8004ea8 <_strtod_l+0x90>
 80059d2:	2a65      	cmp	r2, #101	; 0x65
 80059d4:	f43f ab5f 	beq.w	8005096 <_strtod_l+0x27e>
 80059d8:	2a45      	cmp	r2, #69	; 0x45
 80059da:	f43f ab5c 	beq.w	8005096 <_strtod_l+0x27e>
 80059de:	2301      	movs	r3, #1
 80059e0:	f7ff bb94 	b.w	800510c <_strtod_l+0x2f4>
 80059e4:	f3af 8000 	nop.w
 80059e8:	94a03595 	.word	0x94a03595
 80059ec:	3fdfffff 	.word	0x3fdfffff
 80059f0:	35afe535 	.word	0x35afe535
 80059f4:	3fe00000 	.word	0x3fe00000
 80059f8:	ffc00000 	.word	0xffc00000
 80059fc:	41dfffff 	.word	0x41dfffff
 8005a00:	94a03595 	.word	0x94a03595
 8005a04:	3fcfffff 	.word	0x3fcfffff
 8005a08:	3ff00000 	.word	0x3ff00000
 8005a0c:	7ff00000 	.word	0x7ff00000
 8005a10:	7fe00000 	.word	0x7fe00000
 8005a14:	7c9fffff 	.word	0x7c9fffff
 8005a18:	3fe00000 	.word	0x3fe00000
 8005a1c:	bff00000 	.word	0xbff00000
 8005a20:	7fefffff 	.word	0x7fefffff

08005a24 <_strtod_r>:
 8005a24:	4b01      	ldr	r3, [pc, #4]	; (8005a2c <_strtod_r+0x8>)
 8005a26:	f7ff b9f7 	b.w	8004e18 <_strtod_l>
 8005a2a:	bf00      	nop
 8005a2c:	20000074 	.word	0x20000074

08005a30 <_strtol_l.constprop.0>:
 8005a30:	2b01      	cmp	r3, #1
 8005a32:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a36:	d001      	beq.n	8005a3c <_strtol_l.constprop.0+0xc>
 8005a38:	2b24      	cmp	r3, #36	; 0x24
 8005a3a:	d906      	bls.n	8005a4a <_strtol_l.constprop.0+0x1a>
 8005a3c:	f7fe fa70 	bl	8003f20 <__errno>
 8005a40:	2316      	movs	r3, #22
 8005a42:	6003      	str	r3, [r0, #0]
 8005a44:	2000      	movs	r0, #0
 8005a46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a4a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8005b30 <_strtol_l.constprop.0+0x100>
 8005a4e:	460d      	mov	r5, r1
 8005a50:	462e      	mov	r6, r5
 8005a52:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005a56:	f814 700c 	ldrb.w	r7, [r4, ip]
 8005a5a:	f017 0708 	ands.w	r7, r7, #8
 8005a5e:	d1f7      	bne.n	8005a50 <_strtol_l.constprop.0+0x20>
 8005a60:	2c2d      	cmp	r4, #45	; 0x2d
 8005a62:	d132      	bne.n	8005aca <_strtol_l.constprop.0+0x9a>
 8005a64:	782c      	ldrb	r4, [r5, #0]
 8005a66:	2701      	movs	r7, #1
 8005a68:	1cb5      	adds	r5, r6, #2
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d05b      	beq.n	8005b26 <_strtol_l.constprop.0+0xf6>
 8005a6e:	2b10      	cmp	r3, #16
 8005a70:	d109      	bne.n	8005a86 <_strtol_l.constprop.0+0x56>
 8005a72:	2c30      	cmp	r4, #48	; 0x30
 8005a74:	d107      	bne.n	8005a86 <_strtol_l.constprop.0+0x56>
 8005a76:	782c      	ldrb	r4, [r5, #0]
 8005a78:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8005a7c:	2c58      	cmp	r4, #88	; 0x58
 8005a7e:	d14d      	bne.n	8005b1c <_strtol_l.constprop.0+0xec>
 8005a80:	786c      	ldrb	r4, [r5, #1]
 8005a82:	2310      	movs	r3, #16
 8005a84:	3502      	adds	r5, #2
 8005a86:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8005a8a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8005a8e:	f04f 0c00 	mov.w	ip, #0
 8005a92:	fbb8 f9f3 	udiv	r9, r8, r3
 8005a96:	4666      	mov	r6, ip
 8005a98:	fb03 8a19 	mls	sl, r3, r9, r8
 8005a9c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8005aa0:	f1be 0f09 	cmp.w	lr, #9
 8005aa4:	d816      	bhi.n	8005ad4 <_strtol_l.constprop.0+0xa4>
 8005aa6:	4674      	mov	r4, lr
 8005aa8:	42a3      	cmp	r3, r4
 8005aaa:	dd24      	ble.n	8005af6 <_strtol_l.constprop.0+0xc6>
 8005aac:	f1bc 0f00 	cmp.w	ip, #0
 8005ab0:	db1e      	blt.n	8005af0 <_strtol_l.constprop.0+0xc0>
 8005ab2:	45b1      	cmp	r9, r6
 8005ab4:	d31c      	bcc.n	8005af0 <_strtol_l.constprop.0+0xc0>
 8005ab6:	d101      	bne.n	8005abc <_strtol_l.constprop.0+0x8c>
 8005ab8:	45a2      	cmp	sl, r4
 8005aba:	db19      	blt.n	8005af0 <_strtol_l.constprop.0+0xc0>
 8005abc:	fb06 4603 	mla	r6, r6, r3, r4
 8005ac0:	f04f 0c01 	mov.w	ip, #1
 8005ac4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005ac8:	e7e8      	b.n	8005a9c <_strtol_l.constprop.0+0x6c>
 8005aca:	2c2b      	cmp	r4, #43	; 0x2b
 8005acc:	bf04      	itt	eq
 8005ace:	782c      	ldrbeq	r4, [r5, #0]
 8005ad0:	1cb5      	addeq	r5, r6, #2
 8005ad2:	e7ca      	b.n	8005a6a <_strtol_l.constprop.0+0x3a>
 8005ad4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8005ad8:	f1be 0f19 	cmp.w	lr, #25
 8005adc:	d801      	bhi.n	8005ae2 <_strtol_l.constprop.0+0xb2>
 8005ade:	3c37      	subs	r4, #55	; 0x37
 8005ae0:	e7e2      	b.n	8005aa8 <_strtol_l.constprop.0+0x78>
 8005ae2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8005ae6:	f1be 0f19 	cmp.w	lr, #25
 8005aea:	d804      	bhi.n	8005af6 <_strtol_l.constprop.0+0xc6>
 8005aec:	3c57      	subs	r4, #87	; 0x57
 8005aee:	e7db      	b.n	8005aa8 <_strtol_l.constprop.0+0x78>
 8005af0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8005af4:	e7e6      	b.n	8005ac4 <_strtol_l.constprop.0+0x94>
 8005af6:	f1bc 0f00 	cmp.w	ip, #0
 8005afa:	da05      	bge.n	8005b08 <_strtol_l.constprop.0+0xd8>
 8005afc:	2322      	movs	r3, #34	; 0x22
 8005afe:	6003      	str	r3, [r0, #0]
 8005b00:	4646      	mov	r6, r8
 8005b02:	b942      	cbnz	r2, 8005b16 <_strtol_l.constprop.0+0xe6>
 8005b04:	4630      	mov	r0, r6
 8005b06:	e79e      	b.n	8005a46 <_strtol_l.constprop.0+0x16>
 8005b08:	b107      	cbz	r7, 8005b0c <_strtol_l.constprop.0+0xdc>
 8005b0a:	4276      	negs	r6, r6
 8005b0c:	2a00      	cmp	r2, #0
 8005b0e:	d0f9      	beq.n	8005b04 <_strtol_l.constprop.0+0xd4>
 8005b10:	f1bc 0f00 	cmp.w	ip, #0
 8005b14:	d000      	beq.n	8005b18 <_strtol_l.constprop.0+0xe8>
 8005b16:	1e69      	subs	r1, r5, #1
 8005b18:	6011      	str	r1, [r2, #0]
 8005b1a:	e7f3      	b.n	8005b04 <_strtol_l.constprop.0+0xd4>
 8005b1c:	2430      	movs	r4, #48	; 0x30
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d1b1      	bne.n	8005a86 <_strtol_l.constprop.0+0x56>
 8005b22:	2308      	movs	r3, #8
 8005b24:	e7af      	b.n	8005a86 <_strtol_l.constprop.0+0x56>
 8005b26:	2c30      	cmp	r4, #48	; 0x30
 8005b28:	d0a5      	beq.n	8005a76 <_strtol_l.constprop.0+0x46>
 8005b2a:	230a      	movs	r3, #10
 8005b2c:	e7ab      	b.n	8005a86 <_strtol_l.constprop.0+0x56>
 8005b2e:	bf00      	nop
 8005b30:	08008d09 	.word	0x08008d09

08005b34 <_strtol_r>:
 8005b34:	f7ff bf7c 	b.w	8005a30 <_strtol_l.constprop.0>

08005b38 <__swbuf_r>:
 8005b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b3a:	460e      	mov	r6, r1
 8005b3c:	4614      	mov	r4, r2
 8005b3e:	4605      	mov	r5, r0
 8005b40:	b118      	cbz	r0, 8005b4a <__swbuf_r+0x12>
 8005b42:	6983      	ldr	r3, [r0, #24]
 8005b44:	b90b      	cbnz	r3, 8005b4a <__swbuf_r+0x12>
 8005b46:	f001 f84b 	bl	8006be0 <__sinit>
 8005b4a:	4b21      	ldr	r3, [pc, #132]	; (8005bd0 <__swbuf_r+0x98>)
 8005b4c:	429c      	cmp	r4, r3
 8005b4e:	d12b      	bne.n	8005ba8 <__swbuf_r+0x70>
 8005b50:	686c      	ldr	r4, [r5, #4]
 8005b52:	69a3      	ldr	r3, [r4, #24]
 8005b54:	60a3      	str	r3, [r4, #8]
 8005b56:	89a3      	ldrh	r3, [r4, #12]
 8005b58:	071a      	lsls	r2, r3, #28
 8005b5a:	d52f      	bpl.n	8005bbc <__swbuf_r+0x84>
 8005b5c:	6923      	ldr	r3, [r4, #16]
 8005b5e:	b36b      	cbz	r3, 8005bbc <__swbuf_r+0x84>
 8005b60:	6923      	ldr	r3, [r4, #16]
 8005b62:	6820      	ldr	r0, [r4, #0]
 8005b64:	1ac0      	subs	r0, r0, r3
 8005b66:	6963      	ldr	r3, [r4, #20]
 8005b68:	b2f6      	uxtb	r6, r6
 8005b6a:	4283      	cmp	r3, r0
 8005b6c:	4637      	mov	r7, r6
 8005b6e:	dc04      	bgt.n	8005b7a <__swbuf_r+0x42>
 8005b70:	4621      	mov	r1, r4
 8005b72:	4628      	mov	r0, r5
 8005b74:	f000 ffa0 	bl	8006ab8 <_fflush_r>
 8005b78:	bb30      	cbnz	r0, 8005bc8 <__swbuf_r+0x90>
 8005b7a:	68a3      	ldr	r3, [r4, #8]
 8005b7c:	3b01      	subs	r3, #1
 8005b7e:	60a3      	str	r3, [r4, #8]
 8005b80:	6823      	ldr	r3, [r4, #0]
 8005b82:	1c5a      	adds	r2, r3, #1
 8005b84:	6022      	str	r2, [r4, #0]
 8005b86:	701e      	strb	r6, [r3, #0]
 8005b88:	6963      	ldr	r3, [r4, #20]
 8005b8a:	3001      	adds	r0, #1
 8005b8c:	4283      	cmp	r3, r0
 8005b8e:	d004      	beq.n	8005b9a <__swbuf_r+0x62>
 8005b90:	89a3      	ldrh	r3, [r4, #12]
 8005b92:	07db      	lsls	r3, r3, #31
 8005b94:	d506      	bpl.n	8005ba4 <__swbuf_r+0x6c>
 8005b96:	2e0a      	cmp	r6, #10
 8005b98:	d104      	bne.n	8005ba4 <__swbuf_r+0x6c>
 8005b9a:	4621      	mov	r1, r4
 8005b9c:	4628      	mov	r0, r5
 8005b9e:	f000 ff8b 	bl	8006ab8 <_fflush_r>
 8005ba2:	b988      	cbnz	r0, 8005bc8 <__swbuf_r+0x90>
 8005ba4:	4638      	mov	r0, r7
 8005ba6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ba8:	4b0a      	ldr	r3, [pc, #40]	; (8005bd4 <__swbuf_r+0x9c>)
 8005baa:	429c      	cmp	r4, r3
 8005bac:	d101      	bne.n	8005bb2 <__swbuf_r+0x7a>
 8005bae:	68ac      	ldr	r4, [r5, #8]
 8005bb0:	e7cf      	b.n	8005b52 <__swbuf_r+0x1a>
 8005bb2:	4b09      	ldr	r3, [pc, #36]	; (8005bd8 <__swbuf_r+0xa0>)
 8005bb4:	429c      	cmp	r4, r3
 8005bb6:	bf08      	it	eq
 8005bb8:	68ec      	ldreq	r4, [r5, #12]
 8005bba:	e7ca      	b.n	8005b52 <__swbuf_r+0x1a>
 8005bbc:	4621      	mov	r1, r4
 8005bbe:	4628      	mov	r0, r5
 8005bc0:	f000 f80c 	bl	8005bdc <__swsetup_r>
 8005bc4:	2800      	cmp	r0, #0
 8005bc6:	d0cb      	beq.n	8005b60 <__swbuf_r+0x28>
 8005bc8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005bcc:	e7ea      	b.n	8005ba4 <__swbuf_r+0x6c>
 8005bce:	bf00      	nop
 8005bd0:	08008ebc 	.word	0x08008ebc
 8005bd4:	08008edc 	.word	0x08008edc
 8005bd8:	08008e9c 	.word	0x08008e9c

08005bdc <__swsetup_r>:
 8005bdc:	4b32      	ldr	r3, [pc, #200]	; (8005ca8 <__swsetup_r+0xcc>)
 8005bde:	b570      	push	{r4, r5, r6, lr}
 8005be0:	681d      	ldr	r5, [r3, #0]
 8005be2:	4606      	mov	r6, r0
 8005be4:	460c      	mov	r4, r1
 8005be6:	b125      	cbz	r5, 8005bf2 <__swsetup_r+0x16>
 8005be8:	69ab      	ldr	r3, [r5, #24]
 8005bea:	b913      	cbnz	r3, 8005bf2 <__swsetup_r+0x16>
 8005bec:	4628      	mov	r0, r5
 8005bee:	f000 fff7 	bl	8006be0 <__sinit>
 8005bf2:	4b2e      	ldr	r3, [pc, #184]	; (8005cac <__swsetup_r+0xd0>)
 8005bf4:	429c      	cmp	r4, r3
 8005bf6:	d10f      	bne.n	8005c18 <__swsetup_r+0x3c>
 8005bf8:	686c      	ldr	r4, [r5, #4]
 8005bfa:	89a3      	ldrh	r3, [r4, #12]
 8005bfc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005c00:	0719      	lsls	r1, r3, #28
 8005c02:	d42c      	bmi.n	8005c5e <__swsetup_r+0x82>
 8005c04:	06dd      	lsls	r5, r3, #27
 8005c06:	d411      	bmi.n	8005c2c <__swsetup_r+0x50>
 8005c08:	2309      	movs	r3, #9
 8005c0a:	6033      	str	r3, [r6, #0]
 8005c0c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005c10:	81a3      	strh	r3, [r4, #12]
 8005c12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005c16:	e03e      	b.n	8005c96 <__swsetup_r+0xba>
 8005c18:	4b25      	ldr	r3, [pc, #148]	; (8005cb0 <__swsetup_r+0xd4>)
 8005c1a:	429c      	cmp	r4, r3
 8005c1c:	d101      	bne.n	8005c22 <__swsetup_r+0x46>
 8005c1e:	68ac      	ldr	r4, [r5, #8]
 8005c20:	e7eb      	b.n	8005bfa <__swsetup_r+0x1e>
 8005c22:	4b24      	ldr	r3, [pc, #144]	; (8005cb4 <__swsetup_r+0xd8>)
 8005c24:	429c      	cmp	r4, r3
 8005c26:	bf08      	it	eq
 8005c28:	68ec      	ldreq	r4, [r5, #12]
 8005c2a:	e7e6      	b.n	8005bfa <__swsetup_r+0x1e>
 8005c2c:	0758      	lsls	r0, r3, #29
 8005c2e:	d512      	bpl.n	8005c56 <__swsetup_r+0x7a>
 8005c30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005c32:	b141      	cbz	r1, 8005c46 <__swsetup_r+0x6a>
 8005c34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005c38:	4299      	cmp	r1, r3
 8005c3a:	d002      	beq.n	8005c42 <__swsetup_r+0x66>
 8005c3c:	4630      	mov	r0, r6
 8005c3e:	f002 f947 	bl	8007ed0 <_free_r>
 8005c42:	2300      	movs	r3, #0
 8005c44:	6363      	str	r3, [r4, #52]	; 0x34
 8005c46:	89a3      	ldrh	r3, [r4, #12]
 8005c48:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005c4c:	81a3      	strh	r3, [r4, #12]
 8005c4e:	2300      	movs	r3, #0
 8005c50:	6063      	str	r3, [r4, #4]
 8005c52:	6923      	ldr	r3, [r4, #16]
 8005c54:	6023      	str	r3, [r4, #0]
 8005c56:	89a3      	ldrh	r3, [r4, #12]
 8005c58:	f043 0308 	orr.w	r3, r3, #8
 8005c5c:	81a3      	strh	r3, [r4, #12]
 8005c5e:	6923      	ldr	r3, [r4, #16]
 8005c60:	b94b      	cbnz	r3, 8005c76 <__swsetup_r+0x9a>
 8005c62:	89a3      	ldrh	r3, [r4, #12]
 8005c64:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005c68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c6c:	d003      	beq.n	8005c76 <__swsetup_r+0x9a>
 8005c6e:	4621      	mov	r1, r4
 8005c70:	4630      	mov	r0, r6
 8005c72:	f001 fbed 	bl	8007450 <__smakebuf_r>
 8005c76:	89a0      	ldrh	r0, [r4, #12]
 8005c78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005c7c:	f010 0301 	ands.w	r3, r0, #1
 8005c80:	d00a      	beq.n	8005c98 <__swsetup_r+0xbc>
 8005c82:	2300      	movs	r3, #0
 8005c84:	60a3      	str	r3, [r4, #8]
 8005c86:	6963      	ldr	r3, [r4, #20]
 8005c88:	425b      	negs	r3, r3
 8005c8a:	61a3      	str	r3, [r4, #24]
 8005c8c:	6923      	ldr	r3, [r4, #16]
 8005c8e:	b943      	cbnz	r3, 8005ca2 <__swsetup_r+0xc6>
 8005c90:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005c94:	d1ba      	bne.n	8005c0c <__swsetup_r+0x30>
 8005c96:	bd70      	pop	{r4, r5, r6, pc}
 8005c98:	0781      	lsls	r1, r0, #30
 8005c9a:	bf58      	it	pl
 8005c9c:	6963      	ldrpl	r3, [r4, #20]
 8005c9e:	60a3      	str	r3, [r4, #8]
 8005ca0:	e7f4      	b.n	8005c8c <__swsetup_r+0xb0>
 8005ca2:	2000      	movs	r0, #0
 8005ca4:	e7f7      	b.n	8005c96 <__swsetup_r+0xba>
 8005ca6:	bf00      	nop
 8005ca8:	2000000c 	.word	0x2000000c
 8005cac:	08008ebc 	.word	0x08008ebc
 8005cb0:	08008edc 	.word	0x08008edc
 8005cb4:	08008e9c 	.word	0x08008e9c

08005cb8 <quorem>:
 8005cb8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cbc:	6903      	ldr	r3, [r0, #16]
 8005cbe:	690c      	ldr	r4, [r1, #16]
 8005cc0:	42a3      	cmp	r3, r4
 8005cc2:	4607      	mov	r7, r0
 8005cc4:	f2c0 8081 	blt.w	8005dca <quorem+0x112>
 8005cc8:	3c01      	subs	r4, #1
 8005cca:	f101 0814 	add.w	r8, r1, #20
 8005cce:	f100 0514 	add.w	r5, r0, #20
 8005cd2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005cd6:	9301      	str	r3, [sp, #4]
 8005cd8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005cdc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005ce0:	3301      	adds	r3, #1
 8005ce2:	429a      	cmp	r2, r3
 8005ce4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005ce8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005cec:	fbb2 f6f3 	udiv	r6, r2, r3
 8005cf0:	d331      	bcc.n	8005d56 <quorem+0x9e>
 8005cf2:	f04f 0e00 	mov.w	lr, #0
 8005cf6:	4640      	mov	r0, r8
 8005cf8:	46ac      	mov	ip, r5
 8005cfa:	46f2      	mov	sl, lr
 8005cfc:	f850 2b04 	ldr.w	r2, [r0], #4
 8005d00:	b293      	uxth	r3, r2
 8005d02:	fb06 e303 	mla	r3, r6, r3, lr
 8005d06:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005d0a:	b29b      	uxth	r3, r3
 8005d0c:	ebaa 0303 	sub.w	r3, sl, r3
 8005d10:	f8dc a000 	ldr.w	sl, [ip]
 8005d14:	0c12      	lsrs	r2, r2, #16
 8005d16:	fa13 f38a 	uxtah	r3, r3, sl
 8005d1a:	fb06 e202 	mla	r2, r6, r2, lr
 8005d1e:	9300      	str	r3, [sp, #0]
 8005d20:	9b00      	ldr	r3, [sp, #0]
 8005d22:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005d26:	b292      	uxth	r2, r2
 8005d28:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005d2c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005d30:	f8bd 3000 	ldrh.w	r3, [sp]
 8005d34:	4581      	cmp	r9, r0
 8005d36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005d3a:	f84c 3b04 	str.w	r3, [ip], #4
 8005d3e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005d42:	d2db      	bcs.n	8005cfc <quorem+0x44>
 8005d44:	f855 300b 	ldr.w	r3, [r5, fp]
 8005d48:	b92b      	cbnz	r3, 8005d56 <quorem+0x9e>
 8005d4a:	9b01      	ldr	r3, [sp, #4]
 8005d4c:	3b04      	subs	r3, #4
 8005d4e:	429d      	cmp	r5, r3
 8005d50:	461a      	mov	r2, r3
 8005d52:	d32e      	bcc.n	8005db2 <quorem+0xfa>
 8005d54:	613c      	str	r4, [r7, #16]
 8005d56:	4638      	mov	r0, r7
 8005d58:	f001 feae 	bl	8007ab8 <__mcmp>
 8005d5c:	2800      	cmp	r0, #0
 8005d5e:	db24      	blt.n	8005daa <quorem+0xf2>
 8005d60:	3601      	adds	r6, #1
 8005d62:	4628      	mov	r0, r5
 8005d64:	f04f 0c00 	mov.w	ip, #0
 8005d68:	f858 2b04 	ldr.w	r2, [r8], #4
 8005d6c:	f8d0 e000 	ldr.w	lr, [r0]
 8005d70:	b293      	uxth	r3, r2
 8005d72:	ebac 0303 	sub.w	r3, ip, r3
 8005d76:	0c12      	lsrs	r2, r2, #16
 8005d78:	fa13 f38e 	uxtah	r3, r3, lr
 8005d7c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005d80:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005d84:	b29b      	uxth	r3, r3
 8005d86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005d8a:	45c1      	cmp	r9, r8
 8005d8c:	f840 3b04 	str.w	r3, [r0], #4
 8005d90:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005d94:	d2e8      	bcs.n	8005d68 <quorem+0xb0>
 8005d96:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005d9a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005d9e:	b922      	cbnz	r2, 8005daa <quorem+0xf2>
 8005da0:	3b04      	subs	r3, #4
 8005da2:	429d      	cmp	r5, r3
 8005da4:	461a      	mov	r2, r3
 8005da6:	d30a      	bcc.n	8005dbe <quorem+0x106>
 8005da8:	613c      	str	r4, [r7, #16]
 8005daa:	4630      	mov	r0, r6
 8005dac:	b003      	add	sp, #12
 8005dae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005db2:	6812      	ldr	r2, [r2, #0]
 8005db4:	3b04      	subs	r3, #4
 8005db6:	2a00      	cmp	r2, #0
 8005db8:	d1cc      	bne.n	8005d54 <quorem+0x9c>
 8005dba:	3c01      	subs	r4, #1
 8005dbc:	e7c7      	b.n	8005d4e <quorem+0x96>
 8005dbe:	6812      	ldr	r2, [r2, #0]
 8005dc0:	3b04      	subs	r3, #4
 8005dc2:	2a00      	cmp	r2, #0
 8005dc4:	d1f0      	bne.n	8005da8 <quorem+0xf0>
 8005dc6:	3c01      	subs	r4, #1
 8005dc8:	e7eb      	b.n	8005da2 <quorem+0xea>
 8005dca:	2000      	movs	r0, #0
 8005dcc:	e7ee      	b.n	8005dac <quorem+0xf4>
	...

08005dd0 <_dtoa_r>:
 8005dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dd4:	ed2d 8b04 	vpush	{d8-d9}
 8005dd8:	ec57 6b10 	vmov	r6, r7, d0
 8005ddc:	b093      	sub	sp, #76	; 0x4c
 8005dde:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005de0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005de4:	9106      	str	r1, [sp, #24]
 8005de6:	ee10 aa10 	vmov	sl, s0
 8005dea:	4604      	mov	r4, r0
 8005dec:	9209      	str	r2, [sp, #36]	; 0x24
 8005dee:	930c      	str	r3, [sp, #48]	; 0x30
 8005df0:	46bb      	mov	fp, r7
 8005df2:	b975      	cbnz	r5, 8005e12 <_dtoa_r+0x42>
 8005df4:	2010      	movs	r0, #16
 8005df6:	f001 fb6b 	bl	80074d0 <malloc>
 8005dfa:	4602      	mov	r2, r0
 8005dfc:	6260      	str	r0, [r4, #36]	; 0x24
 8005dfe:	b920      	cbnz	r0, 8005e0a <_dtoa_r+0x3a>
 8005e00:	4ba7      	ldr	r3, [pc, #668]	; (80060a0 <_dtoa_r+0x2d0>)
 8005e02:	21ea      	movs	r1, #234	; 0xea
 8005e04:	48a7      	ldr	r0, [pc, #668]	; (80060a4 <_dtoa_r+0x2d4>)
 8005e06:	f002 fc89 	bl	800871c <__assert_func>
 8005e0a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005e0e:	6005      	str	r5, [r0, #0]
 8005e10:	60c5      	str	r5, [r0, #12]
 8005e12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e14:	6819      	ldr	r1, [r3, #0]
 8005e16:	b151      	cbz	r1, 8005e2e <_dtoa_r+0x5e>
 8005e18:	685a      	ldr	r2, [r3, #4]
 8005e1a:	604a      	str	r2, [r1, #4]
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	4093      	lsls	r3, r2
 8005e20:	608b      	str	r3, [r1, #8]
 8005e22:	4620      	mov	r0, r4
 8005e24:	f001 fbbc 	bl	80075a0 <_Bfree>
 8005e28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	601a      	str	r2, [r3, #0]
 8005e2e:	1e3b      	subs	r3, r7, #0
 8005e30:	bfaa      	itet	ge
 8005e32:	2300      	movge	r3, #0
 8005e34:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8005e38:	f8c8 3000 	strge.w	r3, [r8]
 8005e3c:	4b9a      	ldr	r3, [pc, #616]	; (80060a8 <_dtoa_r+0x2d8>)
 8005e3e:	bfbc      	itt	lt
 8005e40:	2201      	movlt	r2, #1
 8005e42:	f8c8 2000 	strlt.w	r2, [r8]
 8005e46:	ea33 030b 	bics.w	r3, r3, fp
 8005e4a:	d11b      	bne.n	8005e84 <_dtoa_r+0xb4>
 8005e4c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005e4e:	f242 730f 	movw	r3, #9999	; 0x270f
 8005e52:	6013      	str	r3, [r2, #0]
 8005e54:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005e58:	4333      	orrs	r3, r6
 8005e5a:	f000 8592 	beq.w	8006982 <_dtoa_r+0xbb2>
 8005e5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005e60:	b963      	cbnz	r3, 8005e7c <_dtoa_r+0xac>
 8005e62:	4b92      	ldr	r3, [pc, #584]	; (80060ac <_dtoa_r+0x2dc>)
 8005e64:	e022      	b.n	8005eac <_dtoa_r+0xdc>
 8005e66:	4b92      	ldr	r3, [pc, #584]	; (80060b0 <_dtoa_r+0x2e0>)
 8005e68:	9301      	str	r3, [sp, #4]
 8005e6a:	3308      	adds	r3, #8
 8005e6c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005e6e:	6013      	str	r3, [r2, #0]
 8005e70:	9801      	ldr	r0, [sp, #4]
 8005e72:	b013      	add	sp, #76	; 0x4c
 8005e74:	ecbd 8b04 	vpop	{d8-d9}
 8005e78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e7c:	4b8b      	ldr	r3, [pc, #556]	; (80060ac <_dtoa_r+0x2dc>)
 8005e7e:	9301      	str	r3, [sp, #4]
 8005e80:	3303      	adds	r3, #3
 8005e82:	e7f3      	b.n	8005e6c <_dtoa_r+0x9c>
 8005e84:	2200      	movs	r2, #0
 8005e86:	2300      	movs	r3, #0
 8005e88:	4650      	mov	r0, sl
 8005e8a:	4659      	mov	r1, fp
 8005e8c:	f7fa fe3c 	bl	8000b08 <__aeabi_dcmpeq>
 8005e90:	ec4b ab19 	vmov	d9, sl, fp
 8005e94:	4680      	mov	r8, r0
 8005e96:	b158      	cbz	r0, 8005eb0 <_dtoa_r+0xe0>
 8005e98:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	6013      	str	r3, [r2, #0]
 8005e9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	f000 856b 	beq.w	800697c <_dtoa_r+0xbac>
 8005ea6:	4883      	ldr	r0, [pc, #524]	; (80060b4 <_dtoa_r+0x2e4>)
 8005ea8:	6018      	str	r0, [r3, #0]
 8005eaa:	1e43      	subs	r3, r0, #1
 8005eac:	9301      	str	r3, [sp, #4]
 8005eae:	e7df      	b.n	8005e70 <_dtoa_r+0xa0>
 8005eb0:	ec4b ab10 	vmov	d0, sl, fp
 8005eb4:	aa10      	add	r2, sp, #64	; 0x40
 8005eb6:	a911      	add	r1, sp, #68	; 0x44
 8005eb8:	4620      	mov	r0, r4
 8005eba:	f001 ff1f 	bl	8007cfc <__d2b>
 8005ebe:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8005ec2:	ee08 0a10 	vmov	s16, r0
 8005ec6:	2d00      	cmp	r5, #0
 8005ec8:	f000 8084 	beq.w	8005fd4 <_dtoa_r+0x204>
 8005ecc:	ee19 3a90 	vmov	r3, s19
 8005ed0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005ed4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005ed8:	4656      	mov	r6, sl
 8005eda:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005ede:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005ee2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8005ee6:	4b74      	ldr	r3, [pc, #464]	; (80060b8 <_dtoa_r+0x2e8>)
 8005ee8:	2200      	movs	r2, #0
 8005eea:	4630      	mov	r0, r6
 8005eec:	4639      	mov	r1, r7
 8005eee:	f7fa f9eb 	bl	80002c8 <__aeabi_dsub>
 8005ef2:	a365      	add	r3, pc, #404	; (adr r3, 8006088 <_dtoa_r+0x2b8>)
 8005ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ef8:	f7fa fb9e 	bl	8000638 <__aeabi_dmul>
 8005efc:	a364      	add	r3, pc, #400	; (adr r3, 8006090 <_dtoa_r+0x2c0>)
 8005efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f02:	f7fa f9e3 	bl	80002cc <__adddf3>
 8005f06:	4606      	mov	r6, r0
 8005f08:	4628      	mov	r0, r5
 8005f0a:	460f      	mov	r7, r1
 8005f0c:	f7fa fb2a 	bl	8000564 <__aeabi_i2d>
 8005f10:	a361      	add	r3, pc, #388	; (adr r3, 8006098 <_dtoa_r+0x2c8>)
 8005f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f16:	f7fa fb8f 	bl	8000638 <__aeabi_dmul>
 8005f1a:	4602      	mov	r2, r0
 8005f1c:	460b      	mov	r3, r1
 8005f1e:	4630      	mov	r0, r6
 8005f20:	4639      	mov	r1, r7
 8005f22:	f7fa f9d3 	bl	80002cc <__adddf3>
 8005f26:	4606      	mov	r6, r0
 8005f28:	460f      	mov	r7, r1
 8005f2a:	f7fa fe35 	bl	8000b98 <__aeabi_d2iz>
 8005f2e:	2200      	movs	r2, #0
 8005f30:	9000      	str	r0, [sp, #0]
 8005f32:	2300      	movs	r3, #0
 8005f34:	4630      	mov	r0, r6
 8005f36:	4639      	mov	r1, r7
 8005f38:	f7fa fdf0 	bl	8000b1c <__aeabi_dcmplt>
 8005f3c:	b150      	cbz	r0, 8005f54 <_dtoa_r+0x184>
 8005f3e:	9800      	ldr	r0, [sp, #0]
 8005f40:	f7fa fb10 	bl	8000564 <__aeabi_i2d>
 8005f44:	4632      	mov	r2, r6
 8005f46:	463b      	mov	r3, r7
 8005f48:	f7fa fdde 	bl	8000b08 <__aeabi_dcmpeq>
 8005f4c:	b910      	cbnz	r0, 8005f54 <_dtoa_r+0x184>
 8005f4e:	9b00      	ldr	r3, [sp, #0]
 8005f50:	3b01      	subs	r3, #1
 8005f52:	9300      	str	r3, [sp, #0]
 8005f54:	9b00      	ldr	r3, [sp, #0]
 8005f56:	2b16      	cmp	r3, #22
 8005f58:	d85a      	bhi.n	8006010 <_dtoa_r+0x240>
 8005f5a:	9a00      	ldr	r2, [sp, #0]
 8005f5c:	4b57      	ldr	r3, [pc, #348]	; (80060bc <_dtoa_r+0x2ec>)
 8005f5e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f66:	ec51 0b19 	vmov	r0, r1, d9
 8005f6a:	f7fa fdd7 	bl	8000b1c <__aeabi_dcmplt>
 8005f6e:	2800      	cmp	r0, #0
 8005f70:	d050      	beq.n	8006014 <_dtoa_r+0x244>
 8005f72:	9b00      	ldr	r3, [sp, #0]
 8005f74:	3b01      	subs	r3, #1
 8005f76:	9300      	str	r3, [sp, #0]
 8005f78:	2300      	movs	r3, #0
 8005f7a:	930b      	str	r3, [sp, #44]	; 0x2c
 8005f7c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005f7e:	1b5d      	subs	r5, r3, r5
 8005f80:	1e6b      	subs	r3, r5, #1
 8005f82:	9305      	str	r3, [sp, #20]
 8005f84:	bf45      	ittet	mi
 8005f86:	f1c5 0301 	rsbmi	r3, r5, #1
 8005f8a:	9304      	strmi	r3, [sp, #16]
 8005f8c:	2300      	movpl	r3, #0
 8005f8e:	2300      	movmi	r3, #0
 8005f90:	bf4c      	ite	mi
 8005f92:	9305      	strmi	r3, [sp, #20]
 8005f94:	9304      	strpl	r3, [sp, #16]
 8005f96:	9b00      	ldr	r3, [sp, #0]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	db3d      	blt.n	8006018 <_dtoa_r+0x248>
 8005f9c:	9b05      	ldr	r3, [sp, #20]
 8005f9e:	9a00      	ldr	r2, [sp, #0]
 8005fa0:	920a      	str	r2, [sp, #40]	; 0x28
 8005fa2:	4413      	add	r3, r2
 8005fa4:	9305      	str	r3, [sp, #20]
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	9307      	str	r3, [sp, #28]
 8005faa:	9b06      	ldr	r3, [sp, #24]
 8005fac:	2b09      	cmp	r3, #9
 8005fae:	f200 8089 	bhi.w	80060c4 <_dtoa_r+0x2f4>
 8005fb2:	2b05      	cmp	r3, #5
 8005fb4:	bfc4      	itt	gt
 8005fb6:	3b04      	subgt	r3, #4
 8005fb8:	9306      	strgt	r3, [sp, #24]
 8005fba:	9b06      	ldr	r3, [sp, #24]
 8005fbc:	f1a3 0302 	sub.w	r3, r3, #2
 8005fc0:	bfcc      	ite	gt
 8005fc2:	2500      	movgt	r5, #0
 8005fc4:	2501      	movle	r5, #1
 8005fc6:	2b03      	cmp	r3, #3
 8005fc8:	f200 8087 	bhi.w	80060da <_dtoa_r+0x30a>
 8005fcc:	e8df f003 	tbb	[pc, r3]
 8005fd0:	59383a2d 	.word	0x59383a2d
 8005fd4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005fd8:	441d      	add	r5, r3
 8005fda:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005fde:	2b20      	cmp	r3, #32
 8005fe0:	bfc1      	itttt	gt
 8005fe2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005fe6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005fea:	fa0b f303 	lslgt.w	r3, fp, r3
 8005fee:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005ff2:	bfda      	itte	le
 8005ff4:	f1c3 0320 	rsble	r3, r3, #32
 8005ff8:	fa06 f003 	lslle.w	r0, r6, r3
 8005ffc:	4318      	orrgt	r0, r3
 8005ffe:	f7fa faa1 	bl	8000544 <__aeabi_ui2d>
 8006002:	2301      	movs	r3, #1
 8006004:	4606      	mov	r6, r0
 8006006:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800600a:	3d01      	subs	r5, #1
 800600c:	930e      	str	r3, [sp, #56]	; 0x38
 800600e:	e76a      	b.n	8005ee6 <_dtoa_r+0x116>
 8006010:	2301      	movs	r3, #1
 8006012:	e7b2      	b.n	8005f7a <_dtoa_r+0x1aa>
 8006014:	900b      	str	r0, [sp, #44]	; 0x2c
 8006016:	e7b1      	b.n	8005f7c <_dtoa_r+0x1ac>
 8006018:	9b04      	ldr	r3, [sp, #16]
 800601a:	9a00      	ldr	r2, [sp, #0]
 800601c:	1a9b      	subs	r3, r3, r2
 800601e:	9304      	str	r3, [sp, #16]
 8006020:	4253      	negs	r3, r2
 8006022:	9307      	str	r3, [sp, #28]
 8006024:	2300      	movs	r3, #0
 8006026:	930a      	str	r3, [sp, #40]	; 0x28
 8006028:	e7bf      	b.n	8005faa <_dtoa_r+0x1da>
 800602a:	2300      	movs	r3, #0
 800602c:	9308      	str	r3, [sp, #32]
 800602e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006030:	2b00      	cmp	r3, #0
 8006032:	dc55      	bgt.n	80060e0 <_dtoa_r+0x310>
 8006034:	2301      	movs	r3, #1
 8006036:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800603a:	461a      	mov	r2, r3
 800603c:	9209      	str	r2, [sp, #36]	; 0x24
 800603e:	e00c      	b.n	800605a <_dtoa_r+0x28a>
 8006040:	2301      	movs	r3, #1
 8006042:	e7f3      	b.n	800602c <_dtoa_r+0x25c>
 8006044:	2300      	movs	r3, #0
 8006046:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006048:	9308      	str	r3, [sp, #32]
 800604a:	9b00      	ldr	r3, [sp, #0]
 800604c:	4413      	add	r3, r2
 800604e:	9302      	str	r3, [sp, #8]
 8006050:	3301      	adds	r3, #1
 8006052:	2b01      	cmp	r3, #1
 8006054:	9303      	str	r3, [sp, #12]
 8006056:	bfb8      	it	lt
 8006058:	2301      	movlt	r3, #1
 800605a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800605c:	2200      	movs	r2, #0
 800605e:	6042      	str	r2, [r0, #4]
 8006060:	2204      	movs	r2, #4
 8006062:	f102 0614 	add.w	r6, r2, #20
 8006066:	429e      	cmp	r6, r3
 8006068:	6841      	ldr	r1, [r0, #4]
 800606a:	d93d      	bls.n	80060e8 <_dtoa_r+0x318>
 800606c:	4620      	mov	r0, r4
 800606e:	f001 fa57 	bl	8007520 <_Balloc>
 8006072:	9001      	str	r0, [sp, #4]
 8006074:	2800      	cmp	r0, #0
 8006076:	d13b      	bne.n	80060f0 <_dtoa_r+0x320>
 8006078:	4b11      	ldr	r3, [pc, #68]	; (80060c0 <_dtoa_r+0x2f0>)
 800607a:	4602      	mov	r2, r0
 800607c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006080:	e6c0      	b.n	8005e04 <_dtoa_r+0x34>
 8006082:	2301      	movs	r3, #1
 8006084:	e7df      	b.n	8006046 <_dtoa_r+0x276>
 8006086:	bf00      	nop
 8006088:	636f4361 	.word	0x636f4361
 800608c:	3fd287a7 	.word	0x3fd287a7
 8006090:	8b60c8b3 	.word	0x8b60c8b3
 8006094:	3fc68a28 	.word	0x3fc68a28
 8006098:	509f79fb 	.word	0x509f79fb
 800609c:	3fd34413 	.word	0x3fd34413
 80060a0:	08008e16 	.word	0x08008e16
 80060a4:	08008e2d 	.word	0x08008e2d
 80060a8:	7ff00000 	.word	0x7ff00000
 80060ac:	08008e12 	.word	0x08008e12
 80060b0:	08008e09 	.word	0x08008e09
 80060b4:	08008c8d 	.word	0x08008c8d
 80060b8:	3ff80000 	.word	0x3ff80000
 80060bc:	08009000 	.word	0x08009000
 80060c0:	08008e88 	.word	0x08008e88
 80060c4:	2501      	movs	r5, #1
 80060c6:	2300      	movs	r3, #0
 80060c8:	9306      	str	r3, [sp, #24]
 80060ca:	9508      	str	r5, [sp, #32]
 80060cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80060d0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80060d4:	2200      	movs	r2, #0
 80060d6:	2312      	movs	r3, #18
 80060d8:	e7b0      	b.n	800603c <_dtoa_r+0x26c>
 80060da:	2301      	movs	r3, #1
 80060dc:	9308      	str	r3, [sp, #32]
 80060de:	e7f5      	b.n	80060cc <_dtoa_r+0x2fc>
 80060e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060e2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80060e6:	e7b8      	b.n	800605a <_dtoa_r+0x28a>
 80060e8:	3101      	adds	r1, #1
 80060ea:	6041      	str	r1, [r0, #4]
 80060ec:	0052      	lsls	r2, r2, #1
 80060ee:	e7b8      	b.n	8006062 <_dtoa_r+0x292>
 80060f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80060f2:	9a01      	ldr	r2, [sp, #4]
 80060f4:	601a      	str	r2, [r3, #0]
 80060f6:	9b03      	ldr	r3, [sp, #12]
 80060f8:	2b0e      	cmp	r3, #14
 80060fa:	f200 809d 	bhi.w	8006238 <_dtoa_r+0x468>
 80060fe:	2d00      	cmp	r5, #0
 8006100:	f000 809a 	beq.w	8006238 <_dtoa_r+0x468>
 8006104:	9b00      	ldr	r3, [sp, #0]
 8006106:	2b00      	cmp	r3, #0
 8006108:	dd32      	ble.n	8006170 <_dtoa_r+0x3a0>
 800610a:	4ab7      	ldr	r2, [pc, #732]	; (80063e8 <_dtoa_r+0x618>)
 800610c:	f003 030f 	and.w	r3, r3, #15
 8006110:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006114:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006118:	9b00      	ldr	r3, [sp, #0]
 800611a:	05d8      	lsls	r0, r3, #23
 800611c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006120:	d516      	bpl.n	8006150 <_dtoa_r+0x380>
 8006122:	4bb2      	ldr	r3, [pc, #712]	; (80063ec <_dtoa_r+0x61c>)
 8006124:	ec51 0b19 	vmov	r0, r1, d9
 8006128:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800612c:	f7fa fbae 	bl	800088c <__aeabi_ddiv>
 8006130:	f007 070f 	and.w	r7, r7, #15
 8006134:	4682      	mov	sl, r0
 8006136:	468b      	mov	fp, r1
 8006138:	2503      	movs	r5, #3
 800613a:	4eac      	ldr	r6, [pc, #688]	; (80063ec <_dtoa_r+0x61c>)
 800613c:	b957      	cbnz	r7, 8006154 <_dtoa_r+0x384>
 800613e:	4642      	mov	r2, r8
 8006140:	464b      	mov	r3, r9
 8006142:	4650      	mov	r0, sl
 8006144:	4659      	mov	r1, fp
 8006146:	f7fa fba1 	bl	800088c <__aeabi_ddiv>
 800614a:	4682      	mov	sl, r0
 800614c:	468b      	mov	fp, r1
 800614e:	e028      	b.n	80061a2 <_dtoa_r+0x3d2>
 8006150:	2502      	movs	r5, #2
 8006152:	e7f2      	b.n	800613a <_dtoa_r+0x36a>
 8006154:	07f9      	lsls	r1, r7, #31
 8006156:	d508      	bpl.n	800616a <_dtoa_r+0x39a>
 8006158:	4640      	mov	r0, r8
 800615a:	4649      	mov	r1, r9
 800615c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006160:	f7fa fa6a 	bl	8000638 <__aeabi_dmul>
 8006164:	3501      	adds	r5, #1
 8006166:	4680      	mov	r8, r0
 8006168:	4689      	mov	r9, r1
 800616a:	107f      	asrs	r7, r7, #1
 800616c:	3608      	adds	r6, #8
 800616e:	e7e5      	b.n	800613c <_dtoa_r+0x36c>
 8006170:	f000 809b 	beq.w	80062aa <_dtoa_r+0x4da>
 8006174:	9b00      	ldr	r3, [sp, #0]
 8006176:	4f9d      	ldr	r7, [pc, #628]	; (80063ec <_dtoa_r+0x61c>)
 8006178:	425e      	negs	r6, r3
 800617a:	4b9b      	ldr	r3, [pc, #620]	; (80063e8 <_dtoa_r+0x618>)
 800617c:	f006 020f 	and.w	r2, r6, #15
 8006180:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006188:	ec51 0b19 	vmov	r0, r1, d9
 800618c:	f7fa fa54 	bl	8000638 <__aeabi_dmul>
 8006190:	1136      	asrs	r6, r6, #4
 8006192:	4682      	mov	sl, r0
 8006194:	468b      	mov	fp, r1
 8006196:	2300      	movs	r3, #0
 8006198:	2502      	movs	r5, #2
 800619a:	2e00      	cmp	r6, #0
 800619c:	d17a      	bne.n	8006294 <_dtoa_r+0x4c4>
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d1d3      	bne.n	800614a <_dtoa_r+0x37a>
 80061a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	f000 8082 	beq.w	80062ae <_dtoa_r+0x4de>
 80061aa:	4b91      	ldr	r3, [pc, #580]	; (80063f0 <_dtoa_r+0x620>)
 80061ac:	2200      	movs	r2, #0
 80061ae:	4650      	mov	r0, sl
 80061b0:	4659      	mov	r1, fp
 80061b2:	f7fa fcb3 	bl	8000b1c <__aeabi_dcmplt>
 80061b6:	2800      	cmp	r0, #0
 80061b8:	d079      	beq.n	80062ae <_dtoa_r+0x4de>
 80061ba:	9b03      	ldr	r3, [sp, #12]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d076      	beq.n	80062ae <_dtoa_r+0x4de>
 80061c0:	9b02      	ldr	r3, [sp, #8]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	dd36      	ble.n	8006234 <_dtoa_r+0x464>
 80061c6:	9b00      	ldr	r3, [sp, #0]
 80061c8:	4650      	mov	r0, sl
 80061ca:	4659      	mov	r1, fp
 80061cc:	1e5f      	subs	r7, r3, #1
 80061ce:	2200      	movs	r2, #0
 80061d0:	4b88      	ldr	r3, [pc, #544]	; (80063f4 <_dtoa_r+0x624>)
 80061d2:	f7fa fa31 	bl	8000638 <__aeabi_dmul>
 80061d6:	9e02      	ldr	r6, [sp, #8]
 80061d8:	4682      	mov	sl, r0
 80061da:	468b      	mov	fp, r1
 80061dc:	3501      	adds	r5, #1
 80061de:	4628      	mov	r0, r5
 80061e0:	f7fa f9c0 	bl	8000564 <__aeabi_i2d>
 80061e4:	4652      	mov	r2, sl
 80061e6:	465b      	mov	r3, fp
 80061e8:	f7fa fa26 	bl	8000638 <__aeabi_dmul>
 80061ec:	4b82      	ldr	r3, [pc, #520]	; (80063f8 <_dtoa_r+0x628>)
 80061ee:	2200      	movs	r2, #0
 80061f0:	f7fa f86c 	bl	80002cc <__adddf3>
 80061f4:	46d0      	mov	r8, sl
 80061f6:	46d9      	mov	r9, fp
 80061f8:	4682      	mov	sl, r0
 80061fa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80061fe:	2e00      	cmp	r6, #0
 8006200:	d158      	bne.n	80062b4 <_dtoa_r+0x4e4>
 8006202:	4b7e      	ldr	r3, [pc, #504]	; (80063fc <_dtoa_r+0x62c>)
 8006204:	2200      	movs	r2, #0
 8006206:	4640      	mov	r0, r8
 8006208:	4649      	mov	r1, r9
 800620a:	f7fa f85d 	bl	80002c8 <__aeabi_dsub>
 800620e:	4652      	mov	r2, sl
 8006210:	465b      	mov	r3, fp
 8006212:	4680      	mov	r8, r0
 8006214:	4689      	mov	r9, r1
 8006216:	f7fa fc9f 	bl	8000b58 <__aeabi_dcmpgt>
 800621a:	2800      	cmp	r0, #0
 800621c:	f040 8295 	bne.w	800674a <_dtoa_r+0x97a>
 8006220:	4652      	mov	r2, sl
 8006222:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006226:	4640      	mov	r0, r8
 8006228:	4649      	mov	r1, r9
 800622a:	f7fa fc77 	bl	8000b1c <__aeabi_dcmplt>
 800622e:	2800      	cmp	r0, #0
 8006230:	f040 8289 	bne.w	8006746 <_dtoa_r+0x976>
 8006234:	ec5b ab19 	vmov	sl, fp, d9
 8006238:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800623a:	2b00      	cmp	r3, #0
 800623c:	f2c0 8148 	blt.w	80064d0 <_dtoa_r+0x700>
 8006240:	9a00      	ldr	r2, [sp, #0]
 8006242:	2a0e      	cmp	r2, #14
 8006244:	f300 8144 	bgt.w	80064d0 <_dtoa_r+0x700>
 8006248:	4b67      	ldr	r3, [pc, #412]	; (80063e8 <_dtoa_r+0x618>)
 800624a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800624e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006252:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006254:	2b00      	cmp	r3, #0
 8006256:	f280 80d5 	bge.w	8006404 <_dtoa_r+0x634>
 800625a:	9b03      	ldr	r3, [sp, #12]
 800625c:	2b00      	cmp	r3, #0
 800625e:	f300 80d1 	bgt.w	8006404 <_dtoa_r+0x634>
 8006262:	f040 826f 	bne.w	8006744 <_dtoa_r+0x974>
 8006266:	4b65      	ldr	r3, [pc, #404]	; (80063fc <_dtoa_r+0x62c>)
 8006268:	2200      	movs	r2, #0
 800626a:	4640      	mov	r0, r8
 800626c:	4649      	mov	r1, r9
 800626e:	f7fa f9e3 	bl	8000638 <__aeabi_dmul>
 8006272:	4652      	mov	r2, sl
 8006274:	465b      	mov	r3, fp
 8006276:	f7fa fc65 	bl	8000b44 <__aeabi_dcmpge>
 800627a:	9e03      	ldr	r6, [sp, #12]
 800627c:	4637      	mov	r7, r6
 800627e:	2800      	cmp	r0, #0
 8006280:	f040 8245 	bne.w	800670e <_dtoa_r+0x93e>
 8006284:	9d01      	ldr	r5, [sp, #4]
 8006286:	2331      	movs	r3, #49	; 0x31
 8006288:	f805 3b01 	strb.w	r3, [r5], #1
 800628c:	9b00      	ldr	r3, [sp, #0]
 800628e:	3301      	adds	r3, #1
 8006290:	9300      	str	r3, [sp, #0]
 8006292:	e240      	b.n	8006716 <_dtoa_r+0x946>
 8006294:	07f2      	lsls	r2, r6, #31
 8006296:	d505      	bpl.n	80062a4 <_dtoa_r+0x4d4>
 8006298:	e9d7 2300 	ldrd	r2, r3, [r7]
 800629c:	f7fa f9cc 	bl	8000638 <__aeabi_dmul>
 80062a0:	3501      	adds	r5, #1
 80062a2:	2301      	movs	r3, #1
 80062a4:	1076      	asrs	r6, r6, #1
 80062a6:	3708      	adds	r7, #8
 80062a8:	e777      	b.n	800619a <_dtoa_r+0x3ca>
 80062aa:	2502      	movs	r5, #2
 80062ac:	e779      	b.n	80061a2 <_dtoa_r+0x3d2>
 80062ae:	9f00      	ldr	r7, [sp, #0]
 80062b0:	9e03      	ldr	r6, [sp, #12]
 80062b2:	e794      	b.n	80061de <_dtoa_r+0x40e>
 80062b4:	9901      	ldr	r1, [sp, #4]
 80062b6:	4b4c      	ldr	r3, [pc, #304]	; (80063e8 <_dtoa_r+0x618>)
 80062b8:	4431      	add	r1, r6
 80062ba:	910d      	str	r1, [sp, #52]	; 0x34
 80062bc:	9908      	ldr	r1, [sp, #32]
 80062be:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80062c2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80062c6:	2900      	cmp	r1, #0
 80062c8:	d043      	beq.n	8006352 <_dtoa_r+0x582>
 80062ca:	494d      	ldr	r1, [pc, #308]	; (8006400 <_dtoa_r+0x630>)
 80062cc:	2000      	movs	r0, #0
 80062ce:	f7fa fadd 	bl	800088c <__aeabi_ddiv>
 80062d2:	4652      	mov	r2, sl
 80062d4:	465b      	mov	r3, fp
 80062d6:	f7f9 fff7 	bl	80002c8 <__aeabi_dsub>
 80062da:	9d01      	ldr	r5, [sp, #4]
 80062dc:	4682      	mov	sl, r0
 80062de:	468b      	mov	fp, r1
 80062e0:	4649      	mov	r1, r9
 80062e2:	4640      	mov	r0, r8
 80062e4:	f7fa fc58 	bl	8000b98 <__aeabi_d2iz>
 80062e8:	4606      	mov	r6, r0
 80062ea:	f7fa f93b 	bl	8000564 <__aeabi_i2d>
 80062ee:	4602      	mov	r2, r0
 80062f0:	460b      	mov	r3, r1
 80062f2:	4640      	mov	r0, r8
 80062f4:	4649      	mov	r1, r9
 80062f6:	f7f9 ffe7 	bl	80002c8 <__aeabi_dsub>
 80062fa:	3630      	adds	r6, #48	; 0x30
 80062fc:	f805 6b01 	strb.w	r6, [r5], #1
 8006300:	4652      	mov	r2, sl
 8006302:	465b      	mov	r3, fp
 8006304:	4680      	mov	r8, r0
 8006306:	4689      	mov	r9, r1
 8006308:	f7fa fc08 	bl	8000b1c <__aeabi_dcmplt>
 800630c:	2800      	cmp	r0, #0
 800630e:	d163      	bne.n	80063d8 <_dtoa_r+0x608>
 8006310:	4642      	mov	r2, r8
 8006312:	464b      	mov	r3, r9
 8006314:	4936      	ldr	r1, [pc, #216]	; (80063f0 <_dtoa_r+0x620>)
 8006316:	2000      	movs	r0, #0
 8006318:	f7f9 ffd6 	bl	80002c8 <__aeabi_dsub>
 800631c:	4652      	mov	r2, sl
 800631e:	465b      	mov	r3, fp
 8006320:	f7fa fbfc 	bl	8000b1c <__aeabi_dcmplt>
 8006324:	2800      	cmp	r0, #0
 8006326:	f040 80b5 	bne.w	8006494 <_dtoa_r+0x6c4>
 800632a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800632c:	429d      	cmp	r5, r3
 800632e:	d081      	beq.n	8006234 <_dtoa_r+0x464>
 8006330:	4b30      	ldr	r3, [pc, #192]	; (80063f4 <_dtoa_r+0x624>)
 8006332:	2200      	movs	r2, #0
 8006334:	4650      	mov	r0, sl
 8006336:	4659      	mov	r1, fp
 8006338:	f7fa f97e 	bl	8000638 <__aeabi_dmul>
 800633c:	4b2d      	ldr	r3, [pc, #180]	; (80063f4 <_dtoa_r+0x624>)
 800633e:	4682      	mov	sl, r0
 8006340:	468b      	mov	fp, r1
 8006342:	4640      	mov	r0, r8
 8006344:	4649      	mov	r1, r9
 8006346:	2200      	movs	r2, #0
 8006348:	f7fa f976 	bl	8000638 <__aeabi_dmul>
 800634c:	4680      	mov	r8, r0
 800634e:	4689      	mov	r9, r1
 8006350:	e7c6      	b.n	80062e0 <_dtoa_r+0x510>
 8006352:	4650      	mov	r0, sl
 8006354:	4659      	mov	r1, fp
 8006356:	f7fa f96f 	bl	8000638 <__aeabi_dmul>
 800635a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800635c:	9d01      	ldr	r5, [sp, #4]
 800635e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006360:	4682      	mov	sl, r0
 8006362:	468b      	mov	fp, r1
 8006364:	4649      	mov	r1, r9
 8006366:	4640      	mov	r0, r8
 8006368:	f7fa fc16 	bl	8000b98 <__aeabi_d2iz>
 800636c:	4606      	mov	r6, r0
 800636e:	f7fa f8f9 	bl	8000564 <__aeabi_i2d>
 8006372:	3630      	adds	r6, #48	; 0x30
 8006374:	4602      	mov	r2, r0
 8006376:	460b      	mov	r3, r1
 8006378:	4640      	mov	r0, r8
 800637a:	4649      	mov	r1, r9
 800637c:	f7f9 ffa4 	bl	80002c8 <__aeabi_dsub>
 8006380:	f805 6b01 	strb.w	r6, [r5], #1
 8006384:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006386:	429d      	cmp	r5, r3
 8006388:	4680      	mov	r8, r0
 800638a:	4689      	mov	r9, r1
 800638c:	f04f 0200 	mov.w	r2, #0
 8006390:	d124      	bne.n	80063dc <_dtoa_r+0x60c>
 8006392:	4b1b      	ldr	r3, [pc, #108]	; (8006400 <_dtoa_r+0x630>)
 8006394:	4650      	mov	r0, sl
 8006396:	4659      	mov	r1, fp
 8006398:	f7f9 ff98 	bl	80002cc <__adddf3>
 800639c:	4602      	mov	r2, r0
 800639e:	460b      	mov	r3, r1
 80063a0:	4640      	mov	r0, r8
 80063a2:	4649      	mov	r1, r9
 80063a4:	f7fa fbd8 	bl	8000b58 <__aeabi_dcmpgt>
 80063a8:	2800      	cmp	r0, #0
 80063aa:	d173      	bne.n	8006494 <_dtoa_r+0x6c4>
 80063ac:	4652      	mov	r2, sl
 80063ae:	465b      	mov	r3, fp
 80063b0:	4913      	ldr	r1, [pc, #76]	; (8006400 <_dtoa_r+0x630>)
 80063b2:	2000      	movs	r0, #0
 80063b4:	f7f9 ff88 	bl	80002c8 <__aeabi_dsub>
 80063b8:	4602      	mov	r2, r0
 80063ba:	460b      	mov	r3, r1
 80063bc:	4640      	mov	r0, r8
 80063be:	4649      	mov	r1, r9
 80063c0:	f7fa fbac 	bl	8000b1c <__aeabi_dcmplt>
 80063c4:	2800      	cmp	r0, #0
 80063c6:	f43f af35 	beq.w	8006234 <_dtoa_r+0x464>
 80063ca:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80063cc:	1e6b      	subs	r3, r5, #1
 80063ce:	930f      	str	r3, [sp, #60]	; 0x3c
 80063d0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80063d4:	2b30      	cmp	r3, #48	; 0x30
 80063d6:	d0f8      	beq.n	80063ca <_dtoa_r+0x5fa>
 80063d8:	9700      	str	r7, [sp, #0]
 80063da:	e049      	b.n	8006470 <_dtoa_r+0x6a0>
 80063dc:	4b05      	ldr	r3, [pc, #20]	; (80063f4 <_dtoa_r+0x624>)
 80063de:	f7fa f92b 	bl	8000638 <__aeabi_dmul>
 80063e2:	4680      	mov	r8, r0
 80063e4:	4689      	mov	r9, r1
 80063e6:	e7bd      	b.n	8006364 <_dtoa_r+0x594>
 80063e8:	08009000 	.word	0x08009000
 80063ec:	08008fd8 	.word	0x08008fd8
 80063f0:	3ff00000 	.word	0x3ff00000
 80063f4:	40240000 	.word	0x40240000
 80063f8:	401c0000 	.word	0x401c0000
 80063fc:	40140000 	.word	0x40140000
 8006400:	3fe00000 	.word	0x3fe00000
 8006404:	9d01      	ldr	r5, [sp, #4]
 8006406:	4656      	mov	r6, sl
 8006408:	465f      	mov	r7, fp
 800640a:	4642      	mov	r2, r8
 800640c:	464b      	mov	r3, r9
 800640e:	4630      	mov	r0, r6
 8006410:	4639      	mov	r1, r7
 8006412:	f7fa fa3b 	bl	800088c <__aeabi_ddiv>
 8006416:	f7fa fbbf 	bl	8000b98 <__aeabi_d2iz>
 800641a:	4682      	mov	sl, r0
 800641c:	f7fa f8a2 	bl	8000564 <__aeabi_i2d>
 8006420:	4642      	mov	r2, r8
 8006422:	464b      	mov	r3, r9
 8006424:	f7fa f908 	bl	8000638 <__aeabi_dmul>
 8006428:	4602      	mov	r2, r0
 800642a:	460b      	mov	r3, r1
 800642c:	4630      	mov	r0, r6
 800642e:	4639      	mov	r1, r7
 8006430:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8006434:	f7f9 ff48 	bl	80002c8 <__aeabi_dsub>
 8006438:	f805 6b01 	strb.w	r6, [r5], #1
 800643c:	9e01      	ldr	r6, [sp, #4]
 800643e:	9f03      	ldr	r7, [sp, #12]
 8006440:	1bae      	subs	r6, r5, r6
 8006442:	42b7      	cmp	r7, r6
 8006444:	4602      	mov	r2, r0
 8006446:	460b      	mov	r3, r1
 8006448:	d135      	bne.n	80064b6 <_dtoa_r+0x6e6>
 800644a:	f7f9 ff3f 	bl	80002cc <__adddf3>
 800644e:	4642      	mov	r2, r8
 8006450:	464b      	mov	r3, r9
 8006452:	4606      	mov	r6, r0
 8006454:	460f      	mov	r7, r1
 8006456:	f7fa fb7f 	bl	8000b58 <__aeabi_dcmpgt>
 800645a:	b9d0      	cbnz	r0, 8006492 <_dtoa_r+0x6c2>
 800645c:	4642      	mov	r2, r8
 800645e:	464b      	mov	r3, r9
 8006460:	4630      	mov	r0, r6
 8006462:	4639      	mov	r1, r7
 8006464:	f7fa fb50 	bl	8000b08 <__aeabi_dcmpeq>
 8006468:	b110      	cbz	r0, 8006470 <_dtoa_r+0x6a0>
 800646a:	f01a 0f01 	tst.w	sl, #1
 800646e:	d110      	bne.n	8006492 <_dtoa_r+0x6c2>
 8006470:	4620      	mov	r0, r4
 8006472:	ee18 1a10 	vmov	r1, s16
 8006476:	f001 f893 	bl	80075a0 <_Bfree>
 800647a:	2300      	movs	r3, #0
 800647c:	9800      	ldr	r0, [sp, #0]
 800647e:	702b      	strb	r3, [r5, #0]
 8006480:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006482:	3001      	adds	r0, #1
 8006484:	6018      	str	r0, [r3, #0]
 8006486:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006488:	2b00      	cmp	r3, #0
 800648a:	f43f acf1 	beq.w	8005e70 <_dtoa_r+0xa0>
 800648e:	601d      	str	r5, [r3, #0]
 8006490:	e4ee      	b.n	8005e70 <_dtoa_r+0xa0>
 8006492:	9f00      	ldr	r7, [sp, #0]
 8006494:	462b      	mov	r3, r5
 8006496:	461d      	mov	r5, r3
 8006498:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800649c:	2a39      	cmp	r2, #57	; 0x39
 800649e:	d106      	bne.n	80064ae <_dtoa_r+0x6de>
 80064a0:	9a01      	ldr	r2, [sp, #4]
 80064a2:	429a      	cmp	r2, r3
 80064a4:	d1f7      	bne.n	8006496 <_dtoa_r+0x6c6>
 80064a6:	9901      	ldr	r1, [sp, #4]
 80064a8:	2230      	movs	r2, #48	; 0x30
 80064aa:	3701      	adds	r7, #1
 80064ac:	700a      	strb	r2, [r1, #0]
 80064ae:	781a      	ldrb	r2, [r3, #0]
 80064b0:	3201      	adds	r2, #1
 80064b2:	701a      	strb	r2, [r3, #0]
 80064b4:	e790      	b.n	80063d8 <_dtoa_r+0x608>
 80064b6:	4ba6      	ldr	r3, [pc, #664]	; (8006750 <_dtoa_r+0x980>)
 80064b8:	2200      	movs	r2, #0
 80064ba:	f7fa f8bd 	bl	8000638 <__aeabi_dmul>
 80064be:	2200      	movs	r2, #0
 80064c0:	2300      	movs	r3, #0
 80064c2:	4606      	mov	r6, r0
 80064c4:	460f      	mov	r7, r1
 80064c6:	f7fa fb1f 	bl	8000b08 <__aeabi_dcmpeq>
 80064ca:	2800      	cmp	r0, #0
 80064cc:	d09d      	beq.n	800640a <_dtoa_r+0x63a>
 80064ce:	e7cf      	b.n	8006470 <_dtoa_r+0x6a0>
 80064d0:	9a08      	ldr	r2, [sp, #32]
 80064d2:	2a00      	cmp	r2, #0
 80064d4:	f000 80d7 	beq.w	8006686 <_dtoa_r+0x8b6>
 80064d8:	9a06      	ldr	r2, [sp, #24]
 80064da:	2a01      	cmp	r2, #1
 80064dc:	f300 80ba 	bgt.w	8006654 <_dtoa_r+0x884>
 80064e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80064e2:	2a00      	cmp	r2, #0
 80064e4:	f000 80b2 	beq.w	800664c <_dtoa_r+0x87c>
 80064e8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80064ec:	9e07      	ldr	r6, [sp, #28]
 80064ee:	9d04      	ldr	r5, [sp, #16]
 80064f0:	9a04      	ldr	r2, [sp, #16]
 80064f2:	441a      	add	r2, r3
 80064f4:	9204      	str	r2, [sp, #16]
 80064f6:	9a05      	ldr	r2, [sp, #20]
 80064f8:	2101      	movs	r1, #1
 80064fa:	441a      	add	r2, r3
 80064fc:	4620      	mov	r0, r4
 80064fe:	9205      	str	r2, [sp, #20]
 8006500:	f001 f950 	bl	80077a4 <__i2b>
 8006504:	4607      	mov	r7, r0
 8006506:	2d00      	cmp	r5, #0
 8006508:	dd0c      	ble.n	8006524 <_dtoa_r+0x754>
 800650a:	9b05      	ldr	r3, [sp, #20]
 800650c:	2b00      	cmp	r3, #0
 800650e:	dd09      	ble.n	8006524 <_dtoa_r+0x754>
 8006510:	42ab      	cmp	r3, r5
 8006512:	9a04      	ldr	r2, [sp, #16]
 8006514:	bfa8      	it	ge
 8006516:	462b      	movge	r3, r5
 8006518:	1ad2      	subs	r2, r2, r3
 800651a:	9204      	str	r2, [sp, #16]
 800651c:	9a05      	ldr	r2, [sp, #20]
 800651e:	1aed      	subs	r5, r5, r3
 8006520:	1ad3      	subs	r3, r2, r3
 8006522:	9305      	str	r3, [sp, #20]
 8006524:	9b07      	ldr	r3, [sp, #28]
 8006526:	b31b      	cbz	r3, 8006570 <_dtoa_r+0x7a0>
 8006528:	9b08      	ldr	r3, [sp, #32]
 800652a:	2b00      	cmp	r3, #0
 800652c:	f000 80af 	beq.w	800668e <_dtoa_r+0x8be>
 8006530:	2e00      	cmp	r6, #0
 8006532:	dd13      	ble.n	800655c <_dtoa_r+0x78c>
 8006534:	4639      	mov	r1, r7
 8006536:	4632      	mov	r2, r6
 8006538:	4620      	mov	r0, r4
 800653a:	f001 f9f3 	bl	8007924 <__pow5mult>
 800653e:	ee18 2a10 	vmov	r2, s16
 8006542:	4601      	mov	r1, r0
 8006544:	4607      	mov	r7, r0
 8006546:	4620      	mov	r0, r4
 8006548:	f001 f942 	bl	80077d0 <__multiply>
 800654c:	ee18 1a10 	vmov	r1, s16
 8006550:	4680      	mov	r8, r0
 8006552:	4620      	mov	r0, r4
 8006554:	f001 f824 	bl	80075a0 <_Bfree>
 8006558:	ee08 8a10 	vmov	s16, r8
 800655c:	9b07      	ldr	r3, [sp, #28]
 800655e:	1b9a      	subs	r2, r3, r6
 8006560:	d006      	beq.n	8006570 <_dtoa_r+0x7a0>
 8006562:	ee18 1a10 	vmov	r1, s16
 8006566:	4620      	mov	r0, r4
 8006568:	f001 f9dc 	bl	8007924 <__pow5mult>
 800656c:	ee08 0a10 	vmov	s16, r0
 8006570:	2101      	movs	r1, #1
 8006572:	4620      	mov	r0, r4
 8006574:	f001 f916 	bl	80077a4 <__i2b>
 8006578:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800657a:	2b00      	cmp	r3, #0
 800657c:	4606      	mov	r6, r0
 800657e:	f340 8088 	ble.w	8006692 <_dtoa_r+0x8c2>
 8006582:	461a      	mov	r2, r3
 8006584:	4601      	mov	r1, r0
 8006586:	4620      	mov	r0, r4
 8006588:	f001 f9cc 	bl	8007924 <__pow5mult>
 800658c:	9b06      	ldr	r3, [sp, #24]
 800658e:	2b01      	cmp	r3, #1
 8006590:	4606      	mov	r6, r0
 8006592:	f340 8081 	ble.w	8006698 <_dtoa_r+0x8c8>
 8006596:	f04f 0800 	mov.w	r8, #0
 800659a:	6933      	ldr	r3, [r6, #16]
 800659c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80065a0:	6918      	ldr	r0, [r3, #16]
 80065a2:	f001 f8af 	bl	8007704 <__hi0bits>
 80065a6:	f1c0 0020 	rsb	r0, r0, #32
 80065aa:	9b05      	ldr	r3, [sp, #20]
 80065ac:	4418      	add	r0, r3
 80065ae:	f010 001f 	ands.w	r0, r0, #31
 80065b2:	f000 8092 	beq.w	80066da <_dtoa_r+0x90a>
 80065b6:	f1c0 0320 	rsb	r3, r0, #32
 80065ba:	2b04      	cmp	r3, #4
 80065bc:	f340 808a 	ble.w	80066d4 <_dtoa_r+0x904>
 80065c0:	f1c0 001c 	rsb	r0, r0, #28
 80065c4:	9b04      	ldr	r3, [sp, #16]
 80065c6:	4403      	add	r3, r0
 80065c8:	9304      	str	r3, [sp, #16]
 80065ca:	9b05      	ldr	r3, [sp, #20]
 80065cc:	4403      	add	r3, r0
 80065ce:	4405      	add	r5, r0
 80065d0:	9305      	str	r3, [sp, #20]
 80065d2:	9b04      	ldr	r3, [sp, #16]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	dd07      	ble.n	80065e8 <_dtoa_r+0x818>
 80065d8:	ee18 1a10 	vmov	r1, s16
 80065dc:	461a      	mov	r2, r3
 80065de:	4620      	mov	r0, r4
 80065e0:	f001 f9fa 	bl	80079d8 <__lshift>
 80065e4:	ee08 0a10 	vmov	s16, r0
 80065e8:	9b05      	ldr	r3, [sp, #20]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	dd05      	ble.n	80065fa <_dtoa_r+0x82a>
 80065ee:	4631      	mov	r1, r6
 80065f0:	461a      	mov	r2, r3
 80065f2:	4620      	mov	r0, r4
 80065f4:	f001 f9f0 	bl	80079d8 <__lshift>
 80065f8:	4606      	mov	r6, r0
 80065fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d06e      	beq.n	80066de <_dtoa_r+0x90e>
 8006600:	ee18 0a10 	vmov	r0, s16
 8006604:	4631      	mov	r1, r6
 8006606:	f001 fa57 	bl	8007ab8 <__mcmp>
 800660a:	2800      	cmp	r0, #0
 800660c:	da67      	bge.n	80066de <_dtoa_r+0x90e>
 800660e:	9b00      	ldr	r3, [sp, #0]
 8006610:	3b01      	subs	r3, #1
 8006612:	ee18 1a10 	vmov	r1, s16
 8006616:	9300      	str	r3, [sp, #0]
 8006618:	220a      	movs	r2, #10
 800661a:	2300      	movs	r3, #0
 800661c:	4620      	mov	r0, r4
 800661e:	f000 ffe1 	bl	80075e4 <__multadd>
 8006622:	9b08      	ldr	r3, [sp, #32]
 8006624:	ee08 0a10 	vmov	s16, r0
 8006628:	2b00      	cmp	r3, #0
 800662a:	f000 81b1 	beq.w	8006990 <_dtoa_r+0xbc0>
 800662e:	2300      	movs	r3, #0
 8006630:	4639      	mov	r1, r7
 8006632:	220a      	movs	r2, #10
 8006634:	4620      	mov	r0, r4
 8006636:	f000 ffd5 	bl	80075e4 <__multadd>
 800663a:	9b02      	ldr	r3, [sp, #8]
 800663c:	2b00      	cmp	r3, #0
 800663e:	4607      	mov	r7, r0
 8006640:	f300 808e 	bgt.w	8006760 <_dtoa_r+0x990>
 8006644:	9b06      	ldr	r3, [sp, #24]
 8006646:	2b02      	cmp	r3, #2
 8006648:	dc51      	bgt.n	80066ee <_dtoa_r+0x91e>
 800664a:	e089      	b.n	8006760 <_dtoa_r+0x990>
 800664c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800664e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006652:	e74b      	b.n	80064ec <_dtoa_r+0x71c>
 8006654:	9b03      	ldr	r3, [sp, #12]
 8006656:	1e5e      	subs	r6, r3, #1
 8006658:	9b07      	ldr	r3, [sp, #28]
 800665a:	42b3      	cmp	r3, r6
 800665c:	bfbf      	itttt	lt
 800665e:	9b07      	ldrlt	r3, [sp, #28]
 8006660:	9607      	strlt	r6, [sp, #28]
 8006662:	1af2      	sublt	r2, r6, r3
 8006664:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006666:	bfb6      	itet	lt
 8006668:	189b      	addlt	r3, r3, r2
 800666a:	1b9e      	subge	r6, r3, r6
 800666c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800666e:	9b03      	ldr	r3, [sp, #12]
 8006670:	bfb8      	it	lt
 8006672:	2600      	movlt	r6, #0
 8006674:	2b00      	cmp	r3, #0
 8006676:	bfb7      	itett	lt
 8006678:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800667c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006680:	1a9d      	sublt	r5, r3, r2
 8006682:	2300      	movlt	r3, #0
 8006684:	e734      	b.n	80064f0 <_dtoa_r+0x720>
 8006686:	9e07      	ldr	r6, [sp, #28]
 8006688:	9d04      	ldr	r5, [sp, #16]
 800668a:	9f08      	ldr	r7, [sp, #32]
 800668c:	e73b      	b.n	8006506 <_dtoa_r+0x736>
 800668e:	9a07      	ldr	r2, [sp, #28]
 8006690:	e767      	b.n	8006562 <_dtoa_r+0x792>
 8006692:	9b06      	ldr	r3, [sp, #24]
 8006694:	2b01      	cmp	r3, #1
 8006696:	dc18      	bgt.n	80066ca <_dtoa_r+0x8fa>
 8006698:	f1ba 0f00 	cmp.w	sl, #0
 800669c:	d115      	bne.n	80066ca <_dtoa_r+0x8fa>
 800669e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80066a2:	b993      	cbnz	r3, 80066ca <_dtoa_r+0x8fa>
 80066a4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80066a8:	0d1b      	lsrs	r3, r3, #20
 80066aa:	051b      	lsls	r3, r3, #20
 80066ac:	b183      	cbz	r3, 80066d0 <_dtoa_r+0x900>
 80066ae:	9b04      	ldr	r3, [sp, #16]
 80066b0:	3301      	adds	r3, #1
 80066b2:	9304      	str	r3, [sp, #16]
 80066b4:	9b05      	ldr	r3, [sp, #20]
 80066b6:	3301      	adds	r3, #1
 80066b8:	9305      	str	r3, [sp, #20]
 80066ba:	f04f 0801 	mov.w	r8, #1
 80066be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	f47f af6a 	bne.w	800659a <_dtoa_r+0x7ca>
 80066c6:	2001      	movs	r0, #1
 80066c8:	e76f      	b.n	80065aa <_dtoa_r+0x7da>
 80066ca:	f04f 0800 	mov.w	r8, #0
 80066ce:	e7f6      	b.n	80066be <_dtoa_r+0x8ee>
 80066d0:	4698      	mov	r8, r3
 80066d2:	e7f4      	b.n	80066be <_dtoa_r+0x8ee>
 80066d4:	f43f af7d 	beq.w	80065d2 <_dtoa_r+0x802>
 80066d8:	4618      	mov	r0, r3
 80066da:	301c      	adds	r0, #28
 80066dc:	e772      	b.n	80065c4 <_dtoa_r+0x7f4>
 80066de:	9b03      	ldr	r3, [sp, #12]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	dc37      	bgt.n	8006754 <_dtoa_r+0x984>
 80066e4:	9b06      	ldr	r3, [sp, #24]
 80066e6:	2b02      	cmp	r3, #2
 80066e8:	dd34      	ble.n	8006754 <_dtoa_r+0x984>
 80066ea:	9b03      	ldr	r3, [sp, #12]
 80066ec:	9302      	str	r3, [sp, #8]
 80066ee:	9b02      	ldr	r3, [sp, #8]
 80066f0:	b96b      	cbnz	r3, 800670e <_dtoa_r+0x93e>
 80066f2:	4631      	mov	r1, r6
 80066f4:	2205      	movs	r2, #5
 80066f6:	4620      	mov	r0, r4
 80066f8:	f000 ff74 	bl	80075e4 <__multadd>
 80066fc:	4601      	mov	r1, r0
 80066fe:	4606      	mov	r6, r0
 8006700:	ee18 0a10 	vmov	r0, s16
 8006704:	f001 f9d8 	bl	8007ab8 <__mcmp>
 8006708:	2800      	cmp	r0, #0
 800670a:	f73f adbb 	bgt.w	8006284 <_dtoa_r+0x4b4>
 800670e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006710:	9d01      	ldr	r5, [sp, #4]
 8006712:	43db      	mvns	r3, r3
 8006714:	9300      	str	r3, [sp, #0]
 8006716:	f04f 0800 	mov.w	r8, #0
 800671a:	4631      	mov	r1, r6
 800671c:	4620      	mov	r0, r4
 800671e:	f000 ff3f 	bl	80075a0 <_Bfree>
 8006722:	2f00      	cmp	r7, #0
 8006724:	f43f aea4 	beq.w	8006470 <_dtoa_r+0x6a0>
 8006728:	f1b8 0f00 	cmp.w	r8, #0
 800672c:	d005      	beq.n	800673a <_dtoa_r+0x96a>
 800672e:	45b8      	cmp	r8, r7
 8006730:	d003      	beq.n	800673a <_dtoa_r+0x96a>
 8006732:	4641      	mov	r1, r8
 8006734:	4620      	mov	r0, r4
 8006736:	f000 ff33 	bl	80075a0 <_Bfree>
 800673a:	4639      	mov	r1, r7
 800673c:	4620      	mov	r0, r4
 800673e:	f000 ff2f 	bl	80075a0 <_Bfree>
 8006742:	e695      	b.n	8006470 <_dtoa_r+0x6a0>
 8006744:	2600      	movs	r6, #0
 8006746:	4637      	mov	r7, r6
 8006748:	e7e1      	b.n	800670e <_dtoa_r+0x93e>
 800674a:	9700      	str	r7, [sp, #0]
 800674c:	4637      	mov	r7, r6
 800674e:	e599      	b.n	8006284 <_dtoa_r+0x4b4>
 8006750:	40240000 	.word	0x40240000
 8006754:	9b08      	ldr	r3, [sp, #32]
 8006756:	2b00      	cmp	r3, #0
 8006758:	f000 80ca 	beq.w	80068f0 <_dtoa_r+0xb20>
 800675c:	9b03      	ldr	r3, [sp, #12]
 800675e:	9302      	str	r3, [sp, #8]
 8006760:	2d00      	cmp	r5, #0
 8006762:	dd05      	ble.n	8006770 <_dtoa_r+0x9a0>
 8006764:	4639      	mov	r1, r7
 8006766:	462a      	mov	r2, r5
 8006768:	4620      	mov	r0, r4
 800676a:	f001 f935 	bl	80079d8 <__lshift>
 800676e:	4607      	mov	r7, r0
 8006770:	f1b8 0f00 	cmp.w	r8, #0
 8006774:	d05b      	beq.n	800682e <_dtoa_r+0xa5e>
 8006776:	6879      	ldr	r1, [r7, #4]
 8006778:	4620      	mov	r0, r4
 800677a:	f000 fed1 	bl	8007520 <_Balloc>
 800677e:	4605      	mov	r5, r0
 8006780:	b928      	cbnz	r0, 800678e <_dtoa_r+0x9be>
 8006782:	4b87      	ldr	r3, [pc, #540]	; (80069a0 <_dtoa_r+0xbd0>)
 8006784:	4602      	mov	r2, r0
 8006786:	f240 21ea 	movw	r1, #746	; 0x2ea
 800678a:	f7ff bb3b 	b.w	8005e04 <_dtoa_r+0x34>
 800678e:	693a      	ldr	r2, [r7, #16]
 8006790:	3202      	adds	r2, #2
 8006792:	0092      	lsls	r2, r2, #2
 8006794:	f107 010c 	add.w	r1, r7, #12
 8006798:	300c      	adds	r0, #12
 800679a:	f000 feb3 	bl	8007504 <memcpy>
 800679e:	2201      	movs	r2, #1
 80067a0:	4629      	mov	r1, r5
 80067a2:	4620      	mov	r0, r4
 80067a4:	f001 f918 	bl	80079d8 <__lshift>
 80067a8:	9b01      	ldr	r3, [sp, #4]
 80067aa:	f103 0901 	add.w	r9, r3, #1
 80067ae:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80067b2:	4413      	add	r3, r2
 80067b4:	9305      	str	r3, [sp, #20]
 80067b6:	f00a 0301 	and.w	r3, sl, #1
 80067ba:	46b8      	mov	r8, r7
 80067bc:	9304      	str	r3, [sp, #16]
 80067be:	4607      	mov	r7, r0
 80067c0:	4631      	mov	r1, r6
 80067c2:	ee18 0a10 	vmov	r0, s16
 80067c6:	f7ff fa77 	bl	8005cb8 <quorem>
 80067ca:	4641      	mov	r1, r8
 80067cc:	9002      	str	r0, [sp, #8]
 80067ce:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80067d2:	ee18 0a10 	vmov	r0, s16
 80067d6:	f001 f96f 	bl	8007ab8 <__mcmp>
 80067da:	463a      	mov	r2, r7
 80067dc:	9003      	str	r0, [sp, #12]
 80067de:	4631      	mov	r1, r6
 80067e0:	4620      	mov	r0, r4
 80067e2:	f001 f985 	bl	8007af0 <__mdiff>
 80067e6:	68c2      	ldr	r2, [r0, #12]
 80067e8:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 80067ec:	4605      	mov	r5, r0
 80067ee:	bb02      	cbnz	r2, 8006832 <_dtoa_r+0xa62>
 80067f0:	4601      	mov	r1, r0
 80067f2:	ee18 0a10 	vmov	r0, s16
 80067f6:	f001 f95f 	bl	8007ab8 <__mcmp>
 80067fa:	4602      	mov	r2, r0
 80067fc:	4629      	mov	r1, r5
 80067fe:	4620      	mov	r0, r4
 8006800:	9207      	str	r2, [sp, #28]
 8006802:	f000 fecd 	bl	80075a0 <_Bfree>
 8006806:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800680a:	ea43 0102 	orr.w	r1, r3, r2
 800680e:	9b04      	ldr	r3, [sp, #16]
 8006810:	430b      	orrs	r3, r1
 8006812:	464d      	mov	r5, r9
 8006814:	d10f      	bne.n	8006836 <_dtoa_r+0xa66>
 8006816:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800681a:	d02a      	beq.n	8006872 <_dtoa_r+0xaa2>
 800681c:	9b03      	ldr	r3, [sp, #12]
 800681e:	2b00      	cmp	r3, #0
 8006820:	dd02      	ble.n	8006828 <_dtoa_r+0xa58>
 8006822:	9b02      	ldr	r3, [sp, #8]
 8006824:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006828:	f88b a000 	strb.w	sl, [fp]
 800682c:	e775      	b.n	800671a <_dtoa_r+0x94a>
 800682e:	4638      	mov	r0, r7
 8006830:	e7ba      	b.n	80067a8 <_dtoa_r+0x9d8>
 8006832:	2201      	movs	r2, #1
 8006834:	e7e2      	b.n	80067fc <_dtoa_r+0xa2c>
 8006836:	9b03      	ldr	r3, [sp, #12]
 8006838:	2b00      	cmp	r3, #0
 800683a:	db04      	blt.n	8006846 <_dtoa_r+0xa76>
 800683c:	9906      	ldr	r1, [sp, #24]
 800683e:	430b      	orrs	r3, r1
 8006840:	9904      	ldr	r1, [sp, #16]
 8006842:	430b      	orrs	r3, r1
 8006844:	d122      	bne.n	800688c <_dtoa_r+0xabc>
 8006846:	2a00      	cmp	r2, #0
 8006848:	ddee      	ble.n	8006828 <_dtoa_r+0xa58>
 800684a:	ee18 1a10 	vmov	r1, s16
 800684e:	2201      	movs	r2, #1
 8006850:	4620      	mov	r0, r4
 8006852:	f001 f8c1 	bl	80079d8 <__lshift>
 8006856:	4631      	mov	r1, r6
 8006858:	ee08 0a10 	vmov	s16, r0
 800685c:	f001 f92c 	bl	8007ab8 <__mcmp>
 8006860:	2800      	cmp	r0, #0
 8006862:	dc03      	bgt.n	800686c <_dtoa_r+0xa9c>
 8006864:	d1e0      	bne.n	8006828 <_dtoa_r+0xa58>
 8006866:	f01a 0f01 	tst.w	sl, #1
 800686a:	d0dd      	beq.n	8006828 <_dtoa_r+0xa58>
 800686c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006870:	d1d7      	bne.n	8006822 <_dtoa_r+0xa52>
 8006872:	2339      	movs	r3, #57	; 0x39
 8006874:	f88b 3000 	strb.w	r3, [fp]
 8006878:	462b      	mov	r3, r5
 800687a:	461d      	mov	r5, r3
 800687c:	3b01      	subs	r3, #1
 800687e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006882:	2a39      	cmp	r2, #57	; 0x39
 8006884:	d071      	beq.n	800696a <_dtoa_r+0xb9a>
 8006886:	3201      	adds	r2, #1
 8006888:	701a      	strb	r2, [r3, #0]
 800688a:	e746      	b.n	800671a <_dtoa_r+0x94a>
 800688c:	2a00      	cmp	r2, #0
 800688e:	dd07      	ble.n	80068a0 <_dtoa_r+0xad0>
 8006890:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006894:	d0ed      	beq.n	8006872 <_dtoa_r+0xaa2>
 8006896:	f10a 0301 	add.w	r3, sl, #1
 800689a:	f88b 3000 	strb.w	r3, [fp]
 800689e:	e73c      	b.n	800671a <_dtoa_r+0x94a>
 80068a0:	9b05      	ldr	r3, [sp, #20]
 80068a2:	f809 ac01 	strb.w	sl, [r9, #-1]
 80068a6:	4599      	cmp	r9, r3
 80068a8:	d047      	beq.n	800693a <_dtoa_r+0xb6a>
 80068aa:	ee18 1a10 	vmov	r1, s16
 80068ae:	2300      	movs	r3, #0
 80068b0:	220a      	movs	r2, #10
 80068b2:	4620      	mov	r0, r4
 80068b4:	f000 fe96 	bl	80075e4 <__multadd>
 80068b8:	45b8      	cmp	r8, r7
 80068ba:	ee08 0a10 	vmov	s16, r0
 80068be:	f04f 0300 	mov.w	r3, #0
 80068c2:	f04f 020a 	mov.w	r2, #10
 80068c6:	4641      	mov	r1, r8
 80068c8:	4620      	mov	r0, r4
 80068ca:	d106      	bne.n	80068da <_dtoa_r+0xb0a>
 80068cc:	f000 fe8a 	bl	80075e4 <__multadd>
 80068d0:	4680      	mov	r8, r0
 80068d2:	4607      	mov	r7, r0
 80068d4:	f109 0901 	add.w	r9, r9, #1
 80068d8:	e772      	b.n	80067c0 <_dtoa_r+0x9f0>
 80068da:	f000 fe83 	bl	80075e4 <__multadd>
 80068de:	4639      	mov	r1, r7
 80068e0:	4680      	mov	r8, r0
 80068e2:	2300      	movs	r3, #0
 80068e4:	220a      	movs	r2, #10
 80068e6:	4620      	mov	r0, r4
 80068e8:	f000 fe7c 	bl	80075e4 <__multadd>
 80068ec:	4607      	mov	r7, r0
 80068ee:	e7f1      	b.n	80068d4 <_dtoa_r+0xb04>
 80068f0:	9b03      	ldr	r3, [sp, #12]
 80068f2:	9302      	str	r3, [sp, #8]
 80068f4:	9d01      	ldr	r5, [sp, #4]
 80068f6:	ee18 0a10 	vmov	r0, s16
 80068fa:	4631      	mov	r1, r6
 80068fc:	f7ff f9dc 	bl	8005cb8 <quorem>
 8006900:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006904:	9b01      	ldr	r3, [sp, #4]
 8006906:	f805 ab01 	strb.w	sl, [r5], #1
 800690a:	1aea      	subs	r2, r5, r3
 800690c:	9b02      	ldr	r3, [sp, #8]
 800690e:	4293      	cmp	r3, r2
 8006910:	dd09      	ble.n	8006926 <_dtoa_r+0xb56>
 8006912:	ee18 1a10 	vmov	r1, s16
 8006916:	2300      	movs	r3, #0
 8006918:	220a      	movs	r2, #10
 800691a:	4620      	mov	r0, r4
 800691c:	f000 fe62 	bl	80075e4 <__multadd>
 8006920:	ee08 0a10 	vmov	s16, r0
 8006924:	e7e7      	b.n	80068f6 <_dtoa_r+0xb26>
 8006926:	9b02      	ldr	r3, [sp, #8]
 8006928:	2b00      	cmp	r3, #0
 800692a:	bfc8      	it	gt
 800692c:	461d      	movgt	r5, r3
 800692e:	9b01      	ldr	r3, [sp, #4]
 8006930:	bfd8      	it	le
 8006932:	2501      	movle	r5, #1
 8006934:	441d      	add	r5, r3
 8006936:	f04f 0800 	mov.w	r8, #0
 800693a:	ee18 1a10 	vmov	r1, s16
 800693e:	2201      	movs	r2, #1
 8006940:	4620      	mov	r0, r4
 8006942:	f001 f849 	bl	80079d8 <__lshift>
 8006946:	4631      	mov	r1, r6
 8006948:	ee08 0a10 	vmov	s16, r0
 800694c:	f001 f8b4 	bl	8007ab8 <__mcmp>
 8006950:	2800      	cmp	r0, #0
 8006952:	dc91      	bgt.n	8006878 <_dtoa_r+0xaa8>
 8006954:	d102      	bne.n	800695c <_dtoa_r+0xb8c>
 8006956:	f01a 0f01 	tst.w	sl, #1
 800695a:	d18d      	bne.n	8006878 <_dtoa_r+0xaa8>
 800695c:	462b      	mov	r3, r5
 800695e:	461d      	mov	r5, r3
 8006960:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006964:	2a30      	cmp	r2, #48	; 0x30
 8006966:	d0fa      	beq.n	800695e <_dtoa_r+0xb8e>
 8006968:	e6d7      	b.n	800671a <_dtoa_r+0x94a>
 800696a:	9a01      	ldr	r2, [sp, #4]
 800696c:	429a      	cmp	r2, r3
 800696e:	d184      	bne.n	800687a <_dtoa_r+0xaaa>
 8006970:	9b00      	ldr	r3, [sp, #0]
 8006972:	3301      	adds	r3, #1
 8006974:	9300      	str	r3, [sp, #0]
 8006976:	2331      	movs	r3, #49	; 0x31
 8006978:	7013      	strb	r3, [r2, #0]
 800697a:	e6ce      	b.n	800671a <_dtoa_r+0x94a>
 800697c:	4b09      	ldr	r3, [pc, #36]	; (80069a4 <_dtoa_r+0xbd4>)
 800697e:	f7ff ba95 	b.w	8005eac <_dtoa_r+0xdc>
 8006982:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006984:	2b00      	cmp	r3, #0
 8006986:	f47f aa6e 	bne.w	8005e66 <_dtoa_r+0x96>
 800698a:	4b07      	ldr	r3, [pc, #28]	; (80069a8 <_dtoa_r+0xbd8>)
 800698c:	f7ff ba8e 	b.w	8005eac <_dtoa_r+0xdc>
 8006990:	9b02      	ldr	r3, [sp, #8]
 8006992:	2b00      	cmp	r3, #0
 8006994:	dcae      	bgt.n	80068f4 <_dtoa_r+0xb24>
 8006996:	9b06      	ldr	r3, [sp, #24]
 8006998:	2b02      	cmp	r3, #2
 800699a:	f73f aea8 	bgt.w	80066ee <_dtoa_r+0x91e>
 800699e:	e7a9      	b.n	80068f4 <_dtoa_r+0xb24>
 80069a0:	08008e88 	.word	0x08008e88
 80069a4:	08008c8c 	.word	0x08008c8c
 80069a8:	08008e09 	.word	0x08008e09

080069ac <__sflush_r>:
 80069ac:	898a      	ldrh	r2, [r1, #12]
 80069ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069b2:	4605      	mov	r5, r0
 80069b4:	0710      	lsls	r0, r2, #28
 80069b6:	460c      	mov	r4, r1
 80069b8:	d458      	bmi.n	8006a6c <__sflush_r+0xc0>
 80069ba:	684b      	ldr	r3, [r1, #4]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	dc05      	bgt.n	80069cc <__sflush_r+0x20>
 80069c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	dc02      	bgt.n	80069cc <__sflush_r+0x20>
 80069c6:	2000      	movs	r0, #0
 80069c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80069ce:	2e00      	cmp	r6, #0
 80069d0:	d0f9      	beq.n	80069c6 <__sflush_r+0x1a>
 80069d2:	2300      	movs	r3, #0
 80069d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80069d8:	682f      	ldr	r7, [r5, #0]
 80069da:	602b      	str	r3, [r5, #0]
 80069dc:	d032      	beq.n	8006a44 <__sflush_r+0x98>
 80069de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80069e0:	89a3      	ldrh	r3, [r4, #12]
 80069e2:	075a      	lsls	r2, r3, #29
 80069e4:	d505      	bpl.n	80069f2 <__sflush_r+0x46>
 80069e6:	6863      	ldr	r3, [r4, #4]
 80069e8:	1ac0      	subs	r0, r0, r3
 80069ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80069ec:	b10b      	cbz	r3, 80069f2 <__sflush_r+0x46>
 80069ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80069f0:	1ac0      	subs	r0, r0, r3
 80069f2:	2300      	movs	r3, #0
 80069f4:	4602      	mov	r2, r0
 80069f6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80069f8:	6a21      	ldr	r1, [r4, #32]
 80069fa:	4628      	mov	r0, r5
 80069fc:	47b0      	blx	r6
 80069fe:	1c43      	adds	r3, r0, #1
 8006a00:	89a3      	ldrh	r3, [r4, #12]
 8006a02:	d106      	bne.n	8006a12 <__sflush_r+0x66>
 8006a04:	6829      	ldr	r1, [r5, #0]
 8006a06:	291d      	cmp	r1, #29
 8006a08:	d82c      	bhi.n	8006a64 <__sflush_r+0xb8>
 8006a0a:	4a2a      	ldr	r2, [pc, #168]	; (8006ab4 <__sflush_r+0x108>)
 8006a0c:	40ca      	lsrs	r2, r1
 8006a0e:	07d6      	lsls	r6, r2, #31
 8006a10:	d528      	bpl.n	8006a64 <__sflush_r+0xb8>
 8006a12:	2200      	movs	r2, #0
 8006a14:	6062      	str	r2, [r4, #4]
 8006a16:	04d9      	lsls	r1, r3, #19
 8006a18:	6922      	ldr	r2, [r4, #16]
 8006a1a:	6022      	str	r2, [r4, #0]
 8006a1c:	d504      	bpl.n	8006a28 <__sflush_r+0x7c>
 8006a1e:	1c42      	adds	r2, r0, #1
 8006a20:	d101      	bne.n	8006a26 <__sflush_r+0x7a>
 8006a22:	682b      	ldr	r3, [r5, #0]
 8006a24:	b903      	cbnz	r3, 8006a28 <__sflush_r+0x7c>
 8006a26:	6560      	str	r0, [r4, #84]	; 0x54
 8006a28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006a2a:	602f      	str	r7, [r5, #0]
 8006a2c:	2900      	cmp	r1, #0
 8006a2e:	d0ca      	beq.n	80069c6 <__sflush_r+0x1a>
 8006a30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006a34:	4299      	cmp	r1, r3
 8006a36:	d002      	beq.n	8006a3e <__sflush_r+0x92>
 8006a38:	4628      	mov	r0, r5
 8006a3a:	f001 fa49 	bl	8007ed0 <_free_r>
 8006a3e:	2000      	movs	r0, #0
 8006a40:	6360      	str	r0, [r4, #52]	; 0x34
 8006a42:	e7c1      	b.n	80069c8 <__sflush_r+0x1c>
 8006a44:	6a21      	ldr	r1, [r4, #32]
 8006a46:	2301      	movs	r3, #1
 8006a48:	4628      	mov	r0, r5
 8006a4a:	47b0      	blx	r6
 8006a4c:	1c41      	adds	r1, r0, #1
 8006a4e:	d1c7      	bne.n	80069e0 <__sflush_r+0x34>
 8006a50:	682b      	ldr	r3, [r5, #0]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d0c4      	beq.n	80069e0 <__sflush_r+0x34>
 8006a56:	2b1d      	cmp	r3, #29
 8006a58:	d001      	beq.n	8006a5e <__sflush_r+0xb2>
 8006a5a:	2b16      	cmp	r3, #22
 8006a5c:	d101      	bne.n	8006a62 <__sflush_r+0xb6>
 8006a5e:	602f      	str	r7, [r5, #0]
 8006a60:	e7b1      	b.n	80069c6 <__sflush_r+0x1a>
 8006a62:	89a3      	ldrh	r3, [r4, #12]
 8006a64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a68:	81a3      	strh	r3, [r4, #12]
 8006a6a:	e7ad      	b.n	80069c8 <__sflush_r+0x1c>
 8006a6c:	690f      	ldr	r7, [r1, #16]
 8006a6e:	2f00      	cmp	r7, #0
 8006a70:	d0a9      	beq.n	80069c6 <__sflush_r+0x1a>
 8006a72:	0793      	lsls	r3, r2, #30
 8006a74:	680e      	ldr	r6, [r1, #0]
 8006a76:	bf08      	it	eq
 8006a78:	694b      	ldreq	r3, [r1, #20]
 8006a7a:	600f      	str	r7, [r1, #0]
 8006a7c:	bf18      	it	ne
 8006a7e:	2300      	movne	r3, #0
 8006a80:	eba6 0807 	sub.w	r8, r6, r7
 8006a84:	608b      	str	r3, [r1, #8]
 8006a86:	f1b8 0f00 	cmp.w	r8, #0
 8006a8a:	dd9c      	ble.n	80069c6 <__sflush_r+0x1a>
 8006a8c:	6a21      	ldr	r1, [r4, #32]
 8006a8e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006a90:	4643      	mov	r3, r8
 8006a92:	463a      	mov	r2, r7
 8006a94:	4628      	mov	r0, r5
 8006a96:	47b0      	blx	r6
 8006a98:	2800      	cmp	r0, #0
 8006a9a:	dc06      	bgt.n	8006aaa <__sflush_r+0xfe>
 8006a9c:	89a3      	ldrh	r3, [r4, #12]
 8006a9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006aa2:	81a3      	strh	r3, [r4, #12]
 8006aa4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006aa8:	e78e      	b.n	80069c8 <__sflush_r+0x1c>
 8006aaa:	4407      	add	r7, r0
 8006aac:	eba8 0800 	sub.w	r8, r8, r0
 8006ab0:	e7e9      	b.n	8006a86 <__sflush_r+0xda>
 8006ab2:	bf00      	nop
 8006ab4:	20400001 	.word	0x20400001

08006ab8 <_fflush_r>:
 8006ab8:	b538      	push	{r3, r4, r5, lr}
 8006aba:	690b      	ldr	r3, [r1, #16]
 8006abc:	4605      	mov	r5, r0
 8006abe:	460c      	mov	r4, r1
 8006ac0:	b913      	cbnz	r3, 8006ac8 <_fflush_r+0x10>
 8006ac2:	2500      	movs	r5, #0
 8006ac4:	4628      	mov	r0, r5
 8006ac6:	bd38      	pop	{r3, r4, r5, pc}
 8006ac8:	b118      	cbz	r0, 8006ad2 <_fflush_r+0x1a>
 8006aca:	6983      	ldr	r3, [r0, #24]
 8006acc:	b90b      	cbnz	r3, 8006ad2 <_fflush_r+0x1a>
 8006ace:	f000 f887 	bl	8006be0 <__sinit>
 8006ad2:	4b14      	ldr	r3, [pc, #80]	; (8006b24 <_fflush_r+0x6c>)
 8006ad4:	429c      	cmp	r4, r3
 8006ad6:	d11b      	bne.n	8006b10 <_fflush_r+0x58>
 8006ad8:	686c      	ldr	r4, [r5, #4]
 8006ada:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d0ef      	beq.n	8006ac2 <_fflush_r+0xa>
 8006ae2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006ae4:	07d0      	lsls	r0, r2, #31
 8006ae6:	d404      	bmi.n	8006af2 <_fflush_r+0x3a>
 8006ae8:	0599      	lsls	r1, r3, #22
 8006aea:	d402      	bmi.n	8006af2 <_fflush_r+0x3a>
 8006aec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006aee:	f000 fc88 	bl	8007402 <__retarget_lock_acquire_recursive>
 8006af2:	4628      	mov	r0, r5
 8006af4:	4621      	mov	r1, r4
 8006af6:	f7ff ff59 	bl	80069ac <__sflush_r>
 8006afa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006afc:	07da      	lsls	r2, r3, #31
 8006afe:	4605      	mov	r5, r0
 8006b00:	d4e0      	bmi.n	8006ac4 <_fflush_r+0xc>
 8006b02:	89a3      	ldrh	r3, [r4, #12]
 8006b04:	059b      	lsls	r3, r3, #22
 8006b06:	d4dd      	bmi.n	8006ac4 <_fflush_r+0xc>
 8006b08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b0a:	f000 fc7b 	bl	8007404 <__retarget_lock_release_recursive>
 8006b0e:	e7d9      	b.n	8006ac4 <_fflush_r+0xc>
 8006b10:	4b05      	ldr	r3, [pc, #20]	; (8006b28 <_fflush_r+0x70>)
 8006b12:	429c      	cmp	r4, r3
 8006b14:	d101      	bne.n	8006b1a <_fflush_r+0x62>
 8006b16:	68ac      	ldr	r4, [r5, #8]
 8006b18:	e7df      	b.n	8006ada <_fflush_r+0x22>
 8006b1a:	4b04      	ldr	r3, [pc, #16]	; (8006b2c <_fflush_r+0x74>)
 8006b1c:	429c      	cmp	r4, r3
 8006b1e:	bf08      	it	eq
 8006b20:	68ec      	ldreq	r4, [r5, #12]
 8006b22:	e7da      	b.n	8006ada <_fflush_r+0x22>
 8006b24:	08008ebc 	.word	0x08008ebc
 8006b28:	08008edc 	.word	0x08008edc
 8006b2c:	08008e9c 	.word	0x08008e9c

08006b30 <std>:
 8006b30:	2300      	movs	r3, #0
 8006b32:	b510      	push	{r4, lr}
 8006b34:	4604      	mov	r4, r0
 8006b36:	e9c0 3300 	strd	r3, r3, [r0]
 8006b3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006b3e:	6083      	str	r3, [r0, #8]
 8006b40:	8181      	strh	r1, [r0, #12]
 8006b42:	6643      	str	r3, [r0, #100]	; 0x64
 8006b44:	81c2      	strh	r2, [r0, #14]
 8006b46:	6183      	str	r3, [r0, #24]
 8006b48:	4619      	mov	r1, r3
 8006b4a:	2208      	movs	r2, #8
 8006b4c:	305c      	adds	r0, #92	; 0x5c
 8006b4e:	f7fd fa11 	bl	8003f74 <memset>
 8006b52:	4b05      	ldr	r3, [pc, #20]	; (8006b68 <std+0x38>)
 8006b54:	6263      	str	r3, [r4, #36]	; 0x24
 8006b56:	4b05      	ldr	r3, [pc, #20]	; (8006b6c <std+0x3c>)
 8006b58:	62a3      	str	r3, [r4, #40]	; 0x28
 8006b5a:	4b05      	ldr	r3, [pc, #20]	; (8006b70 <std+0x40>)
 8006b5c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006b5e:	4b05      	ldr	r3, [pc, #20]	; (8006b74 <std+0x44>)
 8006b60:	6224      	str	r4, [r4, #32]
 8006b62:	6323      	str	r3, [r4, #48]	; 0x30
 8006b64:	bd10      	pop	{r4, pc}
 8006b66:	bf00      	nop
 8006b68:	08008631 	.word	0x08008631
 8006b6c:	08008653 	.word	0x08008653
 8006b70:	0800868b 	.word	0x0800868b
 8006b74:	080086af 	.word	0x080086af

08006b78 <_cleanup_r>:
 8006b78:	4901      	ldr	r1, [pc, #4]	; (8006b80 <_cleanup_r+0x8>)
 8006b7a:	f000 b8af 	b.w	8006cdc <_fwalk_reent>
 8006b7e:	bf00      	nop
 8006b80:	08006ab9 	.word	0x08006ab9

08006b84 <__sfmoreglue>:
 8006b84:	b570      	push	{r4, r5, r6, lr}
 8006b86:	2268      	movs	r2, #104	; 0x68
 8006b88:	1e4d      	subs	r5, r1, #1
 8006b8a:	4355      	muls	r5, r2
 8006b8c:	460e      	mov	r6, r1
 8006b8e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006b92:	f001 fa09 	bl	8007fa8 <_malloc_r>
 8006b96:	4604      	mov	r4, r0
 8006b98:	b140      	cbz	r0, 8006bac <__sfmoreglue+0x28>
 8006b9a:	2100      	movs	r1, #0
 8006b9c:	e9c0 1600 	strd	r1, r6, [r0]
 8006ba0:	300c      	adds	r0, #12
 8006ba2:	60a0      	str	r0, [r4, #8]
 8006ba4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006ba8:	f7fd f9e4 	bl	8003f74 <memset>
 8006bac:	4620      	mov	r0, r4
 8006bae:	bd70      	pop	{r4, r5, r6, pc}

08006bb0 <__sfp_lock_acquire>:
 8006bb0:	4801      	ldr	r0, [pc, #4]	; (8006bb8 <__sfp_lock_acquire+0x8>)
 8006bb2:	f000 bc26 	b.w	8007402 <__retarget_lock_acquire_recursive>
 8006bb6:	bf00      	nop
 8006bb8:	2000028d 	.word	0x2000028d

08006bbc <__sfp_lock_release>:
 8006bbc:	4801      	ldr	r0, [pc, #4]	; (8006bc4 <__sfp_lock_release+0x8>)
 8006bbe:	f000 bc21 	b.w	8007404 <__retarget_lock_release_recursive>
 8006bc2:	bf00      	nop
 8006bc4:	2000028d 	.word	0x2000028d

08006bc8 <__sinit_lock_acquire>:
 8006bc8:	4801      	ldr	r0, [pc, #4]	; (8006bd0 <__sinit_lock_acquire+0x8>)
 8006bca:	f000 bc1a 	b.w	8007402 <__retarget_lock_acquire_recursive>
 8006bce:	bf00      	nop
 8006bd0:	2000028e 	.word	0x2000028e

08006bd4 <__sinit_lock_release>:
 8006bd4:	4801      	ldr	r0, [pc, #4]	; (8006bdc <__sinit_lock_release+0x8>)
 8006bd6:	f000 bc15 	b.w	8007404 <__retarget_lock_release_recursive>
 8006bda:	bf00      	nop
 8006bdc:	2000028e 	.word	0x2000028e

08006be0 <__sinit>:
 8006be0:	b510      	push	{r4, lr}
 8006be2:	4604      	mov	r4, r0
 8006be4:	f7ff fff0 	bl	8006bc8 <__sinit_lock_acquire>
 8006be8:	69a3      	ldr	r3, [r4, #24]
 8006bea:	b11b      	cbz	r3, 8006bf4 <__sinit+0x14>
 8006bec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006bf0:	f7ff bff0 	b.w	8006bd4 <__sinit_lock_release>
 8006bf4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006bf8:	6523      	str	r3, [r4, #80]	; 0x50
 8006bfa:	4b13      	ldr	r3, [pc, #76]	; (8006c48 <__sinit+0x68>)
 8006bfc:	4a13      	ldr	r2, [pc, #76]	; (8006c4c <__sinit+0x6c>)
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	62a2      	str	r2, [r4, #40]	; 0x28
 8006c02:	42a3      	cmp	r3, r4
 8006c04:	bf04      	itt	eq
 8006c06:	2301      	moveq	r3, #1
 8006c08:	61a3      	streq	r3, [r4, #24]
 8006c0a:	4620      	mov	r0, r4
 8006c0c:	f000 f820 	bl	8006c50 <__sfp>
 8006c10:	6060      	str	r0, [r4, #4]
 8006c12:	4620      	mov	r0, r4
 8006c14:	f000 f81c 	bl	8006c50 <__sfp>
 8006c18:	60a0      	str	r0, [r4, #8]
 8006c1a:	4620      	mov	r0, r4
 8006c1c:	f000 f818 	bl	8006c50 <__sfp>
 8006c20:	2200      	movs	r2, #0
 8006c22:	60e0      	str	r0, [r4, #12]
 8006c24:	2104      	movs	r1, #4
 8006c26:	6860      	ldr	r0, [r4, #4]
 8006c28:	f7ff ff82 	bl	8006b30 <std>
 8006c2c:	68a0      	ldr	r0, [r4, #8]
 8006c2e:	2201      	movs	r2, #1
 8006c30:	2109      	movs	r1, #9
 8006c32:	f7ff ff7d 	bl	8006b30 <std>
 8006c36:	68e0      	ldr	r0, [r4, #12]
 8006c38:	2202      	movs	r2, #2
 8006c3a:	2112      	movs	r1, #18
 8006c3c:	f7ff ff78 	bl	8006b30 <std>
 8006c40:	2301      	movs	r3, #1
 8006c42:	61a3      	str	r3, [r4, #24]
 8006c44:	e7d2      	b.n	8006bec <__sinit+0xc>
 8006c46:	bf00      	nop
 8006c48:	08008c78 	.word	0x08008c78
 8006c4c:	08006b79 	.word	0x08006b79

08006c50 <__sfp>:
 8006c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c52:	4607      	mov	r7, r0
 8006c54:	f7ff ffac 	bl	8006bb0 <__sfp_lock_acquire>
 8006c58:	4b1e      	ldr	r3, [pc, #120]	; (8006cd4 <__sfp+0x84>)
 8006c5a:	681e      	ldr	r6, [r3, #0]
 8006c5c:	69b3      	ldr	r3, [r6, #24]
 8006c5e:	b913      	cbnz	r3, 8006c66 <__sfp+0x16>
 8006c60:	4630      	mov	r0, r6
 8006c62:	f7ff ffbd 	bl	8006be0 <__sinit>
 8006c66:	3648      	adds	r6, #72	; 0x48
 8006c68:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006c6c:	3b01      	subs	r3, #1
 8006c6e:	d503      	bpl.n	8006c78 <__sfp+0x28>
 8006c70:	6833      	ldr	r3, [r6, #0]
 8006c72:	b30b      	cbz	r3, 8006cb8 <__sfp+0x68>
 8006c74:	6836      	ldr	r6, [r6, #0]
 8006c76:	e7f7      	b.n	8006c68 <__sfp+0x18>
 8006c78:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006c7c:	b9d5      	cbnz	r5, 8006cb4 <__sfp+0x64>
 8006c7e:	4b16      	ldr	r3, [pc, #88]	; (8006cd8 <__sfp+0x88>)
 8006c80:	60e3      	str	r3, [r4, #12]
 8006c82:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006c86:	6665      	str	r5, [r4, #100]	; 0x64
 8006c88:	f000 fbba 	bl	8007400 <__retarget_lock_init_recursive>
 8006c8c:	f7ff ff96 	bl	8006bbc <__sfp_lock_release>
 8006c90:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006c94:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006c98:	6025      	str	r5, [r4, #0]
 8006c9a:	61a5      	str	r5, [r4, #24]
 8006c9c:	2208      	movs	r2, #8
 8006c9e:	4629      	mov	r1, r5
 8006ca0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006ca4:	f7fd f966 	bl	8003f74 <memset>
 8006ca8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006cac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006cb0:	4620      	mov	r0, r4
 8006cb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006cb4:	3468      	adds	r4, #104	; 0x68
 8006cb6:	e7d9      	b.n	8006c6c <__sfp+0x1c>
 8006cb8:	2104      	movs	r1, #4
 8006cba:	4638      	mov	r0, r7
 8006cbc:	f7ff ff62 	bl	8006b84 <__sfmoreglue>
 8006cc0:	4604      	mov	r4, r0
 8006cc2:	6030      	str	r0, [r6, #0]
 8006cc4:	2800      	cmp	r0, #0
 8006cc6:	d1d5      	bne.n	8006c74 <__sfp+0x24>
 8006cc8:	f7ff ff78 	bl	8006bbc <__sfp_lock_release>
 8006ccc:	230c      	movs	r3, #12
 8006cce:	603b      	str	r3, [r7, #0]
 8006cd0:	e7ee      	b.n	8006cb0 <__sfp+0x60>
 8006cd2:	bf00      	nop
 8006cd4:	08008c78 	.word	0x08008c78
 8006cd8:	ffff0001 	.word	0xffff0001

08006cdc <_fwalk_reent>:
 8006cdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ce0:	4606      	mov	r6, r0
 8006ce2:	4688      	mov	r8, r1
 8006ce4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006ce8:	2700      	movs	r7, #0
 8006cea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006cee:	f1b9 0901 	subs.w	r9, r9, #1
 8006cf2:	d505      	bpl.n	8006d00 <_fwalk_reent+0x24>
 8006cf4:	6824      	ldr	r4, [r4, #0]
 8006cf6:	2c00      	cmp	r4, #0
 8006cf8:	d1f7      	bne.n	8006cea <_fwalk_reent+0xe>
 8006cfa:	4638      	mov	r0, r7
 8006cfc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d00:	89ab      	ldrh	r3, [r5, #12]
 8006d02:	2b01      	cmp	r3, #1
 8006d04:	d907      	bls.n	8006d16 <_fwalk_reent+0x3a>
 8006d06:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006d0a:	3301      	adds	r3, #1
 8006d0c:	d003      	beq.n	8006d16 <_fwalk_reent+0x3a>
 8006d0e:	4629      	mov	r1, r5
 8006d10:	4630      	mov	r0, r6
 8006d12:	47c0      	blx	r8
 8006d14:	4307      	orrs	r7, r0
 8006d16:	3568      	adds	r5, #104	; 0x68
 8006d18:	e7e9      	b.n	8006cee <_fwalk_reent+0x12>

08006d1a <rshift>:
 8006d1a:	6903      	ldr	r3, [r0, #16]
 8006d1c:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8006d20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006d24:	ea4f 1261 	mov.w	r2, r1, asr #5
 8006d28:	f100 0414 	add.w	r4, r0, #20
 8006d2c:	dd45      	ble.n	8006dba <rshift+0xa0>
 8006d2e:	f011 011f 	ands.w	r1, r1, #31
 8006d32:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8006d36:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8006d3a:	d10c      	bne.n	8006d56 <rshift+0x3c>
 8006d3c:	f100 0710 	add.w	r7, r0, #16
 8006d40:	4629      	mov	r1, r5
 8006d42:	42b1      	cmp	r1, r6
 8006d44:	d334      	bcc.n	8006db0 <rshift+0x96>
 8006d46:	1a9b      	subs	r3, r3, r2
 8006d48:	009b      	lsls	r3, r3, #2
 8006d4a:	1eea      	subs	r2, r5, #3
 8006d4c:	4296      	cmp	r6, r2
 8006d4e:	bf38      	it	cc
 8006d50:	2300      	movcc	r3, #0
 8006d52:	4423      	add	r3, r4
 8006d54:	e015      	b.n	8006d82 <rshift+0x68>
 8006d56:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8006d5a:	f1c1 0820 	rsb	r8, r1, #32
 8006d5e:	40cf      	lsrs	r7, r1
 8006d60:	f105 0e04 	add.w	lr, r5, #4
 8006d64:	46a1      	mov	r9, r4
 8006d66:	4576      	cmp	r6, lr
 8006d68:	46f4      	mov	ip, lr
 8006d6a:	d815      	bhi.n	8006d98 <rshift+0x7e>
 8006d6c:	1a9a      	subs	r2, r3, r2
 8006d6e:	0092      	lsls	r2, r2, #2
 8006d70:	3a04      	subs	r2, #4
 8006d72:	3501      	adds	r5, #1
 8006d74:	42ae      	cmp	r6, r5
 8006d76:	bf38      	it	cc
 8006d78:	2200      	movcc	r2, #0
 8006d7a:	18a3      	adds	r3, r4, r2
 8006d7c:	50a7      	str	r7, [r4, r2]
 8006d7e:	b107      	cbz	r7, 8006d82 <rshift+0x68>
 8006d80:	3304      	adds	r3, #4
 8006d82:	1b1a      	subs	r2, r3, r4
 8006d84:	42a3      	cmp	r3, r4
 8006d86:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006d8a:	bf08      	it	eq
 8006d8c:	2300      	moveq	r3, #0
 8006d8e:	6102      	str	r2, [r0, #16]
 8006d90:	bf08      	it	eq
 8006d92:	6143      	streq	r3, [r0, #20]
 8006d94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006d98:	f8dc c000 	ldr.w	ip, [ip]
 8006d9c:	fa0c fc08 	lsl.w	ip, ip, r8
 8006da0:	ea4c 0707 	orr.w	r7, ip, r7
 8006da4:	f849 7b04 	str.w	r7, [r9], #4
 8006da8:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006dac:	40cf      	lsrs	r7, r1
 8006dae:	e7da      	b.n	8006d66 <rshift+0x4c>
 8006db0:	f851 cb04 	ldr.w	ip, [r1], #4
 8006db4:	f847 cf04 	str.w	ip, [r7, #4]!
 8006db8:	e7c3      	b.n	8006d42 <rshift+0x28>
 8006dba:	4623      	mov	r3, r4
 8006dbc:	e7e1      	b.n	8006d82 <rshift+0x68>

08006dbe <__hexdig_fun>:
 8006dbe:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8006dc2:	2b09      	cmp	r3, #9
 8006dc4:	d802      	bhi.n	8006dcc <__hexdig_fun+0xe>
 8006dc6:	3820      	subs	r0, #32
 8006dc8:	b2c0      	uxtb	r0, r0
 8006dca:	4770      	bx	lr
 8006dcc:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8006dd0:	2b05      	cmp	r3, #5
 8006dd2:	d801      	bhi.n	8006dd8 <__hexdig_fun+0x1a>
 8006dd4:	3847      	subs	r0, #71	; 0x47
 8006dd6:	e7f7      	b.n	8006dc8 <__hexdig_fun+0xa>
 8006dd8:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8006ddc:	2b05      	cmp	r3, #5
 8006dde:	d801      	bhi.n	8006de4 <__hexdig_fun+0x26>
 8006de0:	3827      	subs	r0, #39	; 0x27
 8006de2:	e7f1      	b.n	8006dc8 <__hexdig_fun+0xa>
 8006de4:	2000      	movs	r0, #0
 8006de6:	4770      	bx	lr

08006de8 <__gethex>:
 8006de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dec:	ed2d 8b02 	vpush	{d8}
 8006df0:	b089      	sub	sp, #36	; 0x24
 8006df2:	ee08 0a10 	vmov	s16, r0
 8006df6:	9304      	str	r3, [sp, #16]
 8006df8:	4bb4      	ldr	r3, [pc, #720]	; (80070cc <__gethex+0x2e4>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	9301      	str	r3, [sp, #4]
 8006dfe:	4618      	mov	r0, r3
 8006e00:	468b      	mov	fp, r1
 8006e02:	4690      	mov	r8, r2
 8006e04:	f7f9 fa04 	bl	8000210 <strlen>
 8006e08:	9b01      	ldr	r3, [sp, #4]
 8006e0a:	f8db 2000 	ldr.w	r2, [fp]
 8006e0e:	4403      	add	r3, r0
 8006e10:	4682      	mov	sl, r0
 8006e12:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8006e16:	9305      	str	r3, [sp, #20]
 8006e18:	1c93      	adds	r3, r2, #2
 8006e1a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8006e1e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8006e22:	32fe      	adds	r2, #254	; 0xfe
 8006e24:	18d1      	adds	r1, r2, r3
 8006e26:	461f      	mov	r7, r3
 8006e28:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006e2c:	9100      	str	r1, [sp, #0]
 8006e2e:	2830      	cmp	r0, #48	; 0x30
 8006e30:	d0f8      	beq.n	8006e24 <__gethex+0x3c>
 8006e32:	f7ff ffc4 	bl	8006dbe <__hexdig_fun>
 8006e36:	4604      	mov	r4, r0
 8006e38:	2800      	cmp	r0, #0
 8006e3a:	d13a      	bne.n	8006eb2 <__gethex+0xca>
 8006e3c:	9901      	ldr	r1, [sp, #4]
 8006e3e:	4652      	mov	r2, sl
 8006e40:	4638      	mov	r0, r7
 8006e42:	f001 fc38 	bl	80086b6 <strncmp>
 8006e46:	4605      	mov	r5, r0
 8006e48:	2800      	cmp	r0, #0
 8006e4a:	d168      	bne.n	8006f1e <__gethex+0x136>
 8006e4c:	f817 000a 	ldrb.w	r0, [r7, sl]
 8006e50:	eb07 060a 	add.w	r6, r7, sl
 8006e54:	f7ff ffb3 	bl	8006dbe <__hexdig_fun>
 8006e58:	2800      	cmp	r0, #0
 8006e5a:	d062      	beq.n	8006f22 <__gethex+0x13a>
 8006e5c:	4633      	mov	r3, r6
 8006e5e:	7818      	ldrb	r0, [r3, #0]
 8006e60:	2830      	cmp	r0, #48	; 0x30
 8006e62:	461f      	mov	r7, r3
 8006e64:	f103 0301 	add.w	r3, r3, #1
 8006e68:	d0f9      	beq.n	8006e5e <__gethex+0x76>
 8006e6a:	f7ff ffa8 	bl	8006dbe <__hexdig_fun>
 8006e6e:	2301      	movs	r3, #1
 8006e70:	fab0 f480 	clz	r4, r0
 8006e74:	0964      	lsrs	r4, r4, #5
 8006e76:	4635      	mov	r5, r6
 8006e78:	9300      	str	r3, [sp, #0]
 8006e7a:	463a      	mov	r2, r7
 8006e7c:	4616      	mov	r6, r2
 8006e7e:	3201      	adds	r2, #1
 8006e80:	7830      	ldrb	r0, [r6, #0]
 8006e82:	f7ff ff9c 	bl	8006dbe <__hexdig_fun>
 8006e86:	2800      	cmp	r0, #0
 8006e88:	d1f8      	bne.n	8006e7c <__gethex+0x94>
 8006e8a:	9901      	ldr	r1, [sp, #4]
 8006e8c:	4652      	mov	r2, sl
 8006e8e:	4630      	mov	r0, r6
 8006e90:	f001 fc11 	bl	80086b6 <strncmp>
 8006e94:	b980      	cbnz	r0, 8006eb8 <__gethex+0xd0>
 8006e96:	b94d      	cbnz	r5, 8006eac <__gethex+0xc4>
 8006e98:	eb06 050a 	add.w	r5, r6, sl
 8006e9c:	462a      	mov	r2, r5
 8006e9e:	4616      	mov	r6, r2
 8006ea0:	3201      	adds	r2, #1
 8006ea2:	7830      	ldrb	r0, [r6, #0]
 8006ea4:	f7ff ff8b 	bl	8006dbe <__hexdig_fun>
 8006ea8:	2800      	cmp	r0, #0
 8006eaa:	d1f8      	bne.n	8006e9e <__gethex+0xb6>
 8006eac:	1bad      	subs	r5, r5, r6
 8006eae:	00ad      	lsls	r5, r5, #2
 8006eb0:	e004      	b.n	8006ebc <__gethex+0xd4>
 8006eb2:	2400      	movs	r4, #0
 8006eb4:	4625      	mov	r5, r4
 8006eb6:	e7e0      	b.n	8006e7a <__gethex+0x92>
 8006eb8:	2d00      	cmp	r5, #0
 8006eba:	d1f7      	bne.n	8006eac <__gethex+0xc4>
 8006ebc:	7833      	ldrb	r3, [r6, #0]
 8006ebe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006ec2:	2b50      	cmp	r3, #80	; 0x50
 8006ec4:	d13b      	bne.n	8006f3e <__gethex+0x156>
 8006ec6:	7873      	ldrb	r3, [r6, #1]
 8006ec8:	2b2b      	cmp	r3, #43	; 0x2b
 8006eca:	d02c      	beq.n	8006f26 <__gethex+0x13e>
 8006ecc:	2b2d      	cmp	r3, #45	; 0x2d
 8006ece:	d02e      	beq.n	8006f2e <__gethex+0x146>
 8006ed0:	1c71      	adds	r1, r6, #1
 8006ed2:	f04f 0900 	mov.w	r9, #0
 8006ed6:	7808      	ldrb	r0, [r1, #0]
 8006ed8:	f7ff ff71 	bl	8006dbe <__hexdig_fun>
 8006edc:	1e43      	subs	r3, r0, #1
 8006ede:	b2db      	uxtb	r3, r3
 8006ee0:	2b18      	cmp	r3, #24
 8006ee2:	d82c      	bhi.n	8006f3e <__gethex+0x156>
 8006ee4:	f1a0 0210 	sub.w	r2, r0, #16
 8006ee8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006eec:	f7ff ff67 	bl	8006dbe <__hexdig_fun>
 8006ef0:	1e43      	subs	r3, r0, #1
 8006ef2:	b2db      	uxtb	r3, r3
 8006ef4:	2b18      	cmp	r3, #24
 8006ef6:	d91d      	bls.n	8006f34 <__gethex+0x14c>
 8006ef8:	f1b9 0f00 	cmp.w	r9, #0
 8006efc:	d000      	beq.n	8006f00 <__gethex+0x118>
 8006efe:	4252      	negs	r2, r2
 8006f00:	4415      	add	r5, r2
 8006f02:	f8cb 1000 	str.w	r1, [fp]
 8006f06:	b1e4      	cbz	r4, 8006f42 <__gethex+0x15a>
 8006f08:	9b00      	ldr	r3, [sp, #0]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	bf14      	ite	ne
 8006f0e:	2700      	movne	r7, #0
 8006f10:	2706      	moveq	r7, #6
 8006f12:	4638      	mov	r0, r7
 8006f14:	b009      	add	sp, #36	; 0x24
 8006f16:	ecbd 8b02 	vpop	{d8}
 8006f1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f1e:	463e      	mov	r6, r7
 8006f20:	4625      	mov	r5, r4
 8006f22:	2401      	movs	r4, #1
 8006f24:	e7ca      	b.n	8006ebc <__gethex+0xd4>
 8006f26:	f04f 0900 	mov.w	r9, #0
 8006f2a:	1cb1      	adds	r1, r6, #2
 8006f2c:	e7d3      	b.n	8006ed6 <__gethex+0xee>
 8006f2e:	f04f 0901 	mov.w	r9, #1
 8006f32:	e7fa      	b.n	8006f2a <__gethex+0x142>
 8006f34:	230a      	movs	r3, #10
 8006f36:	fb03 0202 	mla	r2, r3, r2, r0
 8006f3a:	3a10      	subs	r2, #16
 8006f3c:	e7d4      	b.n	8006ee8 <__gethex+0x100>
 8006f3e:	4631      	mov	r1, r6
 8006f40:	e7df      	b.n	8006f02 <__gethex+0x11a>
 8006f42:	1bf3      	subs	r3, r6, r7
 8006f44:	3b01      	subs	r3, #1
 8006f46:	4621      	mov	r1, r4
 8006f48:	2b07      	cmp	r3, #7
 8006f4a:	dc0b      	bgt.n	8006f64 <__gethex+0x17c>
 8006f4c:	ee18 0a10 	vmov	r0, s16
 8006f50:	f000 fae6 	bl	8007520 <_Balloc>
 8006f54:	4604      	mov	r4, r0
 8006f56:	b940      	cbnz	r0, 8006f6a <__gethex+0x182>
 8006f58:	4b5d      	ldr	r3, [pc, #372]	; (80070d0 <__gethex+0x2e8>)
 8006f5a:	4602      	mov	r2, r0
 8006f5c:	21de      	movs	r1, #222	; 0xde
 8006f5e:	485d      	ldr	r0, [pc, #372]	; (80070d4 <__gethex+0x2ec>)
 8006f60:	f001 fbdc 	bl	800871c <__assert_func>
 8006f64:	3101      	adds	r1, #1
 8006f66:	105b      	asrs	r3, r3, #1
 8006f68:	e7ee      	b.n	8006f48 <__gethex+0x160>
 8006f6a:	f100 0914 	add.w	r9, r0, #20
 8006f6e:	f04f 0b00 	mov.w	fp, #0
 8006f72:	f1ca 0301 	rsb	r3, sl, #1
 8006f76:	f8cd 9008 	str.w	r9, [sp, #8]
 8006f7a:	f8cd b000 	str.w	fp, [sp]
 8006f7e:	9306      	str	r3, [sp, #24]
 8006f80:	42b7      	cmp	r7, r6
 8006f82:	d340      	bcc.n	8007006 <__gethex+0x21e>
 8006f84:	9802      	ldr	r0, [sp, #8]
 8006f86:	9b00      	ldr	r3, [sp, #0]
 8006f88:	f840 3b04 	str.w	r3, [r0], #4
 8006f8c:	eba0 0009 	sub.w	r0, r0, r9
 8006f90:	1080      	asrs	r0, r0, #2
 8006f92:	0146      	lsls	r6, r0, #5
 8006f94:	6120      	str	r0, [r4, #16]
 8006f96:	4618      	mov	r0, r3
 8006f98:	f000 fbb4 	bl	8007704 <__hi0bits>
 8006f9c:	1a30      	subs	r0, r6, r0
 8006f9e:	f8d8 6000 	ldr.w	r6, [r8]
 8006fa2:	42b0      	cmp	r0, r6
 8006fa4:	dd63      	ble.n	800706e <__gethex+0x286>
 8006fa6:	1b87      	subs	r7, r0, r6
 8006fa8:	4639      	mov	r1, r7
 8006faa:	4620      	mov	r0, r4
 8006fac:	f000 ff58 	bl	8007e60 <__any_on>
 8006fb0:	4682      	mov	sl, r0
 8006fb2:	b1a8      	cbz	r0, 8006fe0 <__gethex+0x1f8>
 8006fb4:	1e7b      	subs	r3, r7, #1
 8006fb6:	1159      	asrs	r1, r3, #5
 8006fb8:	f003 021f 	and.w	r2, r3, #31
 8006fbc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8006fc0:	f04f 0a01 	mov.w	sl, #1
 8006fc4:	fa0a f202 	lsl.w	r2, sl, r2
 8006fc8:	420a      	tst	r2, r1
 8006fca:	d009      	beq.n	8006fe0 <__gethex+0x1f8>
 8006fcc:	4553      	cmp	r3, sl
 8006fce:	dd05      	ble.n	8006fdc <__gethex+0x1f4>
 8006fd0:	1eb9      	subs	r1, r7, #2
 8006fd2:	4620      	mov	r0, r4
 8006fd4:	f000 ff44 	bl	8007e60 <__any_on>
 8006fd8:	2800      	cmp	r0, #0
 8006fda:	d145      	bne.n	8007068 <__gethex+0x280>
 8006fdc:	f04f 0a02 	mov.w	sl, #2
 8006fe0:	4639      	mov	r1, r7
 8006fe2:	4620      	mov	r0, r4
 8006fe4:	f7ff fe99 	bl	8006d1a <rshift>
 8006fe8:	443d      	add	r5, r7
 8006fea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006fee:	42ab      	cmp	r3, r5
 8006ff0:	da4c      	bge.n	800708c <__gethex+0x2a4>
 8006ff2:	ee18 0a10 	vmov	r0, s16
 8006ff6:	4621      	mov	r1, r4
 8006ff8:	f000 fad2 	bl	80075a0 <_Bfree>
 8006ffc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006ffe:	2300      	movs	r3, #0
 8007000:	6013      	str	r3, [r2, #0]
 8007002:	27a3      	movs	r7, #163	; 0xa3
 8007004:	e785      	b.n	8006f12 <__gethex+0x12a>
 8007006:	1e73      	subs	r3, r6, #1
 8007008:	9a05      	ldr	r2, [sp, #20]
 800700a:	9303      	str	r3, [sp, #12]
 800700c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007010:	4293      	cmp	r3, r2
 8007012:	d019      	beq.n	8007048 <__gethex+0x260>
 8007014:	f1bb 0f20 	cmp.w	fp, #32
 8007018:	d107      	bne.n	800702a <__gethex+0x242>
 800701a:	9b02      	ldr	r3, [sp, #8]
 800701c:	9a00      	ldr	r2, [sp, #0]
 800701e:	f843 2b04 	str.w	r2, [r3], #4
 8007022:	9302      	str	r3, [sp, #8]
 8007024:	2300      	movs	r3, #0
 8007026:	9300      	str	r3, [sp, #0]
 8007028:	469b      	mov	fp, r3
 800702a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800702e:	f7ff fec6 	bl	8006dbe <__hexdig_fun>
 8007032:	9b00      	ldr	r3, [sp, #0]
 8007034:	f000 000f 	and.w	r0, r0, #15
 8007038:	fa00 f00b 	lsl.w	r0, r0, fp
 800703c:	4303      	orrs	r3, r0
 800703e:	9300      	str	r3, [sp, #0]
 8007040:	f10b 0b04 	add.w	fp, fp, #4
 8007044:	9b03      	ldr	r3, [sp, #12]
 8007046:	e00d      	b.n	8007064 <__gethex+0x27c>
 8007048:	9b03      	ldr	r3, [sp, #12]
 800704a:	9a06      	ldr	r2, [sp, #24]
 800704c:	4413      	add	r3, r2
 800704e:	42bb      	cmp	r3, r7
 8007050:	d3e0      	bcc.n	8007014 <__gethex+0x22c>
 8007052:	4618      	mov	r0, r3
 8007054:	9901      	ldr	r1, [sp, #4]
 8007056:	9307      	str	r3, [sp, #28]
 8007058:	4652      	mov	r2, sl
 800705a:	f001 fb2c 	bl	80086b6 <strncmp>
 800705e:	9b07      	ldr	r3, [sp, #28]
 8007060:	2800      	cmp	r0, #0
 8007062:	d1d7      	bne.n	8007014 <__gethex+0x22c>
 8007064:	461e      	mov	r6, r3
 8007066:	e78b      	b.n	8006f80 <__gethex+0x198>
 8007068:	f04f 0a03 	mov.w	sl, #3
 800706c:	e7b8      	b.n	8006fe0 <__gethex+0x1f8>
 800706e:	da0a      	bge.n	8007086 <__gethex+0x29e>
 8007070:	1a37      	subs	r7, r6, r0
 8007072:	4621      	mov	r1, r4
 8007074:	ee18 0a10 	vmov	r0, s16
 8007078:	463a      	mov	r2, r7
 800707a:	f000 fcad 	bl	80079d8 <__lshift>
 800707e:	1bed      	subs	r5, r5, r7
 8007080:	4604      	mov	r4, r0
 8007082:	f100 0914 	add.w	r9, r0, #20
 8007086:	f04f 0a00 	mov.w	sl, #0
 800708a:	e7ae      	b.n	8006fea <__gethex+0x202>
 800708c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007090:	42a8      	cmp	r0, r5
 8007092:	dd72      	ble.n	800717a <__gethex+0x392>
 8007094:	1b45      	subs	r5, r0, r5
 8007096:	42ae      	cmp	r6, r5
 8007098:	dc36      	bgt.n	8007108 <__gethex+0x320>
 800709a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800709e:	2b02      	cmp	r3, #2
 80070a0:	d02a      	beq.n	80070f8 <__gethex+0x310>
 80070a2:	2b03      	cmp	r3, #3
 80070a4:	d02c      	beq.n	8007100 <__gethex+0x318>
 80070a6:	2b01      	cmp	r3, #1
 80070a8:	d11c      	bne.n	80070e4 <__gethex+0x2fc>
 80070aa:	42ae      	cmp	r6, r5
 80070ac:	d11a      	bne.n	80070e4 <__gethex+0x2fc>
 80070ae:	2e01      	cmp	r6, #1
 80070b0:	d112      	bne.n	80070d8 <__gethex+0x2f0>
 80070b2:	9a04      	ldr	r2, [sp, #16]
 80070b4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80070b8:	6013      	str	r3, [r2, #0]
 80070ba:	2301      	movs	r3, #1
 80070bc:	6123      	str	r3, [r4, #16]
 80070be:	f8c9 3000 	str.w	r3, [r9]
 80070c2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80070c4:	2762      	movs	r7, #98	; 0x62
 80070c6:	601c      	str	r4, [r3, #0]
 80070c8:	e723      	b.n	8006f12 <__gethex+0x12a>
 80070ca:	bf00      	nop
 80070cc:	08008f64 	.word	0x08008f64
 80070d0:	08008e88 	.word	0x08008e88
 80070d4:	08008efc 	.word	0x08008efc
 80070d8:	1e71      	subs	r1, r6, #1
 80070da:	4620      	mov	r0, r4
 80070dc:	f000 fec0 	bl	8007e60 <__any_on>
 80070e0:	2800      	cmp	r0, #0
 80070e2:	d1e6      	bne.n	80070b2 <__gethex+0x2ca>
 80070e4:	ee18 0a10 	vmov	r0, s16
 80070e8:	4621      	mov	r1, r4
 80070ea:	f000 fa59 	bl	80075a0 <_Bfree>
 80070ee:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80070f0:	2300      	movs	r3, #0
 80070f2:	6013      	str	r3, [r2, #0]
 80070f4:	2750      	movs	r7, #80	; 0x50
 80070f6:	e70c      	b.n	8006f12 <__gethex+0x12a>
 80070f8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d1f2      	bne.n	80070e4 <__gethex+0x2fc>
 80070fe:	e7d8      	b.n	80070b2 <__gethex+0x2ca>
 8007100:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007102:	2b00      	cmp	r3, #0
 8007104:	d1d5      	bne.n	80070b2 <__gethex+0x2ca>
 8007106:	e7ed      	b.n	80070e4 <__gethex+0x2fc>
 8007108:	1e6f      	subs	r7, r5, #1
 800710a:	f1ba 0f00 	cmp.w	sl, #0
 800710e:	d131      	bne.n	8007174 <__gethex+0x38c>
 8007110:	b127      	cbz	r7, 800711c <__gethex+0x334>
 8007112:	4639      	mov	r1, r7
 8007114:	4620      	mov	r0, r4
 8007116:	f000 fea3 	bl	8007e60 <__any_on>
 800711a:	4682      	mov	sl, r0
 800711c:	117b      	asrs	r3, r7, #5
 800711e:	2101      	movs	r1, #1
 8007120:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8007124:	f007 071f 	and.w	r7, r7, #31
 8007128:	fa01 f707 	lsl.w	r7, r1, r7
 800712c:	421f      	tst	r7, r3
 800712e:	4629      	mov	r1, r5
 8007130:	4620      	mov	r0, r4
 8007132:	bf18      	it	ne
 8007134:	f04a 0a02 	orrne.w	sl, sl, #2
 8007138:	1b76      	subs	r6, r6, r5
 800713a:	f7ff fdee 	bl	8006d1a <rshift>
 800713e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007142:	2702      	movs	r7, #2
 8007144:	f1ba 0f00 	cmp.w	sl, #0
 8007148:	d048      	beq.n	80071dc <__gethex+0x3f4>
 800714a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800714e:	2b02      	cmp	r3, #2
 8007150:	d015      	beq.n	800717e <__gethex+0x396>
 8007152:	2b03      	cmp	r3, #3
 8007154:	d017      	beq.n	8007186 <__gethex+0x39e>
 8007156:	2b01      	cmp	r3, #1
 8007158:	d109      	bne.n	800716e <__gethex+0x386>
 800715a:	f01a 0f02 	tst.w	sl, #2
 800715e:	d006      	beq.n	800716e <__gethex+0x386>
 8007160:	f8d9 0000 	ldr.w	r0, [r9]
 8007164:	ea4a 0a00 	orr.w	sl, sl, r0
 8007168:	f01a 0f01 	tst.w	sl, #1
 800716c:	d10e      	bne.n	800718c <__gethex+0x3a4>
 800716e:	f047 0710 	orr.w	r7, r7, #16
 8007172:	e033      	b.n	80071dc <__gethex+0x3f4>
 8007174:	f04f 0a01 	mov.w	sl, #1
 8007178:	e7d0      	b.n	800711c <__gethex+0x334>
 800717a:	2701      	movs	r7, #1
 800717c:	e7e2      	b.n	8007144 <__gethex+0x35c>
 800717e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007180:	f1c3 0301 	rsb	r3, r3, #1
 8007184:	9315      	str	r3, [sp, #84]	; 0x54
 8007186:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007188:	2b00      	cmp	r3, #0
 800718a:	d0f0      	beq.n	800716e <__gethex+0x386>
 800718c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007190:	f104 0314 	add.w	r3, r4, #20
 8007194:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007198:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800719c:	f04f 0c00 	mov.w	ip, #0
 80071a0:	4618      	mov	r0, r3
 80071a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80071a6:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 80071aa:	d01c      	beq.n	80071e6 <__gethex+0x3fe>
 80071ac:	3201      	adds	r2, #1
 80071ae:	6002      	str	r2, [r0, #0]
 80071b0:	2f02      	cmp	r7, #2
 80071b2:	f104 0314 	add.w	r3, r4, #20
 80071b6:	d13f      	bne.n	8007238 <__gethex+0x450>
 80071b8:	f8d8 2000 	ldr.w	r2, [r8]
 80071bc:	3a01      	subs	r2, #1
 80071be:	42b2      	cmp	r2, r6
 80071c0:	d10a      	bne.n	80071d8 <__gethex+0x3f0>
 80071c2:	1171      	asrs	r1, r6, #5
 80071c4:	2201      	movs	r2, #1
 80071c6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80071ca:	f006 061f 	and.w	r6, r6, #31
 80071ce:	fa02 f606 	lsl.w	r6, r2, r6
 80071d2:	421e      	tst	r6, r3
 80071d4:	bf18      	it	ne
 80071d6:	4617      	movne	r7, r2
 80071d8:	f047 0720 	orr.w	r7, r7, #32
 80071dc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80071de:	601c      	str	r4, [r3, #0]
 80071e0:	9b04      	ldr	r3, [sp, #16]
 80071e2:	601d      	str	r5, [r3, #0]
 80071e4:	e695      	b.n	8006f12 <__gethex+0x12a>
 80071e6:	4299      	cmp	r1, r3
 80071e8:	f843 cc04 	str.w	ip, [r3, #-4]
 80071ec:	d8d8      	bhi.n	80071a0 <__gethex+0x3b8>
 80071ee:	68a3      	ldr	r3, [r4, #8]
 80071f0:	459b      	cmp	fp, r3
 80071f2:	db19      	blt.n	8007228 <__gethex+0x440>
 80071f4:	6861      	ldr	r1, [r4, #4]
 80071f6:	ee18 0a10 	vmov	r0, s16
 80071fa:	3101      	adds	r1, #1
 80071fc:	f000 f990 	bl	8007520 <_Balloc>
 8007200:	4681      	mov	r9, r0
 8007202:	b918      	cbnz	r0, 800720c <__gethex+0x424>
 8007204:	4b1a      	ldr	r3, [pc, #104]	; (8007270 <__gethex+0x488>)
 8007206:	4602      	mov	r2, r0
 8007208:	2184      	movs	r1, #132	; 0x84
 800720a:	e6a8      	b.n	8006f5e <__gethex+0x176>
 800720c:	6922      	ldr	r2, [r4, #16]
 800720e:	3202      	adds	r2, #2
 8007210:	f104 010c 	add.w	r1, r4, #12
 8007214:	0092      	lsls	r2, r2, #2
 8007216:	300c      	adds	r0, #12
 8007218:	f000 f974 	bl	8007504 <memcpy>
 800721c:	4621      	mov	r1, r4
 800721e:	ee18 0a10 	vmov	r0, s16
 8007222:	f000 f9bd 	bl	80075a0 <_Bfree>
 8007226:	464c      	mov	r4, r9
 8007228:	6923      	ldr	r3, [r4, #16]
 800722a:	1c5a      	adds	r2, r3, #1
 800722c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007230:	6122      	str	r2, [r4, #16]
 8007232:	2201      	movs	r2, #1
 8007234:	615a      	str	r2, [r3, #20]
 8007236:	e7bb      	b.n	80071b0 <__gethex+0x3c8>
 8007238:	6922      	ldr	r2, [r4, #16]
 800723a:	455a      	cmp	r2, fp
 800723c:	dd0b      	ble.n	8007256 <__gethex+0x46e>
 800723e:	2101      	movs	r1, #1
 8007240:	4620      	mov	r0, r4
 8007242:	f7ff fd6a 	bl	8006d1a <rshift>
 8007246:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800724a:	3501      	adds	r5, #1
 800724c:	42ab      	cmp	r3, r5
 800724e:	f6ff aed0 	blt.w	8006ff2 <__gethex+0x20a>
 8007252:	2701      	movs	r7, #1
 8007254:	e7c0      	b.n	80071d8 <__gethex+0x3f0>
 8007256:	f016 061f 	ands.w	r6, r6, #31
 800725a:	d0fa      	beq.n	8007252 <__gethex+0x46a>
 800725c:	4453      	add	r3, sl
 800725e:	f1c6 0620 	rsb	r6, r6, #32
 8007262:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8007266:	f000 fa4d 	bl	8007704 <__hi0bits>
 800726a:	42b0      	cmp	r0, r6
 800726c:	dbe7      	blt.n	800723e <__gethex+0x456>
 800726e:	e7f0      	b.n	8007252 <__gethex+0x46a>
 8007270:	08008e88 	.word	0x08008e88

08007274 <L_shift>:
 8007274:	f1c2 0208 	rsb	r2, r2, #8
 8007278:	0092      	lsls	r2, r2, #2
 800727a:	b570      	push	{r4, r5, r6, lr}
 800727c:	f1c2 0620 	rsb	r6, r2, #32
 8007280:	6843      	ldr	r3, [r0, #4]
 8007282:	6804      	ldr	r4, [r0, #0]
 8007284:	fa03 f506 	lsl.w	r5, r3, r6
 8007288:	432c      	orrs	r4, r5
 800728a:	40d3      	lsrs	r3, r2
 800728c:	6004      	str	r4, [r0, #0]
 800728e:	f840 3f04 	str.w	r3, [r0, #4]!
 8007292:	4288      	cmp	r0, r1
 8007294:	d3f4      	bcc.n	8007280 <L_shift+0xc>
 8007296:	bd70      	pop	{r4, r5, r6, pc}

08007298 <__match>:
 8007298:	b530      	push	{r4, r5, lr}
 800729a:	6803      	ldr	r3, [r0, #0]
 800729c:	3301      	adds	r3, #1
 800729e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80072a2:	b914      	cbnz	r4, 80072aa <__match+0x12>
 80072a4:	6003      	str	r3, [r0, #0]
 80072a6:	2001      	movs	r0, #1
 80072a8:	bd30      	pop	{r4, r5, pc}
 80072aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80072ae:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80072b2:	2d19      	cmp	r5, #25
 80072b4:	bf98      	it	ls
 80072b6:	3220      	addls	r2, #32
 80072b8:	42a2      	cmp	r2, r4
 80072ba:	d0f0      	beq.n	800729e <__match+0x6>
 80072bc:	2000      	movs	r0, #0
 80072be:	e7f3      	b.n	80072a8 <__match+0x10>

080072c0 <__hexnan>:
 80072c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072c4:	680b      	ldr	r3, [r1, #0]
 80072c6:	115e      	asrs	r6, r3, #5
 80072c8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80072cc:	f013 031f 	ands.w	r3, r3, #31
 80072d0:	b087      	sub	sp, #28
 80072d2:	bf18      	it	ne
 80072d4:	3604      	addne	r6, #4
 80072d6:	2500      	movs	r5, #0
 80072d8:	1f37      	subs	r7, r6, #4
 80072da:	4690      	mov	r8, r2
 80072dc:	6802      	ldr	r2, [r0, #0]
 80072de:	9301      	str	r3, [sp, #4]
 80072e0:	4682      	mov	sl, r0
 80072e2:	f846 5c04 	str.w	r5, [r6, #-4]
 80072e6:	46b9      	mov	r9, r7
 80072e8:	463c      	mov	r4, r7
 80072ea:	9502      	str	r5, [sp, #8]
 80072ec:	46ab      	mov	fp, r5
 80072ee:	7851      	ldrb	r1, [r2, #1]
 80072f0:	1c53      	adds	r3, r2, #1
 80072f2:	9303      	str	r3, [sp, #12]
 80072f4:	b341      	cbz	r1, 8007348 <__hexnan+0x88>
 80072f6:	4608      	mov	r0, r1
 80072f8:	9205      	str	r2, [sp, #20]
 80072fa:	9104      	str	r1, [sp, #16]
 80072fc:	f7ff fd5f 	bl	8006dbe <__hexdig_fun>
 8007300:	2800      	cmp	r0, #0
 8007302:	d14f      	bne.n	80073a4 <__hexnan+0xe4>
 8007304:	9904      	ldr	r1, [sp, #16]
 8007306:	9a05      	ldr	r2, [sp, #20]
 8007308:	2920      	cmp	r1, #32
 800730a:	d818      	bhi.n	800733e <__hexnan+0x7e>
 800730c:	9b02      	ldr	r3, [sp, #8]
 800730e:	459b      	cmp	fp, r3
 8007310:	dd13      	ble.n	800733a <__hexnan+0x7a>
 8007312:	454c      	cmp	r4, r9
 8007314:	d206      	bcs.n	8007324 <__hexnan+0x64>
 8007316:	2d07      	cmp	r5, #7
 8007318:	dc04      	bgt.n	8007324 <__hexnan+0x64>
 800731a:	462a      	mov	r2, r5
 800731c:	4649      	mov	r1, r9
 800731e:	4620      	mov	r0, r4
 8007320:	f7ff ffa8 	bl	8007274 <L_shift>
 8007324:	4544      	cmp	r4, r8
 8007326:	d950      	bls.n	80073ca <__hexnan+0x10a>
 8007328:	2300      	movs	r3, #0
 800732a:	f1a4 0904 	sub.w	r9, r4, #4
 800732e:	f844 3c04 	str.w	r3, [r4, #-4]
 8007332:	f8cd b008 	str.w	fp, [sp, #8]
 8007336:	464c      	mov	r4, r9
 8007338:	461d      	mov	r5, r3
 800733a:	9a03      	ldr	r2, [sp, #12]
 800733c:	e7d7      	b.n	80072ee <__hexnan+0x2e>
 800733e:	2929      	cmp	r1, #41	; 0x29
 8007340:	d156      	bne.n	80073f0 <__hexnan+0x130>
 8007342:	3202      	adds	r2, #2
 8007344:	f8ca 2000 	str.w	r2, [sl]
 8007348:	f1bb 0f00 	cmp.w	fp, #0
 800734c:	d050      	beq.n	80073f0 <__hexnan+0x130>
 800734e:	454c      	cmp	r4, r9
 8007350:	d206      	bcs.n	8007360 <__hexnan+0xa0>
 8007352:	2d07      	cmp	r5, #7
 8007354:	dc04      	bgt.n	8007360 <__hexnan+0xa0>
 8007356:	462a      	mov	r2, r5
 8007358:	4649      	mov	r1, r9
 800735a:	4620      	mov	r0, r4
 800735c:	f7ff ff8a 	bl	8007274 <L_shift>
 8007360:	4544      	cmp	r4, r8
 8007362:	d934      	bls.n	80073ce <__hexnan+0x10e>
 8007364:	f1a8 0204 	sub.w	r2, r8, #4
 8007368:	4623      	mov	r3, r4
 800736a:	f853 1b04 	ldr.w	r1, [r3], #4
 800736e:	f842 1f04 	str.w	r1, [r2, #4]!
 8007372:	429f      	cmp	r7, r3
 8007374:	d2f9      	bcs.n	800736a <__hexnan+0xaa>
 8007376:	1b3b      	subs	r3, r7, r4
 8007378:	f023 0303 	bic.w	r3, r3, #3
 800737c:	3304      	adds	r3, #4
 800737e:	3401      	adds	r4, #1
 8007380:	3e03      	subs	r6, #3
 8007382:	42b4      	cmp	r4, r6
 8007384:	bf88      	it	hi
 8007386:	2304      	movhi	r3, #4
 8007388:	4443      	add	r3, r8
 800738a:	2200      	movs	r2, #0
 800738c:	f843 2b04 	str.w	r2, [r3], #4
 8007390:	429f      	cmp	r7, r3
 8007392:	d2fb      	bcs.n	800738c <__hexnan+0xcc>
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	b91b      	cbnz	r3, 80073a0 <__hexnan+0xe0>
 8007398:	4547      	cmp	r7, r8
 800739a:	d127      	bne.n	80073ec <__hexnan+0x12c>
 800739c:	2301      	movs	r3, #1
 800739e:	603b      	str	r3, [r7, #0]
 80073a0:	2005      	movs	r0, #5
 80073a2:	e026      	b.n	80073f2 <__hexnan+0x132>
 80073a4:	3501      	adds	r5, #1
 80073a6:	2d08      	cmp	r5, #8
 80073a8:	f10b 0b01 	add.w	fp, fp, #1
 80073ac:	dd06      	ble.n	80073bc <__hexnan+0xfc>
 80073ae:	4544      	cmp	r4, r8
 80073b0:	d9c3      	bls.n	800733a <__hexnan+0x7a>
 80073b2:	2300      	movs	r3, #0
 80073b4:	f844 3c04 	str.w	r3, [r4, #-4]
 80073b8:	2501      	movs	r5, #1
 80073ba:	3c04      	subs	r4, #4
 80073bc:	6822      	ldr	r2, [r4, #0]
 80073be:	f000 000f 	and.w	r0, r0, #15
 80073c2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80073c6:	6022      	str	r2, [r4, #0]
 80073c8:	e7b7      	b.n	800733a <__hexnan+0x7a>
 80073ca:	2508      	movs	r5, #8
 80073cc:	e7b5      	b.n	800733a <__hexnan+0x7a>
 80073ce:	9b01      	ldr	r3, [sp, #4]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d0df      	beq.n	8007394 <__hexnan+0xd4>
 80073d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80073d8:	f1c3 0320 	rsb	r3, r3, #32
 80073dc:	fa22 f303 	lsr.w	r3, r2, r3
 80073e0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80073e4:	401a      	ands	r2, r3
 80073e6:	f846 2c04 	str.w	r2, [r6, #-4]
 80073ea:	e7d3      	b.n	8007394 <__hexnan+0xd4>
 80073ec:	3f04      	subs	r7, #4
 80073ee:	e7d1      	b.n	8007394 <__hexnan+0xd4>
 80073f0:	2004      	movs	r0, #4
 80073f2:	b007      	add	sp, #28
 80073f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080073f8 <_localeconv_r>:
 80073f8:	4800      	ldr	r0, [pc, #0]	; (80073fc <_localeconv_r+0x4>)
 80073fa:	4770      	bx	lr
 80073fc:	20000164 	.word	0x20000164

08007400 <__retarget_lock_init_recursive>:
 8007400:	4770      	bx	lr

08007402 <__retarget_lock_acquire_recursive>:
 8007402:	4770      	bx	lr

08007404 <__retarget_lock_release_recursive>:
 8007404:	4770      	bx	lr

08007406 <__swhatbuf_r>:
 8007406:	b570      	push	{r4, r5, r6, lr}
 8007408:	460e      	mov	r6, r1
 800740a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800740e:	2900      	cmp	r1, #0
 8007410:	b096      	sub	sp, #88	; 0x58
 8007412:	4614      	mov	r4, r2
 8007414:	461d      	mov	r5, r3
 8007416:	da08      	bge.n	800742a <__swhatbuf_r+0x24>
 8007418:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800741c:	2200      	movs	r2, #0
 800741e:	602a      	str	r2, [r5, #0]
 8007420:	061a      	lsls	r2, r3, #24
 8007422:	d410      	bmi.n	8007446 <__swhatbuf_r+0x40>
 8007424:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007428:	e00e      	b.n	8007448 <__swhatbuf_r+0x42>
 800742a:	466a      	mov	r2, sp
 800742c:	f001 f9b6 	bl	800879c <_fstat_r>
 8007430:	2800      	cmp	r0, #0
 8007432:	dbf1      	blt.n	8007418 <__swhatbuf_r+0x12>
 8007434:	9a01      	ldr	r2, [sp, #4]
 8007436:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800743a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800743e:	425a      	negs	r2, r3
 8007440:	415a      	adcs	r2, r3
 8007442:	602a      	str	r2, [r5, #0]
 8007444:	e7ee      	b.n	8007424 <__swhatbuf_r+0x1e>
 8007446:	2340      	movs	r3, #64	; 0x40
 8007448:	2000      	movs	r0, #0
 800744a:	6023      	str	r3, [r4, #0]
 800744c:	b016      	add	sp, #88	; 0x58
 800744e:	bd70      	pop	{r4, r5, r6, pc}

08007450 <__smakebuf_r>:
 8007450:	898b      	ldrh	r3, [r1, #12]
 8007452:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007454:	079d      	lsls	r5, r3, #30
 8007456:	4606      	mov	r6, r0
 8007458:	460c      	mov	r4, r1
 800745a:	d507      	bpl.n	800746c <__smakebuf_r+0x1c>
 800745c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007460:	6023      	str	r3, [r4, #0]
 8007462:	6123      	str	r3, [r4, #16]
 8007464:	2301      	movs	r3, #1
 8007466:	6163      	str	r3, [r4, #20]
 8007468:	b002      	add	sp, #8
 800746a:	bd70      	pop	{r4, r5, r6, pc}
 800746c:	ab01      	add	r3, sp, #4
 800746e:	466a      	mov	r2, sp
 8007470:	f7ff ffc9 	bl	8007406 <__swhatbuf_r>
 8007474:	9900      	ldr	r1, [sp, #0]
 8007476:	4605      	mov	r5, r0
 8007478:	4630      	mov	r0, r6
 800747a:	f000 fd95 	bl	8007fa8 <_malloc_r>
 800747e:	b948      	cbnz	r0, 8007494 <__smakebuf_r+0x44>
 8007480:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007484:	059a      	lsls	r2, r3, #22
 8007486:	d4ef      	bmi.n	8007468 <__smakebuf_r+0x18>
 8007488:	f023 0303 	bic.w	r3, r3, #3
 800748c:	f043 0302 	orr.w	r3, r3, #2
 8007490:	81a3      	strh	r3, [r4, #12]
 8007492:	e7e3      	b.n	800745c <__smakebuf_r+0xc>
 8007494:	4b0d      	ldr	r3, [pc, #52]	; (80074cc <__smakebuf_r+0x7c>)
 8007496:	62b3      	str	r3, [r6, #40]	; 0x28
 8007498:	89a3      	ldrh	r3, [r4, #12]
 800749a:	6020      	str	r0, [r4, #0]
 800749c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074a0:	81a3      	strh	r3, [r4, #12]
 80074a2:	9b00      	ldr	r3, [sp, #0]
 80074a4:	6163      	str	r3, [r4, #20]
 80074a6:	9b01      	ldr	r3, [sp, #4]
 80074a8:	6120      	str	r0, [r4, #16]
 80074aa:	b15b      	cbz	r3, 80074c4 <__smakebuf_r+0x74>
 80074ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80074b0:	4630      	mov	r0, r6
 80074b2:	f001 f985 	bl	80087c0 <_isatty_r>
 80074b6:	b128      	cbz	r0, 80074c4 <__smakebuf_r+0x74>
 80074b8:	89a3      	ldrh	r3, [r4, #12]
 80074ba:	f023 0303 	bic.w	r3, r3, #3
 80074be:	f043 0301 	orr.w	r3, r3, #1
 80074c2:	81a3      	strh	r3, [r4, #12]
 80074c4:	89a0      	ldrh	r0, [r4, #12]
 80074c6:	4305      	orrs	r5, r0
 80074c8:	81a5      	strh	r5, [r4, #12]
 80074ca:	e7cd      	b.n	8007468 <__smakebuf_r+0x18>
 80074cc:	08006b79 	.word	0x08006b79

080074d0 <malloc>:
 80074d0:	4b02      	ldr	r3, [pc, #8]	; (80074dc <malloc+0xc>)
 80074d2:	4601      	mov	r1, r0
 80074d4:	6818      	ldr	r0, [r3, #0]
 80074d6:	f000 bd67 	b.w	8007fa8 <_malloc_r>
 80074da:	bf00      	nop
 80074dc:	2000000c 	.word	0x2000000c

080074e0 <__ascii_mbtowc>:
 80074e0:	b082      	sub	sp, #8
 80074e2:	b901      	cbnz	r1, 80074e6 <__ascii_mbtowc+0x6>
 80074e4:	a901      	add	r1, sp, #4
 80074e6:	b142      	cbz	r2, 80074fa <__ascii_mbtowc+0x1a>
 80074e8:	b14b      	cbz	r3, 80074fe <__ascii_mbtowc+0x1e>
 80074ea:	7813      	ldrb	r3, [r2, #0]
 80074ec:	600b      	str	r3, [r1, #0]
 80074ee:	7812      	ldrb	r2, [r2, #0]
 80074f0:	1e10      	subs	r0, r2, #0
 80074f2:	bf18      	it	ne
 80074f4:	2001      	movne	r0, #1
 80074f6:	b002      	add	sp, #8
 80074f8:	4770      	bx	lr
 80074fa:	4610      	mov	r0, r2
 80074fc:	e7fb      	b.n	80074f6 <__ascii_mbtowc+0x16>
 80074fe:	f06f 0001 	mvn.w	r0, #1
 8007502:	e7f8      	b.n	80074f6 <__ascii_mbtowc+0x16>

08007504 <memcpy>:
 8007504:	440a      	add	r2, r1
 8007506:	4291      	cmp	r1, r2
 8007508:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800750c:	d100      	bne.n	8007510 <memcpy+0xc>
 800750e:	4770      	bx	lr
 8007510:	b510      	push	{r4, lr}
 8007512:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007516:	f803 4f01 	strb.w	r4, [r3, #1]!
 800751a:	4291      	cmp	r1, r2
 800751c:	d1f9      	bne.n	8007512 <memcpy+0xe>
 800751e:	bd10      	pop	{r4, pc}

08007520 <_Balloc>:
 8007520:	b570      	push	{r4, r5, r6, lr}
 8007522:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007524:	4604      	mov	r4, r0
 8007526:	460d      	mov	r5, r1
 8007528:	b976      	cbnz	r6, 8007548 <_Balloc+0x28>
 800752a:	2010      	movs	r0, #16
 800752c:	f7ff ffd0 	bl	80074d0 <malloc>
 8007530:	4602      	mov	r2, r0
 8007532:	6260      	str	r0, [r4, #36]	; 0x24
 8007534:	b920      	cbnz	r0, 8007540 <_Balloc+0x20>
 8007536:	4b18      	ldr	r3, [pc, #96]	; (8007598 <_Balloc+0x78>)
 8007538:	4818      	ldr	r0, [pc, #96]	; (800759c <_Balloc+0x7c>)
 800753a:	2166      	movs	r1, #102	; 0x66
 800753c:	f001 f8ee 	bl	800871c <__assert_func>
 8007540:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007544:	6006      	str	r6, [r0, #0]
 8007546:	60c6      	str	r6, [r0, #12]
 8007548:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800754a:	68f3      	ldr	r3, [r6, #12]
 800754c:	b183      	cbz	r3, 8007570 <_Balloc+0x50>
 800754e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007550:	68db      	ldr	r3, [r3, #12]
 8007552:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007556:	b9b8      	cbnz	r0, 8007588 <_Balloc+0x68>
 8007558:	2101      	movs	r1, #1
 800755a:	fa01 f605 	lsl.w	r6, r1, r5
 800755e:	1d72      	adds	r2, r6, #5
 8007560:	0092      	lsls	r2, r2, #2
 8007562:	4620      	mov	r0, r4
 8007564:	f000 fc9d 	bl	8007ea2 <_calloc_r>
 8007568:	b160      	cbz	r0, 8007584 <_Balloc+0x64>
 800756a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800756e:	e00e      	b.n	800758e <_Balloc+0x6e>
 8007570:	2221      	movs	r2, #33	; 0x21
 8007572:	2104      	movs	r1, #4
 8007574:	4620      	mov	r0, r4
 8007576:	f000 fc94 	bl	8007ea2 <_calloc_r>
 800757a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800757c:	60f0      	str	r0, [r6, #12]
 800757e:	68db      	ldr	r3, [r3, #12]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d1e4      	bne.n	800754e <_Balloc+0x2e>
 8007584:	2000      	movs	r0, #0
 8007586:	bd70      	pop	{r4, r5, r6, pc}
 8007588:	6802      	ldr	r2, [r0, #0]
 800758a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800758e:	2300      	movs	r3, #0
 8007590:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007594:	e7f7      	b.n	8007586 <_Balloc+0x66>
 8007596:	bf00      	nop
 8007598:	08008e16 	.word	0x08008e16
 800759c:	08008f78 	.word	0x08008f78

080075a0 <_Bfree>:
 80075a0:	b570      	push	{r4, r5, r6, lr}
 80075a2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80075a4:	4605      	mov	r5, r0
 80075a6:	460c      	mov	r4, r1
 80075a8:	b976      	cbnz	r6, 80075c8 <_Bfree+0x28>
 80075aa:	2010      	movs	r0, #16
 80075ac:	f7ff ff90 	bl	80074d0 <malloc>
 80075b0:	4602      	mov	r2, r0
 80075b2:	6268      	str	r0, [r5, #36]	; 0x24
 80075b4:	b920      	cbnz	r0, 80075c0 <_Bfree+0x20>
 80075b6:	4b09      	ldr	r3, [pc, #36]	; (80075dc <_Bfree+0x3c>)
 80075b8:	4809      	ldr	r0, [pc, #36]	; (80075e0 <_Bfree+0x40>)
 80075ba:	218a      	movs	r1, #138	; 0x8a
 80075bc:	f001 f8ae 	bl	800871c <__assert_func>
 80075c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80075c4:	6006      	str	r6, [r0, #0]
 80075c6:	60c6      	str	r6, [r0, #12]
 80075c8:	b13c      	cbz	r4, 80075da <_Bfree+0x3a>
 80075ca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80075cc:	6862      	ldr	r2, [r4, #4]
 80075ce:	68db      	ldr	r3, [r3, #12]
 80075d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80075d4:	6021      	str	r1, [r4, #0]
 80075d6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80075da:	bd70      	pop	{r4, r5, r6, pc}
 80075dc:	08008e16 	.word	0x08008e16
 80075e0:	08008f78 	.word	0x08008f78

080075e4 <__multadd>:
 80075e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075e8:	690d      	ldr	r5, [r1, #16]
 80075ea:	4607      	mov	r7, r0
 80075ec:	460c      	mov	r4, r1
 80075ee:	461e      	mov	r6, r3
 80075f0:	f101 0c14 	add.w	ip, r1, #20
 80075f4:	2000      	movs	r0, #0
 80075f6:	f8dc 3000 	ldr.w	r3, [ip]
 80075fa:	b299      	uxth	r1, r3
 80075fc:	fb02 6101 	mla	r1, r2, r1, r6
 8007600:	0c1e      	lsrs	r6, r3, #16
 8007602:	0c0b      	lsrs	r3, r1, #16
 8007604:	fb02 3306 	mla	r3, r2, r6, r3
 8007608:	b289      	uxth	r1, r1
 800760a:	3001      	adds	r0, #1
 800760c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007610:	4285      	cmp	r5, r0
 8007612:	f84c 1b04 	str.w	r1, [ip], #4
 8007616:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800761a:	dcec      	bgt.n	80075f6 <__multadd+0x12>
 800761c:	b30e      	cbz	r6, 8007662 <__multadd+0x7e>
 800761e:	68a3      	ldr	r3, [r4, #8]
 8007620:	42ab      	cmp	r3, r5
 8007622:	dc19      	bgt.n	8007658 <__multadd+0x74>
 8007624:	6861      	ldr	r1, [r4, #4]
 8007626:	4638      	mov	r0, r7
 8007628:	3101      	adds	r1, #1
 800762a:	f7ff ff79 	bl	8007520 <_Balloc>
 800762e:	4680      	mov	r8, r0
 8007630:	b928      	cbnz	r0, 800763e <__multadd+0x5a>
 8007632:	4602      	mov	r2, r0
 8007634:	4b0c      	ldr	r3, [pc, #48]	; (8007668 <__multadd+0x84>)
 8007636:	480d      	ldr	r0, [pc, #52]	; (800766c <__multadd+0x88>)
 8007638:	21b5      	movs	r1, #181	; 0xb5
 800763a:	f001 f86f 	bl	800871c <__assert_func>
 800763e:	6922      	ldr	r2, [r4, #16]
 8007640:	3202      	adds	r2, #2
 8007642:	f104 010c 	add.w	r1, r4, #12
 8007646:	0092      	lsls	r2, r2, #2
 8007648:	300c      	adds	r0, #12
 800764a:	f7ff ff5b 	bl	8007504 <memcpy>
 800764e:	4621      	mov	r1, r4
 8007650:	4638      	mov	r0, r7
 8007652:	f7ff ffa5 	bl	80075a0 <_Bfree>
 8007656:	4644      	mov	r4, r8
 8007658:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800765c:	3501      	adds	r5, #1
 800765e:	615e      	str	r6, [r3, #20]
 8007660:	6125      	str	r5, [r4, #16]
 8007662:	4620      	mov	r0, r4
 8007664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007668:	08008e88 	.word	0x08008e88
 800766c:	08008f78 	.word	0x08008f78

08007670 <__s2b>:
 8007670:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007674:	460c      	mov	r4, r1
 8007676:	4615      	mov	r5, r2
 8007678:	461f      	mov	r7, r3
 800767a:	2209      	movs	r2, #9
 800767c:	3308      	adds	r3, #8
 800767e:	4606      	mov	r6, r0
 8007680:	fb93 f3f2 	sdiv	r3, r3, r2
 8007684:	2100      	movs	r1, #0
 8007686:	2201      	movs	r2, #1
 8007688:	429a      	cmp	r2, r3
 800768a:	db09      	blt.n	80076a0 <__s2b+0x30>
 800768c:	4630      	mov	r0, r6
 800768e:	f7ff ff47 	bl	8007520 <_Balloc>
 8007692:	b940      	cbnz	r0, 80076a6 <__s2b+0x36>
 8007694:	4602      	mov	r2, r0
 8007696:	4b19      	ldr	r3, [pc, #100]	; (80076fc <__s2b+0x8c>)
 8007698:	4819      	ldr	r0, [pc, #100]	; (8007700 <__s2b+0x90>)
 800769a:	21ce      	movs	r1, #206	; 0xce
 800769c:	f001 f83e 	bl	800871c <__assert_func>
 80076a0:	0052      	lsls	r2, r2, #1
 80076a2:	3101      	adds	r1, #1
 80076a4:	e7f0      	b.n	8007688 <__s2b+0x18>
 80076a6:	9b08      	ldr	r3, [sp, #32]
 80076a8:	6143      	str	r3, [r0, #20]
 80076aa:	2d09      	cmp	r5, #9
 80076ac:	f04f 0301 	mov.w	r3, #1
 80076b0:	6103      	str	r3, [r0, #16]
 80076b2:	dd16      	ble.n	80076e2 <__s2b+0x72>
 80076b4:	f104 0909 	add.w	r9, r4, #9
 80076b8:	46c8      	mov	r8, r9
 80076ba:	442c      	add	r4, r5
 80076bc:	f818 3b01 	ldrb.w	r3, [r8], #1
 80076c0:	4601      	mov	r1, r0
 80076c2:	3b30      	subs	r3, #48	; 0x30
 80076c4:	220a      	movs	r2, #10
 80076c6:	4630      	mov	r0, r6
 80076c8:	f7ff ff8c 	bl	80075e4 <__multadd>
 80076cc:	45a0      	cmp	r8, r4
 80076ce:	d1f5      	bne.n	80076bc <__s2b+0x4c>
 80076d0:	f1a5 0408 	sub.w	r4, r5, #8
 80076d4:	444c      	add	r4, r9
 80076d6:	1b2d      	subs	r5, r5, r4
 80076d8:	1963      	adds	r3, r4, r5
 80076da:	42bb      	cmp	r3, r7
 80076dc:	db04      	blt.n	80076e8 <__s2b+0x78>
 80076de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076e2:	340a      	adds	r4, #10
 80076e4:	2509      	movs	r5, #9
 80076e6:	e7f6      	b.n	80076d6 <__s2b+0x66>
 80076e8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80076ec:	4601      	mov	r1, r0
 80076ee:	3b30      	subs	r3, #48	; 0x30
 80076f0:	220a      	movs	r2, #10
 80076f2:	4630      	mov	r0, r6
 80076f4:	f7ff ff76 	bl	80075e4 <__multadd>
 80076f8:	e7ee      	b.n	80076d8 <__s2b+0x68>
 80076fa:	bf00      	nop
 80076fc:	08008e88 	.word	0x08008e88
 8007700:	08008f78 	.word	0x08008f78

08007704 <__hi0bits>:
 8007704:	0c03      	lsrs	r3, r0, #16
 8007706:	041b      	lsls	r3, r3, #16
 8007708:	b9d3      	cbnz	r3, 8007740 <__hi0bits+0x3c>
 800770a:	0400      	lsls	r0, r0, #16
 800770c:	2310      	movs	r3, #16
 800770e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007712:	bf04      	itt	eq
 8007714:	0200      	lsleq	r0, r0, #8
 8007716:	3308      	addeq	r3, #8
 8007718:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800771c:	bf04      	itt	eq
 800771e:	0100      	lsleq	r0, r0, #4
 8007720:	3304      	addeq	r3, #4
 8007722:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007726:	bf04      	itt	eq
 8007728:	0080      	lsleq	r0, r0, #2
 800772a:	3302      	addeq	r3, #2
 800772c:	2800      	cmp	r0, #0
 800772e:	db05      	blt.n	800773c <__hi0bits+0x38>
 8007730:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007734:	f103 0301 	add.w	r3, r3, #1
 8007738:	bf08      	it	eq
 800773a:	2320      	moveq	r3, #32
 800773c:	4618      	mov	r0, r3
 800773e:	4770      	bx	lr
 8007740:	2300      	movs	r3, #0
 8007742:	e7e4      	b.n	800770e <__hi0bits+0xa>

08007744 <__lo0bits>:
 8007744:	6803      	ldr	r3, [r0, #0]
 8007746:	f013 0207 	ands.w	r2, r3, #7
 800774a:	4601      	mov	r1, r0
 800774c:	d00b      	beq.n	8007766 <__lo0bits+0x22>
 800774e:	07da      	lsls	r2, r3, #31
 8007750:	d423      	bmi.n	800779a <__lo0bits+0x56>
 8007752:	0798      	lsls	r0, r3, #30
 8007754:	bf49      	itett	mi
 8007756:	085b      	lsrmi	r3, r3, #1
 8007758:	089b      	lsrpl	r3, r3, #2
 800775a:	2001      	movmi	r0, #1
 800775c:	600b      	strmi	r3, [r1, #0]
 800775e:	bf5c      	itt	pl
 8007760:	600b      	strpl	r3, [r1, #0]
 8007762:	2002      	movpl	r0, #2
 8007764:	4770      	bx	lr
 8007766:	b298      	uxth	r0, r3
 8007768:	b9a8      	cbnz	r0, 8007796 <__lo0bits+0x52>
 800776a:	0c1b      	lsrs	r3, r3, #16
 800776c:	2010      	movs	r0, #16
 800776e:	b2da      	uxtb	r2, r3
 8007770:	b90a      	cbnz	r2, 8007776 <__lo0bits+0x32>
 8007772:	3008      	adds	r0, #8
 8007774:	0a1b      	lsrs	r3, r3, #8
 8007776:	071a      	lsls	r2, r3, #28
 8007778:	bf04      	itt	eq
 800777a:	091b      	lsreq	r3, r3, #4
 800777c:	3004      	addeq	r0, #4
 800777e:	079a      	lsls	r2, r3, #30
 8007780:	bf04      	itt	eq
 8007782:	089b      	lsreq	r3, r3, #2
 8007784:	3002      	addeq	r0, #2
 8007786:	07da      	lsls	r2, r3, #31
 8007788:	d403      	bmi.n	8007792 <__lo0bits+0x4e>
 800778a:	085b      	lsrs	r3, r3, #1
 800778c:	f100 0001 	add.w	r0, r0, #1
 8007790:	d005      	beq.n	800779e <__lo0bits+0x5a>
 8007792:	600b      	str	r3, [r1, #0]
 8007794:	4770      	bx	lr
 8007796:	4610      	mov	r0, r2
 8007798:	e7e9      	b.n	800776e <__lo0bits+0x2a>
 800779a:	2000      	movs	r0, #0
 800779c:	4770      	bx	lr
 800779e:	2020      	movs	r0, #32
 80077a0:	4770      	bx	lr
	...

080077a4 <__i2b>:
 80077a4:	b510      	push	{r4, lr}
 80077a6:	460c      	mov	r4, r1
 80077a8:	2101      	movs	r1, #1
 80077aa:	f7ff feb9 	bl	8007520 <_Balloc>
 80077ae:	4602      	mov	r2, r0
 80077b0:	b928      	cbnz	r0, 80077be <__i2b+0x1a>
 80077b2:	4b05      	ldr	r3, [pc, #20]	; (80077c8 <__i2b+0x24>)
 80077b4:	4805      	ldr	r0, [pc, #20]	; (80077cc <__i2b+0x28>)
 80077b6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80077ba:	f000 ffaf 	bl	800871c <__assert_func>
 80077be:	2301      	movs	r3, #1
 80077c0:	6144      	str	r4, [r0, #20]
 80077c2:	6103      	str	r3, [r0, #16]
 80077c4:	bd10      	pop	{r4, pc}
 80077c6:	bf00      	nop
 80077c8:	08008e88 	.word	0x08008e88
 80077cc:	08008f78 	.word	0x08008f78

080077d0 <__multiply>:
 80077d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077d4:	4691      	mov	r9, r2
 80077d6:	690a      	ldr	r2, [r1, #16]
 80077d8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80077dc:	429a      	cmp	r2, r3
 80077de:	bfb8      	it	lt
 80077e0:	460b      	movlt	r3, r1
 80077e2:	460c      	mov	r4, r1
 80077e4:	bfbc      	itt	lt
 80077e6:	464c      	movlt	r4, r9
 80077e8:	4699      	movlt	r9, r3
 80077ea:	6927      	ldr	r7, [r4, #16]
 80077ec:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80077f0:	68a3      	ldr	r3, [r4, #8]
 80077f2:	6861      	ldr	r1, [r4, #4]
 80077f4:	eb07 060a 	add.w	r6, r7, sl
 80077f8:	42b3      	cmp	r3, r6
 80077fa:	b085      	sub	sp, #20
 80077fc:	bfb8      	it	lt
 80077fe:	3101      	addlt	r1, #1
 8007800:	f7ff fe8e 	bl	8007520 <_Balloc>
 8007804:	b930      	cbnz	r0, 8007814 <__multiply+0x44>
 8007806:	4602      	mov	r2, r0
 8007808:	4b44      	ldr	r3, [pc, #272]	; (800791c <__multiply+0x14c>)
 800780a:	4845      	ldr	r0, [pc, #276]	; (8007920 <__multiply+0x150>)
 800780c:	f240 115d 	movw	r1, #349	; 0x15d
 8007810:	f000 ff84 	bl	800871c <__assert_func>
 8007814:	f100 0514 	add.w	r5, r0, #20
 8007818:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800781c:	462b      	mov	r3, r5
 800781e:	2200      	movs	r2, #0
 8007820:	4543      	cmp	r3, r8
 8007822:	d321      	bcc.n	8007868 <__multiply+0x98>
 8007824:	f104 0314 	add.w	r3, r4, #20
 8007828:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800782c:	f109 0314 	add.w	r3, r9, #20
 8007830:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007834:	9202      	str	r2, [sp, #8]
 8007836:	1b3a      	subs	r2, r7, r4
 8007838:	3a15      	subs	r2, #21
 800783a:	f022 0203 	bic.w	r2, r2, #3
 800783e:	3204      	adds	r2, #4
 8007840:	f104 0115 	add.w	r1, r4, #21
 8007844:	428f      	cmp	r7, r1
 8007846:	bf38      	it	cc
 8007848:	2204      	movcc	r2, #4
 800784a:	9201      	str	r2, [sp, #4]
 800784c:	9a02      	ldr	r2, [sp, #8]
 800784e:	9303      	str	r3, [sp, #12]
 8007850:	429a      	cmp	r2, r3
 8007852:	d80c      	bhi.n	800786e <__multiply+0x9e>
 8007854:	2e00      	cmp	r6, #0
 8007856:	dd03      	ble.n	8007860 <__multiply+0x90>
 8007858:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800785c:	2b00      	cmp	r3, #0
 800785e:	d05a      	beq.n	8007916 <__multiply+0x146>
 8007860:	6106      	str	r6, [r0, #16]
 8007862:	b005      	add	sp, #20
 8007864:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007868:	f843 2b04 	str.w	r2, [r3], #4
 800786c:	e7d8      	b.n	8007820 <__multiply+0x50>
 800786e:	f8b3 a000 	ldrh.w	sl, [r3]
 8007872:	f1ba 0f00 	cmp.w	sl, #0
 8007876:	d024      	beq.n	80078c2 <__multiply+0xf2>
 8007878:	f104 0e14 	add.w	lr, r4, #20
 800787c:	46a9      	mov	r9, r5
 800787e:	f04f 0c00 	mov.w	ip, #0
 8007882:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007886:	f8d9 1000 	ldr.w	r1, [r9]
 800788a:	fa1f fb82 	uxth.w	fp, r2
 800788e:	b289      	uxth	r1, r1
 8007890:	fb0a 110b 	mla	r1, sl, fp, r1
 8007894:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007898:	f8d9 2000 	ldr.w	r2, [r9]
 800789c:	4461      	add	r1, ip
 800789e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80078a2:	fb0a c20b 	mla	r2, sl, fp, ip
 80078a6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80078aa:	b289      	uxth	r1, r1
 80078ac:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80078b0:	4577      	cmp	r7, lr
 80078b2:	f849 1b04 	str.w	r1, [r9], #4
 80078b6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80078ba:	d8e2      	bhi.n	8007882 <__multiply+0xb2>
 80078bc:	9a01      	ldr	r2, [sp, #4]
 80078be:	f845 c002 	str.w	ip, [r5, r2]
 80078c2:	9a03      	ldr	r2, [sp, #12]
 80078c4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80078c8:	3304      	adds	r3, #4
 80078ca:	f1b9 0f00 	cmp.w	r9, #0
 80078ce:	d020      	beq.n	8007912 <__multiply+0x142>
 80078d0:	6829      	ldr	r1, [r5, #0]
 80078d2:	f104 0c14 	add.w	ip, r4, #20
 80078d6:	46ae      	mov	lr, r5
 80078d8:	f04f 0a00 	mov.w	sl, #0
 80078dc:	f8bc b000 	ldrh.w	fp, [ip]
 80078e0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80078e4:	fb09 220b 	mla	r2, r9, fp, r2
 80078e8:	4492      	add	sl, r2
 80078ea:	b289      	uxth	r1, r1
 80078ec:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80078f0:	f84e 1b04 	str.w	r1, [lr], #4
 80078f4:	f85c 2b04 	ldr.w	r2, [ip], #4
 80078f8:	f8be 1000 	ldrh.w	r1, [lr]
 80078fc:	0c12      	lsrs	r2, r2, #16
 80078fe:	fb09 1102 	mla	r1, r9, r2, r1
 8007902:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007906:	4567      	cmp	r7, ip
 8007908:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800790c:	d8e6      	bhi.n	80078dc <__multiply+0x10c>
 800790e:	9a01      	ldr	r2, [sp, #4]
 8007910:	50a9      	str	r1, [r5, r2]
 8007912:	3504      	adds	r5, #4
 8007914:	e79a      	b.n	800784c <__multiply+0x7c>
 8007916:	3e01      	subs	r6, #1
 8007918:	e79c      	b.n	8007854 <__multiply+0x84>
 800791a:	bf00      	nop
 800791c:	08008e88 	.word	0x08008e88
 8007920:	08008f78 	.word	0x08008f78

08007924 <__pow5mult>:
 8007924:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007928:	4615      	mov	r5, r2
 800792a:	f012 0203 	ands.w	r2, r2, #3
 800792e:	4606      	mov	r6, r0
 8007930:	460f      	mov	r7, r1
 8007932:	d007      	beq.n	8007944 <__pow5mult+0x20>
 8007934:	4c25      	ldr	r4, [pc, #148]	; (80079cc <__pow5mult+0xa8>)
 8007936:	3a01      	subs	r2, #1
 8007938:	2300      	movs	r3, #0
 800793a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800793e:	f7ff fe51 	bl	80075e4 <__multadd>
 8007942:	4607      	mov	r7, r0
 8007944:	10ad      	asrs	r5, r5, #2
 8007946:	d03d      	beq.n	80079c4 <__pow5mult+0xa0>
 8007948:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800794a:	b97c      	cbnz	r4, 800796c <__pow5mult+0x48>
 800794c:	2010      	movs	r0, #16
 800794e:	f7ff fdbf 	bl	80074d0 <malloc>
 8007952:	4602      	mov	r2, r0
 8007954:	6270      	str	r0, [r6, #36]	; 0x24
 8007956:	b928      	cbnz	r0, 8007964 <__pow5mult+0x40>
 8007958:	4b1d      	ldr	r3, [pc, #116]	; (80079d0 <__pow5mult+0xac>)
 800795a:	481e      	ldr	r0, [pc, #120]	; (80079d4 <__pow5mult+0xb0>)
 800795c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007960:	f000 fedc 	bl	800871c <__assert_func>
 8007964:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007968:	6004      	str	r4, [r0, #0]
 800796a:	60c4      	str	r4, [r0, #12]
 800796c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007970:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007974:	b94c      	cbnz	r4, 800798a <__pow5mult+0x66>
 8007976:	f240 2171 	movw	r1, #625	; 0x271
 800797a:	4630      	mov	r0, r6
 800797c:	f7ff ff12 	bl	80077a4 <__i2b>
 8007980:	2300      	movs	r3, #0
 8007982:	f8c8 0008 	str.w	r0, [r8, #8]
 8007986:	4604      	mov	r4, r0
 8007988:	6003      	str	r3, [r0, #0]
 800798a:	f04f 0900 	mov.w	r9, #0
 800798e:	07eb      	lsls	r3, r5, #31
 8007990:	d50a      	bpl.n	80079a8 <__pow5mult+0x84>
 8007992:	4639      	mov	r1, r7
 8007994:	4622      	mov	r2, r4
 8007996:	4630      	mov	r0, r6
 8007998:	f7ff ff1a 	bl	80077d0 <__multiply>
 800799c:	4639      	mov	r1, r7
 800799e:	4680      	mov	r8, r0
 80079a0:	4630      	mov	r0, r6
 80079a2:	f7ff fdfd 	bl	80075a0 <_Bfree>
 80079a6:	4647      	mov	r7, r8
 80079a8:	106d      	asrs	r5, r5, #1
 80079aa:	d00b      	beq.n	80079c4 <__pow5mult+0xa0>
 80079ac:	6820      	ldr	r0, [r4, #0]
 80079ae:	b938      	cbnz	r0, 80079c0 <__pow5mult+0x9c>
 80079b0:	4622      	mov	r2, r4
 80079b2:	4621      	mov	r1, r4
 80079b4:	4630      	mov	r0, r6
 80079b6:	f7ff ff0b 	bl	80077d0 <__multiply>
 80079ba:	6020      	str	r0, [r4, #0]
 80079bc:	f8c0 9000 	str.w	r9, [r0]
 80079c0:	4604      	mov	r4, r0
 80079c2:	e7e4      	b.n	800798e <__pow5mult+0x6a>
 80079c4:	4638      	mov	r0, r7
 80079c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80079ca:	bf00      	nop
 80079cc:	080090c8 	.word	0x080090c8
 80079d0:	08008e16 	.word	0x08008e16
 80079d4:	08008f78 	.word	0x08008f78

080079d8 <__lshift>:
 80079d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079dc:	460c      	mov	r4, r1
 80079de:	6849      	ldr	r1, [r1, #4]
 80079e0:	6923      	ldr	r3, [r4, #16]
 80079e2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80079e6:	68a3      	ldr	r3, [r4, #8]
 80079e8:	4607      	mov	r7, r0
 80079ea:	4691      	mov	r9, r2
 80079ec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80079f0:	f108 0601 	add.w	r6, r8, #1
 80079f4:	42b3      	cmp	r3, r6
 80079f6:	db0b      	blt.n	8007a10 <__lshift+0x38>
 80079f8:	4638      	mov	r0, r7
 80079fa:	f7ff fd91 	bl	8007520 <_Balloc>
 80079fe:	4605      	mov	r5, r0
 8007a00:	b948      	cbnz	r0, 8007a16 <__lshift+0x3e>
 8007a02:	4602      	mov	r2, r0
 8007a04:	4b2a      	ldr	r3, [pc, #168]	; (8007ab0 <__lshift+0xd8>)
 8007a06:	482b      	ldr	r0, [pc, #172]	; (8007ab4 <__lshift+0xdc>)
 8007a08:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007a0c:	f000 fe86 	bl	800871c <__assert_func>
 8007a10:	3101      	adds	r1, #1
 8007a12:	005b      	lsls	r3, r3, #1
 8007a14:	e7ee      	b.n	80079f4 <__lshift+0x1c>
 8007a16:	2300      	movs	r3, #0
 8007a18:	f100 0114 	add.w	r1, r0, #20
 8007a1c:	f100 0210 	add.w	r2, r0, #16
 8007a20:	4618      	mov	r0, r3
 8007a22:	4553      	cmp	r3, sl
 8007a24:	db37      	blt.n	8007a96 <__lshift+0xbe>
 8007a26:	6920      	ldr	r0, [r4, #16]
 8007a28:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007a2c:	f104 0314 	add.w	r3, r4, #20
 8007a30:	f019 091f 	ands.w	r9, r9, #31
 8007a34:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007a38:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007a3c:	d02f      	beq.n	8007a9e <__lshift+0xc6>
 8007a3e:	f1c9 0e20 	rsb	lr, r9, #32
 8007a42:	468a      	mov	sl, r1
 8007a44:	f04f 0c00 	mov.w	ip, #0
 8007a48:	681a      	ldr	r2, [r3, #0]
 8007a4a:	fa02 f209 	lsl.w	r2, r2, r9
 8007a4e:	ea42 020c 	orr.w	r2, r2, ip
 8007a52:	f84a 2b04 	str.w	r2, [sl], #4
 8007a56:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a5a:	4298      	cmp	r0, r3
 8007a5c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007a60:	d8f2      	bhi.n	8007a48 <__lshift+0x70>
 8007a62:	1b03      	subs	r3, r0, r4
 8007a64:	3b15      	subs	r3, #21
 8007a66:	f023 0303 	bic.w	r3, r3, #3
 8007a6a:	3304      	adds	r3, #4
 8007a6c:	f104 0215 	add.w	r2, r4, #21
 8007a70:	4290      	cmp	r0, r2
 8007a72:	bf38      	it	cc
 8007a74:	2304      	movcc	r3, #4
 8007a76:	f841 c003 	str.w	ip, [r1, r3]
 8007a7a:	f1bc 0f00 	cmp.w	ip, #0
 8007a7e:	d001      	beq.n	8007a84 <__lshift+0xac>
 8007a80:	f108 0602 	add.w	r6, r8, #2
 8007a84:	3e01      	subs	r6, #1
 8007a86:	4638      	mov	r0, r7
 8007a88:	612e      	str	r6, [r5, #16]
 8007a8a:	4621      	mov	r1, r4
 8007a8c:	f7ff fd88 	bl	80075a0 <_Bfree>
 8007a90:	4628      	mov	r0, r5
 8007a92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a96:	f842 0f04 	str.w	r0, [r2, #4]!
 8007a9a:	3301      	adds	r3, #1
 8007a9c:	e7c1      	b.n	8007a22 <__lshift+0x4a>
 8007a9e:	3904      	subs	r1, #4
 8007aa0:	f853 2b04 	ldr.w	r2, [r3], #4
 8007aa4:	f841 2f04 	str.w	r2, [r1, #4]!
 8007aa8:	4298      	cmp	r0, r3
 8007aaa:	d8f9      	bhi.n	8007aa0 <__lshift+0xc8>
 8007aac:	e7ea      	b.n	8007a84 <__lshift+0xac>
 8007aae:	bf00      	nop
 8007ab0:	08008e88 	.word	0x08008e88
 8007ab4:	08008f78 	.word	0x08008f78

08007ab8 <__mcmp>:
 8007ab8:	b530      	push	{r4, r5, lr}
 8007aba:	6902      	ldr	r2, [r0, #16]
 8007abc:	690c      	ldr	r4, [r1, #16]
 8007abe:	1b12      	subs	r2, r2, r4
 8007ac0:	d10e      	bne.n	8007ae0 <__mcmp+0x28>
 8007ac2:	f100 0314 	add.w	r3, r0, #20
 8007ac6:	3114      	adds	r1, #20
 8007ac8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007acc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007ad0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007ad4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007ad8:	42a5      	cmp	r5, r4
 8007ada:	d003      	beq.n	8007ae4 <__mcmp+0x2c>
 8007adc:	d305      	bcc.n	8007aea <__mcmp+0x32>
 8007ade:	2201      	movs	r2, #1
 8007ae0:	4610      	mov	r0, r2
 8007ae2:	bd30      	pop	{r4, r5, pc}
 8007ae4:	4283      	cmp	r3, r0
 8007ae6:	d3f3      	bcc.n	8007ad0 <__mcmp+0x18>
 8007ae8:	e7fa      	b.n	8007ae0 <__mcmp+0x28>
 8007aea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007aee:	e7f7      	b.n	8007ae0 <__mcmp+0x28>

08007af0 <__mdiff>:
 8007af0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007af4:	460c      	mov	r4, r1
 8007af6:	4606      	mov	r6, r0
 8007af8:	4611      	mov	r1, r2
 8007afa:	4620      	mov	r0, r4
 8007afc:	4690      	mov	r8, r2
 8007afe:	f7ff ffdb 	bl	8007ab8 <__mcmp>
 8007b02:	1e05      	subs	r5, r0, #0
 8007b04:	d110      	bne.n	8007b28 <__mdiff+0x38>
 8007b06:	4629      	mov	r1, r5
 8007b08:	4630      	mov	r0, r6
 8007b0a:	f7ff fd09 	bl	8007520 <_Balloc>
 8007b0e:	b930      	cbnz	r0, 8007b1e <__mdiff+0x2e>
 8007b10:	4b3a      	ldr	r3, [pc, #232]	; (8007bfc <__mdiff+0x10c>)
 8007b12:	4602      	mov	r2, r0
 8007b14:	f240 2132 	movw	r1, #562	; 0x232
 8007b18:	4839      	ldr	r0, [pc, #228]	; (8007c00 <__mdiff+0x110>)
 8007b1a:	f000 fdff 	bl	800871c <__assert_func>
 8007b1e:	2301      	movs	r3, #1
 8007b20:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007b24:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b28:	bfa4      	itt	ge
 8007b2a:	4643      	movge	r3, r8
 8007b2c:	46a0      	movge	r8, r4
 8007b2e:	4630      	mov	r0, r6
 8007b30:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007b34:	bfa6      	itte	ge
 8007b36:	461c      	movge	r4, r3
 8007b38:	2500      	movge	r5, #0
 8007b3a:	2501      	movlt	r5, #1
 8007b3c:	f7ff fcf0 	bl	8007520 <_Balloc>
 8007b40:	b920      	cbnz	r0, 8007b4c <__mdiff+0x5c>
 8007b42:	4b2e      	ldr	r3, [pc, #184]	; (8007bfc <__mdiff+0x10c>)
 8007b44:	4602      	mov	r2, r0
 8007b46:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007b4a:	e7e5      	b.n	8007b18 <__mdiff+0x28>
 8007b4c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007b50:	6926      	ldr	r6, [r4, #16]
 8007b52:	60c5      	str	r5, [r0, #12]
 8007b54:	f104 0914 	add.w	r9, r4, #20
 8007b58:	f108 0514 	add.w	r5, r8, #20
 8007b5c:	f100 0e14 	add.w	lr, r0, #20
 8007b60:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007b64:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007b68:	f108 0210 	add.w	r2, r8, #16
 8007b6c:	46f2      	mov	sl, lr
 8007b6e:	2100      	movs	r1, #0
 8007b70:	f859 3b04 	ldr.w	r3, [r9], #4
 8007b74:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007b78:	fa1f f883 	uxth.w	r8, r3
 8007b7c:	fa11 f18b 	uxtah	r1, r1, fp
 8007b80:	0c1b      	lsrs	r3, r3, #16
 8007b82:	eba1 0808 	sub.w	r8, r1, r8
 8007b86:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007b8a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007b8e:	fa1f f888 	uxth.w	r8, r8
 8007b92:	1419      	asrs	r1, r3, #16
 8007b94:	454e      	cmp	r6, r9
 8007b96:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007b9a:	f84a 3b04 	str.w	r3, [sl], #4
 8007b9e:	d8e7      	bhi.n	8007b70 <__mdiff+0x80>
 8007ba0:	1b33      	subs	r3, r6, r4
 8007ba2:	3b15      	subs	r3, #21
 8007ba4:	f023 0303 	bic.w	r3, r3, #3
 8007ba8:	3304      	adds	r3, #4
 8007baa:	3415      	adds	r4, #21
 8007bac:	42a6      	cmp	r6, r4
 8007bae:	bf38      	it	cc
 8007bb0:	2304      	movcc	r3, #4
 8007bb2:	441d      	add	r5, r3
 8007bb4:	4473      	add	r3, lr
 8007bb6:	469e      	mov	lr, r3
 8007bb8:	462e      	mov	r6, r5
 8007bba:	4566      	cmp	r6, ip
 8007bbc:	d30e      	bcc.n	8007bdc <__mdiff+0xec>
 8007bbe:	f10c 0203 	add.w	r2, ip, #3
 8007bc2:	1b52      	subs	r2, r2, r5
 8007bc4:	f022 0203 	bic.w	r2, r2, #3
 8007bc8:	3d03      	subs	r5, #3
 8007bca:	45ac      	cmp	ip, r5
 8007bcc:	bf38      	it	cc
 8007bce:	2200      	movcc	r2, #0
 8007bd0:	441a      	add	r2, r3
 8007bd2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007bd6:	b17b      	cbz	r3, 8007bf8 <__mdiff+0x108>
 8007bd8:	6107      	str	r7, [r0, #16]
 8007bda:	e7a3      	b.n	8007b24 <__mdiff+0x34>
 8007bdc:	f856 8b04 	ldr.w	r8, [r6], #4
 8007be0:	fa11 f288 	uxtah	r2, r1, r8
 8007be4:	1414      	asrs	r4, r2, #16
 8007be6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007bea:	b292      	uxth	r2, r2
 8007bec:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007bf0:	f84e 2b04 	str.w	r2, [lr], #4
 8007bf4:	1421      	asrs	r1, r4, #16
 8007bf6:	e7e0      	b.n	8007bba <__mdiff+0xca>
 8007bf8:	3f01      	subs	r7, #1
 8007bfa:	e7ea      	b.n	8007bd2 <__mdiff+0xe2>
 8007bfc:	08008e88 	.word	0x08008e88
 8007c00:	08008f78 	.word	0x08008f78

08007c04 <__ulp>:
 8007c04:	b082      	sub	sp, #8
 8007c06:	ed8d 0b00 	vstr	d0, [sp]
 8007c0a:	9b01      	ldr	r3, [sp, #4]
 8007c0c:	4912      	ldr	r1, [pc, #72]	; (8007c58 <__ulp+0x54>)
 8007c0e:	4019      	ands	r1, r3
 8007c10:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8007c14:	2900      	cmp	r1, #0
 8007c16:	dd05      	ble.n	8007c24 <__ulp+0x20>
 8007c18:	2200      	movs	r2, #0
 8007c1a:	460b      	mov	r3, r1
 8007c1c:	ec43 2b10 	vmov	d0, r2, r3
 8007c20:	b002      	add	sp, #8
 8007c22:	4770      	bx	lr
 8007c24:	4249      	negs	r1, r1
 8007c26:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8007c2a:	ea4f 5021 	mov.w	r0, r1, asr #20
 8007c2e:	f04f 0200 	mov.w	r2, #0
 8007c32:	f04f 0300 	mov.w	r3, #0
 8007c36:	da04      	bge.n	8007c42 <__ulp+0x3e>
 8007c38:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8007c3c:	fa41 f300 	asr.w	r3, r1, r0
 8007c40:	e7ec      	b.n	8007c1c <__ulp+0x18>
 8007c42:	f1a0 0114 	sub.w	r1, r0, #20
 8007c46:	291e      	cmp	r1, #30
 8007c48:	bfda      	itte	le
 8007c4a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8007c4e:	fa20 f101 	lsrle.w	r1, r0, r1
 8007c52:	2101      	movgt	r1, #1
 8007c54:	460a      	mov	r2, r1
 8007c56:	e7e1      	b.n	8007c1c <__ulp+0x18>
 8007c58:	7ff00000 	.word	0x7ff00000

08007c5c <__b2d>:
 8007c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c5e:	6905      	ldr	r5, [r0, #16]
 8007c60:	f100 0714 	add.w	r7, r0, #20
 8007c64:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8007c68:	1f2e      	subs	r6, r5, #4
 8007c6a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8007c6e:	4620      	mov	r0, r4
 8007c70:	f7ff fd48 	bl	8007704 <__hi0bits>
 8007c74:	f1c0 0320 	rsb	r3, r0, #32
 8007c78:	280a      	cmp	r0, #10
 8007c7a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8007cf8 <__b2d+0x9c>
 8007c7e:	600b      	str	r3, [r1, #0]
 8007c80:	dc14      	bgt.n	8007cac <__b2d+0x50>
 8007c82:	f1c0 0e0b 	rsb	lr, r0, #11
 8007c86:	fa24 f10e 	lsr.w	r1, r4, lr
 8007c8a:	42b7      	cmp	r7, r6
 8007c8c:	ea41 030c 	orr.w	r3, r1, ip
 8007c90:	bf34      	ite	cc
 8007c92:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8007c96:	2100      	movcs	r1, #0
 8007c98:	3015      	adds	r0, #21
 8007c9a:	fa04 f000 	lsl.w	r0, r4, r0
 8007c9e:	fa21 f10e 	lsr.w	r1, r1, lr
 8007ca2:	ea40 0201 	orr.w	r2, r0, r1
 8007ca6:	ec43 2b10 	vmov	d0, r2, r3
 8007caa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007cac:	42b7      	cmp	r7, r6
 8007cae:	bf3a      	itte	cc
 8007cb0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8007cb4:	f1a5 0608 	subcc.w	r6, r5, #8
 8007cb8:	2100      	movcs	r1, #0
 8007cba:	380b      	subs	r0, #11
 8007cbc:	d017      	beq.n	8007cee <__b2d+0x92>
 8007cbe:	f1c0 0c20 	rsb	ip, r0, #32
 8007cc2:	fa04 f500 	lsl.w	r5, r4, r0
 8007cc6:	42be      	cmp	r6, r7
 8007cc8:	fa21 f40c 	lsr.w	r4, r1, ip
 8007ccc:	ea45 0504 	orr.w	r5, r5, r4
 8007cd0:	bf8c      	ite	hi
 8007cd2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8007cd6:	2400      	movls	r4, #0
 8007cd8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8007cdc:	fa01 f000 	lsl.w	r0, r1, r0
 8007ce0:	fa24 f40c 	lsr.w	r4, r4, ip
 8007ce4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007ce8:	ea40 0204 	orr.w	r2, r0, r4
 8007cec:	e7db      	b.n	8007ca6 <__b2d+0x4a>
 8007cee:	ea44 030c 	orr.w	r3, r4, ip
 8007cf2:	460a      	mov	r2, r1
 8007cf4:	e7d7      	b.n	8007ca6 <__b2d+0x4a>
 8007cf6:	bf00      	nop
 8007cf8:	3ff00000 	.word	0x3ff00000

08007cfc <__d2b>:
 8007cfc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007d00:	4689      	mov	r9, r1
 8007d02:	2101      	movs	r1, #1
 8007d04:	ec57 6b10 	vmov	r6, r7, d0
 8007d08:	4690      	mov	r8, r2
 8007d0a:	f7ff fc09 	bl	8007520 <_Balloc>
 8007d0e:	4604      	mov	r4, r0
 8007d10:	b930      	cbnz	r0, 8007d20 <__d2b+0x24>
 8007d12:	4602      	mov	r2, r0
 8007d14:	4b25      	ldr	r3, [pc, #148]	; (8007dac <__d2b+0xb0>)
 8007d16:	4826      	ldr	r0, [pc, #152]	; (8007db0 <__d2b+0xb4>)
 8007d18:	f240 310a 	movw	r1, #778	; 0x30a
 8007d1c:	f000 fcfe 	bl	800871c <__assert_func>
 8007d20:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007d24:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007d28:	bb35      	cbnz	r5, 8007d78 <__d2b+0x7c>
 8007d2a:	2e00      	cmp	r6, #0
 8007d2c:	9301      	str	r3, [sp, #4]
 8007d2e:	d028      	beq.n	8007d82 <__d2b+0x86>
 8007d30:	4668      	mov	r0, sp
 8007d32:	9600      	str	r6, [sp, #0]
 8007d34:	f7ff fd06 	bl	8007744 <__lo0bits>
 8007d38:	9900      	ldr	r1, [sp, #0]
 8007d3a:	b300      	cbz	r0, 8007d7e <__d2b+0x82>
 8007d3c:	9a01      	ldr	r2, [sp, #4]
 8007d3e:	f1c0 0320 	rsb	r3, r0, #32
 8007d42:	fa02 f303 	lsl.w	r3, r2, r3
 8007d46:	430b      	orrs	r3, r1
 8007d48:	40c2      	lsrs	r2, r0
 8007d4a:	6163      	str	r3, [r4, #20]
 8007d4c:	9201      	str	r2, [sp, #4]
 8007d4e:	9b01      	ldr	r3, [sp, #4]
 8007d50:	61a3      	str	r3, [r4, #24]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	bf14      	ite	ne
 8007d56:	2202      	movne	r2, #2
 8007d58:	2201      	moveq	r2, #1
 8007d5a:	6122      	str	r2, [r4, #16]
 8007d5c:	b1d5      	cbz	r5, 8007d94 <__d2b+0x98>
 8007d5e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007d62:	4405      	add	r5, r0
 8007d64:	f8c9 5000 	str.w	r5, [r9]
 8007d68:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007d6c:	f8c8 0000 	str.w	r0, [r8]
 8007d70:	4620      	mov	r0, r4
 8007d72:	b003      	add	sp, #12
 8007d74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007d78:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007d7c:	e7d5      	b.n	8007d2a <__d2b+0x2e>
 8007d7e:	6161      	str	r1, [r4, #20]
 8007d80:	e7e5      	b.n	8007d4e <__d2b+0x52>
 8007d82:	a801      	add	r0, sp, #4
 8007d84:	f7ff fcde 	bl	8007744 <__lo0bits>
 8007d88:	9b01      	ldr	r3, [sp, #4]
 8007d8a:	6163      	str	r3, [r4, #20]
 8007d8c:	2201      	movs	r2, #1
 8007d8e:	6122      	str	r2, [r4, #16]
 8007d90:	3020      	adds	r0, #32
 8007d92:	e7e3      	b.n	8007d5c <__d2b+0x60>
 8007d94:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007d98:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007d9c:	f8c9 0000 	str.w	r0, [r9]
 8007da0:	6918      	ldr	r0, [r3, #16]
 8007da2:	f7ff fcaf 	bl	8007704 <__hi0bits>
 8007da6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007daa:	e7df      	b.n	8007d6c <__d2b+0x70>
 8007dac:	08008e88 	.word	0x08008e88
 8007db0:	08008f78 	.word	0x08008f78

08007db4 <__ratio>:
 8007db4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007db8:	4688      	mov	r8, r1
 8007dba:	4669      	mov	r1, sp
 8007dbc:	4681      	mov	r9, r0
 8007dbe:	f7ff ff4d 	bl	8007c5c <__b2d>
 8007dc2:	a901      	add	r1, sp, #4
 8007dc4:	4640      	mov	r0, r8
 8007dc6:	ec55 4b10 	vmov	r4, r5, d0
 8007dca:	f7ff ff47 	bl	8007c5c <__b2d>
 8007dce:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007dd2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007dd6:	eba3 0c02 	sub.w	ip, r3, r2
 8007dda:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007dde:	1a9b      	subs	r3, r3, r2
 8007de0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007de4:	ec51 0b10 	vmov	r0, r1, d0
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	bfd6      	itet	le
 8007dec:	460a      	movle	r2, r1
 8007dee:	462a      	movgt	r2, r5
 8007df0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007df4:	468b      	mov	fp, r1
 8007df6:	462f      	mov	r7, r5
 8007df8:	bfd4      	ite	le
 8007dfa:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8007dfe:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007e02:	4620      	mov	r0, r4
 8007e04:	ee10 2a10 	vmov	r2, s0
 8007e08:	465b      	mov	r3, fp
 8007e0a:	4639      	mov	r1, r7
 8007e0c:	f7f8 fd3e 	bl	800088c <__aeabi_ddiv>
 8007e10:	ec41 0b10 	vmov	d0, r0, r1
 8007e14:	b003      	add	sp, #12
 8007e16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007e1a <__copybits>:
 8007e1a:	3901      	subs	r1, #1
 8007e1c:	b570      	push	{r4, r5, r6, lr}
 8007e1e:	1149      	asrs	r1, r1, #5
 8007e20:	6914      	ldr	r4, [r2, #16]
 8007e22:	3101      	adds	r1, #1
 8007e24:	f102 0314 	add.w	r3, r2, #20
 8007e28:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007e2c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007e30:	1f05      	subs	r5, r0, #4
 8007e32:	42a3      	cmp	r3, r4
 8007e34:	d30c      	bcc.n	8007e50 <__copybits+0x36>
 8007e36:	1aa3      	subs	r3, r4, r2
 8007e38:	3b11      	subs	r3, #17
 8007e3a:	f023 0303 	bic.w	r3, r3, #3
 8007e3e:	3211      	adds	r2, #17
 8007e40:	42a2      	cmp	r2, r4
 8007e42:	bf88      	it	hi
 8007e44:	2300      	movhi	r3, #0
 8007e46:	4418      	add	r0, r3
 8007e48:	2300      	movs	r3, #0
 8007e4a:	4288      	cmp	r0, r1
 8007e4c:	d305      	bcc.n	8007e5a <__copybits+0x40>
 8007e4e:	bd70      	pop	{r4, r5, r6, pc}
 8007e50:	f853 6b04 	ldr.w	r6, [r3], #4
 8007e54:	f845 6f04 	str.w	r6, [r5, #4]!
 8007e58:	e7eb      	b.n	8007e32 <__copybits+0x18>
 8007e5a:	f840 3b04 	str.w	r3, [r0], #4
 8007e5e:	e7f4      	b.n	8007e4a <__copybits+0x30>

08007e60 <__any_on>:
 8007e60:	f100 0214 	add.w	r2, r0, #20
 8007e64:	6900      	ldr	r0, [r0, #16]
 8007e66:	114b      	asrs	r3, r1, #5
 8007e68:	4298      	cmp	r0, r3
 8007e6a:	b510      	push	{r4, lr}
 8007e6c:	db11      	blt.n	8007e92 <__any_on+0x32>
 8007e6e:	dd0a      	ble.n	8007e86 <__any_on+0x26>
 8007e70:	f011 011f 	ands.w	r1, r1, #31
 8007e74:	d007      	beq.n	8007e86 <__any_on+0x26>
 8007e76:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007e7a:	fa24 f001 	lsr.w	r0, r4, r1
 8007e7e:	fa00 f101 	lsl.w	r1, r0, r1
 8007e82:	428c      	cmp	r4, r1
 8007e84:	d10b      	bne.n	8007e9e <__any_on+0x3e>
 8007e86:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007e8a:	4293      	cmp	r3, r2
 8007e8c:	d803      	bhi.n	8007e96 <__any_on+0x36>
 8007e8e:	2000      	movs	r0, #0
 8007e90:	bd10      	pop	{r4, pc}
 8007e92:	4603      	mov	r3, r0
 8007e94:	e7f7      	b.n	8007e86 <__any_on+0x26>
 8007e96:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007e9a:	2900      	cmp	r1, #0
 8007e9c:	d0f5      	beq.n	8007e8a <__any_on+0x2a>
 8007e9e:	2001      	movs	r0, #1
 8007ea0:	e7f6      	b.n	8007e90 <__any_on+0x30>

08007ea2 <_calloc_r>:
 8007ea2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007ea4:	fba1 2402 	umull	r2, r4, r1, r2
 8007ea8:	b94c      	cbnz	r4, 8007ebe <_calloc_r+0x1c>
 8007eaa:	4611      	mov	r1, r2
 8007eac:	9201      	str	r2, [sp, #4]
 8007eae:	f000 f87b 	bl	8007fa8 <_malloc_r>
 8007eb2:	9a01      	ldr	r2, [sp, #4]
 8007eb4:	4605      	mov	r5, r0
 8007eb6:	b930      	cbnz	r0, 8007ec6 <_calloc_r+0x24>
 8007eb8:	4628      	mov	r0, r5
 8007eba:	b003      	add	sp, #12
 8007ebc:	bd30      	pop	{r4, r5, pc}
 8007ebe:	220c      	movs	r2, #12
 8007ec0:	6002      	str	r2, [r0, #0]
 8007ec2:	2500      	movs	r5, #0
 8007ec4:	e7f8      	b.n	8007eb8 <_calloc_r+0x16>
 8007ec6:	4621      	mov	r1, r4
 8007ec8:	f7fc f854 	bl	8003f74 <memset>
 8007ecc:	e7f4      	b.n	8007eb8 <_calloc_r+0x16>
	...

08007ed0 <_free_r>:
 8007ed0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007ed2:	2900      	cmp	r1, #0
 8007ed4:	d044      	beq.n	8007f60 <_free_r+0x90>
 8007ed6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007eda:	9001      	str	r0, [sp, #4]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	f1a1 0404 	sub.w	r4, r1, #4
 8007ee2:	bfb8      	it	lt
 8007ee4:	18e4      	addlt	r4, r4, r3
 8007ee6:	f000 fca7 	bl	8008838 <__malloc_lock>
 8007eea:	4a1e      	ldr	r2, [pc, #120]	; (8007f64 <_free_r+0x94>)
 8007eec:	9801      	ldr	r0, [sp, #4]
 8007eee:	6813      	ldr	r3, [r2, #0]
 8007ef0:	b933      	cbnz	r3, 8007f00 <_free_r+0x30>
 8007ef2:	6063      	str	r3, [r4, #4]
 8007ef4:	6014      	str	r4, [r2, #0]
 8007ef6:	b003      	add	sp, #12
 8007ef8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007efc:	f000 bca2 	b.w	8008844 <__malloc_unlock>
 8007f00:	42a3      	cmp	r3, r4
 8007f02:	d908      	bls.n	8007f16 <_free_r+0x46>
 8007f04:	6825      	ldr	r5, [r4, #0]
 8007f06:	1961      	adds	r1, r4, r5
 8007f08:	428b      	cmp	r3, r1
 8007f0a:	bf01      	itttt	eq
 8007f0c:	6819      	ldreq	r1, [r3, #0]
 8007f0e:	685b      	ldreq	r3, [r3, #4]
 8007f10:	1949      	addeq	r1, r1, r5
 8007f12:	6021      	streq	r1, [r4, #0]
 8007f14:	e7ed      	b.n	8007ef2 <_free_r+0x22>
 8007f16:	461a      	mov	r2, r3
 8007f18:	685b      	ldr	r3, [r3, #4]
 8007f1a:	b10b      	cbz	r3, 8007f20 <_free_r+0x50>
 8007f1c:	42a3      	cmp	r3, r4
 8007f1e:	d9fa      	bls.n	8007f16 <_free_r+0x46>
 8007f20:	6811      	ldr	r1, [r2, #0]
 8007f22:	1855      	adds	r5, r2, r1
 8007f24:	42a5      	cmp	r5, r4
 8007f26:	d10b      	bne.n	8007f40 <_free_r+0x70>
 8007f28:	6824      	ldr	r4, [r4, #0]
 8007f2a:	4421      	add	r1, r4
 8007f2c:	1854      	adds	r4, r2, r1
 8007f2e:	42a3      	cmp	r3, r4
 8007f30:	6011      	str	r1, [r2, #0]
 8007f32:	d1e0      	bne.n	8007ef6 <_free_r+0x26>
 8007f34:	681c      	ldr	r4, [r3, #0]
 8007f36:	685b      	ldr	r3, [r3, #4]
 8007f38:	6053      	str	r3, [r2, #4]
 8007f3a:	4421      	add	r1, r4
 8007f3c:	6011      	str	r1, [r2, #0]
 8007f3e:	e7da      	b.n	8007ef6 <_free_r+0x26>
 8007f40:	d902      	bls.n	8007f48 <_free_r+0x78>
 8007f42:	230c      	movs	r3, #12
 8007f44:	6003      	str	r3, [r0, #0]
 8007f46:	e7d6      	b.n	8007ef6 <_free_r+0x26>
 8007f48:	6825      	ldr	r5, [r4, #0]
 8007f4a:	1961      	adds	r1, r4, r5
 8007f4c:	428b      	cmp	r3, r1
 8007f4e:	bf04      	itt	eq
 8007f50:	6819      	ldreq	r1, [r3, #0]
 8007f52:	685b      	ldreq	r3, [r3, #4]
 8007f54:	6063      	str	r3, [r4, #4]
 8007f56:	bf04      	itt	eq
 8007f58:	1949      	addeq	r1, r1, r5
 8007f5a:	6021      	streq	r1, [r4, #0]
 8007f5c:	6054      	str	r4, [r2, #4]
 8007f5e:	e7ca      	b.n	8007ef6 <_free_r+0x26>
 8007f60:	b003      	add	sp, #12
 8007f62:	bd30      	pop	{r4, r5, pc}
 8007f64:	20000290 	.word	0x20000290

08007f68 <sbrk_aligned>:
 8007f68:	b570      	push	{r4, r5, r6, lr}
 8007f6a:	4e0e      	ldr	r6, [pc, #56]	; (8007fa4 <sbrk_aligned+0x3c>)
 8007f6c:	460c      	mov	r4, r1
 8007f6e:	6831      	ldr	r1, [r6, #0]
 8007f70:	4605      	mov	r5, r0
 8007f72:	b911      	cbnz	r1, 8007f7a <sbrk_aligned+0x12>
 8007f74:	f000 fb4c 	bl	8008610 <_sbrk_r>
 8007f78:	6030      	str	r0, [r6, #0]
 8007f7a:	4621      	mov	r1, r4
 8007f7c:	4628      	mov	r0, r5
 8007f7e:	f000 fb47 	bl	8008610 <_sbrk_r>
 8007f82:	1c43      	adds	r3, r0, #1
 8007f84:	d00a      	beq.n	8007f9c <sbrk_aligned+0x34>
 8007f86:	1cc4      	adds	r4, r0, #3
 8007f88:	f024 0403 	bic.w	r4, r4, #3
 8007f8c:	42a0      	cmp	r0, r4
 8007f8e:	d007      	beq.n	8007fa0 <sbrk_aligned+0x38>
 8007f90:	1a21      	subs	r1, r4, r0
 8007f92:	4628      	mov	r0, r5
 8007f94:	f000 fb3c 	bl	8008610 <_sbrk_r>
 8007f98:	3001      	adds	r0, #1
 8007f9a:	d101      	bne.n	8007fa0 <sbrk_aligned+0x38>
 8007f9c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007fa0:	4620      	mov	r0, r4
 8007fa2:	bd70      	pop	{r4, r5, r6, pc}
 8007fa4:	20000294 	.word	0x20000294

08007fa8 <_malloc_r>:
 8007fa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fac:	1ccd      	adds	r5, r1, #3
 8007fae:	f025 0503 	bic.w	r5, r5, #3
 8007fb2:	3508      	adds	r5, #8
 8007fb4:	2d0c      	cmp	r5, #12
 8007fb6:	bf38      	it	cc
 8007fb8:	250c      	movcc	r5, #12
 8007fba:	2d00      	cmp	r5, #0
 8007fbc:	4607      	mov	r7, r0
 8007fbe:	db01      	blt.n	8007fc4 <_malloc_r+0x1c>
 8007fc0:	42a9      	cmp	r1, r5
 8007fc2:	d905      	bls.n	8007fd0 <_malloc_r+0x28>
 8007fc4:	230c      	movs	r3, #12
 8007fc6:	603b      	str	r3, [r7, #0]
 8007fc8:	2600      	movs	r6, #0
 8007fca:	4630      	mov	r0, r6
 8007fcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fd0:	4e2e      	ldr	r6, [pc, #184]	; (800808c <_malloc_r+0xe4>)
 8007fd2:	f000 fc31 	bl	8008838 <__malloc_lock>
 8007fd6:	6833      	ldr	r3, [r6, #0]
 8007fd8:	461c      	mov	r4, r3
 8007fda:	bb34      	cbnz	r4, 800802a <_malloc_r+0x82>
 8007fdc:	4629      	mov	r1, r5
 8007fde:	4638      	mov	r0, r7
 8007fe0:	f7ff ffc2 	bl	8007f68 <sbrk_aligned>
 8007fe4:	1c43      	adds	r3, r0, #1
 8007fe6:	4604      	mov	r4, r0
 8007fe8:	d14d      	bne.n	8008086 <_malloc_r+0xde>
 8007fea:	6834      	ldr	r4, [r6, #0]
 8007fec:	4626      	mov	r6, r4
 8007fee:	2e00      	cmp	r6, #0
 8007ff0:	d140      	bne.n	8008074 <_malloc_r+0xcc>
 8007ff2:	6823      	ldr	r3, [r4, #0]
 8007ff4:	4631      	mov	r1, r6
 8007ff6:	4638      	mov	r0, r7
 8007ff8:	eb04 0803 	add.w	r8, r4, r3
 8007ffc:	f000 fb08 	bl	8008610 <_sbrk_r>
 8008000:	4580      	cmp	r8, r0
 8008002:	d13a      	bne.n	800807a <_malloc_r+0xd2>
 8008004:	6821      	ldr	r1, [r4, #0]
 8008006:	3503      	adds	r5, #3
 8008008:	1a6d      	subs	r5, r5, r1
 800800a:	f025 0503 	bic.w	r5, r5, #3
 800800e:	3508      	adds	r5, #8
 8008010:	2d0c      	cmp	r5, #12
 8008012:	bf38      	it	cc
 8008014:	250c      	movcc	r5, #12
 8008016:	4629      	mov	r1, r5
 8008018:	4638      	mov	r0, r7
 800801a:	f7ff ffa5 	bl	8007f68 <sbrk_aligned>
 800801e:	3001      	adds	r0, #1
 8008020:	d02b      	beq.n	800807a <_malloc_r+0xd2>
 8008022:	6823      	ldr	r3, [r4, #0]
 8008024:	442b      	add	r3, r5
 8008026:	6023      	str	r3, [r4, #0]
 8008028:	e00e      	b.n	8008048 <_malloc_r+0xa0>
 800802a:	6822      	ldr	r2, [r4, #0]
 800802c:	1b52      	subs	r2, r2, r5
 800802e:	d41e      	bmi.n	800806e <_malloc_r+0xc6>
 8008030:	2a0b      	cmp	r2, #11
 8008032:	d916      	bls.n	8008062 <_malloc_r+0xba>
 8008034:	1961      	adds	r1, r4, r5
 8008036:	42a3      	cmp	r3, r4
 8008038:	6025      	str	r5, [r4, #0]
 800803a:	bf18      	it	ne
 800803c:	6059      	strne	r1, [r3, #4]
 800803e:	6863      	ldr	r3, [r4, #4]
 8008040:	bf08      	it	eq
 8008042:	6031      	streq	r1, [r6, #0]
 8008044:	5162      	str	r2, [r4, r5]
 8008046:	604b      	str	r3, [r1, #4]
 8008048:	4638      	mov	r0, r7
 800804a:	f104 060b 	add.w	r6, r4, #11
 800804e:	f000 fbf9 	bl	8008844 <__malloc_unlock>
 8008052:	f026 0607 	bic.w	r6, r6, #7
 8008056:	1d23      	adds	r3, r4, #4
 8008058:	1af2      	subs	r2, r6, r3
 800805a:	d0b6      	beq.n	8007fca <_malloc_r+0x22>
 800805c:	1b9b      	subs	r3, r3, r6
 800805e:	50a3      	str	r3, [r4, r2]
 8008060:	e7b3      	b.n	8007fca <_malloc_r+0x22>
 8008062:	6862      	ldr	r2, [r4, #4]
 8008064:	42a3      	cmp	r3, r4
 8008066:	bf0c      	ite	eq
 8008068:	6032      	streq	r2, [r6, #0]
 800806a:	605a      	strne	r2, [r3, #4]
 800806c:	e7ec      	b.n	8008048 <_malloc_r+0xa0>
 800806e:	4623      	mov	r3, r4
 8008070:	6864      	ldr	r4, [r4, #4]
 8008072:	e7b2      	b.n	8007fda <_malloc_r+0x32>
 8008074:	4634      	mov	r4, r6
 8008076:	6876      	ldr	r6, [r6, #4]
 8008078:	e7b9      	b.n	8007fee <_malloc_r+0x46>
 800807a:	230c      	movs	r3, #12
 800807c:	603b      	str	r3, [r7, #0]
 800807e:	4638      	mov	r0, r7
 8008080:	f000 fbe0 	bl	8008844 <__malloc_unlock>
 8008084:	e7a1      	b.n	8007fca <_malloc_r+0x22>
 8008086:	6025      	str	r5, [r4, #0]
 8008088:	e7de      	b.n	8008048 <_malloc_r+0xa0>
 800808a:	bf00      	nop
 800808c:	20000290 	.word	0x20000290

08008090 <__ssputs_r>:
 8008090:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008094:	688e      	ldr	r6, [r1, #8]
 8008096:	429e      	cmp	r6, r3
 8008098:	4682      	mov	sl, r0
 800809a:	460c      	mov	r4, r1
 800809c:	4690      	mov	r8, r2
 800809e:	461f      	mov	r7, r3
 80080a0:	d838      	bhi.n	8008114 <__ssputs_r+0x84>
 80080a2:	898a      	ldrh	r2, [r1, #12]
 80080a4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80080a8:	d032      	beq.n	8008110 <__ssputs_r+0x80>
 80080aa:	6825      	ldr	r5, [r4, #0]
 80080ac:	6909      	ldr	r1, [r1, #16]
 80080ae:	eba5 0901 	sub.w	r9, r5, r1
 80080b2:	6965      	ldr	r5, [r4, #20]
 80080b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80080b8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80080bc:	3301      	adds	r3, #1
 80080be:	444b      	add	r3, r9
 80080c0:	106d      	asrs	r5, r5, #1
 80080c2:	429d      	cmp	r5, r3
 80080c4:	bf38      	it	cc
 80080c6:	461d      	movcc	r5, r3
 80080c8:	0553      	lsls	r3, r2, #21
 80080ca:	d531      	bpl.n	8008130 <__ssputs_r+0xa0>
 80080cc:	4629      	mov	r1, r5
 80080ce:	f7ff ff6b 	bl	8007fa8 <_malloc_r>
 80080d2:	4606      	mov	r6, r0
 80080d4:	b950      	cbnz	r0, 80080ec <__ssputs_r+0x5c>
 80080d6:	230c      	movs	r3, #12
 80080d8:	f8ca 3000 	str.w	r3, [sl]
 80080dc:	89a3      	ldrh	r3, [r4, #12]
 80080de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080e2:	81a3      	strh	r3, [r4, #12]
 80080e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80080e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080ec:	6921      	ldr	r1, [r4, #16]
 80080ee:	464a      	mov	r2, r9
 80080f0:	f7ff fa08 	bl	8007504 <memcpy>
 80080f4:	89a3      	ldrh	r3, [r4, #12]
 80080f6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80080fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080fe:	81a3      	strh	r3, [r4, #12]
 8008100:	6126      	str	r6, [r4, #16]
 8008102:	6165      	str	r5, [r4, #20]
 8008104:	444e      	add	r6, r9
 8008106:	eba5 0509 	sub.w	r5, r5, r9
 800810a:	6026      	str	r6, [r4, #0]
 800810c:	60a5      	str	r5, [r4, #8]
 800810e:	463e      	mov	r6, r7
 8008110:	42be      	cmp	r6, r7
 8008112:	d900      	bls.n	8008116 <__ssputs_r+0x86>
 8008114:	463e      	mov	r6, r7
 8008116:	6820      	ldr	r0, [r4, #0]
 8008118:	4632      	mov	r2, r6
 800811a:	4641      	mov	r1, r8
 800811c:	f000 fb72 	bl	8008804 <memmove>
 8008120:	68a3      	ldr	r3, [r4, #8]
 8008122:	1b9b      	subs	r3, r3, r6
 8008124:	60a3      	str	r3, [r4, #8]
 8008126:	6823      	ldr	r3, [r4, #0]
 8008128:	4433      	add	r3, r6
 800812a:	6023      	str	r3, [r4, #0]
 800812c:	2000      	movs	r0, #0
 800812e:	e7db      	b.n	80080e8 <__ssputs_r+0x58>
 8008130:	462a      	mov	r2, r5
 8008132:	f000 fb8d 	bl	8008850 <_realloc_r>
 8008136:	4606      	mov	r6, r0
 8008138:	2800      	cmp	r0, #0
 800813a:	d1e1      	bne.n	8008100 <__ssputs_r+0x70>
 800813c:	6921      	ldr	r1, [r4, #16]
 800813e:	4650      	mov	r0, sl
 8008140:	f7ff fec6 	bl	8007ed0 <_free_r>
 8008144:	e7c7      	b.n	80080d6 <__ssputs_r+0x46>
	...

08008148 <_svfiprintf_r>:
 8008148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800814c:	4698      	mov	r8, r3
 800814e:	898b      	ldrh	r3, [r1, #12]
 8008150:	061b      	lsls	r3, r3, #24
 8008152:	b09d      	sub	sp, #116	; 0x74
 8008154:	4607      	mov	r7, r0
 8008156:	460d      	mov	r5, r1
 8008158:	4614      	mov	r4, r2
 800815a:	d50e      	bpl.n	800817a <_svfiprintf_r+0x32>
 800815c:	690b      	ldr	r3, [r1, #16]
 800815e:	b963      	cbnz	r3, 800817a <_svfiprintf_r+0x32>
 8008160:	2140      	movs	r1, #64	; 0x40
 8008162:	f7ff ff21 	bl	8007fa8 <_malloc_r>
 8008166:	6028      	str	r0, [r5, #0]
 8008168:	6128      	str	r0, [r5, #16]
 800816a:	b920      	cbnz	r0, 8008176 <_svfiprintf_r+0x2e>
 800816c:	230c      	movs	r3, #12
 800816e:	603b      	str	r3, [r7, #0]
 8008170:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008174:	e0d1      	b.n	800831a <_svfiprintf_r+0x1d2>
 8008176:	2340      	movs	r3, #64	; 0x40
 8008178:	616b      	str	r3, [r5, #20]
 800817a:	2300      	movs	r3, #0
 800817c:	9309      	str	r3, [sp, #36]	; 0x24
 800817e:	2320      	movs	r3, #32
 8008180:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008184:	f8cd 800c 	str.w	r8, [sp, #12]
 8008188:	2330      	movs	r3, #48	; 0x30
 800818a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008334 <_svfiprintf_r+0x1ec>
 800818e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008192:	f04f 0901 	mov.w	r9, #1
 8008196:	4623      	mov	r3, r4
 8008198:	469a      	mov	sl, r3
 800819a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800819e:	b10a      	cbz	r2, 80081a4 <_svfiprintf_r+0x5c>
 80081a0:	2a25      	cmp	r2, #37	; 0x25
 80081a2:	d1f9      	bne.n	8008198 <_svfiprintf_r+0x50>
 80081a4:	ebba 0b04 	subs.w	fp, sl, r4
 80081a8:	d00b      	beq.n	80081c2 <_svfiprintf_r+0x7a>
 80081aa:	465b      	mov	r3, fp
 80081ac:	4622      	mov	r2, r4
 80081ae:	4629      	mov	r1, r5
 80081b0:	4638      	mov	r0, r7
 80081b2:	f7ff ff6d 	bl	8008090 <__ssputs_r>
 80081b6:	3001      	adds	r0, #1
 80081b8:	f000 80aa 	beq.w	8008310 <_svfiprintf_r+0x1c8>
 80081bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80081be:	445a      	add	r2, fp
 80081c0:	9209      	str	r2, [sp, #36]	; 0x24
 80081c2:	f89a 3000 	ldrb.w	r3, [sl]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	f000 80a2 	beq.w	8008310 <_svfiprintf_r+0x1c8>
 80081cc:	2300      	movs	r3, #0
 80081ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80081d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80081d6:	f10a 0a01 	add.w	sl, sl, #1
 80081da:	9304      	str	r3, [sp, #16]
 80081dc:	9307      	str	r3, [sp, #28]
 80081de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80081e2:	931a      	str	r3, [sp, #104]	; 0x68
 80081e4:	4654      	mov	r4, sl
 80081e6:	2205      	movs	r2, #5
 80081e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081ec:	4851      	ldr	r0, [pc, #324]	; (8008334 <_svfiprintf_r+0x1ec>)
 80081ee:	f7f8 f817 	bl	8000220 <memchr>
 80081f2:	9a04      	ldr	r2, [sp, #16]
 80081f4:	b9d8      	cbnz	r0, 800822e <_svfiprintf_r+0xe6>
 80081f6:	06d0      	lsls	r0, r2, #27
 80081f8:	bf44      	itt	mi
 80081fa:	2320      	movmi	r3, #32
 80081fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008200:	0711      	lsls	r1, r2, #28
 8008202:	bf44      	itt	mi
 8008204:	232b      	movmi	r3, #43	; 0x2b
 8008206:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800820a:	f89a 3000 	ldrb.w	r3, [sl]
 800820e:	2b2a      	cmp	r3, #42	; 0x2a
 8008210:	d015      	beq.n	800823e <_svfiprintf_r+0xf6>
 8008212:	9a07      	ldr	r2, [sp, #28]
 8008214:	4654      	mov	r4, sl
 8008216:	2000      	movs	r0, #0
 8008218:	f04f 0c0a 	mov.w	ip, #10
 800821c:	4621      	mov	r1, r4
 800821e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008222:	3b30      	subs	r3, #48	; 0x30
 8008224:	2b09      	cmp	r3, #9
 8008226:	d94e      	bls.n	80082c6 <_svfiprintf_r+0x17e>
 8008228:	b1b0      	cbz	r0, 8008258 <_svfiprintf_r+0x110>
 800822a:	9207      	str	r2, [sp, #28]
 800822c:	e014      	b.n	8008258 <_svfiprintf_r+0x110>
 800822e:	eba0 0308 	sub.w	r3, r0, r8
 8008232:	fa09 f303 	lsl.w	r3, r9, r3
 8008236:	4313      	orrs	r3, r2
 8008238:	9304      	str	r3, [sp, #16]
 800823a:	46a2      	mov	sl, r4
 800823c:	e7d2      	b.n	80081e4 <_svfiprintf_r+0x9c>
 800823e:	9b03      	ldr	r3, [sp, #12]
 8008240:	1d19      	adds	r1, r3, #4
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	9103      	str	r1, [sp, #12]
 8008246:	2b00      	cmp	r3, #0
 8008248:	bfbb      	ittet	lt
 800824a:	425b      	neglt	r3, r3
 800824c:	f042 0202 	orrlt.w	r2, r2, #2
 8008250:	9307      	strge	r3, [sp, #28]
 8008252:	9307      	strlt	r3, [sp, #28]
 8008254:	bfb8      	it	lt
 8008256:	9204      	strlt	r2, [sp, #16]
 8008258:	7823      	ldrb	r3, [r4, #0]
 800825a:	2b2e      	cmp	r3, #46	; 0x2e
 800825c:	d10c      	bne.n	8008278 <_svfiprintf_r+0x130>
 800825e:	7863      	ldrb	r3, [r4, #1]
 8008260:	2b2a      	cmp	r3, #42	; 0x2a
 8008262:	d135      	bne.n	80082d0 <_svfiprintf_r+0x188>
 8008264:	9b03      	ldr	r3, [sp, #12]
 8008266:	1d1a      	adds	r2, r3, #4
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	9203      	str	r2, [sp, #12]
 800826c:	2b00      	cmp	r3, #0
 800826e:	bfb8      	it	lt
 8008270:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008274:	3402      	adds	r4, #2
 8008276:	9305      	str	r3, [sp, #20]
 8008278:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008344 <_svfiprintf_r+0x1fc>
 800827c:	7821      	ldrb	r1, [r4, #0]
 800827e:	2203      	movs	r2, #3
 8008280:	4650      	mov	r0, sl
 8008282:	f7f7 ffcd 	bl	8000220 <memchr>
 8008286:	b140      	cbz	r0, 800829a <_svfiprintf_r+0x152>
 8008288:	2340      	movs	r3, #64	; 0x40
 800828a:	eba0 000a 	sub.w	r0, r0, sl
 800828e:	fa03 f000 	lsl.w	r0, r3, r0
 8008292:	9b04      	ldr	r3, [sp, #16]
 8008294:	4303      	orrs	r3, r0
 8008296:	3401      	adds	r4, #1
 8008298:	9304      	str	r3, [sp, #16]
 800829a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800829e:	4826      	ldr	r0, [pc, #152]	; (8008338 <_svfiprintf_r+0x1f0>)
 80082a0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80082a4:	2206      	movs	r2, #6
 80082a6:	f7f7 ffbb 	bl	8000220 <memchr>
 80082aa:	2800      	cmp	r0, #0
 80082ac:	d038      	beq.n	8008320 <_svfiprintf_r+0x1d8>
 80082ae:	4b23      	ldr	r3, [pc, #140]	; (800833c <_svfiprintf_r+0x1f4>)
 80082b0:	bb1b      	cbnz	r3, 80082fa <_svfiprintf_r+0x1b2>
 80082b2:	9b03      	ldr	r3, [sp, #12]
 80082b4:	3307      	adds	r3, #7
 80082b6:	f023 0307 	bic.w	r3, r3, #7
 80082ba:	3308      	adds	r3, #8
 80082bc:	9303      	str	r3, [sp, #12]
 80082be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082c0:	4433      	add	r3, r6
 80082c2:	9309      	str	r3, [sp, #36]	; 0x24
 80082c4:	e767      	b.n	8008196 <_svfiprintf_r+0x4e>
 80082c6:	fb0c 3202 	mla	r2, ip, r2, r3
 80082ca:	460c      	mov	r4, r1
 80082cc:	2001      	movs	r0, #1
 80082ce:	e7a5      	b.n	800821c <_svfiprintf_r+0xd4>
 80082d0:	2300      	movs	r3, #0
 80082d2:	3401      	adds	r4, #1
 80082d4:	9305      	str	r3, [sp, #20]
 80082d6:	4619      	mov	r1, r3
 80082d8:	f04f 0c0a 	mov.w	ip, #10
 80082dc:	4620      	mov	r0, r4
 80082de:	f810 2b01 	ldrb.w	r2, [r0], #1
 80082e2:	3a30      	subs	r2, #48	; 0x30
 80082e4:	2a09      	cmp	r2, #9
 80082e6:	d903      	bls.n	80082f0 <_svfiprintf_r+0x1a8>
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d0c5      	beq.n	8008278 <_svfiprintf_r+0x130>
 80082ec:	9105      	str	r1, [sp, #20]
 80082ee:	e7c3      	b.n	8008278 <_svfiprintf_r+0x130>
 80082f0:	fb0c 2101 	mla	r1, ip, r1, r2
 80082f4:	4604      	mov	r4, r0
 80082f6:	2301      	movs	r3, #1
 80082f8:	e7f0      	b.n	80082dc <_svfiprintf_r+0x194>
 80082fa:	ab03      	add	r3, sp, #12
 80082fc:	9300      	str	r3, [sp, #0]
 80082fe:	462a      	mov	r2, r5
 8008300:	4b0f      	ldr	r3, [pc, #60]	; (8008340 <_svfiprintf_r+0x1f8>)
 8008302:	a904      	add	r1, sp, #16
 8008304:	4638      	mov	r0, r7
 8008306:	f7fb fedd 	bl	80040c4 <_printf_float>
 800830a:	1c42      	adds	r2, r0, #1
 800830c:	4606      	mov	r6, r0
 800830e:	d1d6      	bne.n	80082be <_svfiprintf_r+0x176>
 8008310:	89ab      	ldrh	r3, [r5, #12]
 8008312:	065b      	lsls	r3, r3, #25
 8008314:	f53f af2c 	bmi.w	8008170 <_svfiprintf_r+0x28>
 8008318:	9809      	ldr	r0, [sp, #36]	; 0x24
 800831a:	b01d      	add	sp, #116	; 0x74
 800831c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008320:	ab03      	add	r3, sp, #12
 8008322:	9300      	str	r3, [sp, #0]
 8008324:	462a      	mov	r2, r5
 8008326:	4b06      	ldr	r3, [pc, #24]	; (8008340 <_svfiprintf_r+0x1f8>)
 8008328:	a904      	add	r1, sp, #16
 800832a:	4638      	mov	r0, r7
 800832c:	f7fc f96e 	bl	800460c <_printf_i>
 8008330:	e7eb      	b.n	800830a <_svfiprintf_r+0x1c2>
 8008332:	bf00      	nop
 8008334:	080090d4 	.word	0x080090d4
 8008338:	080090de 	.word	0x080090de
 800833c:	080040c5 	.word	0x080040c5
 8008340:	08008091 	.word	0x08008091
 8008344:	080090da 	.word	0x080090da

08008348 <__sfputc_r>:
 8008348:	6893      	ldr	r3, [r2, #8]
 800834a:	3b01      	subs	r3, #1
 800834c:	2b00      	cmp	r3, #0
 800834e:	b410      	push	{r4}
 8008350:	6093      	str	r3, [r2, #8]
 8008352:	da08      	bge.n	8008366 <__sfputc_r+0x1e>
 8008354:	6994      	ldr	r4, [r2, #24]
 8008356:	42a3      	cmp	r3, r4
 8008358:	db01      	blt.n	800835e <__sfputc_r+0x16>
 800835a:	290a      	cmp	r1, #10
 800835c:	d103      	bne.n	8008366 <__sfputc_r+0x1e>
 800835e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008362:	f7fd bbe9 	b.w	8005b38 <__swbuf_r>
 8008366:	6813      	ldr	r3, [r2, #0]
 8008368:	1c58      	adds	r0, r3, #1
 800836a:	6010      	str	r0, [r2, #0]
 800836c:	7019      	strb	r1, [r3, #0]
 800836e:	4608      	mov	r0, r1
 8008370:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008374:	4770      	bx	lr

08008376 <__sfputs_r>:
 8008376:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008378:	4606      	mov	r6, r0
 800837a:	460f      	mov	r7, r1
 800837c:	4614      	mov	r4, r2
 800837e:	18d5      	adds	r5, r2, r3
 8008380:	42ac      	cmp	r4, r5
 8008382:	d101      	bne.n	8008388 <__sfputs_r+0x12>
 8008384:	2000      	movs	r0, #0
 8008386:	e007      	b.n	8008398 <__sfputs_r+0x22>
 8008388:	f814 1b01 	ldrb.w	r1, [r4], #1
 800838c:	463a      	mov	r2, r7
 800838e:	4630      	mov	r0, r6
 8008390:	f7ff ffda 	bl	8008348 <__sfputc_r>
 8008394:	1c43      	adds	r3, r0, #1
 8008396:	d1f3      	bne.n	8008380 <__sfputs_r+0xa>
 8008398:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800839c <_vfiprintf_r>:
 800839c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083a0:	460d      	mov	r5, r1
 80083a2:	b09d      	sub	sp, #116	; 0x74
 80083a4:	4614      	mov	r4, r2
 80083a6:	4698      	mov	r8, r3
 80083a8:	4606      	mov	r6, r0
 80083aa:	b118      	cbz	r0, 80083b4 <_vfiprintf_r+0x18>
 80083ac:	6983      	ldr	r3, [r0, #24]
 80083ae:	b90b      	cbnz	r3, 80083b4 <_vfiprintf_r+0x18>
 80083b0:	f7fe fc16 	bl	8006be0 <__sinit>
 80083b4:	4b89      	ldr	r3, [pc, #548]	; (80085dc <_vfiprintf_r+0x240>)
 80083b6:	429d      	cmp	r5, r3
 80083b8:	d11b      	bne.n	80083f2 <_vfiprintf_r+0x56>
 80083ba:	6875      	ldr	r5, [r6, #4]
 80083bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80083be:	07d9      	lsls	r1, r3, #31
 80083c0:	d405      	bmi.n	80083ce <_vfiprintf_r+0x32>
 80083c2:	89ab      	ldrh	r3, [r5, #12]
 80083c4:	059a      	lsls	r2, r3, #22
 80083c6:	d402      	bmi.n	80083ce <_vfiprintf_r+0x32>
 80083c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80083ca:	f7ff f81a 	bl	8007402 <__retarget_lock_acquire_recursive>
 80083ce:	89ab      	ldrh	r3, [r5, #12]
 80083d0:	071b      	lsls	r3, r3, #28
 80083d2:	d501      	bpl.n	80083d8 <_vfiprintf_r+0x3c>
 80083d4:	692b      	ldr	r3, [r5, #16]
 80083d6:	b9eb      	cbnz	r3, 8008414 <_vfiprintf_r+0x78>
 80083d8:	4629      	mov	r1, r5
 80083da:	4630      	mov	r0, r6
 80083dc:	f7fd fbfe 	bl	8005bdc <__swsetup_r>
 80083e0:	b1c0      	cbz	r0, 8008414 <_vfiprintf_r+0x78>
 80083e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80083e4:	07dc      	lsls	r4, r3, #31
 80083e6:	d50e      	bpl.n	8008406 <_vfiprintf_r+0x6a>
 80083e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80083ec:	b01d      	add	sp, #116	; 0x74
 80083ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083f2:	4b7b      	ldr	r3, [pc, #492]	; (80085e0 <_vfiprintf_r+0x244>)
 80083f4:	429d      	cmp	r5, r3
 80083f6:	d101      	bne.n	80083fc <_vfiprintf_r+0x60>
 80083f8:	68b5      	ldr	r5, [r6, #8]
 80083fa:	e7df      	b.n	80083bc <_vfiprintf_r+0x20>
 80083fc:	4b79      	ldr	r3, [pc, #484]	; (80085e4 <_vfiprintf_r+0x248>)
 80083fe:	429d      	cmp	r5, r3
 8008400:	bf08      	it	eq
 8008402:	68f5      	ldreq	r5, [r6, #12]
 8008404:	e7da      	b.n	80083bc <_vfiprintf_r+0x20>
 8008406:	89ab      	ldrh	r3, [r5, #12]
 8008408:	0598      	lsls	r0, r3, #22
 800840a:	d4ed      	bmi.n	80083e8 <_vfiprintf_r+0x4c>
 800840c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800840e:	f7fe fff9 	bl	8007404 <__retarget_lock_release_recursive>
 8008412:	e7e9      	b.n	80083e8 <_vfiprintf_r+0x4c>
 8008414:	2300      	movs	r3, #0
 8008416:	9309      	str	r3, [sp, #36]	; 0x24
 8008418:	2320      	movs	r3, #32
 800841a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800841e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008422:	2330      	movs	r3, #48	; 0x30
 8008424:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80085e8 <_vfiprintf_r+0x24c>
 8008428:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800842c:	f04f 0901 	mov.w	r9, #1
 8008430:	4623      	mov	r3, r4
 8008432:	469a      	mov	sl, r3
 8008434:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008438:	b10a      	cbz	r2, 800843e <_vfiprintf_r+0xa2>
 800843a:	2a25      	cmp	r2, #37	; 0x25
 800843c:	d1f9      	bne.n	8008432 <_vfiprintf_r+0x96>
 800843e:	ebba 0b04 	subs.w	fp, sl, r4
 8008442:	d00b      	beq.n	800845c <_vfiprintf_r+0xc0>
 8008444:	465b      	mov	r3, fp
 8008446:	4622      	mov	r2, r4
 8008448:	4629      	mov	r1, r5
 800844a:	4630      	mov	r0, r6
 800844c:	f7ff ff93 	bl	8008376 <__sfputs_r>
 8008450:	3001      	adds	r0, #1
 8008452:	f000 80aa 	beq.w	80085aa <_vfiprintf_r+0x20e>
 8008456:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008458:	445a      	add	r2, fp
 800845a:	9209      	str	r2, [sp, #36]	; 0x24
 800845c:	f89a 3000 	ldrb.w	r3, [sl]
 8008460:	2b00      	cmp	r3, #0
 8008462:	f000 80a2 	beq.w	80085aa <_vfiprintf_r+0x20e>
 8008466:	2300      	movs	r3, #0
 8008468:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800846c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008470:	f10a 0a01 	add.w	sl, sl, #1
 8008474:	9304      	str	r3, [sp, #16]
 8008476:	9307      	str	r3, [sp, #28]
 8008478:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800847c:	931a      	str	r3, [sp, #104]	; 0x68
 800847e:	4654      	mov	r4, sl
 8008480:	2205      	movs	r2, #5
 8008482:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008486:	4858      	ldr	r0, [pc, #352]	; (80085e8 <_vfiprintf_r+0x24c>)
 8008488:	f7f7 feca 	bl	8000220 <memchr>
 800848c:	9a04      	ldr	r2, [sp, #16]
 800848e:	b9d8      	cbnz	r0, 80084c8 <_vfiprintf_r+0x12c>
 8008490:	06d1      	lsls	r1, r2, #27
 8008492:	bf44      	itt	mi
 8008494:	2320      	movmi	r3, #32
 8008496:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800849a:	0713      	lsls	r3, r2, #28
 800849c:	bf44      	itt	mi
 800849e:	232b      	movmi	r3, #43	; 0x2b
 80084a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80084a4:	f89a 3000 	ldrb.w	r3, [sl]
 80084a8:	2b2a      	cmp	r3, #42	; 0x2a
 80084aa:	d015      	beq.n	80084d8 <_vfiprintf_r+0x13c>
 80084ac:	9a07      	ldr	r2, [sp, #28]
 80084ae:	4654      	mov	r4, sl
 80084b0:	2000      	movs	r0, #0
 80084b2:	f04f 0c0a 	mov.w	ip, #10
 80084b6:	4621      	mov	r1, r4
 80084b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80084bc:	3b30      	subs	r3, #48	; 0x30
 80084be:	2b09      	cmp	r3, #9
 80084c0:	d94e      	bls.n	8008560 <_vfiprintf_r+0x1c4>
 80084c2:	b1b0      	cbz	r0, 80084f2 <_vfiprintf_r+0x156>
 80084c4:	9207      	str	r2, [sp, #28]
 80084c6:	e014      	b.n	80084f2 <_vfiprintf_r+0x156>
 80084c8:	eba0 0308 	sub.w	r3, r0, r8
 80084cc:	fa09 f303 	lsl.w	r3, r9, r3
 80084d0:	4313      	orrs	r3, r2
 80084d2:	9304      	str	r3, [sp, #16]
 80084d4:	46a2      	mov	sl, r4
 80084d6:	e7d2      	b.n	800847e <_vfiprintf_r+0xe2>
 80084d8:	9b03      	ldr	r3, [sp, #12]
 80084da:	1d19      	adds	r1, r3, #4
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	9103      	str	r1, [sp, #12]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	bfbb      	ittet	lt
 80084e4:	425b      	neglt	r3, r3
 80084e6:	f042 0202 	orrlt.w	r2, r2, #2
 80084ea:	9307      	strge	r3, [sp, #28]
 80084ec:	9307      	strlt	r3, [sp, #28]
 80084ee:	bfb8      	it	lt
 80084f0:	9204      	strlt	r2, [sp, #16]
 80084f2:	7823      	ldrb	r3, [r4, #0]
 80084f4:	2b2e      	cmp	r3, #46	; 0x2e
 80084f6:	d10c      	bne.n	8008512 <_vfiprintf_r+0x176>
 80084f8:	7863      	ldrb	r3, [r4, #1]
 80084fa:	2b2a      	cmp	r3, #42	; 0x2a
 80084fc:	d135      	bne.n	800856a <_vfiprintf_r+0x1ce>
 80084fe:	9b03      	ldr	r3, [sp, #12]
 8008500:	1d1a      	adds	r2, r3, #4
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	9203      	str	r2, [sp, #12]
 8008506:	2b00      	cmp	r3, #0
 8008508:	bfb8      	it	lt
 800850a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800850e:	3402      	adds	r4, #2
 8008510:	9305      	str	r3, [sp, #20]
 8008512:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80085f8 <_vfiprintf_r+0x25c>
 8008516:	7821      	ldrb	r1, [r4, #0]
 8008518:	2203      	movs	r2, #3
 800851a:	4650      	mov	r0, sl
 800851c:	f7f7 fe80 	bl	8000220 <memchr>
 8008520:	b140      	cbz	r0, 8008534 <_vfiprintf_r+0x198>
 8008522:	2340      	movs	r3, #64	; 0x40
 8008524:	eba0 000a 	sub.w	r0, r0, sl
 8008528:	fa03 f000 	lsl.w	r0, r3, r0
 800852c:	9b04      	ldr	r3, [sp, #16]
 800852e:	4303      	orrs	r3, r0
 8008530:	3401      	adds	r4, #1
 8008532:	9304      	str	r3, [sp, #16]
 8008534:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008538:	482c      	ldr	r0, [pc, #176]	; (80085ec <_vfiprintf_r+0x250>)
 800853a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800853e:	2206      	movs	r2, #6
 8008540:	f7f7 fe6e 	bl	8000220 <memchr>
 8008544:	2800      	cmp	r0, #0
 8008546:	d03f      	beq.n	80085c8 <_vfiprintf_r+0x22c>
 8008548:	4b29      	ldr	r3, [pc, #164]	; (80085f0 <_vfiprintf_r+0x254>)
 800854a:	bb1b      	cbnz	r3, 8008594 <_vfiprintf_r+0x1f8>
 800854c:	9b03      	ldr	r3, [sp, #12]
 800854e:	3307      	adds	r3, #7
 8008550:	f023 0307 	bic.w	r3, r3, #7
 8008554:	3308      	adds	r3, #8
 8008556:	9303      	str	r3, [sp, #12]
 8008558:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800855a:	443b      	add	r3, r7
 800855c:	9309      	str	r3, [sp, #36]	; 0x24
 800855e:	e767      	b.n	8008430 <_vfiprintf_r+0x94>
 8008560:	fb0c 3202 	mla	r2, ip, r2, r3
 8008564:	460c      	mov	r4, r1
 8008566:	2001      	movs	r0, #1
 8008568:	e7a5      	b.n	80084b6 <_vfiprintf_r+0x11a>
 800856a:	2300      	movs	r3, #0
 800856c:	3401      	adds	r4, #1
 800856e:	9305      	str	r3, [sp, #20]
 8008570:	4619      	mov	r1, r3
 8008572:	f04f 0c0a 	mov.w	ip, #10
 8008576:	4620      	mov	r0, r4
 8008578:	f810 2b01 	ldrb.w	r2, [r0], #1
 800857c:	3a30      	subs	r2, #48	; 0x30
 800857e:	2a09      	cmp	r2, #9
 8008580:	d903      	bls.n	800858a <_vfiprintf_r+0x1ee>
 8008582:	2b00      	cmp	r3, #0
 8008584:	d0c5      	beq.n	8008512 <_vfiprintf_r+0x176>
 8008586:	9105      	str	r1, [sp, #20]
 8008588:	e7c3      	b.n	8008512 <_vfiprintf_r+0x176>
 800858a:	fb0c 2101 	mla	r1, ip, r1, r2
 800858e:	4604      	mov	r4, r0
 8008590:	2301      	movs	r3, #1
 8008592:	e7f0      	b.n	8008576 <_vfiprintf_r+0x1da>
 8008594:	ab03      	add	r3, sp, #12
 8008596:	9300      	str	r3, [sp, #0]
 8008598:	462a      	mov	r2, r5
 800859a:	4b16      	ldr	r3, [pc, #88]	; (80085f4 <_vfiprintf_r+0x258>)
 800859c:	a904      	add	r1, sp, #16
 800859e:	4630      	mov	r0, r6
 80085a0:	f7fb fd90 	bl	80040c4 <_printf_float>
 80085a4:	4607      	mov	r7, r0
 80085a6:	1c78      	adds	r0, r7, #1
 80085a8:	d1d6      	bne.n	8008558 <_vfiprintf_r+0x1bc>
 80085aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80085ac:	07d9      	lsls	r1, r3, #31
 80085ae:	d405      	bmi.n	80085bc <_vfiprintf_r+0x220>
 80085b0:	89ab      	ldrh	r3, [r5, #12]
 80085b2:	059a      	lsls	r2, r3, #22
 80085b4:	d402      	bmi.n	80085bc <_vfiprintf_r+0x220>
 80085b6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80085b8:	f7fe ff24 	bl	8007404 <__retarget_lock_release_recursive>
 80085bc:	89ab      	ldrh	r3, [r5, #12]
 80085be:	065b      	lsls	r3, r3, #25
 80085c0:	f53f af12 	bmi.w	80083e8 <_vfiprintf_r+0x4c>
 80085c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80085c6:	e711      	b.n	80083ec <_vfiprintf_r+0x50>
 80085c8:	ab03      	add	r3, sp, #12
 80085ca:	9300      	str	r3, [sp, #0]
 80085cc:	462a      	mov	r2, r5
 80085ce:	4b09      	ldr	r3, [pc, #36]	; (80085f4 <_vfiprintf_r+0x258>)
 80085d0:	a904      	add	r1, sp, #16
 80085d2:	4630      	mov	r0, r6
 80085d4:	f7fc f81a 	bl	800460c <_printf_i>
 80085d8:	e7e4      	b.n	80085a4 <_vfiprintf_r+0x208>
 80085da:	bf00      	nop
 80085dc:	08008ebc 	.word	0x08008ebc
 80085e0:	08008edc 	.word	0x08008edc
 80085e4:	08008e9c 	.word	0x08008e9c
 80085e8:	080090d4 	.word	0x080090d4
 80085ec:	080090de 	.word	0x080090de
 80085f0:	080040c5 	.word	0x080040c5
 80085f4:	08008377 	.word	0x08008377
 80085f8:	080090da 	.word	0x080090da
 80085fc:	00000000 	.word	0x00000000

08008600 <nan>:
 8008600:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008608 <nan+0x8>
 8008604:	4770      	bx	lr
 8008606:	bf00      	nop
 8008608:	00000000 	.word	0x00000000
 800860c:	7ff80000 	.word	0x7ff80000

08008610 <_sbrk_r>:
 8008610:	b538      	push	{r3, r4, r5, lr}
 8008612:	4d06      	ldr	r5, [pc, #24]	; (800862c <_sbrk_r+0x1c>)
 8008614:	2300      	movs	r3, #0
 8008616:	4604      	mov	r4, r0
 8008618:	4608      	mov	r0, r1
 800861a:	602b      	str	r3, [r5, #0]
 800861c:	f7f9 f9ac 	bl	8001978 <_sbrk>
 8008620:	1c43      	adds	r3, r0, #1
 8008622:	d102      	bne.n	800862a <_sbrk_r+0x1a>
 8008624:	682b      	ldr	r3, [r5, #0]
 8008626:	b103      	cbz	r3, 800862a <_sbrk_r+0x1a>
 8008628:	6023      	str	r3, [r4, #0]
 800862a:	bd38      	pop	{r3, r4, r5, pc}
 800862c:	20000298 	.word	0x20000298

08008630 <__sread>:
 8008630:	b510      	push	{r4, lr}
 8008632:	460c      	mov	r4, r1
 8008634:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008638:	f000 f93a 	bl	80088b0 <_read_r>
 800863c:	2800      	cmp	r0, #0
 800863e:	bfab      	itete	ge
 8008640:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008642:	89a3      	ldrhlt	r3, [r4, #12]
 8008644:	181b      	addge	r3, r3, r0
 8008646:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800864a:	bfac      	ite	ge
 800864c:	6563      	strge	r3, [r4, #84]	; 0x54
 800864e:	81a3      	strhlt	r3, [r4, #12]
 8008650:	bd10      	pop	{r4, pc}

08008652 <__swrite>:
 8008652:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008656:	461f      	mov	r7, r3
 8008658:	898b      	ldrh	r3, [r1, #12]
 800865a:	05db      	lsls	r3, r3, #23
 800865c:	4605      	mov	r5, r0
 800865e:	460c      	mov	r4, r1
 8008660:	4616      	mov	r6, r2
 8008662:	d505      	bpl.n	8008670 <__swrite+0x1e>
 8008664:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008668:	2302      	movs	r3, #2
 800866a:	2200      	movs	r2, #0
 800866c:	f000 f8b8 	bl	80087e0 <_lseek_r>
 8008670:	89a3      	ldrh	r3, [r4, #12]
 8008672:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008676:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800867a:	81a3      	strh	r3, [r4, #12]
 800867c:	4632      	mov	r2, r6
 800867e:	463b      	mov	r3, r7
 8008680:	4628      	mov	r0, r5
 8008682:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008686:	f000 b837 	b.w	80086f8 <_write_r>

0800868a <__sseek>:
 800868a:	b510      	push	{r4, lr}
 800868c:	460c      	mov	r4, r1
 800868e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008692:	f000 f8a5 	bl	80087e0 <_lseek_r>
 8008696:	1c43      	adds	r3, r0, #1
 8008698:	89a3      	ldrh	r3, [r4, #12]
 800869a:	bf15      	itete	ne
 800869c:	6560      	strne	r0, [r4, #84]	; 0x54
 800869e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80086a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80086a6:	81a3      	strheq	r3, [r4, #12]
 80086a8:	bf18      	it	ne
 80086aa:	81a3      	strhne	r3, [r4, #12]
 80086ac:	bd10      	pop	{r4, pc}

080086ae <__sclose>:
 80086ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086b2:	f000 b851 	b.w	8008758 <_close_r>

080086b6 <strncmp>:
 80086b6:	b510      	push	{r4, lr}
 80086b8:	b17a      	cbz	r2, 80086da <strncmp+0x24>
 80086ba:	4603      	mov	r3, r0
 80086bc:	3901      	subs	r1, #1
 80086be:	1884      	adds	r4, r0, r2
 80086c0:	f813 0b01 	ldrb.w	r0, [r3], #1
 80086c4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80086c8:	4290      	cmp	r0, r2
 80086ca:	d101      	bne.n	80086d0 <strncmp+0x1a>
 80086cc:	42a3      	cmp	r3, r4
 80086ce:	d101      	bne.n	80086d4 <strncmp+0x1e>
 80086d0:	1a80      	subs	r0, r0, r2
 80086d2:	bd10      	pop	{r4, pc}
 80086d4:	2800      	cmp	r0, #0
 80086d6:	d1f3      	bne.n	80086c0 <strncmp+0xa>
 80086d8:	e7fa      	b.n	80086d0 <strncmp+0x1a>
 80086da:	4610      	mov	r0, r2
 80086dc:	e7f9      	b.n	80086d2 <strncmp+0x1c>

080086de <__ascii_wctomb>:
 80086de:	b149      	cbz	r1, 80086f4 <__ascii_wctomb+0x16>
 80086e0:	2aff      	cmp	r2, #255	; 0xff
 80086e2:	bf85      	ittet	hi
 80086e4:	238a      	movhi	r3, #138	; 0x8a
 80086e6:	6003      	strhi	r3, [r0, #0]
 80086e8:	700a      	strbls	r2, [r1, #0]
 80086ea:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80086ee:	bf98      	it	ls
 80086f0:	2001      	movls	r0, #1
 80086f2:	4770      	bx	lr
 80086f4:	4608      	mov	r0, r1
 80086f6:	4770      	bx	lr

080086f8 <_write_r>:
 80086f8:	b538      	push	{r3, r4, r5, lr}
 80086fa:	4d07      	ldr	r5, [pc, #28]	; (8008718 <_write_r+0x20>)
 80086fc:	4604      	mov	r4, r0
 80086fe:	4608      	mov	r0, r1
 8008700:	4611      	mov	r1, r2
 8008702:	2200      	movs	r2, #0
 8008704:	602a      	str	r2, [r5, #0]
 8008706:	461a      	mov	r2, r3
 8008708:	f7f8 fe5a 	bl	80013c0 <_write>
 800870c:	1c43      	adds	r3, r0, #1
 800870e:	d102      	bne.n	8008716 <_write_r+0x1e>
 8008710:	682b      	ldr	r3, [r5, #0]
 8008712:	b103      	cbz	r3, 8008716 <_write_r+0x1e>
 8008714:	6023      	str	r3, [r4, #0]
 8008716:	bd38      	pop	{r3, r4, r5, pc}
 8008718:	20000298 	.word	0x20000298

0800871c <__assert_func>:
 800871c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800871e:	4614      	mov	r4, r2
 8008720:	461a      	mov	r2, r3
 8008722:	4b09      	ldr	r3, [pc, #36]	; (8008748 <__assert_func+0x2c>)
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	4605      	mov	r5, r0
 8008728:	68d8      	ldr	r0, [r3, #12]
 800872a:	b14c      	cbz	r4, 8008740 <__assert_func+0x24>
 800872c:	4b07      	ldr	r3, [pc, #28]	; (800874c <__assert_func+0x30>)
 800872e:	9100      	str	r1, [sp, #0]
 8008730:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008734:	4906      	ldr	r1, [pc, #24]	; (8008750 <__assert_func+0x34>)
 8008736:	462b      	mov	r3, r5
 8008738:	f000 f81e 	bl	8008778 <fiprintf>
 800873c:	f000 f8ca 	bl	80088d4 <abort>
 8008740:	4b04      	ldr	r3, [pc, #16]	; (8008754 <__assert_func+0x38>)
 8008742:	461c      	mov	r4, r3
 8008744:	e7f3      	b.n	800872e <__assert_func+0x12>
 8008746:	bf00      	nop
 8008748:	2000000c 	.word	0x2000000c
 800874c:	080090e5 	.word	0x080090e5
 8008750:	080090f2 	.word	0x080090f2
 8008754:	08009120 	.word	0x08009120

08008758 <_close_r>:
 8008758:	b538      	push	{r3, r4, r5, lr}
 800875a:	4d06      	ldr	r5, [pc, #24]	; (8008774 <_close_r+0x1c>)
 800875c:	2300      	movs	r3, #0
 800875e:	4604      	mov	r4, r0
 8008760:	4608      	mov	r0, r1
 8008762:	602b      	str	r3, [r5, #0]
 8008764:	f7f9 f8d3 	bl	800190e <_close>
 8008768:	1c43      	adds	r3, r0, #1
 800876a:	d102      	bne.n	8008772 <_close_r+0x1a>
 800876c:	682b      	ldr	r3, [r5, #0]
 800876e:	b103      	cbz	r3, 8008772 <_close_r+0x1a>
 8008770:	6023      	str	r3, [r4, #0]
 8008772:	bd38      	pop	{r3, r4, r5, pc}
 8008774:	20000298 	.word	0x20000298

08008778 <fiprintf>:
 8008778:	b40e      	push	{r1, r2, r3}
 800877a:	b503      	push	{r0, r1, lr}
 800877c:	4601      	mov	r1, r0
 800877e:	ab03      	add	r3, sp, #12
 8008780:	4805      	ldr	r0, [pc, #20]	; (8008798 <fiprintf+0x20>)
 8008782:	f853 2b04 	ldr.w	r2, [r3], #4
 8008786:	6800      	ldr	r0, [r0, #0]
 8008788:	9301      	str	r3, [sp, #4]
 800878a:	f7ff fe07 	bl	800839c <_vfiprintf_r>
 800878e:	b002      	add	sp, #8
 8008790:	f85d eb04 	ldr.w	lr, [sp], #4
 8008794:	b003      	add	sp, #12
 8008796:	4770      	bx	lr
 8008798:	2000000c 	.word	0x2000000c

0800879c <_fstat_r>:
 800879c:	b538      	push	{r3, r4, r5, lr}
 800879e:	4d07      	ldr	r5, [pc, #28]	; (80087bc <_fstat_r+0x20>)
 80087a0:	2300      	movs	r3, #0
 80087a2:	4604      	mov	r4, r0
 80087a4:	4608      	mov	r0, r1
 80087a6:	4611      	mov	r1, r2
 80087a8:	602b      	str	r3, [r5, #0]
 80087aa:	f7f9 f8bc 	bl	8001926 <_fstat>
 80087ae:	1c43      	adds	r3, r0, #1
 80087b0:	d102      	bne.n	80087b8 <_fstat_r+0x1c>
 80087b2:	682b      	ldr	r3, [r5, #0]
 80087b4:	b103      	cbz	r3, 80087b8 <_fstat_r+0x1c>
 80087b6:	6023      	str	r3, [r4, #0]
 80087b8:	bd38      	pop	{r3, r4, r5, pc}
 80087ba:	bf00      	nop
 80087bc:	20000298 	.word	0x20000298

080087c0 <_isatty_r>:
 80087c0:	b538      	push	{r3, r4, r5, lr}
 80087c2:	4d06      	ldr	r5, [pc, #24]	; (80087dc <_isatty_r+0x1c>)
 80087c4:	2300      	movs	r3, #0
 80087c6:	4604      	mov	r4, r0
 80087c8:	4608      	mov	r0, r1
 80087ca:	602b      	str	r3, [r5, #0]
 80087cc:	f7f9 f8bb 	bl	8001946 <_isatty>
 80087d0:	1c43      	adds	r3, r0, #1
 80087d2:	d102      	bne.n	80087da <_isatty_r+0x1a>
 80087d4:	682b      	ldr	r3, [r5, #0]
 80087d6:	b103      	cbz	r3, 80087da <_isatty_r+0x1a>
 80087d8:	6023      	str	r3, [r4, #0]
 80087da:	bd38      	pop	{r3, r4, r5, pc}
 80087dc:	20000298 	.word	0x20000298

080087e0 <_lseek_r>:
 80087e0:	b538      	push	{r3, r4, r5, lr}
 80087e2:	4d07      	ldr	r5, [pc, #28]	; (8008800 <_lseek_r+0x20>)
 80087e4:	4604      	mov	r4, r0
 80087e6:	4608      	mov	r0, r1
 80087e8:	4611      	mov	r1, r2
 80087ea:	2200      	movs	r2, #0
 80087ec:	602a      	str	r2, [r5, #0]
 80087ee:	461a      	mov	r2, r3
 80087f0:	f7f9 f8b4 	bl	800195c <_lseek>
 80087f4:	1c43      	adds	r3, r0, #1
 80087f6:	d102      	bne.n	80087fe <_lseek_r+0x1e>
 80087f8:	682b      	ldr	r3, [r5, #0]
 80087fa:	b103      	cbz	r3, 80087fe <_lseek_r+0x1e>
 80087fc:	6023      	str	r3, [r4, #0]
 80087fe:	bd38      	pop	{r3, r4, r5, pc}
 8008800:	20000298 	.word	0x20000298

08008804 <memmove>:
 8008804:	4288      	cmp	r0, r1
 8008806:	b510      	push	{r4, lr}
 8008808:	eb01 0402 	add.w	r4, r1, r2
 800880c:	d902      	bls.n	8008814 <memmove+0x10>
 800880e:	4284      	cmp	r4, r0
 8008810:	4623      	mov	r3, r4
 8008812:	d807      	bhi.n	8008824 <memmove+0x20>
 8008814:	1e43      	subs	r3, r0, #1
 8008816:	42a1      	cmp	r1, r4
 8008818:	d008      	beq.n	800882c <memmove+0x28>
 800881a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800881e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008822:	e7f8      	b.n	8008816 <memmove+0x12>
 8008824:	4402      	add	r2, r0
 8008826:	4601      	mov	r1, r0
 8008828:	428a      	cmp	r2, r1
 800882a:	d100      	bne.n	800882e <memmove+0x2a>
 800882c:	bd10      	pop	{r4, pc}
 800882e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008832:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008836:	e7f7      	b.n	8008828 <memmove+0x24>

08008838 <__malloc_lock>:
 8008838:	4801      	ldr	r0, [pc, #4]	; (8008840 <__malloc_lock+0x8>)
 800883a:	f7fe bde2 	b.w	8007402 <__retarget_lock_acquire_recursive>
 800883e:	bf00      	nop
 8008840:	2000028c 	.word	0x2000028c

08008844 <__malloc_unlock>:
 8008844:	4801      	ldr	r0, [pc, #4]	; (800884c <__malloc_unlock+0x8>)
 8008846:	f7fe bddd 	b.w	8007404 <__retarget_lock_release_recursive>
 800884a:	bf00      	nop
 800884c:	2000028c 	.word	0x2000028c

08008850 <_realloc_r>:
 8008850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008854:	4680      	mov	r8, r0
 8008856:	4614      	mov	r4, r2
 8008858:	460e      	mov	r6, r1
 800885a:	b921      	cbnz	r1, 8008866 <_realloc_r+0x16>
 800885c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008860:	4611      	mov	r1, r2
 8008862:	f7ff bba1 	b.w	8007fa8 <_malloc_r>
 8008866:	b92a      	cbnz	r2, 8008874 <_realloc_r+0x24>
 8008868:	f7ff fb32 	bl	8007ed0 <_free_r>
 800886c:	4625      	mov	r5, r4
 800886e:	4628      	mov	r0, r5
 8008870:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008874:	f000 f835 	bl	80088e2 <_malloc_usable_size_r>
 8008878:	4284      	cmp	r4, r0
 800887a:	4607      	mov	r7, r0
 800887c:	d802      	bhi.n	8008884 <_realloc_r+0x34>
 800887e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008882:	d812      	bhi.n	80088aa <_realloc_r+0x5a>
 8008884:	4621      	mov	r1, r4
 8008886:	4640      	mov	r0, r8
 8008888:	f7ff fb8e 	bl	8007fa8 <_malloc_r>
 800888c:	4605      	mov	r5, r0
 800888e:	2800      	cmp	r0, #0
 8008890:	d0ed      	beq.n	800886e <_realloc_r+0x1e>
 8008892:	42bc      	cmp	r4, r7
 8008894:	4622      	mov	r2, r4
 8008896:	4631      	mov	r1, r6
 8008898:	bf28      	it	cs
 800889a:	463a      	movcs	r2, r7
 800889c:	f7fe fe32 	bl	8007504 <memcpy>
 80088a0:	4631      	mov	r1, r6
 80088a2:	4640      	mov	r0, r8
 80088a4:	f7ff fb14 	bl	8007ed0 <_free_r>
 80088a8:	e7e1      	b.n	800886e <_realloc_r+0x1e>
 80088aa:	4635      	mov	r5, r6
 80088ac:	e7df      	b.n	800886e <_realloc_r+0x1e>
	...

080088b0 <_read_r>:
 80088b0:	b538      	push	{r3, r4, r5, lr}
 80088b2:	4d07      	ldr	r5, [pc, #28]	; (80088d0 <_read_r+0x20>)
 80088b4:	4604      	mov	r4, r0
 80088b6:	4608      	mov	r0, r1
 80088b8:	4611      	mov	r1, r2
 80088ba:	2200      	movs	r2, #0
 80088bc:	602a      	str	r2, [r5, #0]
 80088be:	461a      	mov	r2, r3
 80088c0:	f7f9 f808 	bl	80018d4 <_read>
 80088c4:	1c43      	adds	r3, r0, #1
 80088c6:	d102      	bne.n	80088ce <_read_r+0x1e>
 80088c8:	682b      	ldr	r3, [r5, #0]
 80088ca:	b103      	cbz	r3, 80088ce <_read_r+0x1e>
 80088cc:	6023      	str	r3, [r4, #0]
 80088ce:	bd38      	pop	{r3, r4, r5, pc}
 80088d0:	20000298 	.word	0x20000298

080088d4 <abort>:
 80088d4:	b508      	push	{r3, lr}
 80088d6:	2006      	movs	r0, #6
 80088d8:	f000 f834 	bl	8008944 <raise>
 80088dc:	2001      	movs	r0, #1
 80088de:	f7f8 ffef 	bl	80018c0 <_exit>

080088e2 <_malloc_usable_size_r>:
 80088e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80088e6:	1f18      	subs	r0, r3, #4
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	bfbc      	itt	lt
 80088ec:	580b      	ldrlt	r3, [r1, r0]
 80088ee:	18c0      	addlt	r0, r0, r3
 80088f0:	4770      	bx	lr

080088f2 <_raise_r>:
 80088f2:	291f      	cmp	r1, #31
 80088f4:	b538      	push	{r3, r4, r5, lr}
 80088f6:	4604      	mov	r4, r0
 80088f8:	460d      	mov	r5, r1
 80088fa:	d904      	bls.n	8008906 <_raise_r+0x14>
 80088fc:	2316      	movs	r3, #22
 80088fe:	6003      	str	r3, [r0, #0]
 8008900:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008904:	bd38      	pop	{r3, r4, r5, pc}
 8008906:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008908:	b112      	cbz	r2, 8008910 <_raise_r+0x1e>
 800890a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800890e:	b94b      	cbnz	r3, 8008924 <_raise_r+0x32>
 8008910:	4620      	mov	r0, r4
 8008912:	f000 f831 	bl	8008978 <_getpid_r>
 8008916:	462a      	mov	r2, r5
 8008918:	4601      	mov	r1, r0
 800891a:	4620      	mov	r0, r4
 800891c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008920:	f000 b818 	b.w	8008954 <_kill_r>
 8008924:	2b01      	cmp	r3, #1
 8008926:	d00a      	beq.n	800893e <_raise_r+0x4c>
 8008928:	1c59      	adds	r1, r3, #1
 800892a:	d103      	bne.n	8008934 <_raise_r+0x42>
 800892c:	2316      	movs	r3, #22
 800892e:	6003      	str	r3, [r0, #0]
 8008930:	2001      	movs	r0, #1
 8008932:	e7e7      	b.n	8008904 <_raise_r+0x12>
 8008934:	2400      	movs	r4, #0
 8008936:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800893a:	4628      	mov	r0, r5
 800893c:	4798      	blx	r3
 800893e:	2000      	movs	r0, #0
 8008940:	e7e0      	b.n	8008904 <_raise_r+0x12>
	...

08008944 <raise>:
 8008944:	4b02      	ldr	r3, [pc, #8]	; (8008950 <raise+0xc>)
 8008946:	4601      	mov	r1, r0
 8008948:	6818      	ldr	r0, [r3, #0]
 800894a:	f7ff bfd2 	b.w	80088f2 <_raise_r>
 800894e:	bf00      	nop
 8008950:	2000000c 	.word	0x2000000c

08008954 <_kill_r>:
 8008954:	b538      	push	{r3, r4, r5, lr}
 8008956:	4d07      	ldr	r5, [pc, #28]	; (8008974 <_kill_r+0x20>)
 8008958:	2300      	movs	r3, #0
 800895a:	4604      	mov	r4, r0
 800895c:	4608      	mov	r0, r1
 800895e:	4611      	mov	r1, r2
 8008960:	602b      	str	r3, [r5, #0]
 8008962:	f7f8 ff9d 	bl	80018a0 <_kill>
 8008966:	1c43      	adds	r3, r0, #1
 8008968:	d102      	bne.n	8008970 <_kill_r+0x1c>
 800896a:	682b      	ldr	r3, [r5, #0]
 800896c:	b103      	cbz	r3, 8008970 <_kill_r+0x1c>
 800896e:	6023      	str	r3, [r4, #0]
 8008970:	bd38      	pop	{r3, r4, r5, pc}
 8008972:	bf00      	nop
 8008974:	20000298 	.word	0x20000298

08008978 <_getpid_r>:
 8008978:	f7f8 bf8a 	b.w	8001890 <_getpid>

0800897c <_init>:
 800897c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800897e:	bf00      	nop
 8008980:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008982:	bc08      	pop	{r3}
 8008984:	469e      	mov	lr, r3
 8008986:	4770      	bx	lr

08008988 <_fini>:
 8008988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800898a:	bf00      	nop
 800898c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800898e:	bc08      	pop	{r3}
 8008990:	469e      	mov	lr, r3
 8008992:	4770      	bx	lr
